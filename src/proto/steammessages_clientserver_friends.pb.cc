// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientserver_friends.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_clientserver_friends.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgClientFriendMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientFriendMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientFriendMsgIncoming_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientFriendMsgIncoming_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientAddFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientAddFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientAddFriendResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientAddFriendResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientRemoveFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientRemoveFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientHideFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientHideFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientFriendsList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientFriendsList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientFriendsList_Friend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientFriendsList_Friend_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientFriendsGroupsList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientFriendsGroupsList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientFriendsGroupsList_FriendGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientFriendsGroupsList_FriendGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientFriendsGroupsList_FriendGroupsMembership_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientFriendsGroupsList_FriendGroupsMembership_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientPlayerNicknameList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientPlayerNicknameList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientPlayerNicknameList_PlayerNickname_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientPlayerNicknameList_PlayerNickname_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientSetPlayerNickname_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientSetPlayerNickname_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientSetPlayerNicknameResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientSetPlayerNicknameResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientRequestFriendData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientRequestFriendData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientChangeStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientChangeStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPersonaChangeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPersonaChangeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientPersonaState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientPersonaState_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientPersonaState_Friend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientPersonaState_Friend_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientPersonaState_Friend_ClanData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientPersonaState_Friend_ClanData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientPersonaState_Friend_KV_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientPersonaState_Friend_KV_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientFriendProfileInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientFriendProfileInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientFriendProfileInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientFriendProfileInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientCreateFriendsGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientCreateFriendsGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientCreateFriendsGroupResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientCreateFriendsGroupResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientDeleteFriendsGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientDeleteFriendsGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientDeleteFriendsGroupResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientDeleteFriendsGroupResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientManageFriendsGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientManageFriendsGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientManageFriendsGroupResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientManageFriendsGroupResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientAddFriendToGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientAddFriendToGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientAddFriendToGroupResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientAddFriendToGroupResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientRemoveFriendFromGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientRemoveFriendFromGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientRemoveFriendFromGroupResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientRemoveFriendFromGroupResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientGetEmoticonList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientGetEmoticonList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientEmoticonList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientEmoticonList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientEmoticonList_Emoticon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientEmoticonList_Emoticon_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientEmoticonList_Sticker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientEmoticonList_Sticker_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientEmoticonList_Effect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientEmoticonList_Effect_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto() {
  protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "steammessages_clientserver_friends.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgClientFriendMsg_descriptor_ = file->message_type(0);
  static const int CMsgClientFriendMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendMsg, steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendMsg, chat_entry_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendMsg, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendMsg, rtime32_server_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendMsg, echo_to_sender_),
  };
  CMsgClientFriendMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientFriendMsg_descriptor_,
      CMsgClientFriendMsg::default_instance_,
      CMsgClientFriendMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientFriendMsg));
  CMsgClientFriendMsgIncoming_descriptor_ = file->message_type(1);
  static const int CMsgClientFriendMsgIncoming_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendMsgIncoming, steamid_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendMsgIncoming, chat_entry_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendMsgIncoming, from_limited_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendMsgIncoming, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendMsgIncoming, rtime32_server_timestamp_),
  };
  CMsgClientFriendMsgIncoming_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientFriendMsgIncoming_descriptor_,
      CMsgClientFriendMsgIncoming::default_instance_,
      CMsgClientFriendMsgIncoming_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendMsgIncoming, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendMsgIncoming, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientFriendMsgIncoming));
  CMsgClientAddFriend_descriptor_ = file->message_type(2);
  static const int CMsgClientAddFriend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAddFriend, steamid_to_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAddFriend, accountname_or_email_to_add_),
  };
  CMsgClientAddFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientAddFriend_descriptor_,
      CMsgClientAddFriend::default_instance_,
      CMsgClientAddFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAddFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAddFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientAddFriend));
  CMsgClientAddFriendResponse_descriptor_ = file->message_type(3);
  static const int CMsgClientAddFriendResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAddFriendResponse, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAddFriendResponse, steam_id_added_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAddFriendResponse, persona_name_added_),
  };
  CMsgClientAddFriendResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientAddFriendResponse_descriptor_,
      CMsgClientAddFriendResponse::default_instance_,
      CMsgClientAddFriendResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAddFriendResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAddFriendResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientAddFriendResponse));
  CMsgClientRemoveFriend_descriptor_ = file->message_type(4);
  static const int CMsgClientRemoveFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRemoveFriend, friendid_),
  };
  CMsgClientRemoveFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientRemoveFriend_descriptor_,
      CMsgClientRemoveFriend::default_instance_,
      CMsgClientRemoveFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRemoveFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRemoveFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientRemoveFriend));
  CMsgClientHideFriend_descriptor_ = file->message_type(5);
  static const int CMsgClientHideFriend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHideFriend, friendid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHideFriend, hide_),
  };
  CMsgClientHideFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientHideFriend_descriptor_,
      CMsgClientHideFriend::default_instance_,
      CMsgClientHideFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHideFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHideFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientHideFriend));
  CMsgClientFriendsList_descriptor_ = file->message_type(6);
  static const int CMsgClientFriendsList_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsList, bincremental_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsList, friends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsList, max_friend_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsList, active_friend_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsList, friends_limit_hit_),
  };
  CMsgClientFriendsList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientFriendsList_descriptor_,
      CMsgClientFriendsList::default_instance_,
      CMsgClientFriendsList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientFriendsList));
  CMsgClientFriendsList_Friend_descriptor_ = CMsgClientFriendsList_descriptor_->nested_type(0);
  static const int CMsgClientFriendsList_Friend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsList_Friend, ulfriendid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsList_Friend, efriendrelationship_),
  };
  CMsgClientFriendsList_Friend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientFriendsList_Friend_descriptor_,
      CMsgClientFriendsList_Friend::default_instance_,
      CMsgClientFriendsList_Friend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsList_Friend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsList_Friend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientFriendsList_Friend));
  CMsgClientFriendsGroupsList_descriptor_ = file->message_type(7);
  static const int CMsgClientFriendsGroupsList_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsGroupsList, bremoval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsGroupsList, bincremental_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsGroupsList, friendgroups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsGroupsList, memberships_),
  };
  CMsgClientFriendsGroupsList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientFriendsGroupsList_descriptor_,
      CMsgClientFriendsGroupsList::default_instance_,
      CMsgClientFriendsGroupsList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsGroupsList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsGroupsList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientFriendsGroupsList));
  CMsgClientFriendsGroupsList_FriendGroup_descriptor_ = CMsgClientFriendsGroupsList_descriptor_->nested_type(0);
  static const int CMsgClientFriendsGroupsList_FriendGroup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsGroupsList_FriendGroup, ngroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsGroupsList_FriendGroup, strgroupname_),
  };
  CMsgClientFriendsGroupsList_FriendGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientFriendsGroupsList_FriendGroup_descriptor_,
      CMsgClientFriendsGroupsList_FriendGroup::default_instance_,
      CMsgClientFriendsGroupsList_FriendGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsGroupsList_FriendGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsGroupsList_FriendGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientFriendsGroupsList_FriendGroup));
  CMsgClientFriendsGroupsList_FriendGroupsMembership_descriptor_ = CMsgClientFriendsGroupsList_descriptor_->nested_type(1);
  static const int CMsgClientFriendsGroupsList_FriendGroupsMembership_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsGroupsList_FriendGroupsMembership, ulsteamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsGroupsList_FriendGroupsMembership, ngroupid_),
  };
  CMsgClientFriendsGroupsList_FriendGroupsMembership_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientFriendsGroupsList_FriendGroupsMembership_descriptor_,
      CMsgClientFriendsGroupsList_FriendGroupsMembership::default_instance_,
      CMsgClientFriendsGroupsList_FriendGroupsMembership_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsGroupsList_FriendGroupsMembership, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendsGroupsList_FriendGroupsMembership, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientFriendsGroupsList_FriendGroupsMembership));
  CMsgClientPlayerNicknameList_descriptor_ = file->message_type(8);
  static const int CMsgClientPlayerNicknameList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPlayerNicknameList, removal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPlayerNicknameList, incremental_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPlayerNicknameList, nicknames_),
  };
  CMsgClientPlayerNicknameList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientPlayerNicknameList_descriptor_,
      CMsgClientPlayerNicknameList::default_instance_,
      CMsgClientPlayerNicknameList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPlayerNicknameList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPlayerNicknameList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientPlayerNicknameList));
  CMsgClientPlayerNicknameList_PlayerNickname_descriptor_ = CMsgClientPlayerNicknameList_descriptor_->nested_type(0);
  static const int CMsgClientPlayerNicknameList_PlayerNickname_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPlayerNicknameList_PlayerNickname, steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPlayerNicknameList_PlayerNickname, nickname_),
  };
  CMsgClientPlayerNicknameList_PlayerNickname_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientPlayerNicknameList_PlayerNickname_descriptor_,
      CMsgClientPlayerNicknameList_PlayerNickname::default_instance_,
      CMsgClientPlayerNicknameList_PlayerNickname_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPlayerNicknameList_PlayerNickname, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPlayerNicknameList_PlayerNickname, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientPlayerNicknameList_PlayerNickname));
  CMsgClientSetPlayerNickname_descriptor_ = file->message_type(9);
  static const int CMsgClientSetPlayerNickname_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSetPlayerNickname, steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSetPlayerNickname, nickname_),
  };
  CMsgClientSetPlayerNickname_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientSetPlayerNickname_descriptor_,
      CMsgClientSetPlayerNickname::default_instance_,
      CMsgClientSetPlayerNickname_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSetPlayerNickname, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSetPlayerNickname, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientSetPlayerNickname));
  CMsgClientSetPlayerNicknameResponse_descriptor_ = file->message_type(10);
  static const int CMsgClientSetPlayerNicknameResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSetPlayerNicknameResponse, eresult_),
  };
  CMsgClientSetPlayerNicknameResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientSetPlayerNicknameResponse_descriptor_,
      CMsgClientSetPlayerNicknameResponse::default_instance_,
      CMsgClientSetPlayerNicknameResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSetPlayerNicknameResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSetPlayerNicknameResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientSetPlayerNicknameResponse));
  CMsgClientRequestFriendData_descriptor_ = file->message_type(11);
  static const int CMsgClientRequestFriendData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestFriendData, persona_state_requested_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestFriendData, friends_),
  };
  CMsgClientRequestFriendData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientRequestFriendData_descriptor_,
      CMsgClientRequestFriendData::default_instance_,
      CMsgClientRequestFriendData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestFriendData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestFriendData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientRequestFriendData));
  CMsgClientChangeStatus_descriptor_ = file->message_type(12);
  static const int CMsgClientChangeStatus_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChangeStatus, persona_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChangeStatus, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChangeStatus, is_auto_generated_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChangeStatus, high_priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChangeStatus, persona_set_by_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChangeStatus, persona_state_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChangeStatus, need_persona_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChangeStatus, is_client_idle_),
  };
  CMsgClientChangeStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientChangeStatus_descriptor_,
      CMsgClientChangeStatus::default_instance_,
      CMsgClientChangeStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChangeStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChangeStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientChangeStatus));
  CMsgPersonaChangeResponse_descriptor_ = file->message_type(13);
  static const int CMsgPersonaChangeResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPersonaChangeResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPersonaChangeResponse, player_name_),
  };
  CMsgPersonaChangeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPersonaChangeResponse_descriptor_,
      CMsgPersonaChangeResponse::default_instance_,
      CMsgPersonaChangeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPersonaChangeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPersonaChangeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPersonaChangeResponse));
  CMsgClientPersonaState_descriptor_ = file->message_type(14);
  static const int CMsgClientPersonaState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState, status_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState, friends_),
  };
  CMsgClientPersonaState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientPersonaState_descriptor_,
      CMsgClientPersonaState::default_instance_,
      CMsgClientPersonaState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientPersonaState));
  CMsgClientPersonaState_Friend_descriptor_ = CMsgClientPersonaState_descriptor_->nested_type(0);
  static const int CMsgClientPersonaState_Friend_offsets_[31] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, friendid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, persona_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, game_played_app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, game_server_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, game_server_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, persona_state_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, online_session_instances_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, persona_set_by_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, query_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, steamid_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, avatar_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, last_logoff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, last_logon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, last_seen_online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, clan_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, game_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, game_data_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, clan_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, clan_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, rich_presence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, broadcast_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, game_lobby_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, watching_broadcast_accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, watching_broadcast_appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, watching_broadcast_viewers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, watching_broadcast_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, is_community_banned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, player_name_pending_review_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, avatar_pending_review_),
  };
  CMsgClientPersonaState_Friend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientPersonaState_Friend_descriptor_,
      CMsgClientPersonaState_Friend::default_instance_,
      CMsgClientPersonaState_Friend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientPersonaState_Friend));
  CMsgClientPersonaState_Friend_ClanData_descriptor_ = CMsgClientPersonaState_Friend_descriptor_->nested_type(0);
  static const int CMsgClientPersonaState_Friend_ClanData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend_ClanData, ogg_app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend_ClanData, chat_group_id_),
  };
  CMsgClientPersonaState_Friend_ClanData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientPersonaState_Friend_ClanData_descriptor_,
      CMsgClientPersonaState_Friend_ClanData::default_instance_,
      CMsgClientPersonaState_Friend_ClanData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend_ClanData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend_ClanData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientPersonaState_Friend_ClanData));
  CMsgClientPersonaState_Friend_KV_descriptor_ = CMsgClientPersonaState_Friend_descriptor_->nested_type(1);
  static const int CMsgClientPersonaState_Friend_KV_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend_KV, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend_KV, value_),
  };
  CMsgClientPersonaState_Friend_KV_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientPersonaState_Friend_KV_descriptor_,
      CMsgClientPersonaState_Friend_KV::default_instance_,
      CMsgClientPersonaState_Friend_KV_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend_KV, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPersonaState_Friend_KV, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientPersonaState_Friend_KV));
  CMsgClientFriendProfileInfo_descriptor_ = file->message_type(15);
  static const int CMsgClientFriendProfileInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendProfileInfo, steamid_friend_),
  };
  CMsgClientFriendProfileInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientFriendProfileInfo_descriptor_,
      CMsgClientFriendProfileInfo::default_instance_,
      CMsgClientFriendProfileInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendProfileInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendProfileInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientFriendProfileInfo));
  CMsgClientFriendProfileInfoResponse_descriptor_ = file->message_type(16);
  static const int CMsgClientFriendProfileInfoResponse_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendProfileInfoResponse, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendProfileInfoResponse, steamid_friend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendProfileInfoResponse, time_created_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendProfileInfoResponse, real_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendProfileInfoResponse, city_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendProfileInfoResponse, state_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendProfileInfoResponse, country_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendProfileInfoResponse, headline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendProfileInfoResponse, summary_),
  };
  CMsgClientFriendProfileInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientFriendProfileInfoResponse_descriptor_,
      CMsgClientFriendProfileInfoResponse::default_instance_,
      CMsgClientFriendProfileInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendProfileInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendProfileInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientFriendProfileInfoResponse));
  CMsgClientCreateFriendsGroup_descriptor_ = file->message_type(17);
  static const int CMsgClientCreateFriendsGroup_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCreateFriendsGroup, steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCreateFriendsGroup, groupname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCreateFriendsGroup, steamid_friends_),
  };
  CMsgClientCreateFriendsGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientCreateFriendsGroup_descriptor_,
      CMsgClientCreateFriendsGroup::default_instance_,
      CMsgClientCreateFriendsGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCreateFriendsGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCreateFriendsGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientCreateFriendsGroup));
  CMsgClientCreateFriendsGroupResponse_descriptor_ = file->message_type(18);
  static const int CMsgClientCreateFriendsGroupResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCreateFriendsGroupResponse, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCreateFriendsGroupResponse, groupid_),
  };
  CMsgClientCreateFriendsGroupResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientCreateFriendsGroupResponse_descriptor_,
      CMsgClientCreateFriendsGroupResponse::default_instance_,
      CMsgClientCreateFriendsGroupResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCreateFriendsGroupResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCreateFriendsGroupResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientCreateFriendsGroupResponse));
  CMsgClientDeleteFriendsGroup_descriptor_ = file->message_type(19);
  static const int CMsgClientDeleteFriendsGroup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDeleteFriendsGroup, steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDeleteFriendsGroup, groupid_),
  };
  CMsgClientDeleteFriendsGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientDeleteFriendsGroup_descriptor_,
      CMsgClientDeleteFriendsGroup::default_instance_,
      CMsgClientDeleteFriendsGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDeleteFriendsGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDeleteFriendsGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientDeleteFriendsGroup));
  CMsgClientDeleteFriendsGroupResponse_descriptor_ = file->message_type(20);
  static const int CMsgClientDeleteFriendsGroupResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDeleteFriendsGroupResponse, eresult_),
  };
  CMsgClientDeleteFriendsGroupResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientDeleteFriendsGroupResponse_descriptor_,
      CMsgClientDeleteFriendsGroupResponse::default_instance_,
      CMsgClientDeleteFriendsGroupResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDeleteFriendsGroupResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDeleteFriendsGroupResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientDeleteFriendsGroupResponse));
  CMsgClientManageFriendsGroup_descriptor_ = file->message_type(21);
  static const int CMsgClientManageFriendsGroup_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientManageFriendsGroup, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientManageFriendsGroup, groupname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientManageFriendsGroup, steamid_friends_added_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientManageFriendsGroup, steamid_friends_removed_),
  };
  CMsgClientManageFriendsGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientManageFriendsGroup_descriptor_,
      CMsgClientManageFriendsGroup::default_instance_,
      CMsgClientManageFriendsGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientManageFriendsGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientManageFriendsGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientManageFriendsGroup));
  CMsgClientManageFriendsGroupResponse_descriptor_ = file->message_type(22);
  static const int CMsgClientManageFriendsGroupResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientManageFriendsGroupResponse, eresult_),
  };
  CMsgClientManageFriendsGroupResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientManageFriendsGroupResponse_descriptor_,
      CMsgClientManageFriendsGroupResponse::default_instance_,
      CMsgClientManageFriendsGroupResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientManageFriendsGroupResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientManageFriendsGroupResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientManageFriendsGroupResponse));
  CMsgClientAddFriendToGroup_descriptor_ = file->message_type(23);
  static const int CMsgClientAddFriendToGroup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAddFriendToGroup, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAddFriendToGroup, steamiduser_),
  };
  CMsgClientAddFriendToGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientAddFriendToGroup_descriptor_,
      CMsgClientAddFriendToGroup::default_instance_,
      CMsgClientAddFriendToGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAddFriendToGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAddFriendToGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientAddFriendToGroup));
  CMsgClientAddFriendToGroupResponse_descriptor_ = file->message_type(24);
  static const int CMsgClientAddFriendToGroupResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAddFriendToGroupResponse, eresult_),
  };
  CMsgClientAddFriendToGroupResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientAddFriendToGroupResponse_descriptor_,
      CMsgClientAddFriendToGroupResponse::default_instance_,
      CMsgClientAddFriendToGroupResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAddFriendToGroupResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAddFriendToGroupResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientAddFriendToGroupResponse));
  CMsgClientRemoveFriendFromGroup_descriptor_ = file->message_type(25);
  static const int CMsgClientRemoveFriendFromGroup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRemoveFriendFromGroup, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRemoveFriendFromGroup, steamiduser_),
  };
  CMsgClientRemoveFriendFromGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientRemoveFriendFromGroup_descriptor_,
      CMsgClientRemoveFriendFromGroup::default_instance_,
      CMsgClientRemoveFriendFromGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRemoveFriendFromGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRemoveFriendFromGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientRemoveFriendFromGroup));
  CMsgClientRemoveFriendFromGroupResponse_descriptor_ = file->message_type(26);
  static const int CMsgClientRemoveFriendFromGroupResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRemoveFriendFromGroupResponse, eresult_),
  };
  CMsgClientRemoveFriendFromGroupResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientRemoveFriendFromGroupResponse_descriptor_,
      CMsgClientRemoveFriendFromGroupResponse::default_instance_,
      CMsgClientRemoveFriendFromGroupResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRemoveFriendFromGroupResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRemoveFriendFromGroupResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientRemoveFriendFromGroupResponse));
  CMsgClientGetEmoticonList_descriptor_ = file->message_type(27);
  static const int CMsgClientGetEmoticonList_offsets_[1] = {
  };
  CMsgClientGetEmoticonList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientGetEmoticonList_descriptor_,
      CMsgClientGetEmoticonList::default_instance_,
      CMsgClientGetEmoticonList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetEmoticonList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetEmoticonList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientGetEmoticonList));
  CMsgClientEmoticonList_descriptor_ = file->message_type(28);
  static const int CMsgClientEmoticonList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmoticonList, emoticons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmoticonList, stickers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmoticonList, effects_),
  };
  CMsgClientEmoticonList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientEmoticonList_descriptor_,
      CMsgClientEmoticonList::default_instance_,
      CMsgClientEmoticonList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmoticonList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmoticonList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientEmoticonList));
  CMsgClientEmoticonList_Emoticon_descriptor_ = CMsgClientEmoticonList_descriptor_->nested_type(0);
  static const int CMsgClientEmoticonList_Emoticon_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmoticonList_Emoticon, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmoticonList_Emoticon, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmoticonList_Emoticon, time_last_used_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmoticonList_Emoticon, use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmoticonList_Emoticon, time_received_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmoticonList_Emoticon, appid_),
  };
  CMsgClientEmoticonList_Emoticon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientEmoticonList_Emoticon_descriptor_,
      CMsgClientEmoticonList_Emoticon::default_instance_,
      CMsgClientEmoticonList_Emoticon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmoticonList_Emoticon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmoticonList_Emoticon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientEmoticonList_Emoticon));
  CMsgClientEmoticonList_Sticker_descriptor_ = CMsgClientEmoticonList_descriptor_->nested_type(1);
  static const int CMsgClientEmoticonList_Sticker_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmoticonList_Sticker, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmoticonList_Sticker, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmoticonList_Sticker, time_received_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmoticonList_Sticker, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmoticonList_Sticker, time_last_used_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmoticonList_Sticker, use_count_),
  };
  CMsgClientEmoticonList_Sticker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientEmoticonList_Sticker_descriptor_,
      CMsgClientEmoticonList_Sticker::default_instance_,
      CMsgClientEmoticonList_Sticker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmoticonList_Sticker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmoticonList_Sticker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientEmoticonList_Sticker));
  CMsgClientEmoticonList_Effect_descriptor_ = CMsgClientEmoticonList_descriptor_->nested_type(2);
  static const int CMsgClientEmoticonList_Effect_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmoticonList_Effect, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmoticonList_Effect, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmoticonList_Effect, time_received_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmoticonList_Effect, infinite_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmoticonList_Effect, appid_),
  };
  CMsgClientEmoticonList_Effect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientEmoticonList_Effect_descriptor_,
      CMsgClientEmoticonList_Effect::default_instance_,
      CMsgClientEmoticonList_Effect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmoticonList_Effect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmoticonList_Effect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientEmoticonList_Effect));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientFriendMsg_descriptor_, &CMsgClientFriendMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientFriendMsgIncoming_descriptor_, &CMsgClientFriendMsgIncoming::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientAddFriend_descriptor_, &CMsgClientAddFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientAddFriendResponse_descriptor_, &CMsgClientAddFriendResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientRemoveFriend_descriptor_, &CMsgClientRemoveFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientHideFriend_descriptor_, &CMsgClientHideFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientFriendsList_descriptor_, &CMsgClientFriendsList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientFriendsList_Friend_descriptor_, &CMsgClientFriendsList_Friend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientFriendsGroupsList_descriptor_, &CMsgClientFriendsGroupsList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientFriendsGroupsList_FriendGroup_descriptor_, &CMsgClientFriendsGroupsList_FriendGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientFriendsGroupsList_FriendGroupsMembership_descriptor_, &CMsgClientFriendsGroupsList_FriendGroupsMembership::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientPlayerNicknameList_descriptor_, &CMsgClientPlayerNicknameList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientPlayerNicknameList_PlayerNickname_descriptor_, &CMsgClientPlayerNicknameList_PlayerNickname::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientSetPlayerNickname_descriptor_, &CMsgClientSetPlayerNickname::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientSetPlayerNicknameResponse_descriptor_, &CMsgClientSetPlayerNicknameResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientRequestFriendData_descriptor_, &CMsgClientRequestFriendData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientChangeStatus_descriptor_, &CMsgClientChangeStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPersonaChangeResponse_descriptor_, &CMsgPersonaChangeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientPersonaState_descriptor_, &CMsgClientPersonaState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientPersonaState_Friend_descriptor_, &CMsgClientPersonaState_Friend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientPersonaState_Friend_ClanData_descriptor_, &CMsgClientPersonaState_Friend_ClanData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientPersonaState_Friend_KV_descriptor_, &CMsgClientPersonaState_Friend_KV::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientFriendProfileInfo_descriptor_, &CMsgClientFriendProfileInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientFriendProfileInfoResponse_descriptor_, &CMsgClientFriendProfileInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientCreateFriendsGroup_descriptor_, &CMsgClientCreateFriendsGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientCreateFriendsGroupResponse_descriptor_, &CMsgClientCreateFriendsGroupResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientDeleteFriendsGroup_descriptor_, &CMsgClientDeleteFriendsGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientDeleteFriendsGroupResponse_descriptor_, &CMsgClientDeleteFriendsGroupResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientManageFriendsGroup_descriptor_, &CMsgClientManageFriendsGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientManageFriendsGroupResponse_descriptor_, &CMsgClientManageFriendsGroupResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientAddFriendToGroup_descriptor_, &CMsgClientAddFriendToGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientAddFriendToGroupResponse_descriptor_, &CMsgClientAddFriendToGroupResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientRemoveFriendFromGroup_descriptor_, &CMsgClientRemoveFriendFromGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientRemoveFriendFromGroupResponse_descriptor_, &CMsgClientRemoveFriendFromGroupResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientGetEmoticonList_descriptor_, &CMsgClientGetEmoticonList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientEmoticonList_descriptor_, &CMsgClientEmoticonList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientEmoticonList_Emoticon_descriptor_, &CMsgClientEmoticonList_Emoticon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientEmoticonList_Sticker_descriptor_, &CMsgClientEmoticonList_Sticker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientEmoticonList_Effect_descriptor_, &CMsgClientEmoticonList_Effect::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto() {
  delete CMsgClientFriendMsg::default_instance_;
  delete CMsgClientFriendMsg_reflection_;
  delete CMsgClientFriendMsgIncoming::default_instance_;
  delete CMsgClientFriendMsgIncoming_reflection_;
  delete CMsgClientAddFriend::default_instance_;
  delete CMsgClientAddFriend_reflection_;
  delete CMsgClientAddFriendResponse::default_instance_;
  delete CMsgClientAddFriendResponse_reflection_;
  delete CMsgClientRemoveFriend::default_instance_;
  delete CMsgClientRemoveFriend_reflection_;
  delete CMsgClientHideFriend::default_instance_;
  delete CMsgClientHideFriend_reflection_;
  delete CMsgClientFriendsList::default_instance_;
  delete CMsgClientFriendsList_reflection_;
  delete CMsgClientFriendsList_Friend::default_instance_;
  delete CMsgClientFriendsList_Friend_reflection_;
  delete CMsgClientFriendsGroupsList::default_instance_;
  delete CMsgClientFriendsGroupsList_reflection_;
  delete CMsgClientFriendsGroupsList_FriendGroup::default_instance_;
  delete CMsgClientFriendsGroupsList_FriendGroup_reflection_;
  delete CMsgClientFriendsGroupsList_FriendGroupsMembership::default_instance_;
  delete CMsgClientFriendsGroupsList_FriendGroupsMembership_reflection_;
  delete CMsgClientPlayerNicknameList::default_instance_;
  delete CMsgClientPlayerNicknameList_reflection_;
  delete CMsgClientPlayerNicknameList_PlayerNickname::default_instance_;
  delete CMsgClientPlayerNicknameList_PlayerNickname_reflection_;
  delete CMsgClientSetPlayerNickname::default_instance_;
  delete CMsgClientSetPlayerNickname_reflection_;
  delete CMsgClientSetPlayerNicknameResponse::default_instance_;
  delete CMsgClientSetPlayerNicknameResponse_reflection_;
  delete CMsgClientRequestFriendData::default_instance_;
  delete CMsgClientRequestFriendData_reflection_;
  delete CMsgClientChangeStatus::default_instance_;
  delete CMsgClientChangeStatus_reflection_;
  delete CMsgPersonaChangeResponse::default_instance_;
  delete CMsgPersonaChangeResponse_reflection_;
  delete CMsgClientPersonaState::default_instance_;
  delete CMsgClientPersonaState_reflection_;
  delete CMsgClientPersonaState_Friend::default_instance_;
  delete CMsgClientPersonaState_Friend_reflection_;
  delete CMsgClientPersonaState_Friend_ClanData::default_instance_;
  delete CMsgClientPersonaState_Friend_ClanData_reflection_;
  delete CMsgClientPersonaState_Friend_KV::default_instance_;
  delete CMsgClientPersonaState_Friend_KV_reflection_;
  delete CMsgClientFriendProfileInfo::default_instance_;
  delete CMsgClientFriendProfileInfo_reflection_;
  delete CMsgClientFriendProfileInfoResponse::default_instance_;
  delete CMsgClientFriendProfileInfoResponse_reflection_;
  delete CMsgClientCreateFriendsGroup::default_instance_;
  delete CMsgClientCreateFriendsGroup_reflection_;
  delete CMsgClientCreateFriendsGroupResponse::default_instance_;
  delete CMsgClientCreateFriendsGroupResponse_reflection_;
  delete CMsgClientDeleteFriendsGroup::default_instance_;
  delete CMsgClientDeleteFriendsGroup_reflection_;
  delete CMsgClientDeleteFriendsGroupResponse::default_instance_;
  delete CMsgClientDeleteFriendsGroupResponse_reflection_;
  delete CMsgClientManageFriendsGroup::default_instance_;
  delete CMsgClientManageFriendsGroup_reflection_;
  delete CMsgClientManageFriendsGroupResponse::default_instance_;
  delete CMsgClientManageFriendsGroupResponse_reflection_;
  delete CMsgClientAddFriendToGroup::default_instance_;
  delete CMsgClientAddFriendToGroup_reflection_;
  delete CMsgClientAddFriendToGroupResponse::default_instance_;
  delete CMsgClientAddFriendToGroupResponse_reflection_;
  delete CMsgClientRemoveFriendFromGroup::default_instance_;
  delete CMsgClientRemoveFriendFromGroup_reflection_;
  delete CMsgClientRemoveFriendFromGroupResponse::default_instance_;
  delete CMsgClientRemoveFriendFromGroupResponse_reflection_;
  delete CMsgClientGetEmoticonList::default_instance_;
  delete CMsgClientGetEmoticonList_reflection_;
  delete CMsgClientEmoticonList::default_instance_;
  delete CMsgClientEmoticonList_reflection_;
  delete CMsgClientEmoticonList_Emoticon::default_instance_;
  delete CMsgClientEmoticonList_Emoticon_reflection_;
  delete CMsgClientEmoticonList_Sticker::default_instance_;
  delete CMsgClientEmoticonList_Sticker_reflection_;
  delete CMsgClientEmoticonList_Effect::default_instance_;
  delete CMsgClientEmoticonList_Effect_reflection_;
}

void protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_steammessages_5fbase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n(steammessages_clientserver_friends.pro"
    "to\032\030steammessages_base.proto\"\212\001\n\023CMsgCli"
    "entFriendMsg\022\017\n\007steamid\030\001 \001(\006\022\027\n\017chat_en"
    "try_type\030\002 \001(\005\022\017\n\007message\030\003 \001(\014\022 \n\030rtime"
    "32_server_timestamp\030\004 \001(\007\022\026\n\016echo_to_sen"
    "der\030\005 \001(\010\"\235\001\n\033CMsgClientFriendMsgIncomin"
    "g\022\024\n\014steamid_from\030\001 \001(\006\022\027\n\017chat_entry_ty"
    "pe\030\002 \001(\005\022\034\n\024from_limited_account\030\003 \001(\010\022\017"
    "\n\007message\030\004 \001(\014\022 \n\030rtime32_server_timest"
    "amp\030\005 \001(\007\"R\n\023CMsgClientAddFriend\022\026\n\016stea"
    "mid_to_add\030\001 \001(\006\022#\n\033accountname_or_email"
    "_to_add\030\002 \001(\t\"e\n\033CMsgClientAddFriendResp"
    "onse\022\022\n\007eresult\030\001 \001(\005:\0012\022\026\n\016steam_id_add"
    "ed\030\002 \001(\006\022\032\n\022persona_name_added\030\003 \001(\t\"*\n\026"
    "CMsgClientRemoveFriend\022\020\n\010friendid\030\001 \001(\006"
    "\"6\n\024CMsgClientHideFriend\022\020\n\010friendid\030\001 \001"
    "(\006\022\014\n\004hide\030\002 \001(\010\"\352\001\n\025CMsgClientFriendsLi"
    "st\022\024\n\014bincremental\030\001 \001(\010\022.\n\007friends\030\002 \003("
    "\0132\035.CMsgClientFriendsList.Friend\022\030\n\020max_"
    "friend_count\030\003 \001(\r\022\033\n\023active_friend_coun"
    "t\030\004 \001(\r\022\031\n\021friends_limit_hit\030\005 \001(\010\0329\n\006Fr"
    "iend\022\022\n\nulfriendid\030\001 \001(\006\022\033\n\023efriendrelat"
    "ionship\030\002 \001(\r\"\305\002\n\033CMsgClientFriendsGroup"
    "sList\022\020\n\010bremoval\030\001 \001(\010\022\024\n\014bincremental\030"
    "\002 \001(\010\022>\n\014friendGroups\030\003 \003(\0132(.CMsgClient"
    "FriendsGroupsList.FriendGroup\022H\n\013members"
    "hips\030\004 \003(\01323.CMsgClientFriendsGroupsList"
    ".FriendGroupsMembership\0325\n\013FriendGroup\022\020"
    "\n\010nGroupID\030\001 \001(\005\022\024\n\014strGroupName\030\002 \001(\t\032="
    "\n\026FriendGroupsMembership\022\021\n\tulSteamID\030\001 "
    "\001(\006\022\020\n\010nGroupID\030\002 \001(\005\"\272\001\n\034CMsgClientPlay"
    "erNicknameList\022\017\n\007removal\030\001 \001(\010\022\023\n\013incre"
    "mental\030\002 \001(\010\022\?\n\tnicknames\030\003 \003(\0132,.CMsgCl"
    "ientPlayerNicknameList.PlayerNickname\0323\n"
    "\016PlayerNickname\022\017\n\007steamid\030\001 \001(\006\022\020\n\010nick"
    "name\030\003 \001(\t\"@\n\033CMsgClientSetPlayerNicknam"
    "e\022\017\n\007steamid\030\001 \001(\006\022\020\n\010nickname\030\002 \001(\t\"6\n#"
    "CMsgClientSetPlayerNicknameResponse\022\017\n\007e"
    "result\030\001 \001(\r\"O\n\033CMsgClientRequestFriendD"
    "ata\022\037\n\027persona_state_requested\030\001 \001(\r\022\017\n\007"
    "friends\030\002 \003(\006\"\357\001\n\026CMsgClientChangeStatus"
    "\022\025\n\rpersona_state\030\001 \001(\r\022\023\n\013player_name\030\002"
    " \001(\t\022\036\n\026is_auto_generated_name\030\003 \001(\010\022\025\n\r"
    "high_priority\030\004 \001(\010\022\033\n\023persona_set_by_us"
    "er\030\005 \001(\010\022\036\n\023persona_state_flags\030\006 \001(\r:\0010"
    "\022\035\n\025need_persona_response\030\007 \001(\010\022\026\n\016is_cl"
    "ient_idle\030\010 \001(\010\"@\n\031CMsgPersonaChangeResp"
    "onse\022\016\n\006result\030\001 \001(\r\022\023\n\013player_name\030\002 \001("
    "\t\"\240\010\n\026CMsgClientPersonaState\022\024\n\014status_f"
    "lags\030\001 \001(\r\022/\n\007friends\030\002 \003(\0132\036.CMsgClient"
    "PersonaState.Friend\032\276\007\n\006Friend\022\020\n\010friend"
    "id\030\001 \001(\006\022\025\n\rpersona_state\030\002 \001(\r\022\032\n\022game_"
    "played_app_id\030\003 \001(\r\022\026\n\016game_server_ip\030\004 "
    "\001(\r\022\030\n\020game_server_port\030\005 \001(\r\022\033\n\023persona"
    "_state_flags\030\006 \001(\r\022 \n\030online_session_ins"
    "tances\030\007 \001(\r\022\033\n\023persona_set_by_user\030\n \001("
    "\010\022\023\n\013player_name\030\017 \001(\t\022\022\n\nquery_port\030\024 \001"
    "(\r\022\026\n\016steamid_source\030\031 \001(\006\022\023\n\013avatar_has"
    "h\030\037 \001(\014\022\023\n\013last_logoff\030- \001(\r\022\022\n\nlast_log"
    "on\030. \001(\r\022\030\n\020last_seen_online\030/ \001(\r\022\021\n\tcl"
    "an_rank\0302 \001(\r\022\021\n\tgame_name\0307 \001(\t\022\016\n\006game"
    "id\0308 \001(\006\022\026\n\016game_data_blob\030< \001(\014\022:\n\tclan"
    "_data\030@ \001(\0132\'.CMsgClientPersonaState.Fri"
    "end.ClanData\022\020\n\010clan_tag\030A \001(\t\0228\n\rrich_p"
    "resence\030G \003(\0132!.CMsgClientPersonaState.F"
    "riend.KV\022\024\n\014broadcast_id\030H \001(\006\022\025\n\rgame_l"
    "obby_id\030I \001(\006\022$\n\034watching_broadcast_acco"
    "untid\030J \001(\r\022 \n\030watching_broadcast_appid\030"
    "K \001(\r\022\"\n\032watching_broadcast_viewers\030L \001("
    "\r\022 \n\030watching_broadcast_title\030M \001(\t\022\033\n\023i"
    "s_community_banned\030N \001(\010\022\"\n\032player_name_"
    "pending_review\030O \001(\010\022\035\n\025avatar_pending_r"
    "eview\030P \001(\010\0325\n\010ClanData\022\022\n\nogg_app_id\030\001 "
    "\001(\r\022\025\n\rchat_group_id\030\002 \001(\004\032 \n\002KV\022\013\n\003key\030"
    "\001 \001(\t\022\r\n\005value\030\002 \001(\t\"5\n\033CMsgClientFriend"
    "ProfileInfo\022\026\n\016steamid_friend\030\001 \001(\006\"\332\001\n#"
    "CMsgClientFriendProfileInfoResponse\022\022\n\007e"
    "result\030\001 \001(\005:\0012\022\026\n\016steamid_friend\030\002 \001(\006\022"
    "\024\n\014time_created\030\003 \001(\r\022\021\n\treal_name\030\004 \001(\t"
    "\022\021\n\tcity_name\030\005 \001(\t\022\022\n\nstate_name\030\006 \001(\t\022"
    "\024\n\014country_name\030\007 \001(\t\022\020\n\010headline\030\010 \001(\t\022"
    "\017\n\007summary\030\t \001(\t\"[\n\034CMsgClientCreateFrie"
    "ndsGroup\022\017\n\007steamid\030\001 \001(\006\022\021\n\tgroupname\030\002"
    " \001(\t\022\027\n\017steamid_friends\030\003 \003(\006\"H\n$CMsgCli"
    "entCreateFriendsGroupResponse\022\017\n\007eresult"
    "\030\001 \001(\r\022\017\n\007groupid\030\002 \001(\005\"@\n\034CMsgClientDel"
    "eteFriendsGroup\022\017\n\007steamid\030\001 \001(\006\022\017\n\007grou"
    "pid\030\002 \001(\005\"7\n$CMsgClientDeleteFriendsGrou"
    "pResponse\022\017\n\007eresult\030\001 \001(\r\"\202\001\n\034CMsgClien"
    "tManageFriendsGroup\022\017\n\007groupid\030\001 \001(\005\022\021\n\t"
    "groupname\030\002 \001(\t\022\035\n\025steamid_friends_added"
    "\030\003 \003(\006\022\037\n\027steamid_friends_removed\030\004 \003(\006\""
    "7\n$CMsgClientManageFriendsGroupResponse\022"
    "\017\n\007eresult\030\001 \001(\r\"B\n\032CMsgClientAddFriendT"
    "oGroup\022\017\n\007groupid\030\001 \001(\005\022\023\n\013steamiduser\030\002"
    " \001(\006\"5\n\"CMsgClientAddFriendToGroupRespon"
    "se\022\017\n\007eresult\030\001 \001(\r\"G\n\037CMsgClientRemoveF"
    "riendFromGroup\022\017\n\007groupid\030\001 \001(\005\022\023\n\013steam"
    "iduser\030\002 \001(\006\":\n\'CMsgClientRemoveFriendFr"
    "omGroupResponse\022\017\n\007eresult\030\001 \001(\r\"\033\n\031CMsg"
    "ClientGetEmoticonList\"\207\004\n\026CMsgClientEmot"
    "iconList\0223\n\temoticons\030\001 \003(\0132 .CMsgClient"
    "EmoticonList.Emoticon\0221\n\010stickers\030\002 \003(\0132"
    "\037.CMsgClientEmoticonList.Sticker\022/\n\007effe"
    "cts\030\003 \003(\0132\036.CMsgClientEmoticonList.Effec"
    "t\032x\n\010Emoticon\022\014\n\004name\030\001 \001(\t\022\r\n\005count\030\002 \001"
    "(\005\022\026\n\016time_last_used\030\003 \001(\r\022\021\n\tuse_count\030"
    "\004 \001(\r\022\025\n\rtime_received\030\005 \001(\r\022\r\n\005appid\030\006 "
    "\001(\r\032w\n\007Sticker\022\014\n\004name\030\001 \001(\t\022\r\n\005count\030\002 "
    "\001(\005\022\025\n\rtime_received\030\003 \001(\r\022\r\n\005appid\030\004 \001("
    "\r\022\026\n\016time_last_used\030\005 \001(\r\022\021\n\tuse_count\030\006"
    " \001(\r\032a\n\006Effect\022\014\n\004name\030\001 \001(\t\022\r\n\005count\030\002 "
    "\001(\005\022\025\n\rtime_received\030\003 \001(\r\022\024\n\014infinite_u"
    "se\030\004 \001(\010\022\r\n\005appid\030\005 \001(\rB\005H\001\200\001\000", 4550);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_clientserver_friends.proto", &protobuf_RegisterTypes);
  CMsgClientFriendMsg::default_instance_ = new CMsgClientFriendMsg();
  CMsgClientFriendMsgIncoming::default_instance_ = new CMsgClientFriendMsgIncoming();
  CMsgClientAddFriend::default_instance_ = new CMsgClientAddFriend();
  CMsgClientAddFriendResponse::default_instance_ = new CMsgClientAddFriendResponse();
  CMsgClientRemoveFriend::default_instance_ = new CMsgClientRemoveFriend();
  CMsgClientHideFriend::default_instance_ = new CMsgClientHideFriend();
  CMsgClientFriendsList::default_instance_ = new CMsgClientFriendsList();
  CMsgClientFriendsList_Friend::default_instance_ = new CMsgClientFriendsList_Friend();
  CMsgClientFriendsGroupsList::default_instance_ = new CMsgClientFriendsGroupsList();
  CMsgClientFriendsGroupsList_FriendGroup::default_instance_ = new CMsgClientFriendsGroupsList_FriendGroup();
  CMsgClientFriendsGroupsList_FriendGroupsMembership::default_instance_ = new CMsgClientFriendsGroupsList_FriendGroupsMembership();
  CMsgClientPlayerNicknameList::default_instance_ = new CMsgClientPlayerNicknameList();
  CMsgClientPlayerNicknameList_PlayerNickname::default_instance_ = new CMsgClientPlayerNicknameList_PlayerNickname();
  CMsgClientSetPlayerNickname::default_instance_ = new CMsgClientSetPlayerNickname();
  CMsgClientSetPlayerNicknameResponse::default_instance_ = new CMsgClientSetPlayerNicknameResponse();
  CMsgClientRequestFriendData::default_instance_ = new CMsgClientRequestFriendData();
  CMsgClientChangeStatus::default_instance_ = new CMsgClientChangeStatus();
  CMsgPersonaChangeResponse::default_instance_ = new CMsgPersonaChangeResponse();
  CMsgClientPersonaState::default_instance_ = new CMsgClientPersonaState();
  CMsgClientPersonaState_Friend::default_instance_ = new CMsgClientPersonaState_Friend();
  CMsgClientPersonaState_Friend_ClanData::default_instance_ = new CMsgClientPersonaState_Friend_ClanData();
  CMsgClientPersonaState_Friend_KV::default_instance_ = new CMsgClientPersonaState_Friend_KV();
  CMsgClientFriendProfileInfo::default_instance_ = new CMsgClientFriendProfileInfo();
  CMsgClientFriendProfileInfoResponse::default_instance_ = new CMsgClientFriendProfileInfoResponse();
  CMsgClientCreateFriendsGroup::default_instance_ = new CMsgClientCreateFriendsGroup();
  CMsgClientCreateFriendsGroupResponse::default_instance_ = new CMsgClientCreateFriendsGroupResponse();
  CMsgClientDeleteFriendsGroup::default_instance_ = new CMsgClientDeleteFriendsGroup();
  CMsgClientDeleteFriendsGroupResponse::default_instance_ = new CMsgClientDeleteFriendsGroupResponse();
  CMsgClientManageFriendsGroup::default_instance_ = new CMsgClientManageFriendsGroup();
  CMsgClientManageFriendsGroupResponse::default_instance_ = new CMsgClientManageFriendsGroupResponse();
  CMsgClientAddFriendToGroup::default_instance_ = new CMsgClientAddFriendToGroup();
  CMsgClientAddFriendToGroupResponse::default_instance_ = new CMsgClientAddFriendToGroupResponse();
  CMsgClientRemoveFriendFromGroup::default_instance_ = new CMsgClientRemoveFriendFromGroup();
  CMsgClientRemoveFriendFromGroupResponse::default_instance_ = new CMsgClientRemoveFriendFromGroupResponse();
  CMsgClientGetEmoticonList::default_instance_ = new CMsgClientGetEmoticonList();
  CMsgClientEmoticonList::default_instance_ = new CMsgClientEmoticonList();
  CMsgClientEmoticonList_Emoticon::default_instance_ = new CMsgClientEmoticonList_Emoticon();
  CMsgClientEmoticonList_Sticker::default_instance_ = new CMsgClientEmoticonList_Sticker();
  CMsgClientEmoticonList_Effect::default_instance_ = new CMsgClientEmoticonList_Effect();
  CMsgClientFriendMsg::default_instance_->InitAsDefaultInstance();
  CMsgClientFriendMsgIncoming::default_instance_->InitAsDefaultInstance();
  CMsgClientAddFriend::default_instance_->InitAsDefaultInstance();
  CMsgClientAddFriendResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientRemoveFriend::default_instance_->InitAsDefaultInstance();
  CMsgClientHideFriend::default_instance_->InitAsDefaultInstance();
  CMsgClientFriendsList::default_instance_->InitAsDefaultInstance();
  CMsgClientFriendsList_Friend::default_instance_->InitAsDefaultInstance();
  CMsgClientFriendsGroupsList::default_instance_->InitAsDefaultInstance();
  CMsgClientFriendsGroupsList_FriendGroup::default_instance_->InitAsDefaultInstance();
  CMsgClientFriendsGroupsList_FriendGroupsMembership::default_instance_->InitAsDefaultInstance();
  CMsgClientPlayerNicknameList::default_instance_->InitAsDefaultInstance();
  CMsgClientPlayerNicknameList_PlayerNickname::default_instance_->InitAsDefaultInstance();
  CMsgClientSetPlayerNickname::default_instance_->InitAsDefaultInstance();
  CMsgClientSetPlayerNicknameResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientRequestFriendData::default_instance_->InitAsDefaultInstance();
  CMsgClientChangeStatus::default_instance_->InitAsDefaultInstance();
  CMsgPersonaChangeResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientPersonaState::default_instance_->InitAsDefaultInstance();
  CMsgClientPersonaState_Friend::default_instance_->InitAsDefaultInstance();
  CMsgClientPersonaState_Friend_ClanData::default_instance_->InitAsDefaultInstance();
  CMsgClientPersonaState_Friend_KV::default_instance_->InitAsDefaultInstance();
  CMsgClientFriendProfileInfo::default_instance_->InitAsDefaultInstance();
  CMsgClientFriendProfileInfoResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientCreateFriendsGroup::default_instance_->InitAsDefaultInstance();
  CMsgClientCreateFriendsGroupResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientDeleteFriendsGroup::default_instance_->InitAsDefaultInstance();
  CMsgClientDeleteFriendsGroupResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientManageFriendsGroup::default_instance_->InitAsDefaultInstance();
  CMsgClientManageFriendsGroupResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientAddFriendToGroup::default_instance_->InitAsDefaultInstance();
  CMsgClientAddFriendToGroupResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientRemoveFriendFromGroup::default_instance_->InitAsDefaultInstance();
  CMsgClientRemoveFriendFromGroupResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientGetEmoticonList::default_instance_->InitAsDefaultInstance();
  CMsgClientEmoticonList::default_instance_->InitAsDefaultInstance();
  CMsgClientEmoticonList_Emoticon::default_instance_->InitAsDefaultInstance();
  CMsgClientEmoticonList_Sticker::default_instance_->InitAsDefaultInstance();
  CMsgClientEmoticonList_Effect::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_steammessages_5fclientserver_5ffriends_2eproto {
  StaticDescriptorInitializer_steammessages_5fclientserver_5ffriends_2eproto() {
    protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  }
} static_descriptor_initializer_steammessages_5fclientserver_5ffriends_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CMsgClientFriendMsg::kSteamidFieldNumber;
const int CMsgClientFriendMsg::kChatEntryTypeFieldNumber;
const int CMsgClientFriendMsg::kMessageFieldNumber;
const int CMsgClientFriendMsg::kRtime32ServerTimestampFieldNumber;
const int CMsgClientFriendMsg::kEchoToSenderFieldNumber;
#endif  // !_MSC_VER

CMsgClientFriendMsg::CMsgClientFriendMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientFriendMsg::InitAsDefaultInstance() {
}

CMsgClientFriendMsg::CMsgClientFriendMsg(const CMsgClientFriendMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientFriendMsg::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  chat_entry_type_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rtime32_server_timestamp_ = 0u;
  echo_to_sender_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientFriendMsg::~CMsgClientFriendMsg() {
  SharedDtor();
}

void CMsgClientFriendMsg::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientFriendMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientFriendMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientFriendMsg_descriptor_;
}

const CMsgClientFriendMsg& CMsgClientFriendMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  return *default_instance_;
}

CMsgClientFriendMsg* CMsgClientFriendMsg::default_instance_ = NULL;

CMsgClientFriendMsg* CMsgClientFriendMsg::New() const {
  return new CMsgClientFriendMsg;
}

void CMsgClientFriendMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_ = GOOGLE_ULONGLONG(0);
    chat_entry_type_ = 0;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    rtime32_server_timestamp_ = 0u;
    echo_to_sender_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientFriendMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chat_entry_type;
        break;
      }

      // optional int32 chat_entry_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chat_entry_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chat_entry_type_)));
          set_has_chat_entry_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_message;
        break;
      }

      // optional bytes message = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_rtime32_server_timestamp;
        break;
      }

      // optional fixed32 rtime32_server_timestamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rtime32_server_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &rtime32_server_timestamp_)));
          set_has_rtime32_server_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_echo_to_sender;
        break;
      }

      // optional bool echo_to_sender = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_echo_to_sender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &echo_to_sender_)));
          set_has_echo_to_sender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientFriendMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional int32 chat_entry_type = 2;
  if (has_chat_entry_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chat_entry_type(), output);
  }

  // optional bytes message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->message(), output);
  }

  // optional fixed32 rtime32_server_timestamp = 4;
  if (has_rtime32_server_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->rtime32_server_timestamp(), output);
  }

  // optional bool echo_to_sender = 5;
  if (has_echo_to_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->echo_to_sender(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientFriendMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional int32 chat_entry_type = 2;
  if (has_chat_entry_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chat_entry_type(), target);
  }

  // optional bytes message = 3;
  if (has_message()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->message(), target);
  }

  // optional fixed32 rtime32_server_timestamp = 4;
  if (has_rtime32_server_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->rtime32_server_timestamp(), target);
  }

  // optional bool echo_to_sender = 5;
  if (has_echo_to_sender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->echo_to_sender(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientFriendMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional int32 chat_entry_type = 2;
    if (has_chat_entry_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chat_entry_type());
    }

    // optional bytes message = 3;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message());
    }

    // optional fixed32 rtime32_server_timestamp = 4;
    if (has_rtime32_server_timestamp()) {
      total_size += 1 + 4;
    }

    // optional bool echo_to_sender = 5;
    if (has_echo_to_sender()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientFriendMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientFriendMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientFriendMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientFriendMsg::MergeFrom(const CMsgClientFriendMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_chat_entry_type()) {
      set_chat_entry_type(from.chat_entry_type());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_rtime32_server_timestamp()) {
      set_rtime32_server_timestamp(from.rtime32_server_timestamp());
    }
    if (from.has_echo_to_sender()) {
      set_echo_to_sender(from.echo_to_sender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientFriendMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientFriendMsg::CopyFrom(const CMsgClientFriendMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendMsg::IsInitialized() const {

  return true;
}

void CMsgClientFriendMsg::Swap(CMsgClientFriendMsg* other) {
  if (other != this) {
    std::swap(steamid_, other->steamid_);
    std::swap(chat_entry_type_, other->chat_entry_type_);
    std::swap(message_, other->message_);
    std::swap(rtime32_server_timestamp_, other->rtime32_server_timestamp_);
    std::swap(echo_to_sender_, other->echo_to_sender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientFriendMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientFriendMsg_descriptor_;
  metadata.reflection = CMsgClientFriendMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientFriendMsgIncoming::kSteamidFromFieldNumber;
const int CMsgClientFriendMsgIncoming::kChatEntryTypeFieldNumber;
const int CMsgClientFriendMsgIncoming::kFromLimitedAccountFieldNumber;
const int CMsgClientFriendMsgIncoming::kMessageFieldNumber;
const int CMsgClientFriendMsgIncoming::kRtime32ServerTimestampFieldNumber;
#endif  // !_MSC_VER

CMsgClientFriendMsgIncoming::CMsgClientFriendMsgIncoming()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientFriendMsgIncoming::InitAsDefaultInstance() {
}

CMsgClientFriendMsgIncoming::CMsgClientFriendMsgIncoming(const CMsgClientFriendMsgIncoming& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientFriendMsgIncoming::SharedCtor() {
  _cached_size_ = 0;
  steamid_from_ = GOOGLE_ULONGLONG(0);
  chat_entry_type_ = 0;
  from_limited_account_ = false;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rtime32_server_timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientFriendMsgIncoming::~CMsgClientFriendMsgIncoming() {
  SharedDtor();
}

void CMsgClientFriendMsgIncoming::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientFriendMsgIncoming::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientFriendMsgIncoming::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientFriendMsgIncoming_descriptor_;
}

const CMsgClientFriendMsgIncoming& CMsgClientFriendMsgIncoming::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  return *default_instance_;
}

CMsgClientFriendMsgIncoming* CMsgClientFriendMsgIncoming::default_instance_ = NULL;

CMsgClientFriendMsgIncoming* CMsgClientFriendMsgIncoming::New() const {
  return new CMsgClientFriendMsgIncoming;
}

void CMsgClientFriendMsgIncoming::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_from_ = GOOGLE_ULONGLONG(0);
    chat_entry_type_ = 0;
    from_limited_account_ = false;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    rtime32_server_timestamp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientFriendMsgIncoming::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid_from = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_from_)));
          set_has_steamid_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chat_entry_type;
        break;
      }

      // optional int32 chat_entry_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chat_entry_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chat_entry_type_)));
          set_has_chat_entry_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_from_limited_account;
        break;
      }

      // optional bool from_limited_account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_limited_account:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &from_limited_account_)));
          set_has_from_limited_account();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_message;
        break;
      }

      // optional bytes message = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_rtime32_server_timestamp;
        break;
      }

      // optional fixed32 rtime32_server_timestamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rtime32_server_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &rtime32_server_timestamp_)));
          set_has_rtime32_server_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientFriendMsgIncoming::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid_from = 1;
  if (has_steamid_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid_from(), output);
  }

  // optional int32 chat_entry_type = 2;
  if (has_chat_entry_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chat_entry_type(), output);
  }

  // optional bool from_limited_account = 3;
  if (has_from_limited_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->from_limited_account(), output);
  }

  // optional bytes message = 4;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->message(), output);
  }

  // optional fixed32 rtime32_server_timestamp = 5;
  if (has_rtime32_server_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->rtime32_server_timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientFriendMsgIncoming::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steamid_from = 1;
  if (has_steamid_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid_from(), target);
  }

  // optional int32 chat_entry_type = 2;
  if (has_chat_entry_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chat_entry_type(), target);
  }

  // optional bool from_limited_account = 3;
  if (has_from_limited_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->from_limited_account(), target);
  }

  // optional bytes message = 4;
  if (has_message()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->message(), target);
  }

  // optional fixed32 rtime32_server_timestamp = 5;
  if (has_rtime32_server_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->rtime32_server_timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientFriendMsgIncoming::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid_from = 1;
    if (has_steamid_from()) {
      total_size += 1 + 8;
    }

    // optional int32 chat_entry_type = 2;
    if (has_chat_entry_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chat_entry_type());
    }

    // optional bool from_limited_account = 3;
    if (has_from_limited_account()) {
      total_size += 1 + 1;
    }

    // optional bytes message = 4;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message());
    }

    // optional fixed32 rtime32_server_timestamp = 5;
    if (has_rtime32_server_timestamp()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientFriendMsgIncoming::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientFriendMsgIncoming* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientFriendMsgIncoming*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientFriendMsgIncoming::MergeFrom(const CMsgClientFriendMsgIncoming& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid_from()) {
      set_steamid_from(from.steamid_from());
    }
    if (from.has_chat_entry_type()) {
      set_chat_entry_type(from.chat_entry_type());
    }
    if (from.has_from_limited_account()) {
      set_from_limited_account(from.from_limited_account());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_rtime32_server_timestamp()) {
      set_rtime32_server_timestamp(from.rtime32_server_timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientFriendMsgIncoming::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientFriendMsgIncoming::CopyFrom(const CMsgClientFriendMsgIncoming& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendMsgIncoming::IsInitialized() const {

  return true;
}

void CMsgClientFriendMsgIncoming::Swap(CMsgClientFriendMsgIncoming* other) {
  if (other != this) {
    std::swap(steamid_from_, other->steamid_from_);
    std::swap(chat_entry_type_, other->chat_entry_type_);
    std::swap(from_limited_account_, other->from_limited_account_);
    std::swap(message_, other->message_);
    std::swap(rtime32_server_timestamp_, other->rtime32_server_timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientFriendMsgIncoming::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientFriendMsgIncoming_descriptor_;
  metadata.reflection = CMsgClientFriendMsgIncoming_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientAddFriend::kSteamidToAddFieldNumber;
const int CMsgClientAddFriend::kAccountnameOrEmailToAddFieldNumber;
#endif  // !_MSC_VER

CMsgClientAddFriend::CMsgClientAddFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientAddFriend::InitAsDefaultInstance() {
}

CMsgClientAddFriend::CMsgClientAddFriend(const CMsgClientAddFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientAddFriend::SharedCtor() {
  _cached_size_ = 0;
  steamid_to_add_ = GOOGLE_ULONGLONG(0);
  accountname_or_email_to_add_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientAddFriend::~CMsgClientAddFriend() {
  SharedDtor();
}

void CMsgClientAddFriend::SharedDtor() {
  if (accountname_or_email_to_add_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_or_email_to_add_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientAddFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientAddFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientAddFriend_descriptor_;
}

const CMsgClientAddFriend& CMsgClientAddFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  return *default_instance_;
}

CMsgClientAddFriend* CMsgClientAddFriend::default_instance_ = NULL;

CMsgClientAddFriend* CMsgClientAddFriend::New() const {
  return new CMsgClientAddFriend;
}

void CMsgClientAddFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_to_add_ = GOOGLE_ULONGLONG(0);
    if (has_accountname_or_email_to_add()) {
      if (accountname_or_email_to_add_ != &::google::protobuf::internal::kEmptyString) {
        accountname_or_email_to_add_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientAddFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid_to_add = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_to_add_)));
          set_has_steamid_to_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_accountname_or_email_to_add;
        break;
      }

      // optional string accountname_or_email_to_add = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accountname_or_email_to_add:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname_or_email_to_add()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountname_or_email_to_add().data(), this->accountname_or_email_to_add().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientAddFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid_to_add = 1;
  if (has_steamid_to_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid_to_add(), output);
  }

  // optional string accountname_or_email_to_add = 2;
  if (has_accountname_or_email_to_add()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname_or_email_to_add().data(), this->accountname_or_email_to_add().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->accountname_or_email_to_add(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientAddFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steamid_to_add = 1;
  if (has_steamid_to_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid_to_add(), target);
  }

  // optional string accountname_or_email_to_add = 2;
  if (has_accountname_or_email_to_add()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname_or_email_to_add().data(), this->accountname_or_email_to_add().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->accountname_or_email_to_add(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientAddFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid_to_add = 1;
    if (has_steamid_to_add()) {
      total_size += 1 + 8;
    }

    // optional string accountname_or_email_to_add = 2;
    if (has_accountname_or_email_to_add()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname_or_email_to_add());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAddFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientAddFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientAddFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientAddFriend::MergeFrom(const CMsgClientAddFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid_to_add()) {
      set_steamid_to_add(from.steamid_to_add());
    }
    if (from.has_accountname_or_email_to_add()) {
      set_accountname_or_email_to_add(from.accountname_or_email_to_add());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientAddFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAddFriend::CopyFrom(const CMsgClientAddFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAddFriend::IsInitialized() const {

  return true;
}

void CMsgClientAddFriend::Swap(CMsgClientAddFriend* other) {
  if (other != this) {
    std::swap(steamid_to_add_, other->steamid_to_add_);
    std::swap(accountname_or_email_to_add_, other->accountname_or_email_to_add_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientAddFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientAddFriend_descriptor_;
  metadata.reflection = CMsgClientAddFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientAddFriendResponse::kEresultFieldNumber;
const int CMsgClientAddFriendResponse::kSteamIdAddedFieldNumber;
const int CMsgClientAddFriendResponse::kPersonaNameAddedFieldNumber;
#endif  // !_MSC_VER

CMsgClientAddFriendResponse::CMsgClientAddFriendResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientAddFriendResponse::InitAsDefaultInstance() {
}

CMsgClientAddFriendResponse::CMsgClientAddFriendResponse(const CMsgClientAddFriendResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientAddFriendResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  steam_id_added_ = GOOGLE_ULONGLONG(0);
  persona_name_added_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientAddFriendResponse::~CMsgClientAddFriendResponse() {
  SharedDtor();
}

void CMsgClientAddFriendResponse::SharedDtor() {
  if (persona_name_added_ != &::google::protobuf::internal::kEmptyString) {
    delete persona_name_added_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientAddFriendResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientAddFriendResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientAddFriendResponse_descriptor_;
}

const CMsgClientAddFriendResponse& CMsgClientAddFriendResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  return *default_instance_;
}

CMsgClientAddFriendResponse* CMsgClientAddFriendResponse::default_instance_ = NULL;

CMsgClientAddFriendResponse* CMsgClientAddFriendResponse::New() const {
  return new CMsgClientAddFriendResponse;
}

void CMsgClientAddFriendResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    steam_id_added_ = GOOGLE_ULONGLONG(0);
    if (has_persona_name_added()) {
      if (persona_name_added_ != &::google::protobuf::internal::kEmptyString) {
        persona_name_added_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientAddFriendResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steam_id_added;
        break;
      }

      // optional fixed64 steam_id_added = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_added:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_added_)));
          set_has_steam_id_added();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_persona_name_added;
        break;
      }

      // optional string persona_name_added = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_persona_name_added:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name_added()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->persona_name_added().data(), this->persona_name_added().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientAddFriendResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional fixed64 steam_id_added = 2;
  if (has_steam_id_added()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_added(), output);
  }

  // optional string persona_name_added = 3;
  if (has_persona_name_added()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->persona_name_added().data(), this->persona_name_added().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->persona_name_added(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientAddFriendResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional fixed64 steam_id_added = 2;
  if (has_steam_id_added()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_added(), target);
  }

  // optional string persona_name_added = 3;
  if (has_persona_name_added()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->persona_name_added().data(), this->persona_name_added().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->persona_name_added(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientAddFriendResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional fixed64 steam_id_added = 2;
    if (has_steam_id_added()) {
      total_size += 1 + 8;
    }

    // optional string persona_name_added = 3;
    if (has_persona_name_added()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name_added());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAddFriendResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientAddFriendResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientAddFriendResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientAddFriendResponse::MergeFrom(const CMsgClientAddFriendResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_steam_id_added()) {
      set_steam_id_added(from.steam_id_added());
    }
    if (from.has_persona_name_added()) {
      set_persona_name_added(from.persona_name_added());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientAddFriendResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAddFriendResponse::CopyFrom(const CMsgClientAddFriendResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAddFriendResponse::IsInitialized() const {

  return true;
}

void CMsgClientAddFriendResponse::Swap(CMsgClientAddFriendResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(steam_id_added_, other->steam_id_added_);
    std::swap(persona_name_added_, other->persona_name_added_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientAddFriendResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientAddFriendResponse_descriptor_;
  metadata.reflection = CMsgClientAddFriendResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRemoveFriend::kFriendidFieldNumber;
#endif  // !_MSC_VER

CMsgClientRemoveFriend::CMsgClientRemoveFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientRemoveFriend::InitAsDefaultInstance() {
}

CMsgClientRemoveFriend::CMsgClientRemoveFriend(const CMsgClientRemoveFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRemoveFriend::SharedCtor() {
  _cached_size_ = 0;
  friendid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRemoveFriend::~CMsgClientRemoveFriend() {
  SharedDtor();
}

void CMsgClientRemoveFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientRemoveFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRemoveFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientRemoveFriend_descriptor_;
}

const CMsgClientRemoveFriend& CMsgClientRemoveFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  return *default_instance_;
}

CMsgClientRemoveFriend* CMsgClientRemoveFriend::default_instance_ = NULL;

CMsgClientRemoveFriend* CMsgClientRemoveFriend::New() const {
  return new CMsgClientRemoveFriend;
}

void CMsgClientRemoveFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friendid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientRemoveFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 friendid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &friendid_)));
          set_has_friendid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRemoveFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 friendid = 1;
  if (has_friendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->friendid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientRemoveFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 friendid = 1;
  if (has_friendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->friendid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientRemoveFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 friendid = 1;
    if (has_friendid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRemoveFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientRemoveFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientRemoveFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientRemoveFriend::MergeFrom(const CMsgClientRemoveFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friendid()) {
      set_friendid(from.friendid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientRemoveFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRemoveFriend::CopyFrom(const CMsgClientRemoveFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRemoveFriend::IsInitialized() const {

  return true;
}

void CMsgClientRemoveFriend::Swap(CMsgClientRemoveFriend* other) {
  if (other != this) {
    std::swap(friendid_, other->friendid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientRemoveFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientRemoveFriend_descriptor_;
  metadata.reflection = CMsgClientRemoveFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientHideFriend::kFriendidFieldNumber;
const int CMsgClientHideFriend::kHideFieldNumber;
#endif  // !_MSC_VER

CMsgClientHideFriend::CMsgClientHideFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientHideFriend::InitAsDefaultInstance() {
}

CMsgClientHideFriend::CMsgClientHideFriend(const CMsgClientHideFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientHideFriend::SharedCtor() {
  _cached_size_ = 0;
  friendid_ = GOOGLE_ULONGLONG(0);
  hide_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientHideFriend::~CMsgClientHideFriend() {
  SharedDtor();
}

void CMsgClientHideFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientHideFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientHideFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientHideFriend_descriptor_;
}

const CMsgClientHideFriend& CMsgClientHideFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  return *default_instance_;
}

CMsgClientHideFriend* CMsgClientHideFriend::default_instance_ = NULL;

CMsgClientHideFriend* CMsgClientHideFriend::New() const {
  return new CMsgClientHideFriend;
}

void CMsgClientHideFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friendid_ = GOOGLE_ULONGLONG(0);
    hide_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientHideFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 friendid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &friendid_)));
          set_has_friendid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hide;
        break;
      }

      // optional bool hide = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hide_)));
          set_has_hide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientHideFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 friendid = 1;
  if (has_friendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->friendid(), output);
  }

  // optional bool hide = 2;
  if (has_hide()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->hide(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientHideFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 friendid = 1;
  if (has_friendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->friendid(), target);
  }

  // optional bool hide = 2;
  if (has_hide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->hide(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientHideFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 friendid = 1;
    if (has_friendid()) {
      total_size += 1 + 8;
    }

    // optional bool hide = 2;
    if (has_hide()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientHideFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientHideFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientHideFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientHideFriend::MergeFrom(const CMsgClientHideFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friendid()) {
      set_friendid(from.friendid());
    }
    if (from.has_hide()) {
      set_hide(from.hide());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientHideFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientHideFriend::CopyFrom(const CMsgClientHideFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientHideFriend::IsInitialized() const {

  return true;
}

void CMsgClientHideFriend::Swap(CMsgClientHideFriend* other) {
  if (other != this) {
    std::swap(friendid_, other->friendid_);
    std::swap(hide_, other->hide_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientHideFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientHideFriend_descriptor_;
  metadata.reflection = CMsgClientHideFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientFriendsList_Friend::kUlfriendidFieldNumber;
const int CMsgClientFriendsList_Friend::kEfriendrelationshipFieldNumber;
#endif  // !_MSC_VER

CMsgClientFriendsList_Friend::CMsgClientFriendsList_Friend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientFriendsList_Friend::InitAsDefaultInstance() {
}

CMsgClientFriendsList_Friend::CMsgClientFriendsList_Friend(const CMsgClientFriendsList_Friend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientFriendsList_Friend::SharedCtor() {
  _cached_size_ = 0;
  ulfriendid_ = GOOGLE_ULONGLONG(0);
  efriendrelationship_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientFriendsList_Friend::~CMsgClientFriendsList_Friend() {
  SharedDtor();
}

void CMsgClientFriendsList_Friend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientFriendsList_Friend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientFriendsList_Friend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientFriendsList_Friend_descriptor_;
}

const CMsgClientFriendsList_Friend& CMsgClientFriendsList_Friend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  return *default_instance_;
}

CMsgClientFriendsList_Friend* CMsgClientFriendsList_Friend::default_instance_ = NULL;

CMsgClientFriendsList_Friend* CMsgClientFriendsList_Friend::New() const {
  return new CMsgClientFriendsList_Friend;
}

void CMsgClientFriendsList_Friend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ulfriendid_ = GOOGLE_ULONGLONG(0);
    efriendrelationship_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientFriendsList_Friend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 ulfriendid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &ulfriendid_)));
          set_has_ulfriendid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_efriendrelationship;
        break;
      }

      // optional uint32 efriendrelationship = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_efriendrelationship:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &efriendrelationship_)));
          set_has_efriendrelationship();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientFriendsList_Friend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 ulfriendid = 1;
  if (has_ulfriendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->ulfriendid(), output);
  }

  // optional uint32 efriendrelationship = 2;
  if (has_efriendrelationship()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->efriendrelationship(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientFriendsList_Friend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 ulfriendid = 1;
  if (has_ulfriendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->ulfriendid(), target);
  }

  // optional uint32 efriendrelationship = 2;
  if (has_efriendrelationship()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->efriendrelationship(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientFriendsList_Friend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 ulfriendid = 1;
    if (has_ulfriendid()) {
      total_size += 1 + 8;
    }

    // optional uint32 efriendrelationship = 2;
    if (has_efriendrelationship()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->efriendrelationship());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientFriendsList_Friend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientFriendsList_Friend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientFriendsList_Friend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientFriendsList_Friend::MergeFrom(const CMsgClientFriendsList_Friend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ulfriendid()) {
      set_ulfriendid(from.ulfriendid());
    }
    if (from.has_efriendrelationship()) {
      set_efriendrelationship(from.efriendrelationship());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientFriendsList_Friend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientFriendsList_Friend::CopyFrom(const CMsgClientFriendsList_Friend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendsList_Friend::IsInitialized() const {

  return true;
}

void CMsgClientFriendsList_Friend::Swap(CMsgClientFriendsList_Friend* other) {
  if (other != this) {
    std::swap(ulfriendid_, other->ulfriendid_);
    std::swap(efriendrelationship_, other->efriendrelationship_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientFriendsList_Friend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientFriendsList_Friend_descriptor_;
  metadata.reflection = CMsgClientFriendsList_Friend_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientFriendsList::kBincrementalFieldNumber;
const int CMsgClientFriendsList::kFriendsFieldNumber;
const int CMsgClientFriendsList::kMaxFriendCountFieldNumber;
const int CMsgClientFriendsList::kActiveFriendCountFieldNumber;
const int CMsgClientFriendsList::kFriendsLimitHitFieldNumber;
#endif  // !_MSC_VER

CMsgClientFriendsList::CMsgClientFriendsList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientFriendsList::InitAsDefaultInstance() {
}

CMsgClientFriendsList::CMsgClientFriendsList(const CMsgClientFriendsList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientFriendsList::SharedCtor() {
  _cached_size_ = 0;
  bincremental_ = false;
  max_friend_count_ = 0u;
  active_friend_count_ = 0u;
  friends_limit_hit_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientFriendsList::~CMsgClientFriendsList() {
  SharedDtor();
}

void CMsgClientFriendsList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientFriendsList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientFriendsList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientFriendsList_descriptor_;
}

const CMsgClientFriendsList& CMsgClientFriendsList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  return *default_instance_;
}

CMsgClientFriendsList* CMsgClientFriendsList::default_instance_ = NULL;

CMsgClientFriendsList* CMsgClientFriendsList::New() const {
  return new CMsgClientFriendsList;
}

void CMsgClientFriendsList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bincremental_ = false;
    max_friend_count_ = 0u;
    active_friend_count_ = 0u;
    friends_limit_hit_ = false;
  }
  friends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientFriendsList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bincremental = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bincremental_)));
          set_has_bincremental();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friends;
        break;
      }

      // repeated .CMsgClientFriendsList.Friend friends = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friends;
        if (input->ExpectTag(24)) goto parse_max_friend_count;
        break;
      }

      // optional uint32 max_friend_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_friend_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_friend_count_)));
          set_has_max_friend_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_active_friend_count;
        break;
      }

      // optional uint32 active_friend_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_friend_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_friend_count_)));
          set_has_active_friend_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_friends_limit_hit;
        break;
      }

      // optional bool friends_limit_hit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friends_limit_hit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &friends_limit_hit_)));
          set_has_friends_limit_hit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientFriendsList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool bincremental = 1;
  if (has_bincremental()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bincremental(), output);
  }

  // repeated .CMsgClientFriendsList.Friend friends = 2;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->friends(i), output);
  }

  // optional uint32 max_friend_count = 3;
  if (has_max_friend_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_friend_count(), output);
  }

  // optional uint32 active_friend_count = 4;
  if (has_active_friend_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->active_friend_count(), output);
  }

  // optional bool friends_limit_hit = 5;
  if (has_friends_limit_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->friends_limit_hit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientFriendsList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool bincremental = 1;
  if (has_bincremental()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bincremental(), target);
  }

  // repeated .CMsgClientFriendsList.Friend friends = 2;
  for (int i = 0; i < this->friends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->friends(i), target);
  }

  // optional uint32 max_friend_count = 3;
  if (has_max_friend_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max_friend_count(), target);
  }

  // optional uint32 active_friend_count = 4;
  if (has_active_friend_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->active_friend_count(), target);
  }

  // optional bool friends_limit_hit = 5;
  if (has_friends_limit_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->friends_limit_hit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientFriendsList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool bincremental = 1;
    if (has_bincremental()) {
      total_size += 1 + 1;
    }

    // optional uint32 max_friend_count = 3;
    if (has_max_friend_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_friend_count());
    }

    // optional uint32 active_friend_count = 4;
    if (has_active_friend_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_friend_count());
    }

    // optional bool friends_limit_hit = 5;
    if (has_friends_limit_hit()) {
      total_size += 1 + 1;
    }

  }
  // repeated .CMsgClientFriendsList.Friend friends = 2;
  total_size += 1 * this->friends_size();
  for (int i = 0; i < this->friends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friends(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientFriendsList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientFriendsList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientFriendsList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientFriendsList::MergeFrom(const CMsgClientFriendsList& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_.MergeFrom(from.friends_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bincremental()) {
      set_bincremental(from.bincremental());
    }
    if (from.has_max_friend_count()) {
      set_max_friend_count(from.max_friend_count());
    }
    if (from.has_active_friend_count()) {
      set_active_friend_count(from.active_friend_count());
    }
    if (from.has_friends_limit_hit()) {
      set_friends_limit_hit(from.friends_limit_hit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientFriendsList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientFriendsList::CopyFrom(const CMsgClientFriendsList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendsList::IsInitialized() const {

  return true;
}

void CMsgClientFriendsList::Swap(CMsgClientFriendsList* other) {
  if (other != this) {
    std::swap(bincremental_, other->bincremental_);
    friends_.Swap(&other->friends_);
    std::swap(max_friend_count_, other->max_friend_count_);
    std::swap(active_friend_count_, other->active_friend_count_);
    std::swap(friends_limit_hit_, other->friends_limit_hit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientFriendsList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientFriendsList_descriptor_;
  metadata.reflection = CMsgClientFriendsList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientFriendsGroupsList_FriendGroup::kNGroupIDFieldNumber;
const int CMsgClientFriendsGroupsList_FriendGroup::kStrGroupNameFieldNumber;
#endif  // !_MSC_VER

CMsgClientFriendsGroupsList_FriendGroup::CMsgClientFriendsGroupsList_FriendGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientFriendsGroupsList_FriendGroup::InitAsDefaultInstance() {
}

CMsgClientFriendsGroupsList_FriendGroup::CMsgClientFriendsGroupsList_FriendGroup(const CMsgClientFriendsGroupsList_FriendGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientFriendsGroupsList_FriendGroup::SharedCtor() {
  _cached_size_ = 0;
  ngroupid_ = 0;
  strgroupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientFriendsGroupsList_FriendGroup::~CMsgClientFriendsGroupsList_FriendGroup() {
  SharedDtor();
}

void CMsgClientFriendsGroupsList_FriendGroup::SharedDtor() {
  if (strgroupname_ != &::google::protobuf::internal::kEmptyString) {
    delete strgroupname_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientFriendsGroupsList_FriendGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientFriendsGroupsList_FriendGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientFriendsGroupsList_FriendGroup_descriptor_;
}

const CMsgClientFriendsGroupsList_FriendGroup& CMsgClientFriendsGroupsList_FriendGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  return *default_instance_;
}

CMsgClientFriendsGroupsList_FriendGroup* CMsgClientFriendsGroupsList_FriendGroup::default_instance_ = NULL;

CMsgClientFriendsGroupsList_FriendGroup* CMsgClientFriendsGroupsList_FriendGroup::New() const {
  return new CMsgClientFriendsGroupsList_FriendGroup;
}

void CMsgClientFriendsGroupsList_FriendGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ngroupid_ = 0;
    if (has_strgroupname()) {
      if (strgroupname_ != &::google::protobuf::internal::kEmptyString) {
        strgroupname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientFriendsGroupsList_FriendGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nGroupID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ngroupid_)));
          set_has_ngroupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strGroupName;
        break;
      }

      // optional string strGroupName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strGroupName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strgroupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strgroupname().data(), this->strgroupname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientFriendsGroupsList_FriendGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 nGroupID = 1;
  if (has_ngroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ngroupid(), output);
  }

  // optional string strGroupName = 2;
  if (has_strgroupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strgroupname().data(), this->strgroupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strgroupname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientFriendsGroupsList_FriendGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nGroupID = 1;
  if (has_ngroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ngroupid(), target);
  }

  // optional string strGroupName = 2;
  if (has_strgroupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strgroupname().data(), this->strgroupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strgroupname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientFriendsGroupsList_FriendGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nGroupID = 1;
    if (has_ngroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ngroupid());
    }

    // optional string strGroupName = 2;
    if (has_strgroupname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strgroupname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientFriendsGroupsList_FriendGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientFriendsGroupsList_FriendGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientFriendsGroupsList_FriendGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientFriendsGroupsList_FriendGroup::MergeFrom(const CMsgClientFriendsGroupsList_FriendGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ngroupid()) {
      set_ngroupid(from.ngroupid());
    }
    if (from.has_strgroupname()) {
      set_strgroupname(from.strgroupname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientFriendsGroupsList_FriendGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientFriendsGroupsList_FriendGroup::CopyFrom(const CMsgClientFriendsGroupsList_FriendGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendsGroupsList_FriendGroup::IsInitialized() const {

  return true;
}

void CMsgClientFriendsGroupsList_FriendGroup::Swap(CMsgClientFriendsGroupsList_FriendGroup* other) {
  if (other != this) {
    std::swap(ngroupid_, other->ngroupid_);
    std::swap(strgroupname_, other->strgroupname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientFriendsGroupsList_FriendGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientFriendsGroupsList_FriendGroup_descriptor_;
  metadata.reflection = CMsgClientFriendsGroupsList_FriendGroup_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientFriendsGroupsList_FriendGroupsMembership::kUlSteamIDFieldNumber;
const int CMsgClientFriendsGroupsList_FriendGroupsMembership::kNGroupIDFieldNumber;
#endif  // !_MSC_VER

CMsgClientFriendsGroupsList_FriendGroupsMembership::CMsgClientFriendsGroupsList_FriendGroupsMembership()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::InitAsDefaultInstance() {
}

CMsgClientFriendsGroupsList_FriendGroupsMembership::CMsgClientFriendsGroupsList_FriendGroupsMembership(const CMsgClientFriendsGroupsList_FriendGroupsMembership& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::SharedCtor() {
  _cached_size_ = 0;
  ulsteamid_ = GOOGLE_ULONGLONG(0);
  ngroupid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientFriendsGroupsList_FriendGroupsMembership::~CMsgClientFriendsGroupsList_FriendGroupsMembership() {
  SharedDtor();
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientFriendsGroupsList_FriendGroupsMembership::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientFriendsGroupsList_FriendGroupsMembership_descriptor_;
}

const CMsgClientFriendsGroupsList_FriendGroupsMembership& CMsgClientFriendsGroupsList_FriendGroupsMembership::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  return *default_instance_;
}

CMsgClientFriendsGroupsList_FriendGroupsMembership* CMsgClientFriendsGroupsList_FriendGroupsMembership::default_instance_ = NULL;

CMsgClientFriendsGroupsList_FriendGroupsMembership* CMsgClientFriendsGroupsList_FriendGroupsMembership::New() const {
  return new CMsgClientFriendsGroupsList_FriendGroupsMembership;
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ulsteamid_ = GOOGLE_ULONGLONG(0);
    ngroupid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientFriendsGroupsList_FriendGroupsMembership::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 ulSteamID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &ulsteamid_)));
          set_has_ulsteamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nGroupID;
        break;
      }

      // optional int32 nGroupID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nGroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ngroupid_)));
          set_has_ngroupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 ulSteamID = 1;
  if (has_ulsteamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->ulsteamid(), output);
  }

  // optional int32 nGroupID = 2;
  if (has_ngroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ngroupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientFriendsGroupsList_FriendGroupsMembership::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 ulSteamID = 1;
  if (has_ulsteamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->ulsteamid(), target);
  }

  // optional int32 nGroupID = 2;
  if (has_ngroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ngroupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientFriendsGroupsList_FriendGroupsMembership::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 ulSteamID = 1;
    if (has_ulsteamid()) {
      total_size += 1 + 8;
    }

    // optional int32 nGroupID = 2;
    if (has_ngroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ngroupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientFriendsGroupsList_FriendGroupsMembership* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientFriendsGroupsList_FriendGroupsMembership*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::MergeFrom(const CMsgClientFriendsGroupsList_FriendGroupsMembership& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ulsteamid()) {
      set_ulsteamid(from.ulsteamid());
    }
    if (from.has_ngroupid()) {
      set_ngroupid(from.ngroupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::CopyFrom(const CMsgClientFriendsGroupsList_FriendGroupsMembership& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendsGroupsList_FriendGroupsMembership::IsInitialized() const {

  return true;
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::Swap(CMsgClientFriendsGroupsList_FriendGroupsMembership* other) {
  if (other != this) {
    std::swap(ulsteamid_, other->ulsteamid_);
    std::swap(ngroupid_, other->ngroupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientFriendsGroupsList_FriendGroupsMembership::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientFriendsGroupsList_FriendGroupsMembership_descriptor_;
  metadata.reflection = CMsgClientFriendsGroupsList_FriendGroupsMembership_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientFriendsGroupsList::kBremovalFieldNumber;
const int CMsgClientFriendsGroupsList::kBincrementalFieldNumber;
const int CMsgClientFriendsGroupsList::kFriendGroupsFieldNumber;
const int CMsgClientFriendsGroupsList::kMembershipsFieldNumber;
#endif  // !_MSC_VER

CMsgClientFriendsGroupsList::CMsgClientFriendsGroupsList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientFriendsGroupsList::InitAsDefaultInstance() {
}

CMsgClientFriendsGroupsList::CMsgClientFriendsGroupsList(const CMsgClientFriendsGroupsList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientFriendsGroupsList::SharedCtor() {
  _cached_size_ = 0;
  bremoval_ = false;
  bincremental_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientFriendsGroupsList::~CMsgClientFriendsGroupsList() {
  SharedDtor();
}

void CMsgClientFriendsGroupsList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientFriendsGroupsList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientFriendsGroupsList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientFriendsGroupsList_descriptor_;
}

const CMsgClientFriendsGroupsList& CMsgClientFriendsGroupsList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  return *default_instance_;
}

CMsgClientFriendsGroupsList* CMsgClientFriendsGroupsList::default_instance_ = NULL;

CMsgClientFriendsGroupsList* CMsgClientFriendsGroupsList::New() const {
  return new CMsgClientFriendsGroupsList;
}

void CMsgClientFriendsGroupsList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bremoval_ = false;
    bincremental_ = false;
  }
  friendgroups_.Clear();
  memberships_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientFriendsGroupsList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bremoval = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bremoval_)));
          set_has_bremoval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bincremental;
        break;
      }

      // optional bool bincremental = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bincremental:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bincremental_)));
          set_has_bincremental();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_friendGroups;
        break;
      }

      // repeated .CMsgClientFriendsGroupsList.FriendGroup friendGroups = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendGroups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friendgroups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_friendGroups;
        if (input->ExpectTag(34)) goto parse_memberships;
        break;
      }

      // repeated .CMsgClientFriendsGroupsList.FriendGroupsMembership memberships = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_memberships:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memberships()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_memberships;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientFriendsGroupsList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool bremoval = 1;
  if (has_bremoval()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bremoval(), output);
  }

  // optional bool bincremental = 2;
  if (has_bincremental()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bincremental(), output);
  }

  // repeated .CMsgClientFriendsGroupsList.FriendGroup friendGroups = 3;
  for (int i = 0; i < this->friendgroups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->friendgroups(i), output);
  }

  // repeated .CMsgClientFriendsGroupsList.FriendGroupsMembership memberships = 4;
  for (int i = 0; i < this->memberships_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->memberships(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientFriendsGroupsList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool bremoval = 1;
  if (has_bremoval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bremoval(), target);
  }

  // optional bool bincremental = 2;
  if (has_bincremental()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bincremental(), target);
  }

  // repeated .CMsgClientFriendsGroupsList.FriendGroup friendGroups = 3;
  for (int i = 0; i < this->friendgroups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->friendgroups(i), target);
  }

  // repeated .CMsgClientFriendsGroupsList.FriendGroupsMembership memberships = 4;
  for (int i = 0; i < this->memberships_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->memberships(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientFriendsGroupsList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool bremoval = 1;
    if (has_bremoval()) {
      total_size += 1 + 1;
    }

    // optional bool bincremental = 2;
    if (has_bincremental()) {
      total_size += 1 + 1;
    }

  }
  // repeated .CMsgClientFriendsGroupsList.FriendGroup friendGroups = 3;
  total_size += 1 * this->friendgroups_size();
  for (int i = 0; i < this->friendgroups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friendgroups(i));
  }

  // repeated .CMsgClientFriendsGroupsList.FriendGroupsMembership memberships = 4;
  total_size += 1 * this->memberships_size();
  for (int i = 0; i < this->memberships_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->memberships(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientFriendsGroupsList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientFriendsGroupsList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientFriendsGroupsList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientFriendsGroupsList::MergeFrom(const CMsgClientFriendsGroupsList& from) {
  GOOGLE_CHECK_NE(&from, this);
  friendgroups_.MergeFrom(from.friendgroups_);
  memberships_.MergeFrom(from.memberships_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bremoval()) {
      set_bremoval(from.bremoval());
    }
    if (from.has_bincremental()) {
      set_bincremental(from.bincremental());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientFriendsGroupsList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientFriendsGroupsList::CopyFrom(const CMsgClientFriendsGroupsList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendsGroupsList::IsInitialized() const {

  return true;
}

void CMsgClientFriendsGroupsList::Swap(CMsgClientFriendsGroupsList* other) {
  if (other != this) {
    std::swap(bremoval_, other->bremoval_);
    std::swap(bincremental_, other->bincremental_);
    friendgroups_.Swap(&other->friendgroups_);
    memberships_.Swap(&other->memberships_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientFriendsGroupsList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientFriendsGroupsList_descriptor_;
  metadata.reflection = CMsgClientFriendsGroupsList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientPlayerNicknameList_PlayerNickname::kSteamidFieldNumber;
const int CMsgClientPlayerNicknameList_PlayerNickname::kNicknameFieldNumber;
#endif  // !_MSC_VER

CMsgClientPlayerNicknameList_PlayerNickname::CMsgClientPlayerNicknameList_PlayerNickname()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientPlayerNicknameList_PlayerNickname::InitAsDefaultInstance() {
}

CMsgClientPlayerNicknameList_PlayerNickname::CMsgClientPlayerNicknameList_PlayerNickname(const CMsgClientPlayerNicknameList_PlayerNickname& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientPlayerNicknameList_PlayerNickname::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientPlayerNicknameList_PlayerNickname::~CMsgClientPlayerNicknameList_PlayerNickname() {
  SharedDtor();
}

void CMsgClientPlayerNicknameList_PlayerNickname::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientPlayerNicknameList_PlayerNickname::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientPlayerNicknameList_PlayerNickname::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientPlayerNicknameList_PlayerNickname_descriptor_;
}

const CMsgClientPlayerNicknameList_PlayerNickname& CMsgClientPlayerNicknameList_PlayerNickname::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  return *default_instance_;
}

CMsgClientPlayerNicknameList_PlayerNickname* CMsgClientPlayerNicknameList_PlayerNickname::default_instance_ = NULL;

CMsgClientPlayerNicknameList_PlayerNickname* CMsgClientPlayerNicknameList_PlayerNickname::New() const {
  return new CMsgClientPlayerNicknameList_PlayerNickname;
}

void CMsgClientPlayerNicknameList_PlayerNickname::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_ = GOOGLE_ULONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientPlayerNicknameList_PlayerNickname::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // optional string nickname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientPlayerNicknameList_PlayerNickname::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientPlayerNicknameList_PlayerNickname::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientPlayerNicknameList_PlayerNickname::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional string nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientPlayerNicknameList_PlayerNickname::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientPlayerNicknameList_PlayerNickname* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientPlayerNicknameList_PlayerNickname*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientPlayerNicknameList_PlayerNickname::MergeFrom(const CMsgClientPlayerNicknameList_PlayerNickname& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientPlayerNicknameList_PlayerNickname::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPlayerNicknameList_PlayerNickname::CopyFrom(const CMsgClientPlayerNicknameList_PlayerNickname& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPlayerNicknameList_PlayerNickname::IsInitialized() const {

  return true;
}

void CMsgClientPlayerNicknameList_PlayerNickname::Swap(CMsgClientPlayerNicknameList_PlayerNickname* other) {
  if (other != this) {
    std::swap(steamid_, other->steamid_);
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientPlayerNicknameList_PlayerNickname::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientPlayerNicknameList_PlayerNickname_descriptor_;
  metadata.reflection = CMsgClientPlayerNicknameList_PlayerNickname_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientPlayerNicknameList::kRemovalFieldNumber;
const int CMsgClientPlayerNicknameList::kIncrementalFieldNumber;
const int CMsgClientPlayerNicknameList::kNicknamesFieldNumber;
#endif  // !_MSC_VER

CMsgClientPlayerNicknameList::CMsgClientPlayerNicknameList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientPlayerNicknameList::InitAsDefaultInstance() {
}

CMsgClientPlayerNicknameList::CMsgClientPlayerNicknameList(const CMsgClientPlayerNicknameList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientPlayerNicknameList::SharedCtor() {
  _cached_size_ = 0;
  removal_ = false;
  incremental_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientPlayerNicknameList::~CMsgClientPlayerNicknameList() {
  SharedDtor();
}

void CMsgClientPlayerNicknameList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientPlayerNicknameList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientPlayerNicknameList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientPlayerNicknameList_descriptor_;
}

const CMsgClientPlayerNicknameList& CMsgClientPlayerNicknameList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  return *default_instance_;
}

CMsgClientPlayerNicknameList* CMsgClientPlayerNicknameList::default_instance_ = NULL;

CMsgClientPlayerNicknameList* CMsgClientPlayerNicknameList::New() const {
  return new CMsgClientPlayerNicknameList;
}

void CMsgClientPlayerNicknameList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    removal_ = false;
    incremental_ = false;
  }
  nicknames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientPlayerNicknameList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool removal = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &removal_)));
          set_has_removal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_incremental;
        break;
      }

      // optional bool incremental = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_incremental:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &incremental_)));
          set_has_incremental();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nicknames;
        break;
      }

      // repeated .CMsgClientPlayerNicknameList.PlayerNickname nicknames = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nicknames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nicknames()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nicknames;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientPlayerNicknameList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool removal = 1;
  if (has_removal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->removal(), output);
  }

  // optional bool incremental = 2;
  if (has_incremental()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->incremental(), output);
  }

  // repeated .CMsgClientPlayerNicknameList.PlayerNickname nicknames = 3;
  for (int i = 0; i < this->nicknames_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->nicknames(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientPlayerNicknameList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool removal = 1;
  if (has_removal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->removal(), target);
  }

  // optional bool incremental = 2;
  if (has_incremental()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->incremental(), target);
  }

  // repeated .CMsgClientPlayerNicknameList.PlayerNickname nicknames = 3;
  for (int i = 0; i < this->nicknames_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->nicknames(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientPlayerNicknameList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool removal = 1;
    if (has_removal()) {
      total_size += 1 + 1;
    }

    // optional bool incremental = 2;
    if (has_incremental()) {
      total_size += 1 + 1;
    }

  }
  // repeated .CMsgClientPlayerNicknameList.PlayerNickname nicknames = 3;
  total_size += 1 * this->nicknames_size();
  for (int i = 0; i < this->nicknames_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nicknames(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientPlayerNicknameList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientPlayerNicknameList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientPlayerNicknameList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientPlayerNicknameList::MergeFrom(const CMsgClientPlayerNicknameList& from) {
  GOOGLE_CHECK_NE(&from, this);
  nicknames_.MergeFrom(from.nicknames_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_removal()) {
      set_removal(from.removal());
    }
    if (from.has_incremental()) {
      set_incremental(from.incremental());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientPlayerNicknameList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPlayerNicknameList::CopyFrom(const CMsgClientPlayerNicknameList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPlayerNicknameList::IsInitialized() const {

  return true;
}

void CMsgClientPlayerNicknameList::Swap(CMsgClientPlayerNicknameList* other) {
  if (other != this) {
    std::swap(removal_, other->removal_);
    std::swap(incremental_, other->incremental_);
    nicknames_.Swap(&other->nicknames_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientPlayerNicknameList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientPlayerNicknameList_descriptor_;
  metadata.reflection = CMsgClientPlayerNicknameList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientSetPlayerNickname::kSteamidFieldNumber;
const int CMsgClientSetPlayerNickname::kNicknameFieldNumber;
#endif  // !_MSC_VER

CMsgClientSetPlayerNickname::CMsgClientSetPlayerNickname()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientSetPlayerNickname::InitAsDefaultInstance() {
}

CMsgClientSetPlayerNickname::CMsgClientSetPlayerNickname(const CMsgClientSetPlayerNickname& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientSetPlayerNickname::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientSetPlayerNickname::~CMsgClientSetPlayerNickname() {
  SharedDtor();
}

void CMsgClientSetPlayerNickname::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientSetPlayerNickname::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientSetPlayerNickname::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientSetPlayerNickname_descriptor_;
}

const CMsgClientSetPlayerNickname& CMsgClientSetPlayerNickname::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  return *default_instance_;
}

CMsgClientSetPlayerNickname* CMsgClientSetPlayerNickname::default_instance_ = NULL;

CMsgClientSetPlayerNickname* CMsgClientSetPlayerNickname::New() const {
  return new CMsgClientSetPlayerNickname;
}

void CMsgClientSetPlayerNickname::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_ = GOOGLE_ULONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientSetPlayerNickname::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientSetPlayerNickname::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientSetPlayerNickname::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientSetPlayerNickname::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientSetPlayerNickname::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientSetPlayerNickname* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientSetPlayerNickname*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientSetPlayerNickname::MergeFrom(const CMsgClientSetPlayerNickname& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientSetPlayerNickname::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSetPlayerNickname::CopyFrom(const CMsgClientSetPlayerNickname& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSetPlayerNickname::IsInitialized() const {

  return true;
}

void CMsgClientSetPlayerNickname::Swap(CMsgClientSetPlayerNickname* other) {
  if (other != this) {
    std::swap(steamid_, other->steamid_);
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientSetPlayerNickname::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientSetPlayerNickname_descriptor_;
  metadata.reflection = CMsgClientSetPlayerNickname_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientSetPlayerNicknameResponse::kEresultFieldNumber;
#endif  // !_MSC_VER

CMsgClientSetPlayerNicknameResponse::CMsgClientSetPlayerNicknameResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientSetPlayerNicknameResponse::InitAsDefaultInstance() {
}

CMsgClientSetPlayerNicknameResponse::CMsgClientSetPlayerNicknameResponse(const CMsgClientSetPlayerNicknameResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientSetPlayerNicknameResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientSetPlayerNicknameResponse::~CMsgClientSetPlayerNicknameResponse() {
  SharedDtor();
}

void CMsgClientSetPlayerNicknameResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientSetPlayerNicknameResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientSetPlayerNicknameResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientSetPlayerNicknameResponse_descriptor_;
}

const CMsgClientSetPlayerNicknameResponse& CMsgClientSetPlayerNicknameResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  return *default_instance_;
}

CMsgClientSetPlayerNicknameResponse* CMsgClientSetPlayerNicknameResponse::default_instance_ = NULL;

CMsgClientSetPlayerNicknameResponse* CMsgClientSetPlayerNicknameResponse::New() const {
  return new CMsgClientSetPlayerNicknameResponse;
}

void CMsgClientSetPlayerNicknameResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientSetPlayerNicknameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientSetPlayerNicknameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eresult = 1;
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientSetPlayerNicknameResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 eresult = 1;
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientSetPlayerNicknameResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eresult = 1;
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientSetPlayerNicknameResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientSetPlayerNicknameResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientSetPlayerNicknameResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientSetPlayerNicknameResponse::MergeFrom(const CMsgClientSetPlayerNicknameResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientSetPlayerNicknameResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSetPlayerNicknameResponse::CopyFrom(const CMsgClientSetPlayerNicknameResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSetPlayerNicknameResponse::IsInitialized() const {

  return true;
}

void CMsgClientSetPlayerNicknameResponse::Swap(CMsgClientSetPlayerNicknameResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientSetPlayerNicknameResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientSetPlayerNicknameResponse_descriptor_;
  metadata.reflection = CMsgClientSetPlayerNicknameResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRequestFriendData::kPersonaStateRequestedFieldNumber;
const int CMsgClientRequestFriendData::kFriendsFieldNumber;
#endif  // !_MSC_VER

CMsgClientRequestFriendData::CMsgClientRequestFriendData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientRequestFriendData::InitAsDefaultInstance() {
}

CMsgClientRequestFriendData::CMsgClientRequestFriendData(const CMsgClientRequestFriendData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRequestFriendData::SharedCtor() {
  _cached_size_ = 0;
  persona_state_requested_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRequestFriendData::~CMsgClientRequestFriendData() {
  SharedDtor();
}

void CMsgClientRequestFriendData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientRequestFriendData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRequestFriendData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientRequestFriendData_descriptor_;
}

const CMsgClientRequestFriendData& CMsgClientRequestFriendData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  return *default_instance_;
}

CMsgClientRequestFriendData* CMsgClientRequestFriendData::default_instance_ = NULL;

CMsgClientRequestFriendData* CMsgClientRequestFriendData::New() const {
  return new CMsgClientRequestFriendData;
}

void CMsgClientRequestFriendData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    persona_state_requested_ = 0u;
  }
  friends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientRequestFriendData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 persona_state_requested = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &persona_state_requested_)));
          set_has_persona_state_requested();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_friends;
        break;
      }

      // repeated fixed64 friends = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_friends:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17, input, this->mutable_friends())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_friends())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_friends;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRequestFriendData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 persona_state_requested = 1;
  if (has_persona_state_requested()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->persona_state_requested(), output);
  }

  // repeated fixed64 friends = 2;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->friends(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientRequestFriendData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 persona_state_requested = 1;
  if (has_persona_state_requested()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->persona_state_requested(), target);
  }

  // repeated fixed64 friends = 2;
  for (int i = 0; i < this->friends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(2, this->friends(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientRequestFriendData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 persona_state_requested = 1;
    if (has_persona_state_requested()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->persona_state_requested());
    }

  }
  // repeated fixed64 friends = 2;
  {
    int data_size = 0;
    data_size = 8 * this->friends_size();
    total_size += 1 * this->friends_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestFriendData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientRequestFriendData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientRequestFriendData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientRequestFriendData::MergeFrom(const CMsgClientRequestFriendData& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_.MergeFrom(from.friends_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_persona_state_requested()) {
      set_persona_state_requested(from.persona_state_requested());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientRequestFriendData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRequestFriendData::CopyFrom(const CMsgClientRequestFriendData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestFriendData::IsInitialized() const {

  return true;
}

void CMsgClientRequestFriendData::Swap(CMsgClientRequestFriendData* other) {
  if (other != this) {
    std::swap(persona_state_requested_, other->persona_state_requested_);
    friends_.Swap(&other->friends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientRequestFriendData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientRequestFriendData_descriptor_;
  metadata.reflection = CMsgClientRequestFriendData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientChangeStatus::kPersonaStateFieldNumber;
const int CMsgClientChangeStatus::kPlayerNameFieldNumber;
const int CMsgClientChangeStatus::kIsAutoGeneratedNameFieldNumber;
const int CMsgClientChangeStatus::kHighPriorityFieldNumber;
const int CMsgClientChangeStatus::kPersonaSetByUserFieldNumber;
const int CMsgClientChangeStatus::kPersonaStateFlagsFieldNumber;
const int CMsgClientChangeStatus::kNeedPersonaResponseFieldNumber;
const int CMsgClientChangeStatus::kIsClientIdleFieldNumber;
#endif  // !_MSC_VER

CMsgClientChangeStatus::CMsgClientChangeStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientChangeStatus::InitAsDefaultInstance() {
}

CMsgClientChangeStatus::CMsgClientChangeStatus(const CMsgClientChangeStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientChangeStatus::SharedCtor() {
  _cached_size_ = 0;
  persona_state_ = 0u;
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_auto_generated_name_ = false;
  high_priority_ = false;
  persona_set_by_user_ = false;
  persona_state_flags_ = 0u;
  need_persona_response_ = false;
  is_client_idle_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientChangeStatus::~CMsgClientChangeStatus() {
  SharedDtor();
}

void CMsgClientChangeStatus::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientChangeStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientChangeStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientChangeStatus_descriptor_;
}

const CMsgClientChangeStatus& CMsgClientChangeStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  return *default_instance_;
}

CMsgClientChangeStatus* CMsgClientChangeStatus::default_instance_ = NULL;

CMsgClientChangeStatus* CMsgClientChangeStatus::New() const {
  return new CMsgClientChangeStatus;
}

void CMsgClientChangeStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    persona_state_ = 0u;
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    is_auto_generated_name_ = false;
    high_priority_ = false;
    persona_set_by_user_ = false;
    persona_state_flags_ = 0u;
    need_persona_response_ = false;
    is_client_idle_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientChangeStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 persona_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &persona_state_)));
          set_has_persona_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_name;
        break;
      }

      // optional string player_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_auto_generated_name;
        break;
      }

      // optional bool is_auto_generated_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_auto_generated_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_auto_generated_name_)));
          set_has_is_auto_generated_name();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_high_priority;
        break;
      }

      // optional bool high_priority = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_high_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &high_priority_)));
          set_has_high_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_persona_set_by_user;
        break;
      }

      // optional bool persona_set_by_user = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_persona_set_by_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &persona_set_by_user_)));
          set_has_persona_set_by_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_persona_state_flags;
        break;
      }

      // optional uint32 persona_state_flags = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_persona_state_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &persona_state_flags_)));
          set_has_persona_state_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_need_persona_response;
        break;
      }

      // optional bool need_persona_response = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_persona_response:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_persona_response_)));
          set_has_need_persona_response();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_is_client_idle;
        break;
      }

      // optional bool is_client_idle = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_client_idle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_client_idle_)));
          set_has_is_client_idle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientChangeStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 persona_state = 1;
  if (has_persona_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->persona_state(), output);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->player_name(), output);
  }

  // optional bool is_auto_generated_name = 3;
  if (has_is_auto_generated_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_auto_generated_name(), output);
  }

  // optional bool high_priority = 4;
  if (has_high_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->high_priority(), output);
  }

  // optional bool persona_set_by_user = 5;
  if (has_persona_set_by_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->persona_set_by_user(), output);
  }

  // optional uint32 persona_state_flags = 6 [default = 0];
  if (has_persona_state_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->persona_state_flags(), output);
  }

  // optional bool need_persona_response = 7;
  if (has_need_persona_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->need_persona_response(), output);
  }

  // optional bool is_client_idle = 8;
  if (has_is_client_idle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_client_idle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientChangeStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 persona_state = 1;
  if (has_persona_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->persona_state(), target);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  // optional bool is_auto_generated_name = 3;
  if (has_is_auto_generated_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_auto_generated_name(), target);
  }

  // optional bool high_priority = 4;
  if (has_high_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->high_priority(), target);
  }

  // optional bool persona_set_by_user = 5;
  if (has_persona_set_by_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->persona_set_by_user(), target);
  }

  // optional uint32 persona_state_flags = 6 [default = 0];
  if (has_persona_state_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->persona_state_flags(), target);
  }

  // optional bool need_persona_response = 7;
  if (has_need_persona_response()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->need_persona_response(), target);
  }

  // optional bool is_client_idle = 8;
  if (has_is_client_idle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_client_idle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientChangeStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 persona_state = 1;
    if (has_persona_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->persona_state());
    }

    // optional string player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional bool is_auto_generated_name = 3;
    if (has_is_auto_generated_name()) {
      total_size += 1 + 1;
    }

    // optional bool high_priority = 4;
    if (has_high_priority()) {
      total_size += 1 + 1;
    }

    // optional bool persona_set_by_user = 5;
    if (has_persona_set_by_user()) {
      total_size += 1 + 1;
    }

    // optional uint32 persona_state_flags = 6 [default = 0];
    if (has_persona_state_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->persona_state_flags());
    }

    // optional bool need_persona_response = 7;
    if (has_need_persona_response()) {
      total_size += 1 + 1;
    }

    // optional bool is_client_idle = 8;
    if (has_is_client_idle()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientChangeStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientChangeStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientChangeStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientChangeStatus::MergeFrom(const CMsgClientChangeStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_persona_state()) {
      set_persona_state(from.persona_state());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_is_auto_generated_name()) {
      set_is_auto_generated_name(from.is_auto_generated_name());
    }
    if (from.has_high_priority()) {
      set_high_priority(from.high_priority());
    }
    if (from.has_persona_set_by_user()) {
      set_persona_set_by_user(from.persona_set_by_user());
    }
    if (from.has_persona_state_flags()) {
      set_persona_state_flags(from.persona_state_flags());
    }
    if (from.has_need_persona_response()) {
      set_need_persona_response(from.need_persona_response());
    }
    if (from.has_is_client_idle()) {
      set_is_client_idle(from.is_client_idle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientChangeStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientChangeStatus::CopyFrom(const CMsgClientChangeStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientChangeStatus::IsInitialized() const {

  return true;
}

void CMsgClientChangeStatus::Swap(CMsgClientChangeStatus* other) {
  if (other != this) {
    std::swap(persona_state_, other->persona_state_);
    std::swap(player_name_, other->player_name_);
    std::swap(is_auto_generated_name_, other->is_auto_generated_name_);
    std::swap(high_priority_, other->high_priority_);
    std::swap(persona_set_by_user_, other->persona_set_by_user_);
    std::swap(persona_state_flags_, other->persona_state_flags_);
    std::swap(need_persona_response_, other->need_persona_response_);
    std::swap(is_client_idle_, other->is_client_idle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientChangeStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientChangeStatus_descriptor_;
  metadata.reflection = CMsgClientChangeStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPersonaChangeResponse::kResultFieldNumber;
const int CMsgPersonaChangeResponse::kPlayerNameFieldNumber;
#endif  // !_MSC_VER

CMsgPersonaChangeResponse::CMsgPersonaChangeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgPersonaChangeResponse::InitAsDefaultInstance() {
}

CMsgPersonaChangeResponse::CMsgPersonaChangeResponse(const CMsgPersonaChangeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPersonaChangeResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPersonaChangeResponse::~CMsgPersonaChangeResponse() {
  SharedDtor();
}

void CMsgPersonaChangeResponse::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgPersonaChangeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPersonaChangeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPersonaChangeResponse_descriptor_;
}

const CMsgPersonaChangeResponse& CMsgPersonaChangeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  return *default_instance_;
}

CMsgPersonaChangeResponse* CMsgPersonaChangeResponse::default_instance_ = NULL;

CMsgPersonaChangeResponse* CMsgPersonaChangeResponse::New() const {
  return new CMsgPersonaChangeResponse;
}

void CMsgPersonaChangeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPersonaChangeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_name;
        break;
      }

      // optional string player_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPersonaChangeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->player_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgPersonaChangeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgPersonaChangeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional string player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPersonaChangeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPersonaChangeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPersonaChangeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPersonaChangeResponse::MergeFrom(const CMsgPersonaChangeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPersonaChangeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPersonaChangeResponse::CopyFrom(const CMsgPersonaChangeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPersonaChangeResponse::IsInitialized() const {

  return true;
}

void CMsgPersonaChangeResponse::Swap(CMsgPersonaChangeResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(player_name_, other->player_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPersonaChangeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPersonaChangeResponse_descriptor_;
  metadata.reflection = CMsgPersonaChangeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientPersonaState_Friend_ClanData::kOggAppIdFieldNumber;
const int CMsgClientPersonaState_Friend_ClanData::kChatGroupIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientPersonaState_Friend_ClanData::CMsgClientPersonaState_Friend_ClanData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientPersonaState_Friend_ClanData::InitAsDefaultInstance() {
}

CMsgClientPersonaState_Friend_ClanData::CMsgClientPersonaState_Friend_ClanData(const CMsgClientPersonaState_Friend_ClanData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientPersonaState_Friend_ClanData::SharedCtor() {
  _cached_size_ = 0;
  ogg_app_id_ = 0u;
  chat_group_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientPersonaState_Friend_ClanData::~CMsgClientPersonaState_Friend_ClanData() {
  SharedDtor();
}

void CMsgClientPersonaState_Friend_ClanData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientPersonaState_Friend_ClanData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientPersonaState_Friend_ClanData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientPersonaState_Friend_ClanData_descriptor_;
}

const CMsgClientPersonaState_Friend_ClanData& CMsgClientPersonaState_Friend_ClanData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  return *default_instance_;
}

CMsgClientPersonaState_Friend_ClanData* CMsgClientPersonaState_Friend_ClanData::default_instance_ = NULL;

CMsgClientPersonaState_Friend_ClanData* CMsgClientPersonaState_Friend_ClanData::New() const {
  return new CMsgClientPersonaState_Friend_ClanData;
}

void CMsgClientPersonaState_Friend_ClanData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ogg_app_id_ = 0u;
    chat_group_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientPersonaState_Friend_ClanData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ogg_app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ogg_app_id_)));
          set_has_ogg_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chat_group_id;
        break;
      }

      // optional uint64 chat_group_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chat_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_group_id_)));
          set_has_chat_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientPersonaState_Friend_ClanData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ogg_app_id = 1;
  if (has_ogg_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ogg_app_id(), output);
  }

  // optional uint64 chat_group_id = 2;
  if (has_chat_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->chat_group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientPersonaState_Friend_ClanData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ogg_app_id = 1;
  if (has_ogg_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ogg_app_id(), target);
  }

  // optional uint64 chat_group_id = 2;
  if (has_chat_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->chat_group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientPersonaState_Friend_ClanData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ogg_app_id = 1;
    if (has_ogg_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ogg_app_id());
    }

    // optional uint64 chat_group_id = 2;
    if (has_chat_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientPersonaState_Friend_ClanData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientPersonaState_Friend_ClanData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientPersonaState_Friend_ClanData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientPersonaState_Friend_ClanData::MergeFrom(const CMsgClientPersonaState_Friend_ClanData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ogg_app_id()) {
      set_ogg_app_id(from.ogg_app_id());
    }
    if (from.has_chat_group_id()) {
      set_chat_group_id(from.chat_group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientPersonaState_Friend_ClanData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPersonaState_Friend_ClanData::CopyFrom(const CMsgClientPersonaState_Friend_ClanData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPersonaState_Friend_ClanData::IsInitialized() const {

  return true;
}

void CMsgClientPersonaState_Friend_ClanData::Swap(CMsgClientPersonaState_Friend_ClanData* other) {
  if (other != this) {
    std::swap(ogg_app_id_, other->ogg_app_id_);
    std::swap(chat_group_id_, other->chat_group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientPersonaState_Friend_ClanData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientPersonaState_Friend_ClanData_descriptor_;
  metadata.reflection = CMsgClientPersonaState_Friend_ClanData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientPersonaState_Friend_KV::kKeyFieldNumber;
const int CMsgClientPersonaState_Friend_KV::kValueFieldNumber;
#endif  // !_MSC_VER

CMsgClientPersonaState_Friend_KV::CMsgClientPersonaState_Friend_KV()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientPersonaState_Friend_KV::InitAsDefaultInstance() {
}

CMsgClientPersonaState_Friend_KV::CMsgClientPersonaState_Friend_KV(const CMsgClientPersonaState_Friend_KV& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientPersonaState_Friend_KV::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientPersonaState_Friend_KV::~CMsgClientPersonaState_Friend_KV() {
  SharedDtor();
}

void CMsgClientPersonaState_Friend_KV::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientPersonaState_Friend_KV::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientPersonaState_Friend_KV::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientPersonaState_Friend_KV_descriptor_;
}

const CMsgClientPersonaState_Friend_KV& CMsgClientPersonaState_Friend_KV::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  return *default_instance_;
}

CMsgClientPersonaState_Friend_KV* CMsgClientPersonaState_Friend_KV::default_instance_ = NULL;

CMsgClientPersonaState_Friend_KV* CMsgClientPersonaState_Friend_KV::New() const {
  return new CMsgClientPersonaState_Friend_KV;
}

void CMsgClientPersonaState_Friend_KV::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientPersonaState_Friend_KV::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientPersonaState_Friend_KV::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientPersonaState_Friend_KV::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientPersonaState_Friend_KV::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientPersonaState_Friend_KV::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientPersonaState_Friend_KV* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientPersonaState_Friend_KV*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientPersonaState_Friend_KV::MergeFrom(const CMsgClientPersonaState_Friend_KV& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientPersonaState_Friend_KV::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPersonaState_Friend_KV::CopyFrom(const CMsgClientPersonaState_Friend_KV& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPersonaState_Friend_KV::IsInitialized() const {

  return true;
}

void CMsgClientPersonaState_Friend_KV::Swap(CMsgClientPersonaState_Friend_KV* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientPersonaState_Friend_KV::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientPersonaState_Friend_KV_descriptor_;
  metadata.reflection = CMsgClientPersonaState_Friend_KV_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientPersonaState_Friend::kFriendidFieldNumber;
const int CMsgClientPersonaState_Friend::kPersonaStateFieldNumber;
const int CMsgClientPersonaState_Friend::kGamePlayedAppIdFieldNumber;
const int CMsgClientPersonaState_Friend::kGameServerIpFieldNumber;
const int CMsgClientPersonaState_Friend::kGameServerPortFieldNumber;
const int CMsgClientPersonaState_Friend::kPersonaStateFlagsFieldNumber;
const int CMsgClientPersonaState_Friend::kOnlineSessionInstancesFieldNumber;
const int CMsgClientPersonaState_Friend::kPersonaSetByUserFieldNumber;
const int CMsgClientPersonaState_Friend::kPlayerNameFieldNumber;
const int CMsgClientPersonaState_Friend::kQueryPortFieldNumber;
const int CMsgClientPersonaState_Friend::kSteamidSourceFieldNumber;
const int CMsgClientPersonaState_Friend::kAvatarHashFieldNumber;
const int CMsgClientPersonaState_Friend::kLastLogoffFieldNumber;
const int CMsgClientPersonaState_Friend::kLastLogonFieldNumber;
const int CMsgClientPersonaState_Friend::kLastSeenOnlineFieldNumber;
const int CMsgClientPersonaState_Friend::kClanRankFieldNumber;
const int CMsgClientPersonaState_Friend::kGameNameFieldNumber;
const int CMsgClientPersonaState_Friend::kGameidFieldNumber;
const int CMsgClientPersonaState_Friend::kGameDataBlobFieldNumber;
const int CMsgClientPersonaState_Friend::kClanDataFieldNumber;
const int CMsgClientPersonaState_Friend::kClanTagFieldNumber;
const int CMsgClientPersonaState_Friend::kRichPresenceFieldNumber;
const int CMsgClientPersonaState_Friend::kBroadcastIdFieldNumber;
const int CMsgClientPersonaState_Friend::kGameLobbyIdFieldNumber;
const int CMsgClientPersonaState_Friend::kWatchingBroadcastAccountidFieldNumber;
const int CMsgClientPersonaState_Friend::kWatchingBroadcastAppidFieldNumber;
const int CMsgClientPersonaState_Friend::kWatchingBroadcastViewersFieldNumber;
const int CMsgClientPersonaState_Friend::kWatchingBroadcastTitleFieldNumber;
const int CMsgClientPersonaState_Friend::kIsCommunityBannedFieldNumber;
const int CMsgClientPersonaState_Friend::kPlayerNamePendingReviewFieldNumber;
const int CMsgClientPersonaState_Friend::kAvatarPendingReviewFieldNumber;
#endif  // !_MSC_VER

CMsgClientPersonaState_Friend::CMsgClientPersonaState_Friend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientPersonaState_Friend::InitAsDefaultInstance() {
  clan_data_ = const_cast< ::CMsgClientPersonaState_Friend_ClanData*>(&::CMsgClientPersonaState_Friend_ClanData::default_instance());
}

CMsgClientPersonaState_Friend::CMsgClientPersonaState_Friend(const CMsgClientPersonaState_Friend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientPersonaState_Friend::SharedCtor() {
  _cached_size_ = 0;
  friendid_ = GOOGLE_ULONGLONG(0);
  persona_state_ = 0u;
  game_played_app_id_ = 0u;
  game_server_ip_ = 0u;
  game_server_port_ = 0u;
  persona_state_flags_ = 0u;
  online_session_instances_ = 0u;
  persona_set_by_user_ = false;
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  query_port_ = 0u;
  steamid_source_ = GOOGLE_ULONGLONG(0);
  avatar_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  last_logoff_ = 0u;
  last_logon_ = 0u;
  last_seen_online_ = 0u;
  clan_rank_ = 0u;
  game_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameid_ = GOOGLE_ULONGLONG(0);
  game_data_blob_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clan_data_ = NULL;
  clan_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  broadcast_id_ = GOOGLE_ULONGLONG(0);
  game_lobby_id_ = GOOGLE_ULONGLONG(0);
  watching_broadcast_accountid_ = 0u;
  watching_broadcast_appid_ = 0u;
  watching_broadcast_viewers_ = 0u;
  watching_broadcast_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_community_banned_ = false;
  player_name_pending_review_ = false;
  avatar_pending_review_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientPersonaState_Friend::~CMsgClientPersonaState_Friend() {
  SharedDtor();
}

void CMsgClientPersonaState_Friend::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (avatar_hash_ != &::google::protobuf::internal::kEmptyString) {
    delete avatar_hash_;
  }
  if (game_name_ != &::google::protobuf::internal::kEmptyString) {
    delete game_name_;
  }
  if (game_data_blob_ != &::google::protobuf::internal::kEmptyString) {
    delete game_data_blob_;
  }
  if (clan_tag_ != &::google::protobuf::internal::kEmptyString) {
    delete clan_tag_;
  }
  if (watching_broadcast_title_ != &::google::protobuf::internal::kEmptyString) {
    delete watching_broadcast_title_;
  }
  if (this != default_instance_) {
    delete clan_data_;
  }
}

void CMsgClientPersonaState_Friend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientPersonaState_Friend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientPersonaState_Friend_descriptor_;
}

const CMsgClientPersonaState_Friend& CMsgClientPersonaState_Friend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  return *default_instance_;
}

CMsgClientPersonaState_Friend* CMsgClientPersonaState_Friend::default_instance_ = NULL;

CMsgClientPersonaState_Friend* CMsgClientPersonaState_Friend::New() const {
  return new CMsgClientPersonaState_Friend;
}

void CMsgClientPersonaState_Friend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friendid_ = GOOGLE_ULONGLONG(0);
    persona_state_ = 0u;
    game_played_app_id_ = 0u;
    game_server_ip_ = 0u;
    game_server_port_ = 0u;
    persona_state_flags_ = 0u;
    online_session_instances_ = 0u;
    persona_set_by_user_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    query_port_ = 0u;
    steamid_source_ = GOOGLE_ULONGLONG(0);
    if (has_avatar_hash()) {
      if (avatar_hash_ != &::google::protobuf::internal::kEmptyString) {
        avatar_hash_->clear();
      }
    }
    last_logoff_ = 0u;
    last_logon_ = 0u;
    last_seen_online_ = 0u;
    clan_rank_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_game_name()) {
      if (game_name_ != &::google::protobuf::internal::kEmptyString) {
        game_name_->clear();
      }
    }
    gameid_ = GOOGLE_ULONGLONG(0);
    if (has_game_data_blob()) {
      if (game_data_blob_ != &::google::protobuf::internal::kEmptyString) {
        game_data_blob_->clear();
      }
    }
    if (has_clan_data()) {
      if (clan_data_ != NULL) clan_data_->::CMsgClientPersonaState_Friend_ClanData::Clear();
    }
    if (has_clan_tag()) {
      if (clan_tag_ != &::google::protobuf::internal::kEmptyString) {
        clan_tag_->clear();
      }
    }
    broadcast_id_ = GOOGLE_ULONGLONG(0);
    game_lobby_id_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    watching_broadcast_accountid_ = 0u;
    watching_broadcast_appid_ = 0u;
    watching_broadcast_viewers_ = 0u;
    if (has_watching_broadcast_title()) {
      if (watching_broadcast_title_ != &::google::protobuf::internal::kEmptyString) {
        watching_broadcast_title_->clear();
      }
    }
    is_community_banned_ = false;
    player_name_pending_review_ = false;
    avatar_pending_review_ = false;
  }
  rich_presence_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientPersonaState_Friend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 friendid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &friendid_)));
          set_has_friendid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_persona_state;
        break;
      }

      // optional uint32 persona_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_persona_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &persona_state_)));
          set_has_persona_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game_played_app_id;
        break;
      }

      // optional uint32 game_played_app_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_played_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_played_app_id_)));
          set_has_game_played_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_server_ip;
        break;
      }

      // optional uint32 game_server_ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_server_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_server_ip_)));
          set_has_game_server_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_game_server_port;
        break;
      }

      // optional uint32 game_server_port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_server_port_)));
          set_has_game_server_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_persona_state_flags;
        break;
      }

      // optional uint32 persona_state_flags = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_persona_state_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &persona_state_flags_)));
          set_has_persona_state_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_online_session_instances;
        break;
      }

      // optional uint32 online_session_instances = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online_session_instances:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_session_instances_)));
          set_has_online_session_instances();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_persona_set_by_user;
        break;
      }

      // optional bool persona_set_by_user = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_persona_set_by_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &persona_set_by_user_)));
          set_has_persona_set_by_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_player_name;
        break;
      }

      // optional string player_name = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_query_port;
        break;
      }

      // optional uint32 query_port = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_query_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_port_)));
          set_has_query_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_steamid_source;
        break;
      }

      // optional fixed64 steamid_source = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steamid_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_source_)));
          set_has_steamid_source();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_avatar_hash;
        break;
      }

      // optional bytes avatar_hash = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatar_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatar_hash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_last_logoff;
        break;
      }

      // optional uint32 last_logoff = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_logoff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_logoff_)));
          set_has_last_logoff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_last_logon;
        break;
      }

      // optional uint32 last_logon = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_logon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_logon_)));
          set_has_last_logon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_last_seen_online;
        break;
      }

      // optional uint32 last_seen_online = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_seen_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_seen_online_)));
          set_has_last_seen_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_clan_rank;
        break;
      }

      // optional uint32 clan_rank = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clan_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clan_rank_)));
          set_has_clan_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(442)) goto parse_game_name;
        break;
      }

      // optional string game_name = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->game_name().data(), this->game_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(449)) goto parse_gameid;
        break;
      }

      // optional fixed64 gameid = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_game_data_blob;
        break;
      }

      // optional bytes game_data_blob = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_data_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_game_data_blob()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(514)) goto parse_clan_data;
        break;
      }

      // optional .CMsgClientPersonaState.Friend.ClanData clan_data = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clan_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clan_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(522)) goto parse_clan_tag;
        break;
      }

      // optional string clan_tag = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clan_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clan_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clan_tag().data(), this->clan_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(570)) goto parse_rich_presence;
        break;
      }

      // repeated .CMsgClientPersonaState.Friend.KV rich_presence = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rich_presence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rich_presence()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(570)) goto parse_rich_presence;
        if (input->ExpectTag(577)) goto parse_broadcast_id;
        break;
      }

      // optional fixed64 broadcast_id = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_broadcast_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
          set_has_broadcast_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(585)) goto parse_game_lobby_id;
        break;
      }

      // optional fixed64 game_lobby_id = 73;
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_game_lobby_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_lobby_id_)));
          set_has_game_lobby_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(592)) goto parse_watching_broadcast_accountid;
        break;
      }

      // optional uint32 watching_broadcast_accountid = 74;
      case 74: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_watching_broadcast_accountid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &watching_broadcast_accountid_)));
          set_has_watching_broadcast_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(600)) goto parse_watching_broadcast_appid;
        break;
      }

      // optional uint32 watching_broadcast_appid = 75;
      case 75: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_watching_broadcast_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &watching_broadcast_appid_)));
          set_has_watching_broadcast_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(608)) goto parse_watching_broadcast_viewers;
        break;
      }

      // optional uint32 watching_broadcast_viewers = 76;
      case 76: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_watching_broadcast_viewers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &watching_broadcast_viewers_)));
          set_has_watching_broadcast_viewers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(618)) goto parse_watching_broadcast_title;
        break;
      }

      // optional string watching_broadcast_title = 77;
      case 77: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_watching_broadcast_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_watching_broadcast_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->watching_broadcast_title().data(), this->watching_broadcast_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(624)) goto parse_is_community_banned;
        break;
      }

      // optional bool is_community_banned = 78;
      case 78: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_community_banned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_community_banned_)));
          set_has_is_community_banned();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(632)) goto parse_player_name_pending_review;
        break;
      }

      // optional bool player_name_pending_review = 79;
      case 79: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_name_pending_review:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &player_name_pending_review_)));
          set_has_player_name_pending_review();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(640)) goto parse_avatar_pending_review;
        break;
      }

      // optional bool avatar_pending_review = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avatar_pending_review:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &avatar_pending_review_)));
          set_has_avatar_pending_review();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientPersonaState_Friend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 friendid = 1;
  if (has_friendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->friendid(), output);
  }

  // optional uint32 persona_state = 2;
  if (has_persona_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->persona_state(), output);
  }

  // optional uint32 game_played_app_id = 3;
  if (has_game_played_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_played_app_id(), output);
  }

  // optional uint32 game_server_ip = 4;
  if (has_game_server_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_server_ip(), output);
  }

  // optional uint32 game_server_port = 5;
  if (has_game_server_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->game_server_port(), output);
  }

  // optional uint32 persona_state_flags = 6;
  if (has_persona_state_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->persona_state_flags(), output);
  }

  // optional uint32 online_session_instances = 7;
  if (has_online_session_instances()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->online_session_instances(), output);
  }

  // optional bool persona_set_by_user = 10;
  if (has_persona_set_by_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->persona_set_by_user(), output);
  }

  // optional string player_name = 15;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->player_name(), output);
  }

  // optional uint32 query_port = 20;
  if (has_query_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->query_port(), output);
  }

  // optional fixed64 steamid_source = 25;
  if (has_steamid_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(25, this->steamid_source(), output);
  }

  // optional bytes avatar_hash = 31;
  if (has_avatar_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      31, this->avatar_hash(), output);
  }

  // optional uint32 last_logoff = 45;
  if (has_last_logoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->last_logoff(), output);
  }

  // optional uint32 last_logon = 46;
  if (has_last_logon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->last_logon(), output);
  }

  // optional uint32 last_seen_online = 47;
  if (has_last_seen_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->last_seen_online(), output);
  }

  // optional uint32 clan_rank = 50;
  if (has_clan_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->clan_rank(), output);
  }

  // optional string game_name = 55;
  if (has_game_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_name().data(), this->game_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      55, this->game_name(), output);
  }

  // optional fixed64 gameid = 56;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(56, this->gameid(), output);
  }

  // optional bytes game_data_blob = 60;
  if (has_game_data_blob()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      60, this->game_data_blob(), output);
  }

  // optional .CMsgClientPersonaState.Friend.ClanData clan_data = 64;
  if (has_clan_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      64, this->clan_data(), output);
  }

  // optional string clan_tag = 65;
  if (has_clan_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clan_tag().data(), this->clan_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      65, this->clan_tag(), output);
  }

  // repeated .CMsgClientPersonaState.Friend.KV rich_presence = 71;
  for (int i = 0; i < this->rich_presence_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      71, this->rich_presence(i), output);
  }

  // optional fixed64 broadcast_id = 72;
  if (has_broadcast_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(72, this->broadcast_id(), output);
  }

  // optional fixed64 game_lobby_id = 73;
  if (has_game_lobby_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(73, this->game_lobby_id(), output);
  }

  // optional uint32 watching_broadcast_accountid = 74;
  if (has_watching_broadcast_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(74, this->watching_broadcast_accountid(), output);
  }

  // optional uint32 watching_broadcast_appid = 75;
  if (has_watching_broadcast_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(75, this->watching_broadcast_appid(), output);
  }

  // optional uint32 watching_broadcast_viewers = 76;
  if (has_watching_broadcast_viewers()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(76, this->watching_broadcast_viewers(), output);
  }

  // optional string watching_broadcast_title = 77;
  if (has_watching_broadcast_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->watching_broadcast_title().data(), this->watching_broadcast_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      77, this->watching_broadcast_title(), output);
  }

  // optional bool is_community_banned = 78;
  if (has_is_community_banned()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(78, this->is_community_banned(), output);
  }

  // optional bool player_name_pending_review = 79;
  if (has_player_name_pending_review()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(79, this->player_name_pending_review(), output);
  }

  // optional bool avatar_pending_review = 80;
  if (has_avatar_pending_review()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(80, this->avatar_pending_review(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientPersonaState_Friend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 friendid = 1;
  if (has_friendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->friendid(), target);
  }

  // optional uint32 persona_state = 2;
  if (has_persona_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->persona_state(), target);
  }

  // optional uint32 game_played_app_id = 3;
  if (has_game_played_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_played_app_id(), target);
  }

  // optional uint32 game_server_ip = 4;
  if (has_game_server_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_server_ip(), target);
  }

  // optional uint32 game_server_port = 5;
  if (has_game_server_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->game_server_port(), target);
  }

  // optional uint32 persona_state_flags = 6;
  if (has_persona_state_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->persona_state_flags(), target);
  }

  // optional uint32 online_session_instances = 7;
  if (has_online_session_instances()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->online_session_instances(), target);
  }

  // optional bool persona_set_by_user = 10;
  if (has_persona_set_by_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->persona_set_by_user(), target);
  }

  // optional string player_name = 15;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->player_name(), target);
  }

  // optional uint32 query_port = 20;
  if (has_query_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->query_port(), target);
  }

  // optional fixed64 steamid_source = 25;
  if (has_steamid_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(25, this->steamid_source(), target);
  }

  // optional bytes avatar_hash = 31;
  if (has_avatar_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        31, this->avatar_hash(), target);
  }

  // optional uint32 last_logoff = 45;
  if (has_last_logoff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->last_logoff(), target);
  }

  // optional uint32 last_logon = 46;
  if (has_last_logon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(46, this->last_logon(), target);
  }

  // optional uint32 last_seen_online = 47;
  if (has_last_seen_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->last_seen_online(), target);
  }

  // optional uint32 clan_rank = 50;
  if (has_clan_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->clan_rank(), target);
  }

  // optional string game_name = 55;
  if (has_game_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_name().data(), this->game_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        55, this->game_name(), target);
  }

  // optional fixed64 gameid = 56;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(56, this->gameid(), target);
  }

  // optional bytes game_data_blob = 60;
  if (has_game_data_blob()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        60, this->game_data_blob(), target);
  }

  // optional .CMsgClientPersonaState.Friend.ClanData clan_data = 64;
  if (has_clan_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        64, this->clan_data(), target);
  }

  // optional string clan_tag = 65;
  if (has_clan_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clan_tag().data(), this->clan_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        65, this->clan_tag(), target);
  }

  // repeated .CMsgClientPersonaState.Friend.KV rich_presence = 71;
  for (int i = 0; i < this->rich_presence_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        71, this->rich_presence(i), target);
  }

  // optional fixed64 broadcast_id = 72;
  if (has_broadcast_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(72, this->broadcast_id(), target);
  }

  // optional fixed64 game_lobby_id = 73;
  if (has_game_lobby_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(73, this->game_lobby_id(), target);
  }

  // optional uint32 watching_broadcast_accountid = 74;
  if (has_watching_broadcast_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(74, this->watching_broadcast_accountid(), target);
  }

  // optional uint32 watching_broadcast_appid = 75;
  if (has_watching_broadcast_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(75, this->watching_broadcast_appid(), target);
  }

  // optional uint32 watching_broadcast_viewers = 76;
  if (has_watching_broadcast_viewers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(76, this->watching_broadcast_viewers(), target);
  }

  // optional string watching_broadcast_title = 77;
  if (has_watching_broadcast_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->watching_broadcast_title().data(), this->watching_broadcast_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        77, this->watching_broadcast_title(), target);
  }

  // optional bool is_community_banned = 78;
  if (has_is_community_banned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(78, this->is_community_banned(), target);
  }

  // optional bool player_name_pending_review = 79;
  if (has_player_name_pending_review()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(79, this->player_name_pending_review(), target);
  }

  // optional bool avatar_pending_review = 80;
  if (has_avatar_pending_review()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(80, this->avatar_pending_review(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientPersonaState_Friend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 friendid = 1;
    if (has_friendid()) {
      total_size += 1 + 8;
    }

    // optional uint32 persona_state = 2;
    if (has_persona_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->persona_state());
    }

    // optional uint32 game_played_app_id = 3;
    if (has_game_played_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_played_app_id());
    }

    // optional uint32 game_server_ip = 4;
    if (has_game_server_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_server_ip());
    }

    // optional uint32 game_server_port = 5;
    if (has_game_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_server_port());
    }

    // optional uint32 persona_state_flags = 6;
    if (has_persona_state_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->persona_state_flags());
    }

    // optional uint32 online_session_instances = 7;
    if (has_online_session_instances()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_session_instances());
    }

    // optional bool persona_set_by_user = 10;
    if (has_persona_set_by_user()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string player_name = 15;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional uint32 query_port = 20;
    if (has_query_port()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->query_port());
    }

    // optional fixed64 steamid_source = 25;
    if (has_steamid_source()) {
      total_size += 2 + 8;
    }

    // optional bytes avatar_hash = 31;
    if (has_avatar_hash()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->avatar_hash());
    }

    // optional uint32 last_logoff = 45;
    if (has_last_logoff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_logoff());
    }

    // optional uint32 last_logon = 46;
    if (has_last_logon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_logon());
    }

    // optional uint32 last_seen_online = 47;
    if (has_last_seen_online()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_seen_online());
    }

    // optional uint32 clan_rank = 50;
    if (has_clan_rank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clan_rank());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string game_name = 55;
    if (has_game_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_name());
    }

    // optional fixed64 gameid = 56;
    if (has_gameid()) {
      total_size += 2 + 8;
    }

    // optional bytes game_data_blob = 60;
    if (has_game_data_blob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->game_data_blob());
    }

    // optional .CMsgClientPersonaState.Friend.ClanData clan_data = 64;
    if (has_clan_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clan_data());
    }

    // optional string clan_tag = 65;
    if (has_clan_tag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clan_tag());
    }

    // optional fixed64 broadcast_id = 72;
    if (has_broadcast_id()) {
      total_size += 2 + 8;
    }

    // optional fixed64 game_lobby_id = 73;
    if (has_game_lobby_id()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 watching_broadcast_accountid = 74;
    if (has_watching_broadcast_accountid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->watching_broadcast_accountid());
    }

    // optional uint32 watching_broadcast_appid = 75;
    if (has_watching_broadcast_appid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->watching_broadcast_appid());
    }

    // optional uint32 watching_broadcast_viewers = 76;
    if (has_watching_broadcast_viewers()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->watching_broadcast_viewers());
    }

    // optional string watching_broadcast_title = 77;
    if (has_watching_broadcast_title()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->watching_broadcast_title());
    }

    // optional bool is_community_banned = 78;
    if (has_is_community_banned()) {
      total_size += 2 + 1;
    }

    // optional bool player_name_pending_review = 79;
    if (has_player_name_pending_review()) {
      total_size += 2 + 1;
    }

    // optional bool avatar_pending_review = 80;
    if (has_avatar_pending_review()) {
      total_size += 2 + 1;
    }

  }
  // repeated .CMsgClientPersonaState.Friend.KV rich_presence = 71;
  total_size += 2 * this->rich_presence_size();
  for (int i = 0; i < this->rich_presence_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rich_presence(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientPersonaState_Friend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientPersonaState_Friend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientPersonaState_Friend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientPersonaState_Friend::MergeFrom(const CMsgClientPersonaState_Friend& from) {
  GOOGLE_CHECK_NE(&from, this);
  rich_presence_.MergeFrom(from.rich_presence_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friendid()) {
      set_friendid(from.friendid());
    }
    if (from.has_persona_state()) {
      set_persona_state(from.persona_state());
    }
    if (from.has_game_played_app_id()) {
      set_game_played_app_id(from.game_played_app_id());
    }
    if (from.has_game_server_ip()) {
      set_game_server_ip(from.game_server_ip());
    }
    if (from.has_game_server_port()) {
      set_game_server_port(from.game_server_port());
    }
    if (from.has_persona_state_flags()) {
      set_persona_state_flags(from.persona_state_flags());
    }
    if (from.has_online_session_instances()) {
      set_online_session_instances(from.online_session_instances());
    }
    if (from.has_persona_set_by_user()) {
      set_persona_set_by_user(from.persona_set_by_user());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_query_port()) {
      set_query_port(from.query_port());
    }
    if (from.has_steamid_source()) {
      set_steamid_source(from.steamid_source());
    }
    if (from.has_avatar_hash()) {
      set_avatar_hash(from.avatar_hash());
    }
    if (from.has_last_logoff()) {
      set_last_logoff(from.last_logoff());
    }
    if (from.has_last_logon()) {
      set_last_logon(from.last_logon());
    }
    if (from.has_last_seen_online()) {
      set_last_seen_online(from.last_seen_online());
    }
    if (from.has_clan_rank()) {
      set_clan_rank(from.clan_rank());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_game_name()) {
      set_game_name(from.game_name());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_game_data_blob()) {
      set_game_data_blob(from.game_data_blob());
    }
    if (from.has_clan_data()) {
      mutable_clan_data()->::CMsgClientPersonaState_Friend_ClanData::MergeFrom(from.clan_data());
    }
    if (from.has_clan_tag()) {
      set_clan_tag(from.clan_tag());
    }
    if (from.has_broadcast_id()) {
      set_broadcast_id(from.broadcast_id());
    }
    if (from.has_game_lobby_id()) {
      set_game_lobby_id(from.game_lobby_id());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_watching_broadcast_accountid()) {
      set_watching_broadcast_accountid(from.watching_broadcast_accountid());
    }
    if (from.has_watching_broadcast_appid()) {
      set_watching_broadcast_appid(from.watching_broadcast_appid());
    }
    if (from.has_watching_broadcast_viewers()) {
      set_watching_broadcast_viewers(from.watching_broadcast_viewers());
    }
    if (from.has_watching_broadcast_title()) {
      set_watching_broadcast_title(from.watching_broadcast_title());
    }
    if (from.has_is_community_banned()) {
      set_is_community_banned(from.is_community_banned());
    }
    if (from.has_player_name_pending_review()) {
      set_player_name_pending_review(from.player_name_pending_review());
    }
    if (from.has_avatar_pending_review()) {
      set_avatar_pending_review(from.avatar_pending_review());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientPersonaState_Friend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPersonaState_Friend::CopyFrom(const CMsgClientPersonaState_Friend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPersonaState_Friend::IsInitialized() const {

  return true;
}

void CMsgClientPersonaState_Friend::Swap(CMsgClientPersonaState_Friend* other) {
  if (other != this) {
    std::swap(friendid_, other->friendid_);
    std::swap(persona_state_, other->persona_state_);
    std::swap(game_played_app_id_, other->game_played_app_id_);
    std::swap(game_server_ip_, other->game_server_ip_);
    std::swap(game_server_port_, other->game_server_port_);
    std::swap(persona_state_flags_, other->persona_state_flags_);
    std::swap(online_session_instances_, other->online_session_instances_);
    std::swap(persona_set_by_user_, other->persona_set_by_user_);
    std::swap(player_name_, other->player_name_);
    std::swap(query_port_, other->query_port_);
    std::swap(steamid_source_, other->steamid_source_);
    std::swap(avatar_hash_, other->avatar_hash_);
    std::swap(last_logoff_, other->last_logoff_);
    std::swap(last_logon_, other->last_logon_);
    std::swap(last_seen_online_, other->last_seen_online_);
    std::swap(clan_rank_, other->clan_rank_);
    std::swap(game_name_, other->game_name_);
    std::swap(gameid_, other->gameid_);
    std::swap(game_data_blob_, other->game_data_blob_);
    std::swap(clan_data_, other->clan_data_);
    std::swap(clan_tag_, other->clan_tag_);
    rich_presence_.Swap(&other->rich_presence_);
    std::swap(broadcast_id_, other->broadcast_id_);
    std::swap(game_lobby_id_, other->game_lobby_id_);
    std::swap(watching_broadcast_accountid_, other->watching_broadcast_accountid_);
    std::swap(watching_broadcast_appid_, other->watching_broadcast_appid_);
    std::swap(watching_broadcast_viewers_, other->watching_broadcast_viewers_);
    std::swap(watching_broadcast_title_, other->watching_broadcast_title_);
    std::swap(is_community_banned_, other->is_community_banned_);
    std::swap(player_name_pending_review_, other->player_name_pending_review_);
    std::swap(avatar_pending_review_, other->avatar_pending_review_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientPersonaState_Friend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientPersonaState_Friend_descriptor_;
  metadata.reflection = CMsgClientPersonaState_Friend_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientPersonaState::kStatusFlagsFieldNumber;
const int CMsgClientPersonaState::kFriendsFieldNumber;
#endif  // !_MSC_VER

CMsgClientPersonaState::CMsgClientPersonaState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientPersonaState::InitAsDefaultInstance() {
}

CMsgClientPersonaState::CMsgClientPersonaState(const CMsgClientPersonaState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientPersonaState::SharedCtor() {
  _cached_size_ = 0;
  status_flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientPersonaState::~CMsgClientPersonaState() {
  SharedDtor();
}

void CMsgClientPersonaState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientPersonaState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientPersonaState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientPersonaState_descriptor_;
}

const CMsgClientPersonaState& CMsgClientPersonaState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  return *default_instance_;
}

CMsgClientPersonaState* CMsgClientPersonaState::default_instance_ = NULL;

CMsgClientPersonaState* CMsgClientPersonaState::New() const {
  return new CMsgClientPersonaState;
}

void CMsgClientPersonaState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_flags_ = 0u;
  }
  friends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientPersonaState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status_flags = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_flags_)));
          set_has_status_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friends;
        break;
      }

      // repeated .CMsgClientPersonaState.Friend friends = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friends;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientPersonaState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 status_flags = 1;
  if (has_status_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status_flags(), output);
  }

  // repeated .CMsgClientPersonaState.Friend friends = 2;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->friends(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientPersonaState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 status_flags = 1;
  if (has_status_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status_flags(), target);
  }

  // repeated .CMsgClientPersonaState.Friend friends = 2;
  for (int i = 0; i < this->friends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->friends(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientPersonaState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 status_flags = 1;
    if (has_status_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status_flags());
    }

  }
  // repeated .CMsgClientPersonaState.Friend friends = 2;
  total_size += 1 * this->friends_size();
  for (int i = 0; i < this->friends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friends(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientPersonaState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientPersonaState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientPersonaState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientPersonaState::MergeFrom(const CMsgClientPersonaState& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_.MergeFrom(from.friends_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status_flags()) {
      set_status_flags(from.status_flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientPersonaState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPersonaState::CopyFrom(const CMsgClientPersonaState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPersonaState::IsInitialized() const {

  return true;
}

void CMsgClientPersonaState::Swap(CMsgClientPersonaState* other) {
  if (other != this) {
    std::swap(status_flags_, other->status_flags_);
    friends_.Swap(&other->friends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientPersonaState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientPersonaState_descriptor_;
  metadata.reflection = CMsgClientPersonaState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientFriendProfileInfo::kSteamidFriendFieldNumber;
#endif  // !_MSC_VER

CMsgClientFriendProfileInfo::CMsgClientFriendProfileInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientFriendProfileInfo::InitAsDefaultInstance() {
}

CMsgClientFriendProfileInfo::CMsgClientFriendProfileInfo(const CMsgClientFriendProfileInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientFriendProfileInfo::SharedCtor() {
  _cached_size_ = 0;
  steamid_friend_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientFriendProfileInfo::~CMsgClientFriendProfileInfo() {
  SharedDtor();
}

void CMsgClientFriendProfileInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientFriendProfileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientFriendProfileInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientFriendProfileInfo_descriptor_;
}

const CMsgClientFriendProfileInfo& CMsgClientFriendProfileInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  return *default_instance_;
}

CMsgClientFriendProfileInfo* CMsgClientFriendProfileInfo::default_instance_ = NULL;

CMsgClientFriendProfileInfo* CMsgClientFriendProfileInfo::New() const {
  return new CMsgClientFriendProfileInfo;
}

void CMsgClientFriendProfileInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_friend_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientFriendProfileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid_friend = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_friend_)));
          set_has_steamid_friend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientFriendProfileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid_friend = 1;
  if (has_steamid_friend()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid_friend(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientFriendProfileInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steamid_friend = 1;
  if (has_steamid_friend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid_friend(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientFriendProfileInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid_friend = 1;
    if (has_steamid_friend()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientFriendProfileInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientFriendProfileInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientFriendProfileInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientFriendProfileInfo::MergeFrom(const CMsgClientFriendProfileInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid_friend()) {
      set_steamid_friend(from.steamid_friend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientFriendProfileInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientFriendProfileInfo::CopyFrom(const CMsgClientFriendProfileInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendProfileInfo::IsInitialized() const {

  return true;
}

void CMsgClientFriendProfileInfo::Swap(CMsgClientFriendProfileInfo* other) {
  if (other != this) {
    std::swap(steamid_friend_, other->steamid_friend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientFriendProfileInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientFriendProfileInfo_descriptor_;
  metadata.reflection = CMsgClientFriendProfileInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientFriendProfileInfoResponse::kEresultFieldNumber;
const int CMsgClientFriendProfileInfoResponse::kSteamidFriendFieldNumber;
const int CMsgClientFriendProfileInfoResponse::kTimeCreatedFieldNumber;
const int CMsgClientFriendProfileInfoResponse::kRealNameFieldNumber;
const int CMsgClientFriendProfileInfoResponse::kCityNameFieldNumber;
const int CMsgClientFriendProfileInfoResponse::kStateNameFieldNumber;
const int CMsgClientFriendProfileInfoResponse::kCountryNameFieldNumber;
const int CMsgClientFriendProfileInfoResponse::kHeadlineFieldNumber;
const int CMsgClientFriendProfileInfoResponse::kSummaryFieldNumber;
#endif  // !_MSC_VER

CMsgClientFriendProfileInfoResponse::CMsgClientFriendProfileInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientFriendProfileInfoResponse::InitAsDefaultInstance() {
}

CMsgClientFriendProfileInfoResponse::CMsgClientFriendProfileInfoResponse(const CMsgClientFriendProfileInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientFriendProfileInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  steamid_friend_ = GOOGLE_ULONGLONG(0);
  time_created_ = 0u;
  real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  city_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  country_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  headline_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  summary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientFriendProfileInfoResponse::~CMsgClientFriendProfileInfoResponse() {
  SharedDtor();
}

void CMsgClientFriendProfileInfoResponse::SharedDtor() {
  if (real_name_ != &::google::protobuf::internal::kEmptyString) {
    delete real_name_;
  }
  if (city_name_ != &::google::protobuf::internal::kEmptyString) {
    delete city_name_;
  }
  if (state_name_ != &::google::protobuf::internal::kEmptyString) {
    delete state_name_;
  }
  if (country_name_ != &::google::protobuf::internal::kEmptyString) {
    delete country_name_;
  }
  if (headline_ != &::google::protobuf::internal::kEmptyString) {
    delete headline_;
  }
  if (summary_ != &::google::protobuf::internal::kEmptyString) {
    delete summary_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientFriendProfileInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientFriendProfileInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientFriendProfileInfoResponse_descriptor_;
}

const CMsgClientFriendProfileInfoResponse& CMsgClientFriendProfileInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  return *default_instance_;
}

CMsgClientFriendProfileInfoResponse* CMsgClientFriendProfileInfoResponse::default_instance_ = NULL;

CMsgClientFriendProfileInfoResponse* CMsgClientFriendProfileInfoResponse::New() const {
  return new CMsgClientFriendProfileInfoResponse;
}

void CMsgClientFriendProfileInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    steamid_friend_ = GOOGLE_ULONGLONG(0);
    time_created_ = 0u;
    if (has_real_name()) {
      if (real_name_ != &::google::protobuf::internal::kEmptyString) {
        real_name_->clear();
      }
    }
    if (has_city_name()) {
      if (city_name_ != &::google::protobuf::internal::kEmptyString) {
        city_name_->clear();
      }
    }
    if (has_state_name()) {
      if (state_name_ != &::google::protobuf::internal::kEmptyString) {
        state_name_->clear();
      }
    }
    if (has_country_name()) {
      if (country_name_ != &::google::protobuf::internal::kEmptyString) {
        country_name_->clear();
      }
    }
    if (has_headline()) {
      if (headline_ != &::google::protobuf::internal::kEmptyString) {
        headline_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_summary()) {
      if (summary_ != &::google::protobuf::internal::kEmptyString) {
        summary_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientFriendProfileInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steamid_friend;
        break;
      }

      // optional fixed64 steamid_friend = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steamid_friend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_friend_)));
          set_has_steamid_friend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time_created;
        break;
      }

      // optional uint32 time_created = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_created:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_created_)));
          set_has_time_created();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_real_name;
        break;
      }

      // optional string real_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_real_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_real_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->real_name().data(), this->real_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_city_name;
        break;
      }

      // optional string city_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->city_name().data(), this->city_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_state_name;
        break;
      }

      // optional string state_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->state_name().data(), this->state_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_country_name;
        break;
      }

      // optional string country_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_country_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->country_name().data(), this->country_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_headline;
        break;
      }

      // optional string headline = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headline:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headline()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->headline().data(), this->headline().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_summary;
        break;
      }

      // optional string summary = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_summary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_summary()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->summary().data(), this->summary().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientFriendProfileInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional fixed64 steamid_friend = 2;
  if (has_steamid_friend()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steamid_friend(), output);
  }

  // optional uint32 time_created = 3;
  if (has_time_created()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_created(), output);
  }

  // optional string real_name = 4;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->real_name().data(), this->real_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->real_name(), output);
  }

  // optional string city_name = 5;
  if (has_city_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city_name().data(), this->city_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->city_name(), output);
  }

  // optional string state_name = 6;
  if (has_state_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->state_name().data(), this->state_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->state_name(), output);
  }

  // optional string country_name = 7;
  if (has_country_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country_name().data(), this->country_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->country_name(), output);
  }

  // optional string headline = 8;
  if (has_headline()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headline().data(), this->headline().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->headline(), output);
  }

  // optional string summary = 9;
  if (has_summary()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->summary().data(), this->summary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->summary(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientFriendProfileInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional fixed64 steamid_friend = 2;
  if (has_steamid_friend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steamid_friend(), target);
  }

  // optional uint32 time_created = 3;
  if (has_time_created()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_created(), target);
  }

  // optional string real_name = 4;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->real_name().data(), this->real_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->real_name(), target);
  }

  // optional string city_name = 5;
  if (has_city_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city_name().data(), this->city_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->city_name(), target);
  }

  // optional string state_name = 6;
  if (has_state_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->state_name().data(), this->state_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->state_name(), target);
  }

  // optional string country_name = 7;
  if (has_country_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country_name().data(), this->country_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->country_name(), target);
  }

  // optional string headline = 8;
  if (has_headline()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headline().data(), this->headline().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->headline(), target);
  }

  // optional string summary = 9;
  if (has_summary()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->summary().data(), this->summary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->summary(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientFriendProfileInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional fixed64 steamid_friend = 2;
    if (has_steamid_friend()) {
      total_size += 1 + 8;
    }

    // optional uint32 time_created = 3;
    if (has_time_created()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_created());
    }

    // optional string real_name = 4;
    if (has_real_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->real_name());
    }

    // optional string city_name = 5;
    if (has_city_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city_name());
    }

    // optional string state_name = 6;
    if (has_state_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state_name());
    }

    // optional string country_name = 7;
    if (has_country_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_name());
    }

    // optional string headline = 8;
    if (has_headline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headline());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string summary = 9;
    if (has_summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->summary());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientFriendProfileInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientFriendProfileInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientFriendProfileInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientFriendProfileInfoResponse::MergeFrom(const CMsgClientFriendProfileInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_steamid_friend()) {
      set_steamid_friend(from.steamid_friend());
    }
    if (from.has_time_created()) {
      set_time_created(from.time_created());
    }
    if (from.has_real_name()) {
      set_real_name(from.real_name());
    }
    if (from.has_city_name()) {
      set_city_name(from.city_name());
    }
    if (from.has_state_name()) {
      set_state_name(from.state_name());
    }
    if (from.has_country_name()) {
      set_country_name(from.country_name());
    }
    if (from.has_headline()) {
      set_headline(from.headline());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_summary()) {
      set_summary(from.summary());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientFriendProfileInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientFriendProfileInfoResponse::CopyFrom(const CMsgClientFriendProfileInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendProfileInfoResponse::IsInitialized() const {

  return true;
}

void CMsgClientFriendProfileInfoResponse::Swap(CMsgClientFriendProfileInfoResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(steamid_friend_, other->steamid_friend_);
    std::swap(time_created_, other->time_created_);
    std::swap(real_name_, other->real_name_);
    std::swap(city_name_, other->city_name_);
    std::swap(state_name_, other->state_name_);
    std::swap(country_name_, other->country_name_);
    std::swap(headline_, other->headline_);
    std::swap(summary_, other->summary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientFriendProfileInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientFriendProfileInfoResponse_descriptor_;
  metadata.reflection = CMsgClientFriendProfileInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientCreateFriendsGroup::kSteamidFieldNumber;
const int CMsgClientCreateFriendsGroup::kGroupnameFieldNumber;
const int CMsgClientCreateFriendsGroup::kSteamidFriendsFieldNumber;
#endif  // !_MSC_VER

CMsgClientCreateFriendsGroup::CMsgClientCreateFriendsGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientCreateFriendsGroup::InitAsDefaultInstance() {
}

CMsgClientCreateFriendsGroup::CMsgClientCreateFriendsGroup(const CMsgClientCreateFriendsGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientCreateFriendsGroup::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientCreateFriendsGroup::~CMsgClientCreateFriendsGroup() {
  SharedDtor();
}

void CMsgClientCreateFriendsGroup::SharedDtor() {
  if (groupname_ != &::google::protobuf::internal::kEmptyString) {
    delete groupname_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientCreateFriendsGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientCreateFriendsGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientCreateFriendsGroup_descriptor_;
}

const CMsgClientCreateFriendsGroup& CMsgClientCreateFriendsGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  return *default_instance_;
}

CMsgClientCreateFriendsGroup* CMsgClientCreateFriendsGroup::default_instance_ = NULL;

CMsgClientCreateFriendsGroup* CMsgClientCreateFriendsGroup::New() const {
  return new CMsgClientCreateFriendsGroup;
}

void CMsgClientCreateFriendsGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_ = GOOGLE_ULONGLONG(0);
    if (has_groupname()) {
      if (groupname_ != &::google::protobuf::internal::kEmptyString) {
        groupname_->clear();
      }
    }
  }
  steamid_friends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientCreateFriendsGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_groupname;
        break;
      }

      // optional string groupname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->groupname().data(), this->groupname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_steamid_friends;
        break;
      }

      // repeated fixed64 steamid_friends = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steamid_friends:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 25, input, this->mutable_steamid_friends())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_steamid_friends())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_steamid_friends;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientCreateFriendsGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional string groupname = 2;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->groupname(), output);
  }

  // repeated fixed64 steamid_friends = 3;
  for (int i = 0; i < this->steamid_friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      3, this->steamid_friends(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientCreateFriendsGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional string groupname = 2;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->groupname(), target);
  }

  // repeated fixed64 steamid_friends = 3;
  for (int i = 0; i < this->steamid_friends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(3, this->steamid_friends(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientCreateFriendsGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional string groupname = 2;
    if (has_groupname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupname());
    }

  }
  // repeated fixed64 steamid_friends = 3;
  {
    int data_size = 0;
    data_size = 8 * this->steamid_friends_size();
    total_size += 1 * this->steamid_friends_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientCreateFriendsGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientCreateFriendsGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientCreateFriendsGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientCreateFriendsGroup::MergeFrom(const CMsgClientCreateFriendsGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  steamid_friends_.MergeFrom(from.steamid_friends_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_groupname()) {
      set_groupname(from.groupname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientCreateFriendsGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientCreateFriendsGroup::CopyFrom(const CMsgClientCreateFriendsGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientCreateFriendsGroup::IsInitialized() const {

  return true;
}

void CMsgClientCreateFriendsGroup::Swap(CMsgClientCreateFriendsGroup* other) {
  if (other != this) {
    std::swap(steamid_, other->steamid_);
    std::swap(groupname_, other->groupname_);
    steamid_friends_.Swap(&other->steamid_friends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientCreateFriendsGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientCreateFriendsGroup_descriptor_;
  metadata.reflection = CMsgClientCreateFriendsGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientCreateFriendsGroupResponse::kEresultFieldNumber;
const int CMsgClientCreateFriendsGroupResponse::kGroupidFieldNumber;
#endif  // !_MSC_VER

CMsgClientCreateFriendsGroupResponse::CMsgClientCreateFriendsGroupResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientCreateFriendsGroupResponse::InitAsDefaultInstance() {
}

CMsgClientCreateFriendsGroupResponse::CMsgClientCreateFriendsGroupResponse(const CMsgClientCreateFriendsGroupResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientCreateFriendsGroupResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 0u;
  groupid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientCreateFriendsGroupResponse::~CMsgClientCreateFriendsGroupResponse() {
  SharedDtor();
}

void CMsgClientCreateFriendsGroupResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientCreateFriendsGroupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientCreateFriendsGroupResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientCreateFriendsGroupResponse_descriptor_;
}

const CMsgClientCreateFriendsGroupResponse& CMsgClientCreateFriendsGroupResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  return *default_instance_;
}

CMsgClientCreateFriendsGroupResponse* CMsgClientCreateFriendsGroupResponse::default_instance_ = NULL;

CMsgClientCreateFriendsGroupResponse* CMsgClientCreateFriendsGroupResponse::New() const {
  return new CMsgClientCreateFriendsGroupResponse;
}

void CMsgClientCreateFriendsGroupResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 0u;
    groupid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientCreateFriendsGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_groupid;
        break;
      }

      // optional int32 groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientCreateFriendsGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eresult = 1;
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  // optional int32 groupid = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientCreateFriendsGroupResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 eresult = 1;
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  // optional int32 groupid = 2;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientCreateFriendsGroupResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eresult = 1;
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

    // optional int32 groupid = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientCreateFriendsGroupResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientCreateFriendsGroupResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientCreateFriendsGroupResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientCreateFriendsGroupResponse::MergeFrom(const CMsgClientCreateFriendsGroupResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientCreateFriendsGroupResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientCreateFriendsGroupResponse::CopyFrom(const CMsgClientCreateFriendsGroupResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientCreateFriendsGroupResponse::IsInitialized() const {

  return true;
}

void CMsgClientCreateFriendsGroupResponse::Swap(CMsgClientCreateFriendsGroupResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientCreateFriendsGroupResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientCreateFriendsGroupResponse_descriptor_;
  metadata.reflection = CMsgClientCreateFriendsGroupResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientDeleteFriendsGroup::kSteamidFieldNumber;
const int CMsgClientDeleteFriendsGroup::kGroupidFieldNumber;
#endif  // !_MSC_VER

CMsgClientDeleteFriendsGroup::CMsgClientDeleteFriendsGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientDeleteFriendsGroup::InitAsDefaultInstance() {
}

CMsgClientDeleteFriendsGroup::CMsgClientDeleteFriendsGroup(const CMsgClientDeleteFriendsGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientDeleteFriendsGroup::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  groupid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientDeleteFriendsGroup::~CMsgClientDeleteFriendsGroup() {
  SharedDtor();
}

void CMsgClientDeleteFriendsGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientDeleteFriendsGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientDeleteFriendsGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientDeleteFriendsGroup_descriptor_;
}

const CMsgClientDeleteFriendsGroup& CMsgClientDeleteFriendsGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  return *default_instance_;
}

CMsgClientDeleteFriendsGroup* CMsgClientDeleteFriendsGroup::default_instance_ = NULL;

CMsgClientDeleteFriendsGroup* CMsgClientDeleteFriendsGroup::New() const {
  return new CMsgClientDeleteFriendsGroup;
}

void CMsgClientDeleteFriendsGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_ = GOOGLE_ULONGLONG(0);
    groupid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientDeleteFriendsGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_groupid;
        break;
      }

      // optional int32 groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientDeleteFriendsGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional int32 groupid = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientDeleteFriendsGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional int32 groupid = 2;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientDeleteFriendsGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional int32 groupid = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientDeleteFriendsGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientDeleteFriendsGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientDeleteFriendsGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientDeleteFriendsGroup::MergeFrom(const CMsgClientDeleteFriendsGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientDeleteFriendsGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientDeleteFriendsGroup::CopyFrom(const CMsgClientDeleteFriendsGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientDeleteFriendsGroup::IsInitialized() const {

  return true;
}

void CMsgClientDeleteFriendsGroup::Swap(CMsgClientDeleteFriendsGroup* other) {
  if (other != this) {
    std::swap(steamid_, other->steamid_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientDeleteFriendsGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientDeleteFriendsGroup_descriptor_;
  metadata.reflection = CMsgClientDeleteFriendsGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientDeleteFriendsGroupResponse::kEresultFieldNumber;
#endif  // !_MSC_VER

CMsgClientDeleteFriendsGroupResponse::CMsgClientDeleteFriendsGroupResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientDeleteFriendsGroupResponse::InitAsDefaultInstance() {
}

CMsgClientDeleteFriendsGroupResponse::CMsgClientDeleteFriendsGroupResponse(const CMsgClientDeleteFriendsGroupResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientDeleteFriendsGroupResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientDeleteFriendsGroupResponse::~CMsgClientDeleteFriendsGroupResponse() {
  SharedDtor();
}

void CMsgClientDeleteFriendsGroupResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientDeleteFriendsGroupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientDeleteFriendsGroupResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientDeleteFriendsGroupResponse_descriptor_;
}

const CMsgClientDeleteFriendsGroupResponse& CMsgClientDeleteFriendsGroupResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  return *default_instance_;
}

CMsgClientDeleteFriendsGroupResponse* CMsgClientDeleteFriendsGroupResponse::default_instance_ = NULL;

CMsgClientDeleteFriendsGroupResponse* CMsgClientDeleteFriendsGroupResponse::New() const {
  return new CMsgClientDeleteFriendsGroupResponse;
}

void CMsgClientDeleteFriendsGroupResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientDeleteFriendsGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientDeleteFriendsGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eresult = 1;
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientDeleteFriendsGroupResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 eresult = 1;
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientDeleteFriendsGroupResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eresult = 1;
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientDeleteFriendsGroupResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientDeleteFriendsGroupResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientDeleteFriendsGroupResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientDeleteFriendsGroupResponse::MergeFrom(const CMsgClientDeleteFriendsGroupResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientDeleteFriendsGroupResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientDeleteFriendsGroupResponse::CopyFrom(const CMsgClientDeleteFriendsGroupResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientDeleteFriendsGroupResponse::IsInitialized() const {

  return true;
}

void CMsgClientDeleteFriendsGroupResponse::Swap(CMsgClientDeleteFriendsGroupResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientDeleteFriendsGroupResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientDeleteFriendsGroupResponse_descriptor_;
  metadata.reflection = CMsgClientDeleteFriendsGroupResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientManageFriendsGroup::kGroupidFieldNumber;
const int CMsgClientManageFriendsGroup::kGroupnameFieldNumber;
const int CMsgClientManageFriendsGroup::kSteamidFriendsAddedFieldNumber;
const int CMsgClientManageFriendsGroup::kSteamidFriendsRemovedFieldNumber;
#endif  // !_MSC_VER

CMsgClientManageFriendsGroup::CMsgClientManageFriendsGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientManageFriendsGroup::InitAsDefaultInstance() {
}

CMsgClientManageFriendsGroup::CMsgClientManageFriendsGroup(const CMsgClientManageFriendsGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientManageFriendsGroup::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0;
  groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientManageFriendsGroup::~CMsgClientManageFriendsGroup() {
  SharedDtor();
}

void CMsgClientManageFriendsGroup::SharedDtor() {
  if (groupname_ != &::google::protobuf::internal::kEmptyString) {
    delete groupname_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientManageFriendsGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientManageFriendsGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientManageFriendsGroup_descriptor_;
}

const CMsgClientManageFriendsGroup& CMsgClientManageFriendsGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  return *default_instance_;
}

CMsgClientManageFriendsGroup* CMsgClientManageFriendsGroup::default_instance_ = NULL;

CMsgClientManageFriendsGroup* CMsgClientManageFriendsGroup::New() const {
  return new CMsgClientManageFriendsGroup;
}

void CMsgClientManageFriendsGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = 0;
    if (has_groupname()) {
      if (groupname_ != &::google::protobuf::internal::kEmptyString) {
        groupname_->clear();
      }
    }
  }
  steamid_friends_added_.Clear();
  steamid_friends_removed_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientManageFriendsGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_groupname;
        break;
      }

      // optional string groupname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->groupname().data(), this->groupname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_steamid_friends_added;
        break;
      }

      // repeated fixed64 steamid_friends_added = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steamid_friends_added:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 25, input, this->mutable_steamid_friends_added())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_steamid_friends_added())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_steamid_friends_added;
        if (input->ExpectTag(33)) goto parse_steamid_friends_removed;
        break;
      }

      // repeated fixed64 steamid_friends_removed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steamid_friends_removed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 33, input, this->mutable_steamid_friends_removed())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_steamid_friends_removed())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_steamid_friends_removed;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientManageFriendsGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->groupid(), output);
  }

  // optional string groupname = 2;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->groupname(), output);
  }

  // repeated fixed64 steamid_friends_added = 3;
  for (int i = 0; i < this->steamid_friends_added_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      3, this->steamid_friends_added(i), output);
  }

  // repeated fixed64 steamid_friends_removed = 4;
  for (int i = 0; i < this->steamid_friends_removed_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      4, this->steamid_friends_removed(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientManageFriendsGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->groupid(), target);
  }

  // optional string groupname = 2;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->groupname(), target);
  }

  // repeated fixed64 steamid_friends_added = 3;
  for (int i = 0; i < this->steamid_friends_added_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(3, this->steamid_friends_added(i), target);
  }

  // repeated fixed64 steamid_friends_removed = 4;
  for (int i = 0; i < this->steamid_friends_removed_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(4, this->steamid_friends_removed(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientManageFriendsGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // optional string groupname = 2;
    if (has_groupname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupname());
    }

  }
  // repeated fixed64 steamid_friends_added = 3;
  {
    int data_size = 0;
    data_size = 8 * this->steamid_friends_added_size();
    total_size += 1 * this->steamid_friends_added_size() + data_size;
  }

  // repeated fixed64 steamid_friends_removed = 4;
  {
    int data_size = 0;
    data_size = 8 * this->steamid_friends_removed_size();
    total_size += 1 * this->steamid_friends_removed_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientManageFriendsGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientManageFriendsGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientManageFriendsGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientManageFriendsGroup::MergeFrom(const CMsgClientManageFriendsGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  steamid_friends_added_.MergeFrom(from.steamid_friends_added_);
  steamid_friends_removed_.MergeFrom(from.steamid_friends_removed_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_groupname()) {
      set_groupname(from.groupname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientManageFriendsGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientManageFriendsGroup::CopyFrom(const CMsgClientManageFriendsGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientManageFriendsGroup::IsInitialized() const {

  return true;
}

void CMsgClientManageFriendsGroup::Swap(CMsgClientManageFriendsGroup* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(groupname_, other->groupname_);
    steamid_friends_added_.Swap(&other->steamid_friends_added_);
    steamid_friends_removed_.Swap(&other->steamid_friends_removed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientManageFriendsGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientManageFriendsGroup_descriptor_;
  metadata.reflection = CMsgClientManageFriendsGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientManageFriendsGroupResponse::kEresultFieldNumber;
#endif  // !_MSC_VER

CMsgClientManageFriendsGroupResponse::CMsgClientManageFriendsGroupResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientManageFriendsGroupResponse::InitAsDefaultInstance() {
}

CMsgClientManageFriendsGroupResponse::CMsgClientManageFriendsGroupResponse(const CMsgClientManageFriendsGroupResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientManageFriendsGroupResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientManageFriendsGroupResponse::~CMsgClientManageFriendsGroupResponse() {
  SharedDtor();
}

void CMsgClientManageFriendsGroupResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientManageFriendsGroupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientManageFriendsGroupResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientManageFriendsGroupResponse_descriptor_;
}

const CMsgClientManageFriendsGroupResponse& CMsgClientManageFriendsGroupResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  return *default_instance_;
}

CMsgClientManageFriendsGroupResponse* CMsgClientManageFriendsGroupResponse::default_instance_ = NULL;

CMsgClientManageFriendsGroupResponse* CMsgClientManageFriendsGroupResponse::New() const {
  return new CMsgClientManageFriendsGroupResponse;
}

void CMsgClientManageFriendsGroupResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientManageFriendsGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientManageFriendsGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eresult = 1;
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientManageFriendsGroupResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 eresult = 1;
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientManageFriendsGroupResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eresult = 1;
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientManageFriendsGroupResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientManageFriendsGroupResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientManageFriendsGroupResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientManageFriendsGroupResponse::MergeFrom(const CMsgClientManageFriendsGroupResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientManageFriendsGroupResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientManageFriendsGroupResponse::CopyFrom(const CMsgClientManageFriendsGroupResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientManageFriendsGroupResponse::IsInitialized() const {

  return true;
}

void CMsgClientManageFriendsGroupResponse::Swap(CMsgClientManageFriendsGroupResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientManageFriendsGroupResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientManageFriendsGroupResponse_descriptor_;
  metadata.reflection = CMsgClientManageFriendsGroupResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientAddFriendToGroup::kGroupidFieldNumber;
const int CMsgClientAddFriendToGroup::kSteamiduserFieldNumber;
#endif  // !_MSC_VER

CMsgClientAddFriendToGroup::CMsgClientAddFriendToGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientAddFriendToGroup::InitAsDefaultInstance() {
}

CMsgClientAddFriendToGroup::CMsgClientAddFriendToGroup(const CMsgClientAddFriendToGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientAddFriendToGroup::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0;
  steamiduser_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientAddFriendToGroup::~CMsgClientAddFriendToGroup() {
  SharedDtor();
}

void CMsgClientAddFriendToGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientAddFriendToGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientAddFriendToGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientAddFriendToGroup_descriptor_;
}

const CMsgClientAddFriendToGroup& CMsgClientAddFriendToGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  return *default_instance_;
}

CMsgClientAddFriendToGroup* CMsgClientAddFriendToGroup::default_instance_ = NULL;

CMsgClientAddFriendToGroup* CMsgClientAddFriendToGroup::New() const {
  return new CMsgClientAddFriendToGroup;
}

void CMsgClientAddFriendToGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = 0;
    steamiduser_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientAddFriendToGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steamiduser;
        break;
      }

      // optional fixed64 steamiduser = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steamiduser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamiduser_)));
          set_has_steamiduser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientAddFriendToGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->groupid(), output);
  }

  // optional fixed64 steamiduser = 2;
  if (has_steamiduser()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steamiduser(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientAddFriendToGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->groupid(), target);
  }

  // optional fixed64 steamiduser = 2;
  if (has_steamiduser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steamiduser(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientAddFriendToGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // optional fixed64 steamiduser = 2;
    if (has_steamiduser()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAddFriendToGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientAddFriendToGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientAddFriendToGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientAddFriendToGroup::MergeFrom(const CMsgClientAddFriendToGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_steamiduser()) {
      set_steamiduser(from.steamiduser());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientAddFriendToGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAddFriendToGroup::CopyFrom(const CMsgClientAddFriendToGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAddFriendToGroup::IsInitialized() const {

  return true;
}

void CMsgClientAddFriendToGroup::Swap(CMsgClientAddFriendToGroup* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(steamiduser_, other->steamiduser_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientAddFriendToGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientAddFriendToGroup_descriptor_;
  metadata.reflection = CMsgClientAddFriendToGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientAddFriendToGroupResponse::kEresultFieldNumber;
#endif  // !_MSC_VER

CMsgClientAddFriendToGroupResponse::CMsgClientAddFriendToGroupResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientAddFriendToGroupResponse::InitAsDefaultInstance() {
}

CMsgClientAddFriendToGroupResponse::CMsgClientAddFriendToGroupResponse(const CMsgClientAddFriendToGroupResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientAddFriendToGroupResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientAddFriendToGroupResponse::~CMsgClientAddFriendToGroupResponse() {
  SharedDtor();
}

void CMsgClientAddFriendToGroupResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientAddFriendToGroupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientAddFriendToGroupResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientAddFriendToGroupResponse_descriptor_;
}

const CMsgClientAddFriendToGroupResponse& CMsgClientAddFriendToGroupResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  return *default_instance_;
}

CMsgClientAddFriendToGroupResponse* CMsgClientAddFriendToGroupResponse::default_instance_ = NULL;

CMsgClientAddFriendToGroupResponse* CMsgClientAddFriendToGroupResponse::New() const {
  return new CMsgClientAddFriendToGroupResponse;
}

void CMsgClientAddFriendToGroupResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientAddFriendToGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientAddFriendToGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eresult = 1;
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientAddFriendToGroupResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 eresult = 1;
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientAddFriendToGroupResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eresult = 1;
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAddFriendToGroupResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientAddFriendToGroupResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientAddFriendToGroupResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientAddFriendToGroupResponse::MergeFrom(const CMsgClientAddFriendToGroupResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientAddFriendToGroupResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAddFriendToGroupResponse::CopyFrom(const CMsgClientAddFriendToGroupResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAddFriendToGroupResponse::IsInitialized() const {

  return true;
}

void CMsgClientAddFriendToGroupResponse::Swap(CMsgClientAddFriendToGroupResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientAddFriendToGroupResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientAddFriendToGroupResponse_descriptor_;
  metadata.reflection = CMsgClientAddFriendToGroupResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRemoveFriendFromGroup::kGroupidFieldNumber;
const int CMsgClientRemoveFriendFromGroup::kSteamiduserFieldNumber;
#endif  // !_MSC_VER

CMsgClientRemoveFriendFromGroup::CMsgClientRemoveFriendFromGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientRemoveFriendFromGroup::InitAsDefaultInstance() {
}

CMsgClientRemoveFriendFromGroup::CMsgClientRemoveFriendFromGroup(const CMsgClientRemoveFriendFromGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRemoveFriendFromGroup::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0;
  steamiduser_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRemoveFriendFromGroup::~CMsgClientRemoveFriendFromGroup() {
  SharedDtor();
}

void CMsgClientRemoveFriendFromGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientRemoveFriendFromGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRemoveFriendFromGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientRemoveFriendFromGroup_descriptor_;
}

const CMsgClientRemoveFriendFromGroup& CMsgClientRemoveFriendFromGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  return *default_instance_;
}

CMsgClientRemoveFriendFromGroup* CMsgClientRemoveFriendFromGroup::default_instance_ = NULL;

CMsgClientRemoveFriendFromGroup* CMsgClientRemoveFriendFromGroup::New() const {
  return new CMsgClientRemoveFriendFromGroup;
}

void CMsgClientRemoveFriendFromGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = 0;
    steamiduser_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientRemoveFriendFromGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steamiduser;
        break;
      }

      // optional fixed64 steamiduser = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steamiduser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamiduser_)));
          set_has_steamiduser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRemoveFriendFromGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->groupid(), output);
  }

  // optional fixed64 steamiduser = 2;
  if (has_steamiduser()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steamiduser(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientRemoveFriendFromGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->groupid(), target);
  }

  // optional fixed64 steamiduser = 2;
  if (has_steamiduser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steamiduser(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientRemoveFriendFromGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // optional fixed64 steamiduser = 2;
    if (has_steamiduser()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRemoveFriendFromGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientRemoveFriendFromGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientRemoveFriendFromGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientRemoveFriendFromGroup::MergeFrom(const CMsgClientRemoveFriendFromGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_steamiduser()) {
      set_steamiduser(from.steamiduser());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientRemoveFriendFromGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRemoveFriendFromGroup::CopyFrom(const CMsgClientRemoveFriendFromGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRemoveFriendFromGroup::IsInitialized() const {

  return true;
}

void CMsgClientRemoveFriendFromGroup::Swap(CMsgClientRemoveFriendFromGroup* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(steamiduser_, other->steamiduser_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientRemoveFriendFromGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientRemoveFriendFromGroup_descriptor_;
  metadata.reflection = CMsgClientRemoveFriendFromGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRemoveFriendFromGroupResponse::kEresultFieldNumber;
#endif  // !_MSC_VER

CMsgClientRemoveFriendFromGroupResponse::CMsgClientRemoveFriendFromGroupResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientRemoveFriendFromGroupResponse::InitAsDefaultInstance() {
}

CMsgClientRemoveFriendFromGroupResponse::CMsgClientRemoveFriendFromGroupResponse(const CMsgClientRemoveFriendFromGroupResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRemoveFriendFromGroupResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRemoveFriendFromGroupResponse::~CMsgClientRemoveFriendFromGroupResponse() {
  SharedDtor();
}

void CMsgClientRemoveFriendFromGroupResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientRemoveFriendFromGroupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRemoveFriendFromGroupResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientRemoveFriendFromGroupResponse_descriptor_;
}

const CMsgClientRemoveFriendFromGroupResponse& CMsgClientRemoveFriendFromGroupResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  return *default_instance_;
}

CMsgClientRemoveFriendFromGroupResponse* CMsgClientRemoveFriendFromGroupResponse::default_instance_ = NULL;

CMsgClientRemoveFriendFromGroupResponse* CMsgClientRemoveFriendFromGroupResponse::New() const {
  return new CMsgClientRemoveFriendFromGroupResponse;
}

void CMsgClientRemoveFriendFromGroupResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientRemoveFriendFromGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRemoveFriendFromGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eresult = 1;
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientRemoveFriendFromGroupResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 eresult = 1;
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientRemoveFriendFromGroupResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eresult = 1;
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRemoveFriendFromGroupResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientRemoveFriendFromGroupResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientRemoveFriendFromGroupResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientRemoveFriendFromGroupResponse::MergeFrom(const CMsgClientRemoveFriendFromGroupResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientRemoveFriendFromGroupResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRemoveFriendFromGroupResponse::CopyFrom(const CMsgClientRemoveFriendFromGroupResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRemoveFriendFromGroupResponse::IsInitialized() const {

  return true;
}

void CMsgClientRemoveFriendFromGroupResponse::Swap(CMsgClientRemoveFriendFromGroupResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientRemoveFriendFromGroupResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientRemoveFriendFromGroupResponse_descriptor_;
  metadata.reflection = CMsgClientRemoveFriendFromGroupResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgClientGetEmoticonList::CMsgClientGetEmoticonList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientGetEmoticonList::InitAsDefaultInstance() {
}

CMsgClientGetEmoticonList::CMsgClientGetEmoticonList(const CMsgClientGetEmoticonList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGetEmoticonList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGetEmoticonList::~CMsgClientGetEmoticonList() {
  SharedDtor();
}

void CMsgClientGetEmoticonList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientGetEmoticonList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientGetEmoticonList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientGetEmoticonList_descriptor_;
}

const CMsgClientGetEmoticonList& CMsgClientGetEmoticonList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  return *default_instance_;
}

CMsgClientGetEmoticonList* CMsgClientGetEmoticonList::default_instance_ = NULL;

CMsgClientGetEmoticonList* CMsgClientGetEmoticonList::New() const {
  return new CMsgClientGetEmoticonList;
}

void CMsgClientGetEmoticonList::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientGetEmoticonList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgClientGetEmoticonList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientGetEmoticonList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientGetEmoticonList::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetEmoticonList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientGetEmoticonList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientGetEmoticonList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientGetEmoticonList::MergeFrom(const CMsgClientGetEmoticonList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientGetEmoticonList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetEmoticonList::CopyFrom(const CMsgClientGetEmoticonList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetEmoticonList::IsInitialized() const {

  return true;
}

void CMsgClientGetEmoticonList::Swap(CMsgClientGetEmoticonList* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientGetEmoticonList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientGetEmoticonList_descriptor_;
  metadata.reflection = CMsgClientGetEmoticonList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientEmoticonList_Emoticon::kNameFieldNumber;
const int CMsgClientEmoticonList_Emoticon::kCountFieldNumber;
const int CMsgClientEmoticonList_Emoticon::kTimeLastUsedFieldNumber;
const int CMsgClientEmoticonList_Emoticon::kUseCountFieldNumber;
const int CMsgClientEmoticonList_Emoticon::kTimeReceivedFieldNumber;
const int CMsgClientEmoticonList_Emoticon::kAppidFieldNumber;
#endif  // !_MSC_VER

CMsgClientEmoticonList_Emoticon::CMsgClientEmoticonList_Emoticon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientEmoticonList_Emoticon::InitAsDefaultInstance() {
}

CMsgClientEmoticonList_Emoticon::CMsgClientEmoticonList_Emoticon(const CMsgClientEmoticonList_Emoticon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientEmoticonList_Emoticon::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  count_ = 0;
  time_last_used_ = 0u;
  use_count_ = 0u;
  time_received_ = 0u;
  appid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientEmoticonList_Emoticon::~CMsgClientEmoticonList_Emoticon() {
  SharedDtor();
}

void CMsgClientEmoticonList_Emoticon::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientEmoticonList_Emoticon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientEmoticonList_Emoticon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientEmoticonList_Emoticon_descriptor_;
}

const CMsgClientEmoticonList_Emoticon& CMsgClientEmoticonList_Emoticon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  return *default_instance_;
}

CMsgClientEmoticonList_Emoticon* CMsgClientEmoticonList_Emoticon::default_instance_ = NULL;

CMsgClientEmoticonList_Emoticon* CMsgClientEmoticonList_Emoticon::New() const {
  return new CMsgClientEmoticonList_Emoticon;
}

void CMsgClientEmoticonList_Emoticon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    count_ = 0;
    time_last_used_ = 0u;
    use_count_ = 0u;
    time_received_ = 0u;
    appid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientEmoticonList_Emoticon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time_last_used;
        break;
      }

      // optional uint32 time_last_used = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_last_used:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_last_used_)));
          set_has_time_last_used();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_use_count;
        break;
      }

      // optional uint32 use_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &use_count_)));
          set_has_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time_received;
        break;
      }

      // optional uint32 time_received = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_received:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_received_)));
          set_has_time_received();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_appid;
        break;
      }

      // optional uint32 appid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientEmoticonList_Emoticon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // optional uint32 time_last_used = 3;
  if (has_time_last_used()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_last_used(), output);
  }

  // optional uint32 use_count = 4;
  if (has_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->use_count(), output);
  }

  // optional uint32 time_received = 5;
  if (has_time_received()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time_received(), output);
  }

  // optional uint32 appid = 6;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->appid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientEmoticonList_Emoticon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // optional uint32 time_last_used = 3;
  if (has_time_last_used()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_last_used(), target);
  }

  // optional uint32 use_count = 4;
  if (has_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->use_count(), target);
  }

  // optional uint32 time_received = 5;
  if (has_time_received()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time_received(), target);
  }

  // optional uint32 appid = 6;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->appid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientEmoticonList_Emoticon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional uint32 time_last_used = 3;
    if (has_time_last_used()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_last_used());
    }

    // optional uint32 use_count = 4;
    if (has_use_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->use_count());
    }

    // optional uint32 time_received = 5;
    if (has_time_received()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_received());
    }

    // optional uint32 appid = 6;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientEmoticonList_Emoticon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientEmoticonList_Emoticon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientEmoticonList_Emoticon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientEmoticonList_Emoticon::MergeFrom(const CMsgClientEmoticonList_Emoticon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_time_last_used()) {
      set_time_last_used(from.time_last_used());
    }
    if (from.has_use_count()) {
      set_use_count(from.use_count());
    }
    if (from.has_time_received()) {
      set_time_received(from.time_received());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientEmoticonList_Emoticon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientEmoticonList_Emoticon::CopyFrom(const CMsgClientEmoticonList_Emoticon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientEmoticonList_Emoticon::IsInitialized() const {

  return true;
}

void CMsgClientEmoticonList_Emoticon::Swap(CMsgClientEmoticonList_Emoticon* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(count_, other->count_);
    std::swap(time_last_used_, other->time_last_used_);
    std::swap(use_count_, other->use_count_);
    std::swap(time_received_, other->time_received_);
    std::swap(appid_, other->appid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientEmoticonList_Emoticon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientEmoticonList_Emoticon_descriptor_;
  metadata.reflection = CMsgClientEmoticonList_Emoticon_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientEmoticonList_Sticker::kNameFieldNumber;
const int CMsgClientEmoticonList_Sticker::kCountFieldNumber;
const int CMsgClientEmoticonList_Sticker::kTimeReceivedFieldNumber;
const int CMsgClientEmoticonList_Sticker::kAppidFieldNumber;
const int CMsgClientEmoticonList_Sticker::kTimeLastUsedFieldNumber;
const int CMsgClientEmoticonList_Sticker::kUseCountFieldNumber;
#endif  // !_MSC_VER

CMsgClientEmoticonList_Sticker::CMsgClientEmoticonList_Sticker()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientEmoticonList_Sticker::InitAsDefaultInstance() {
}

CMsgClientEmoticonList_Sticker::CMsgClientEmoticonList_Sticker(const CMsgClientEmoticonList_Sticker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientEmoticonList_Sticker::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  count_ = 0;
  time_received_ = 0u;
  appid_ = 0u;
  time_last_used_ = 0u;
  use_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientEmoticonList_Sticker::~CMsgClientEmoticonList_Sticker() {
  SharedDtor();
}

void CMsgClientEmoticonList_Sticker::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientEmoticonList_Sticker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientEmoticonList_Sticker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientEmoticonList_Sticker_descriptor_;
}

const CMsgClientEmoticonList_Sticker& CMsgClientEmoticonList_Sticker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  return *default_instance_;
}

CMsgClientEmoticonList_Sticker* CMsgClientEmoticonList_Sticker::default_instance_ = NULL;

CMsgClientEmoticonList_Sticker* CMsgClientEmoticonList_Sticker::New() const {
  return new CMsgClientEmoticonList_Sticker;
}

void CMsgClientEmoticonList_Sticker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    count_ = 0;
    time_received_ = 0u;
    appid_ = 0u;
    time_last_used_ = 0u;
    use_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientEmoticonList_Sticker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time_received;
        break;
      }

      // optional uint32 time_received = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_received:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_received_)));
          set_has_time_received();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_appid;
        break;
      }

      // optional uint32 appid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time_last_used;
        break;
      }

      // optional uint32 time_last_used = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_last_used:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_last_used_)));
          set_has_time_last_used();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_use_count;
        break;
      }

      // optional uint32 use_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &use_count_)));
          set_has_use_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientEmoticonList_Sticker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // optional uint32 time_received = 3;
  if (has_time_received()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_received(), output);
  }

  // optional uint32 appid = 4;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->appid(), output);
  }

  // optional uint32 time_last_used = 5;
  if (has_time_last_used()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time_last_used(), output);
  }

  // optional uint32 use_count = 6;
  if (has_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->use_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientEmoticonList_Sticker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // optional uint32 time_received = 3;
  if (has_time_received()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_received(), target);
  }

  // optional uint32 appid = 4;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->appid(), target);
  }

  // optional uint32 time_last_used = 5;
  if (has_time_last_used()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time_last_used(), target);
  }

  // optional uint32 use_count = 6;
  if (has_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->use_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientEmoticonList_Sticker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional uint32 time_received = 3;
    if (has_time_received()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_received());
    }

    // optional uint32 appid = 4;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 time_last_used = 5;
    if (has_time_last_used()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_last_used());
    }

    // optional uint32 use_count = 6;
    if (has_use_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->use_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientEmoticonList_Sticker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientEmoticonList_Sticker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientEmoticonList_Sticker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientEmoticonList_Sticker::MergeFrom(const CMsgClientEmoticonList_Sticker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_time_received()) {
      set_time_received(from.time_received());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_time_last_used()) {
      set_time_last_used(from.time_last_used());
    }
    if (from.has_use_count()) {
      set_use_count(from.use_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientEmoticonList_Sticker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientEmoticonList_Sticker::CopyFrom(const CMsgClientEmoticonList_Sticker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientEmoticonList_Sticker::IsInitialized() const {

  return true;
}

void CMsgClientEmoticonList_Sticker::Swap(CMsgClientEmoticonList_Sticker* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(count_, other->count_);
    std::swap(time_received_, other->time_received_);
    std::swap(appid_, other->appid_);
    std::swap(time_last_used_, other->time_last_used_);
    std::swap(use_count_, other->use_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientEmoticonList_Sticker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientEmoticonList_Sticker_descriptor_;
  metadata.reflection = CMsgClientEmoticonList_Sticker_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientEmoticonList_Effect::kNameFieldNumber;
const int CMsgClientEmoticonList_Effect::kCountFieldNumber;
const int CMsgClientEmoticonList_Effect::kTimeReceivedFieldNumber;
const int CMsgClientEmoticonList_Effect::kInfiniteUseFieldNumber;
const int CMsgClientEmoticonList_Effect::kAppidFieldNumber;
#endif  // !_MSC_VER

CMsgClientEmoticonList_Effect::CMsgClientEmoticonList_Effect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientEmoticonList_Effect::InitAsDefaultInstance() {
}

CMsgClientEmoticonList_Effect::CMsgClientEmoticonList_Effect(const CMsgClientEmoticonList_Effect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientEmoticonList_Effect::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  count_ = 0;
  time_received_ = 0u;
  infinite_use_ = false;
  appid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientEmoticonList_Effect::~CMsgClientEmoticonList_Effect() {
  SharedDtor();
}

void CMsgClientEmoticonList_Effect::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientEmoticonList_Effect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientEmoticonList_Effect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientEmoticonList_Effect_descriptor_;
}

const CMsgClientEmoticonList_Effect& CMsgClientEmoticonList_Effect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  return *default_instance_;
}

CMsgClientEmoticonList_Effect* CMsgClientEmoticonList_Effect::default_instance_ = NULL;

CMsgClientEmoticonList_Effect* CMsgClientEmoticonList_Effect::New() const {
  return new CMsgClientEmoticonList_Effect;
}

void CMsgClientEmoticonList_Effect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    count_ = 0;
    time_received_ = 0u;
    infinite_use_ = false;
    appid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientEmoticonList_Effect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time_received;
        break;
      }

      // optional uint32 time_received = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_received:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_received_)));
          set_has_time_received();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_infinite_use;
        break;
      }

      // optional bool infinite_use = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_infinite_use:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &infinite_use_)));
          set_has_infinite_use();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_appid;
        break;
      }

      // optional uint32 appid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientEmoticonList_Effect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // optional uint32 time_received = 3;
  if (has_time_received()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_received(), output);
  }

  // optional bool infinite_use = 4;
  if (has_infinite_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->infinite_use(), output);
  }

  // optional uint32 appid = 5;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->appid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientEmoticonList_Effect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // optional uint32 time_received = 3;
  if (has_time_received()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_received(), target);
  }

  // optional bool infinite_use = 4;
  if (has_infinite_use()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->infinite_use(), target);
  }

  // optional uint32 appid = 5;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->appid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientEmoticonList_Effect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional uint32 time_received = 3;
    if (has_time_received()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_received());
    }

    // optional bool infinite_use = 4;
    if (has_infinite_use()) {
      total_size += 1 + 1;
    }

    // optional uint32 appid = 5;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientEmoticonList_Effect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientEmoticonList_Effect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientEmoticonList_Effect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientEmoticonList_Effect::MergeFrom(const CMsgClientEmoticonList_Effect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_time_received()) {
      set_time_received(from.time_received());
    }
    if (from.has_infinite_use()) {
      set_infinite_use(from.infinite_use());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientEmoticonList_Effect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientEmoticonList_Effect::CopyFrom(const CMsgClientEmoticonList_Effect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientEmoticonList_Effect::IsInitialized() const {

  return true;
}

void CMsgClientEmoticonList_Effect::Swap(CMsgClientEmoticonList_Effect* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(count_, other->count_);
    std::swap(time_received_, other->time_received_);
    std::swap(infinite_use_, other->infinite_use_);
    std::swap(appid_, other->appid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientEmoticonList_Effect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientEmoticonList_Effect_descriptor_;
  metadata.reflection = CMsgClientEmoticonList_Effect_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientEmoticonList::kEmoticonsFieldNumber;
const int CMsgClientEmoticonList::kStickersFieldNumber;
const int CMsgClientEmoticonList::kEffectsFieldNumber;
#endif  // !_MSC_VER

CMsgClientEmoticonList::CMsgClientEmoticonList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientEmoticonList::InitAsDefaultInstance() {
}

CMsgClientEmoticonList::CMsgClientEmoticonList(const CMsgClientEmoticonList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientEmoticonList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientEmoticonList::~CMsgClientEmoticonList() {
  SharedDtor();
}

void CMsgClientEmoticonList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientEmoticonList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientEmoticonList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientEmoticonList_descriptor_;
}

const CMsgClientEmoticonList& CMsgClientEmoticonList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  return *default_instance_;
}

CMsgClientEmoticonList* CMsgClientEmoticonList::default_instance_ = NULL;

CMsgClientEmoticonList* CMsgClientEmoticonList::New() const {
  return new CMsgClientEmoticonList;
}

void CMsgClientEmoticonList::Clear() {
  emoticons_.Clear();
  stickers_.Clear();
  effects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientEmoticonList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgClientEmoticonList.Emoticon emoticons = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_emoticons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_emoticons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_emoticons;
        if (input->ExpectTag(18)) goto parse_stickers;
        break;
      }

      // repeated .CMsgClientEmoticonList.Sticker stickers = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stickers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stickers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stickers;
        if (input->ExpectTag(26)) goto parse_effects;
        break;
      }

      // repeated .CMsgClientEmoticonList.Effect effects = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_effects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_effects;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientEmoticonList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgClientEmoticonList.Emoticon emoticons = 1;
  for (int i = 0; i < this->emoticons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->emoticons(i), output);
  }

  // repeated .CMsgClientEmoticonList.Sticker stickers = 2;
  for (int i = 0; i < this->stickers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stickers(i), output);
  }

  // repeated .CMsgClientEmoticonList.Effect effects = 3;
  for (int i = 0; i < this->effects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->effects(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientEmoticonList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgClientEmoticonList.Emoticon emoticons = 1;
  for (int i = 0; i < this->emoticons_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->emoticons(i), target);
  }

  // repeated .CMsgClientEmoticonList.Sticker stickers = 2;
  for (int i = 0; i < this->stickers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stickers(i), target);
  }

  // repeated .CMsgClientEmoticonList.Effect effects = 3;
  for (int i = 0; i < this->effects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->effects(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientEmoticonList::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgClientEmoticonList.Emoticon emoticons = 1;
  total_size += 1 * this->emoticons_size();
  for (int i = 0; i < this->emoticons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->emoticons(i));
  }

  // repeated .CMsgClientEmoticonList.Sticker stickers = 2;
  total_size += 1 * this->stickers_size();
  for (int i = 0; i < this->stickers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stickers(i));
  }

  // repeated .CMsgClientEmoticonList.Effect effects = 3;
  total_size += 1 * this->effects_size();
  for (int i = 0; i < this->effects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->effects(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientEmoticonList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientEmoticonList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientEmoticonList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientEmoticonList::MergeFrom(const CMsgClientEmoticonList& from) {
  GOOGLE_CHECK_NE(&from, this);
  emoticons_.MergeFrom(from.emoticons_);
  stickers_.MergeFrom(from.stickers_);
  effects_.MergeFrom(from.effects_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientEmoticonList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientEmoticonList::CopyFrom(const CMsgClientEmoticonList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientEmoticonList::IsInitialized() const {

  return true;
}

void CMsgClientEmoticonList::Swap(CMsgClientEmoticonList* other) {
  if (other != this) {
    emoticons_.Swap(&other->emoticons_);
    stickers_.Swap(&other->stickers_);
    effects_.Swap(&other->effects_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientEmoticonList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientEmoticonList_descriptor_;
  metadata.reflection = CMsgClientEmoticonList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

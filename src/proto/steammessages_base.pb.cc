// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_base.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_base.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgIPAddress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgIPAddress_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgIPAddressBucket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgIPAddressBucket_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgProtoBufHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgProtoBufHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgMulti_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgMulti_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgProtobufWrapped_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgProtobufWrapped_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgAuthTicket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgAuthTicket_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCDDBAppDetailCommon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCDDBAppDetailCommon_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgAppRights_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgAppRights_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCuratorPreferences_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCuratorPreferences_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLocalizationToken_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLocalizationToken_reflection_ = NULL;
const ::google::protobuf::Descriptor* CClanEventUserNewsTuple_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CClanEventUserNewsTuple_reflection_ = NULL;
const ::google::protobuf::Descriptor* CClanMatchEventByRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CClanMatchEventByRange_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCommunity_ClanAnnouncementInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCommunity_ClanAnnouncementInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CClanEventData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CClanEventData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CBilling_Address_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CBilling_Address_reflection_ = NULL;
const ::google::protobuf::Descriptor* CPackageReservationStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CPackageReservationStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgKeyValuePair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgKeyValuePair_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgKeyValueSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgKeyValueSet_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EBanContentCheckResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EProtoClanEventType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PartnerEventNotificationType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_steammessages_5fbase_2eproto() {
  protobuf_AddDesc_steammessages_5fbase_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "steammessages_base.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgIPAddress_descriptor_ = file->message_type(0);
  static const int CMsgIPAddress_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgIPAddress, v4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgIPAddress, v6_),
  };
  CMsgIPAddress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgIPAddress_descriptor_,
      CMsgIPAddress::default_instance_,
      CMsgIPAddress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgIPAddress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgIPAddress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgIPAddress));
  CMsgIPAddressBucket_descriptor_ = file->message_type(1);
  static const int CMsgIPAddressBucket_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgIPAddressBucket, original_ip_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgIPAddressBucket, bucket_),
  };
  CMsgIPAddressBucket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgIPAddressBucket_descriptor_,
      CMsgIPAddressBucket::default_instance_,
      CMsgIPAddressBucket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgIPAddressBucket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgIPAddressBucket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgIPAddressBucket));
  CMsgProtoBufHeader_descriptor_ = file->message_type(2);
  static const int CMsgProtoBufHeader_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, client_sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, routing_appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, jobid_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, jobid_target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, target_job_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, seq_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, error_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, auth_account_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, token_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, admin_spoofing_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, transport_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, publisher_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, sysid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, trace_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, webapi_key_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, is_from_external_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, forward_to_sysid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, cm_sysid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, launcher_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, realm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, timeout_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, debug_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, debug_source_string_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, token_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, ip_v6_),
  };
  CMsgProtoBufHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgProtoBufHeader_descriptor_,
      CMsgProtoBufHeader::default_instance_,
      CMsgProtoBufHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgProtoBufHeader));
  CMsgMulti_descriptor_ = file->message_type(3);
  static const int CMsgMulti_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMulti, size_unzipped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMulti, message_body_),
  };
  CMsgMulti_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgMulti_descriptor_,
      CMsgMulti::default_instance_,
      CMsgMulti_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMulti, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMulti, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgMulti));
  CMsgProtobufWrapped_descriptor_ = file->message_type(4);
  static const int CMsgProtobufWrapped_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtobufWrapped, message_body_),
  };
  CMsgProtobufWrapped_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgProtobufWrapped_descriptor_,
      CMsgProtobufWrapped::default_instance_,
      CMsgProtobufWrapped_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtobufWrapped, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtobufWrapped, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgProtobufWrapped));
  CMsgAuthTicket_descriptor_ = file->message_type(5);
  static const int CMsgAuthTicket_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAuthTicket, estate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAuthTicket, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAuthTicket, steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAuthTicket, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAuthTicket, h_steam_pipe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAuthTicket, ticket_crc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAuthTicket, ticket_),
  };
  CMsgAuthTicket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgAuthTicket_descriptor_,
      CMsgAuthTicket::default_instance_,
      CMsgAuthTicket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAuthTicket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAuthTicket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgAuthTicket));
  CCDDBAppDetailCommon_descriptor_ = file->message_type(6);
  static const int CCDDBAppDetailCommon_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, tool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, demo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, media_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, community_visible_stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, friendly_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, propagation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, has_adult_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, is_visible_in_steam_china_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, app_type_),
  };
  CCDDBAppDetailCommon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCDDBAppDetailCommon_descriptor_,
      CCDDBAppDetailCommon::default_instance_,
      CCDDBAppDetailCommon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCDDBAppDetailCommon));
  CMsgAppRights_descriptor_ = file->message_type(7);
  static const int CMsgAppRights_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, edit_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, publish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, view_error_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, download_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, upload_cdkeys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, generate_cdkeys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, view_financials_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, manage_ceg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, manage_signing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, manage_cdkeys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, edit_marketing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, economy_support_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, economy_support_supervisor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, manage_pricing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, broadcast_live_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, view_marketing_traffic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, edit_store_display_content_),
  };
  CMsgAppRights_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgAppRights_descriptor_,
      CMsgAppRights::default_instance_,
      CMsgAppRights_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgAppRights));
  CCuratorPreferences_descriptor_ = file->message_type(8);
  static const int CCuratorPreferences_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCuratorPreferences, supported_languages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCuratorPreferences, platform_windows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCuratorPreferences, platform_mac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCuratorPreferences, platform_linux_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCuratorPreferences, vr_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCuratorPreferences, adult_content_violence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCuratorPreferences, adult_content_sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCuratorPreferences, timestamp_updated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCuratorPreferences, tagids_curated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCuratorPreferences, tagids_filtered_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCuratorPreferences, website_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCuratorPreferences, website_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCuratorPreferences, discussion_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCuratorPreferences, show_broadcast_),
  };
  CCuratorPreferences_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCuratorPreferences_descriptor_,
      CCuratorPreferences::default_instance_,
      CCuratorPreferences_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCuratorPreferences, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCuratorPreferences, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCuratorPreferences));
  CLocalizationToken_descriptor_ = file->message_type(9);
  static const int CLocalizationToken_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLocalizationToken, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLocalizationToken, localized_string_),
  };
  CLocalizationToken_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLocalizationToken_descriptor_,
      CLocalizationToken::default_instance_,
      CLocalizationToken_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLocalizationToken, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLocalizationToken, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLocalizationToken));
  CClanEventUserNewsTuple_descriptor_ = file->message_type(10);
  static const int CClanEventUserNewsTuple_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventUserNewsTuple, clanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventUserNewsTuple, event_gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventUserNewsTuple, announcement_gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventUserNewsTuple, rtime_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventUserNewsTuple, rtime_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventUserNewsTuple, priority_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventUserNewsTuple, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventUserNewsTuple, clamp_range_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventUserNewsTuple, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventUserNewsTuple, rtime32_last_modified_),
  };
  CClanEventUserNewsTuple_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CClanEventUserNewsTuple_descriptor_,
      CClanEventUserNewsTuple::default_instance_,
      CClanEventUserNewsTuple_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventUserNewsTuple, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventUserNewsTuple, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CClanEventUserNewsTuple));
  CClanMatchEventByRange_descriptor_ = file->message_type(11);
  static const int CClanMatchEventByRange_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanMatchEventByRange, rtime_before_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanMatchEventByRange, rtime_after_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanMatchEventByRange, qualified_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanMatchEventByRange, events_),
  };
  CClanMatchEventByRange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CClanMatchEventByRange_descriptor_,
      CClanMatchEventByRange::default_instance_,
      CClanMatchEventByRange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanMatchEventByRange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanMatchEventByRange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CClanMatchEventByRange));
  CCommunity_ClanAnnouncementInfo_descriptor_ = file->message_type(12);
  static const int CCommunity_ClanAnnouncementInfo_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, clanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, posterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, headline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, posttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, commentcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, hidden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, forum_topic_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, event_gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, voteupcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, votedowncount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, ban_check_result_),
  };
  CCommunity_ClanAnnouncementInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCommunity_ClanAnnouncementInfo_descriptor_,
      CCommunity_ClanAnnouncementInfo::default_instance_,
      CCommunity_ClanAnnouncementInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCommunity_ClanAnnouncementInfo));
  CClanEventData_descriptor_ = file->message_type(13);
  static const int CClanEventData_offsets_[30] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventData, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventData, clan_steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventData, event_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventData, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventData, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventData, server_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventData, server_password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventData, rtime32_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventData, rtime32_end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventData, comment_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventData, creator_steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventData, last_update_steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventData, event_notes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventData, jsondata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventData, announcement_body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventData, published_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventData, hidden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventData, rtime32_visibility_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventData, rtime32_visibility_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventData, broadcaster_accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventData, follower_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventData, ignore_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventData, forum_topic_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventData, rtime32_last_modified_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventData, news_post_gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventData, rtime_mod_reviewed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventData, featured_app_tagid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventData, referenced_appids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventData, build_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventData, build_branch_),
  };
  CClanEventData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CClanEventData_descriptor_,
      CClanEventData::default_instance_,
      CClanEventData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClanEventData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CClanEventData));
  CBilling_Address_descriptor_ = file->message_type(14);
  static const int CBilling_Address_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBilling_Address, first_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBilling_Address, last_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBilling_Address, address1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBilling_Address, address2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBilling_Address, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBilling_Address, us_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBilling_Address, country_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBilling_Address, postcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBilling_Address, zip_plus4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBilling_Address, phone_),
  };
  CBilling_Address_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CBilling_Address_descriptor_,
      CBilling_Address::default_instance_,
      CBilling_Address_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBilling_Address, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBilling_Address, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CBilling_Address));
  CPackageReservationStatus_descriptor_ = file->message_type(15);
  static const int CPackageReservationStatus_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPackageReservationStatus, packageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPackageReservationStatus, reservation_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPackageReservationStatus, queue_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPackageReservationStatus, total_queue_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPackageReservationStatus, reservation_country_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPackageReservationStatus, expired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPackageReservationStatus, time_expires_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPackageReservationStatus, time_reserved_),
  };
  CPackageReservationStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CPackageReservationStatus_descriptor_,
      CPackageReservationStatus::default_instance_,
      CPackageReservationStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPackageReservationStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPackageReservationStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CPackageReservationStatus));
  CMsgKeyValuePair_descriptor_ = file->message_type(16);
  static const int CMsgKeyValuePair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKeyValuePair, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKeyValuePair, value_),
  };
  CMsgKeyValuePair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgKeyValuePair_descriptor_,
      CMsgKeyValuePair::default_instance_,
      CMsgKeyValuePair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKeyValuePair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKeyValuePair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgKeyValuePair));
  CMsgKeyValueSet_descriptor_ = file->message_type(17);
  static const int CMsgKeyValueSet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKeyValueSet, pairs_),
  };
  CMsgKeyValueSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgKeyValueSet_descriptor_,
      CMsgKeyValueSet::default_instance_,
      CMsgKeyValueSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKeyValueSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgKeyValueSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgKeyValueSet));
  EBanContentCheckResult_descriptor_ = file->enum_type(0);
  EProtoClanEventType_descriptor_ = file->enum_type(1);
  PartnerEventNotificationType_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_steammessages_5fbase_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgIPAddress_descriptor_, &CMsgIPAddress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgIPAddressBucket_descriptor_, &CMsgIPAddressBucket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgProtoBufHeader_descriptor_, &CMsgProtoBufHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgMulti_descriptor_, &CMsgMulti::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgProtobufWrapped_descriptor_, &CMsgProtobufWrapped::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgAuthTicket_descriptor_, &CMsgAuthTicket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCDDBAppDetailCommon_descriptor_, &CCDDBAppDetailCommon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgAppRights_descriptor_, &CMsgAppRights::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCuratorPreferences_descriptor_, &CCuratorPreferences::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLocalizationToken_descriptor_, &CLocalizationToken::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CClanEventUserNewsTuple_descriptor_, &CClanEventUserNewsTuple::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CClanMatchEventByRange_descriptor_, &CClanMatchEventByRange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCommunity_ClanAnnouncementInfo_descriptor_, &CCommunity_ClanAnnouncementInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CClanEventData_descriptor_, &CClanEventData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CBilling_Address_descriptor_, &CBilling_Address::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CPackageReservationStatus_descriptor_, &CPackageReservationStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgKeyValuePair_descriptor_, &CMsgKeyValuePair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgKeyValueSet_descriptor_, &CMsgKeyValueSet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_steammessages_5fbase_2eproto() {
  delete CMsgIPAddress::default_instance_;
  delete CMsgIPAddress_reflection_;
  delete CMsgIPAddressBucket::default_instance_;
  delete CMsgIPAddressBucket_reflection_;
  delete CMsgProtoBufHeader::default_instance_;
  delete CMsgProtoBufHeader_reflection_;
  delete CMsgMulti::default_instance_;
  delete CMsgMulti_reflection_;
  delete CMsgProtobufWrapped::default_instance_;
  delete CMsgProtobufWrapped_reflection_;
  delete CMsgAuthTicket::default_instance_;
  delete CMsgAuthTicket_reflection_;
  delete CCDDBAppDetailCommon::default_instance_;
  delete CCDDBAppDetailCommon_reflection_;
  delete CMsgAppRights::default_instance_;
  delete CMsgAppRights_reflection_;
  delete CCuratorPreferences::default_instance_;
  delete CCuratorPreferences_reflection_;
  delete CLocalizationToken::default_instance_;
  delete CLocalizationToken_reflection_;
  delete CClanEventUserNewsTuple::default_instance_;
  delete CClanEventUserNewsTuple_reflection_;
  delete CClanMatchEventByRange::default_instance_;
  delete CClanMatchEventByRange_reflection_;
  delete CCommunity_ClanAnnouncementInfo::default_instance_;
  delete CCommunity_ClanAnnouncementInfo_reflection_;
  delete CClanEventData::default_instance_;
  delete CClanEventData_reflection_;
  delete CBilling_Address::default_instance_;
  delete CBilling_Address_reflection_;
  delete CPackageReservationStatus::default_instance_;
  delete CPackageReservationStatus_reflection_;
  delete CMsgKeyValuePair::default_instance_;
  delete CMsgKeyValuePair_reflection_;
  delete CMsgKeyValueSet::default_instance_;
  delete CMsgKeyValueSet_reflection_;
}

void protobuf_AddDesc_steammessages_5fbase_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030steammessages_base.proto\032 google/proto"
    "buf/descriptor.proto\"\'\n\rCMsgIPAddress\022\n\n"
    "\002v4\030\001 \001(\007\022\n\n\002v6\030\002 \001(\014\"R\n\023CMsgIPAddressBu"
    "cket\022+\n\023original_ip_address\030\001 \001(\0132\016.CMsg"
    "IPAddress\022\016\n\006bucket\030\002 \001(\006\"\343\005\n\022CMsgProtoB"
    "ufHeader\022\017\n\007steamid\030\001 \001(\006\022\030\n\020client_sess"
    "ionid\030\002 \001(\005\022\025\n\rrouting_appid\030\003 \001(\r\022*\n\014jo"
    "bid_source\030\n \001(\006:\02418446744073709551615\022*"
    "\n\014jobid_target\030\013 \001(\006:\024184467440737095516"
    "15\022\027\n\017target_job_name\030\014 \001(\t\022\017\n\007seq_num\030\030"
    " \001(\005\022\022\n\007eresult\030\r \001(\005:\0012\022\025\n\rerror_messag"
    "e\030\016 \001(\t\022\032\n\022auth_account_flags\030\020 \001(\r\022\024\n\014t"
    "oken_source\030\026 \001(\r\022\033\n\023admin_spoofing_user"
    "\030\027 \001(\010\022\032\n\017transport_error\030\021 \001(\005:\0011\022\'\n\tme"
    "ssageid\030\022 \001(\004:\02418446744073709551615\022\032\n\022p"
    "ublisher_group_id\030\023 \001(\r\022\r\n\005sysid\030\024 \001(\r\022\021"
    "\n\ttrace_tag\030\025 \001(\004\022\025\n\rwebapi_key_id\030\031 \001(\r"
    "\022\037\n\027is_from_external_source\030\032 \001(\010\022\030\n\020for"
    "ward_to_sysid\030\033 \003(\r\022\020\n\010cm_sysid\030\034 \001(\r\022\030\n"
    "\rlauncher_type\030\037 \001(\r:\0010\022\020\n\005realm\030  \001(\r:\001"
    "0\022\026\n\ntimeout_ms\030! \001(\005:\002-1\022\024\n\014debug_sourc"
    "e\030\" \001(\t\022!\n\031debug_source_string_index\030# \001"
    "(\r\022\020\n\010token_id\030$ \001(\004\022\n\n\002ip\030\017 \001(\r\022\r\n\005ip_v"
    "6\030\035 \001(\014\"8\n\tCMsgMulti\022\025\n\rsize_unzipped\030\001 "
    "\001(\r\022\024\n\014message_body\030\002 \001(\014\"+\n\023CMsgProtobu"
    "fWrapped\022\024\n\014message_body\030\001 \001(\014\"\217\001\n\016CMsgA"
    "uthTicket\022\016\n\006estate\030\001 \001(\r\022\022\n\007eresult\030\002 \001"
    "(\r:\0012\022\017\n\007steamid\030\003 \001(\006\022\016\n\006gameid\030\004 \001(\006\022\024"
    "\n\014h_steam_pipe\030\005 \001(\r\022\022\n\nticket_crc\030\006 \001(\r"
    "\022\016\n\006ticket\030\007 \001(\014\"\211\002\n\024CCDDBAppDetailCommo"
    "n\022\r\n\005appid\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\014\n\004icon\030\003"
    " \001(\t\022\014\n\004tool\030\006 \001(\010\022\014\n\004demo\030\007 \001(\010\022\r\n\005medi"
    "a\030\010 \001(\010\022\037\n\027community_visible_stats\030\t \001(\010"
    "\022\025\n\rfriendly_name\030\n \001(\t\022\023\n\013propagation\030\013"
    " \001(\t\022\031\n\021has_adult_content\030\014 \001(\010\022!\n\031is_vi"
    "sible_in_steam_china\030\r \001(\010\022\020\n\010app_type\030\016"
    " \001(\r\"\263\003\n\rCMsgAppRights\022\021\n\tedit_info\030\001 \001("
    "\010\022\017\n\007publish\030\002 \001(\010\022\027\n\017view_error_data\030\003 "
    "\001(\010\022\020\n\010download\030\004 \001(\010\022\025\n\rupload_cdkeys\030\005"
    " \001(\010\022\027\n\017generate_cdkeys\030\006 \001(\010\022\027\n\017view_fi"
    "nancials\030\007 \001(\010\022\022\n\nmanage_ceg\030\010 \001(\010\022\026\n\016ma"
    "nage_signing\030\t \001(\010\022\025\n\rmanage_cdkeys\030\n \001("
    "\010\022\026\n\016edit_marketing\030\013 \001(\010\022\027\n\017economy_sup"
    "port\030\014 \001(\010\022\"\n\032economy_support_supervisor"
    "\030\r \001(\010\022\026\n\016manage_pricing\030\016 \001(\010\022\026\n\016broadc"
    "ast_live\030\017 \001(\010\022\036\n\026view_marketing_traffic"
    "\030\020 \001(\010\022\"\n\032edit_store_display_content\030\021 \001"
    "(\010\"\361\002\n\023CCuratorPreferences\022\033\n\023supported_"
    "languages\030\001 \001(\r\022\030\n\020platform_windows\030\002 \001("
    "\010\022\024\n\014platform_mac\030\003 \001(\010\022\026\n\016platform_linu"
    "x\030\004 \001(\010\022\022\n\nvr_content\030\005 \001(\010\022\036\n\026adult_con"
    "tent_violence\030\006 \001(\010\022\031\n\021adult_content_sex"
    "\030\007 \001(\010\022\031\n\021timestamp_updated\030\010 \001(\r\022\026\n\016tag"
    "ids_curated\030\t \003(\r\022\027\n\017tagids_filtered\030\n \003"
    "(\r\022\025\n\rwebsite_title\030\013 \001(\t\022\023\n\013website_url"
    "\030\014 \001(\t\022\026\n\016discussion_url\030\r \001(\t\022\026\n\016show_b"
    "roadcast\030\016 \001(\010\"@\n\022CLocalizationToken\022\020\n\010"
    "language\030\001 \001(\r\022\030\n\020localized_string\030\002 \001(\t"
    "\"\354\001\n\027CClanEventUserNewsTuple\022\016\n\006clanid\030\001"
    " \001(\r\022\021\n\tevent_gid\030\002 \001(\006\022\030\n\020announcement_"
    "gid\030\003 \001(\006\022\023\n\013rtime_start\030\004 \001(\r\022\021\n\trtime_"
    "end\030\005 \001(\r\022\026\n\016priority_score\030\006 \001(\r\022\014\n\004typ"
    "e\030\007 \001(\r\022\030\n\020clamp_range_slot\030\010 \001(\r\022\r\n\005app"
    "id\030\t \001(\r\022\035\n\025rtime32_last_modified\030\n \001(\r\""
    "\200\001\n\026CClanMatchEventByRange\022\024\n\014rtime_befo"
    "re\030\001 \001(\r\022\023\n\013rtime_after\030\002 \001(\r\022\021\n\tqualifi"
    "ed\030\003 \001(\r\022(\n\006events\030\004 \003(\0132\030.CClanEventUse"
    "rNewsTuple\"\213\003\n\037CCommunity_ClanAnnounceme"
    "ntInfo\022\013\n\003gid\030\001 \001(\004\022\016\n\006clanid\030\002 \001(\004\022\020\n\010p"
    "osterid\030\003 \001(\004\022\020\n\010headline\030\004 \001(\t\022\020\n\010postt"
    "ime\030\005 \001(\r\022\022\n\nupdatetime\030\006 \001(\r\022\014\n\004body\030\007 "
    "\001(\t\022\024\n\014commentcount\030\010 \001(\005\022\014\n\004tags\030\t \003(\t\022"
    "\020\n\010language\030\n \001(\005\022\016\n\006hidden\030\013 \001(\010\022\026\n\016for"
    "um_topic_id\030\014 \001(\006\022\021\n\tevent_gid\030\r \001(\006\022\023\n\013"
    "voteupcount\030\016 \001(\005\022\025\n\rvotedowncount\030\017 \001(\005"
    "\022V\n\020ban_check_result\030\020 \001(\0162\027.EBanContent"
    "CheckResult:#k_EBanContentCheckResult_No"
    "tScanned\"\246\006\n\016CClanEventData\022\013\n\003gid\030\001 \001(\006"
    "\022\024\n\014clan_steamid\030\002 \001(\006\022\022\n\nevent_name\030\003 \001"
    "(\t\022;\n\nevent_type\030\004 \001(\0162\024.EProtoClanEvent"
    "Type:\021k_EClanOtherEvent\022\r\n\005appid\030\005 \001(\r\022\026"
    "\n\016server_address\030\006 \001(\t\022\027\n\017server_passwor"
    "d\030\007 \001(\t\022\032\n\022rtime32_start_time\030\010 \001(\r\022\030\n\020r"
    "time32_end_time\030\t \001(\r\022\025\n\rcomment_count\030\n"
    " \001(\005\022\027\n\017creator_steamid\030\013 \001(\006\022\033\n\023last_up"
    "date_steamid\030\014 \001(\006\022\023\n\013event_notes\030\r \001(\t\022"
    "\020\n\010jsondata\030\016 \001(\t\022;\n\021announcement_body\030\017"
    " \001(\0132 .CCommunity_ClanAnnouncementInfo\022\021"
    "\n\tpublished\030\020 \001(\010\022\016\n\006hidden\030\021 \001(\010\022 \n\030rti"
    "me32_visibility_start\030\022 \001(\r\022\036\n\026rtime32_v"
    "isibility_end\030\023 \001(\r\022\035\n\025broadcaster_accou"
    "ntid\030\024 \001(\r\022\026\n\016follower_count\030\025 \001(\r\022\024\n\014ig"
    "nore_count\030\026 \001(\r\022\026\n\016forum_topic_id\030\027 \001(\006"
    "\022\035\n\025rtime32_last_modified\030\030 \001(\r\022\025\n\rnews_"
    "post_gid\030\031 \001(\006\022\032\n\022rtime_mod_reviewed\030\032 \001"
    "(\r\022\032\n\022featured_app_tagid\030\033 \001(\r\022\031\n\021refere"
    "nced_appids\030\034 \003(\r\022\020\n\010build_id\030\035 \001(\r\022\024\n\014b"
    "uild_branch\030\036 \001(\t\"\307\001\n\020CBilling_Address\022\022"
    "\n\nfirst_name\030\001 \001(\t\022\021\n\tlast_name\030\002 \001(\t\022\020\n"
    "\010address1\030\003 \001(\t\022\020\n\010address2\030\004 \001(\t\022\014\n\004cit"
    "y\030\005 \001(\t\022\020\n\010us_state\030\006 \001(\t\022\024\n\014country_cod"
    "e\030\007 \001(\t\022\020\n\010postcode\030\010 \001(\t\022\021\n\tzip_plus4\030\t"
    " \001(\005\022\r\n\005phone\030\n \001(\t\"\333\001\n\031CPackageReservat"
    "ionStatus\022\021\n\tpackageid\030\001 \001(\r\022\031\n\021reservat"
    "ion_state\030\002 \001(\005\022\026\n\016queue_position\030\003 \001(\005\022"
    "\030\n\020total_queue_size\030\004 \001(\005\022 \n\030reservation"
    "_country_code\030\005 \001(\t\022\017\n\007expired\030\006 \001(\010\022\024\n\014"
    "time_expires\030\007 \001(\r\022\025\n\rtime_reserved\030\010 \001("
    "\r\"/\n\020CMsgKeyValuePair\022\014\n\004name\030\001 \001(\t\022\r\n\005v"
    "alue\030\002 \001(\t\"3\n\017CMsgKeyValueSet\022 \n\005pairs\030\001"
    " \003(\0132\021.CMsgKeyValuePair*\330\002\n\026EBanContentC"
    "heckResult\022\'\n#k_EBanContentCheckResult_N"
    "otScanned\020\000\022\"\n\036k_EBanContentCheckResult_"
    "Reset\020\001\022*\n&k_EBanContentCheckResult_Need"
    "sChecking\020\002\022)\n%k_EBanContentCheckResult_"
    "VeryUnlikely\020\005\022%\n!k_EBanContentCheckResu"
    "lt_Unlikely\020\036\022%\n!k_EBanContentCheckResul"
    "t_Possible\0202\022#\n\037k_EBanContentCheckResult"
    "_Likely\020K\022\'\n#k_EBanContentCheckResult_Ve"
    "ryLikely\020d*\353\007\n\023EProtoClanEventType\022\025\n\021k_"
    "EClanOtherEvent\020\001\022\024\n\020k_EClanGameEvent\020\002\022"
    "\025\n\021k_EClanPartyEvent\020\003\022\027\n\023k_EClanMeeting"
    "Event\020\004\022\034\n\030k_EClanSpecialCauseEvent\020\005\022\034\n"
    "\030k_EClanMusicAndArtsEvent\020\006\022\026\n\022k_EClanSp"
    "ortsEvent\020\007\022\024\n\020k_EClanTripEvent\020\010\022\024\n\020k_E"
    "ClanChatEvent\020\t\022\033\n\027k_EClanGameReleaseEve"
    "nt\020\n\022\031\n\025k_EClanBroadcastEvent\020\013\022\033\n\027k_ECl"
    "anSmallUpdateEvent\020\014\022&\n\"k_EClanPreAnnoun"
    "ceMajorUpdateEvent\020\r\022\033\n\027k_EClanMajorUpda"
    "teEvent\020\016\022\032\n\026k_EClanDLCReleaseEvent\020\017\022\035\n"
    "\031k_EClanFutureReleaseEvent\020\020\022&\n\"k_EClanE"
    "SportTournamentStreamEvent\020\021\022\031\n\025k_EClanD"
    "evStreamEvent\020\022\022\034\n\030k_EClanFamousStreamEv"
    "ent\020\023\022\031\n\025k_EClanGameSalesEvent\020\024\022\035\n\031k_EC"
    "lanGameItemSalesEvent\020\025\022\035\n\031k_EClanInGame"
    "BonusXPEvent\020\026\022\032\n\026k_EClanInGameLootEvent"
    "\020\027\022\033\n\027k_EClanInGamePerksEvent\020\030\022\037\n\033k_ECl"
    "anInGameChallengeEvent\020\031\022\035\n\031k_EClanInGam"
    "eContestEvent\020\032\022\023\n\017k_EClanIRLEvent\020\033\022\024\n\020"
    "k_EClanNewsEvent\020\034\022\033\n\027k_EClanBetaRelease"
    "Event\020\035\022$\n k_EClanInGameContentReleaseEv"
    "ent\020\036\022\024\n\020k_EClanFreeTrial\020\037\022\030\n\024k_EClanSe"
    "asonRelease\020 \022\027\n\023k_EClanSeasonUpdate\020!\022\031"
    "\n\025k_EClanCrosspostEvent\020\"\022\035\n\031k_EClanInGa"
    "meEventGeneral\020#*\201\001\n\034PartnerEventNotific"
    "ationType\022\021\n\rk_EEventStart\020\000\022\032\n\026k_EEvent"
    "BroadcastStart\020\001\022\026\n\022k_EEventMatchStart\020\002"
    "\022\032\n\026k_EEventPartnerMaxType\020\003:A\n\022msgpool_"
    "soft_limit\022\037.google.protobuf.MessageOpti"
    "ons\030\320\206\003 \001(\005:\00232:B\n\022msgpool_hard_limit\022\037."
    "google.protobuf.MessageOptions\030\321\206\003 \001(\005:\003"
    "384:C\n\024force_php_generation\022\034.google.pro"
    "tobuf.FileOptions\030\320\206\003 \001(\010:\005false:H\n\030php_"
    "output_always_number\022\035.google.protobuf.F"
    "ieldOptions\030\344\206\003 \001(\010:\005false:J\n\032allow_fiel"
    "d_named_steam_id\022\035.google.protobuf.Field"
    "Options\030\350\206\003 \001(\010:\005falseB\tH\001\200\001\001\200\265\030\001", 6273);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_base.proto", &protobuf_RegisterTypes);
  CMsgIPAddress::default_instance_ = new CMsgIPAddress();
  CMsgIPAddressBucket::default_instance_ = new CMsgIPAddressBucket();
  CMsgProtoBufHeader::default_instance_ = new CMsgProtoBufHeader();
  CMsgMulti::default_instance_ = new CMsgMulti();
  CMsgProtobufWrapped::default_instance_ = new CMsgProtobufWrapped();
  CMsgAuthTicket::default_instance_ = new CMsgAuthTicket();
  CCDDBAppDetailCommon::default_instance_ = new CCDDBAppDetailCommon();
  CMsgAppRights::default_instance_ = new CMsgAppRights();
  CCuratorPreferences::default_instance_ = new CCuratorPreferences();
  CLocalizationToken::default_instance_ = new CLocalizationToken();
  CClanEventUserNewsTuple::default_instance_ = new CClanEventUserNewsTuple();
  CClanMatchEventByRange::default_instance_ = new CClanMatchEventByRange();
  CCommunity_ClanAnnouncementInfo::default_instance_ = new CCommunity_ClanAnnouncementInfo();
  CClanEventData::default_instance_ = new CClanEventData();
  CBilling_Address::default_instance_ = new CBilling_Address();
  CPackageReservationStatus::default_instance_ = new CPackageReservationStatus();
  CMsgKeyValuePair::default_instance_ = new CMsgKeyValuePair();
  CMsgKeyValueSet::default_instance_ = new CMsgKeyValueSet();
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::MessageOptions::default_instance(),
    50000, 5, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::MessageOptions::default_instance(),
    50001, 5, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::FileOptions::default_instance(),
    50000, 8, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::FieldOptions::default_instance(),
    50020, 8, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::FieldOptions::default_instance(),
    50024, 8, false, false);
  CMsgIPAddress::default_instance_->InitAsDefaultInstance();
  CMsgIPAddressBucket::default_instance_->InitAsDefaultInstance();
  CMsgProtoBufHeader::default_instance_->InitAsDefaultInstance();
  CMsgMulti::default_instance_->InitAsDefaultInstance();
  CMsgProtobufWrapped::default_instance_->InitAsDefaultInstance();
  CMsgAuthTicket::default_instance_->InitAsDefaultInstance();
  CCDDBAppDetailCommon::default_instance_->InitAsDefaultInstance();
  CMsgAppRights::default_instance_->InitAsDefaultInstance();
  CCuratorPreferences::default_instance_->InitAsDefaultInstance();
  CLocalizationToken::default_instance_->InitAsDefaultInstance();
  CClanEventUserNewsTuple::default_instance_->InitAsDefaultInstance();
  CClanMatchEventByRange::default_instance_->InitAsDefaultInstance();
  CCommunity_ClanAnnouncementInfo::default_instance_->InitAsDefaultInstance();
  CClanEventData::default_instance_->InitAsDefaultInstance();
  CBilling_Address::default_instance_->InitAsDefaultInstance();
  CPackageReservationStatus::default_instance_->InitAsDefaultInstance();
  CMsgKeyValuePair::default_instance_->InitAsDefaultInstance();
  CMsgKeyValueSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_steammessages_5fbase_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_steammessages_5fbase_2eproto {
  StaticDescriptorInitializer_steammessages_5fbase_2eproto() {
    protobuf_AddDesc_steammessages_5fbase_2eproto();
  }
} static_descriptor_initializer_steammessages_5fbase_2eproto_;
const ::google::protobuf::EnumDescriptor* EBanContentCheckResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EBanContentCheckResult_descriptor_;
}
bool EBanContentCheckResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 5:
    case 30:
    case 50:
    case 75:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EProtoClanEventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EProtoClanEventType_descriptor_;
}
bool EProtoClanEventType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PartnerEventNotificationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartnerEventNotificationType_descriptor_;
}
bool PartnerEventNotificationType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgIPAddress::kV4FieldNumber;
const int CMsgIPAddress::kV6FieldNumber;
#endif  // !_MSC_VER

CMsgIPAddress::CMsgIPAddress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgIPAddress::InitAsDefaultInstance() {
}

CMsgIPAddress::CMsgIPAddress(const CMsgIPAddress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgIPAddress::SharedCtor() {
  _cached_size_ = 0;
  v4_ = 0u;
  v6_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgIPAddress::~CMsgIPAddress() {
  SharedDtor();
}

void CMsgIPAddress::SharedDtor() {
  if (v6_ != &::google::protobuf::internal::kEmptyString) {
    delete v6_;
  }
  if (this != default_instance_) {
  }
}

void CMsgIPAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgIPAddress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgIPAddress_descriptor_;
}

const CMsgIPAddress& CMsgIPAddress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fbase_2eproto();
  return *default_instance_;
}

CMsgIPAddress* CMsgIPAddress::default_instance_ = NULL;

CMsgIPAddress* CMsgIPAddress::New() const {
  return new CMsgIPAddress;
}

void CMsgIPAddress::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    v4_ = 0u;
    if (has_v6()) {
      if (v6_ != &::google::protobuf::internal::kEmptyString) {
        v6_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgIPAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 v4 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &v4_)));
          set_has_v4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_v6;
        break;
      }

      // optional bytes v6 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_v6:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_v6()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgIPAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 v4 = 1;
  if (has_v4()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->v4(), output);
  }

  // optional bytes v6 = 2;
  if (has_v6()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->v6(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgIPAddress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 v4 = 1;
  if (has_v4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->v4(), target);
  }

  // optional bytes v6 = 2;
  if (has_v6()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->v6(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgIPAddress::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 v4 = 1;
    if (has_v4()) {
      total_size += 1 + 4;
    }

    // optional bytes v6 = 2;
    if (has_v6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->v6());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgIPAddress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgIPAddress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgIPAddress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgIPAddress::MergeFrom(const CMsgIPAddress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_v4()) {
      set_v4(from.v4());
    }
    if (from.has_v6()) {
      set_v6(from.v6());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgIPAddress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgIPAddress::CopyFrom(const CMsgIPAddress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgIPAddress::IsInitialized() const {

  return true;
}

void CMsgIPAddress::Swap(CMsgIPAddress* other) {
  if (other != this) {
    std::swap(v4_, other->v4_);
    std::swap(v6_, other->v6_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgIPAddress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgIPAddress_descriptor_;
  metadata.reflection = CMsgIPAddress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgIPAddressBucket::kOriginalIpAddressFieldNumber;
const int CMsgIPAddressBucket::kBucketFieldNumber;
#endif  // !_MSC_VER

CMsgIPAddressBucket::CMsgIPAddressBucket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgIPAddressBucket::InitAsDefaultInstance() {
  original_ip_address_ = const_cast< ::CMsgIPAddress*>(&::CMsgIPAddress::default_instance());
}

CMsgIPAddressBucket::CMsgIPAddressBucket(const CMsgIPAddressBucket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgIPAddressBucket::SharedCtor() {
  _cached_size_ = 0;
  original_ip_address_ = NULL;
  bucket_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgIPAddressBucket::~CMsgIPAddressBucket() {
  SharedDtor();
}

void CMsgIPAddressBucket::SharedDtor() {
  if (this != default_instance_) {
    delete original_ip_address_;
  }
}

void CMsgIPAddressBucket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgIPAddressBucket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgIPAddressBucket_descriptor_;
}

const CMsgIPAddressBucket& CMsgIPAddressBucket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fbase_2eproto();
  return *default_instance_;
}

CMsgIPAddressBucket* CMsgIPAddressBucket::default_instance_ = NULL;

CMsgIPAddressBucket* CMsgIPAddressBucket::New() const {
  return new CMsgIPAddressBucket;
}

void CMsgIPAddressBucket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_original_ip_address()) {
      if (original_ip_address_ != NULL) original_ip_address_->::CMsgIPAddress::Clear();
    }
    bucket_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgIPAddressBucket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgIPAddress original_ip_address = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_original_ip_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_bucket;
        break;
      }

      // optional fixed64 bucket = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bucket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &bucket_)));
          set_has_bucket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgIPAddressBucket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CMsgIPAddress original_ip_address = 1;
  if (has_original_ip_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->original_ip_address(), output);
  }

  // optional fixed64 bucket = 2;
  if (has_bucket()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->bucket(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgIPAddressBucket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMsgIPAddress original_ip_address = 1;
  if (has_original_ip_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->original_ip_address(), target);
  }

  // optional fixed64 bucket = 2;
  if (has_bucket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->bucket(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgIPAddressBucket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgIPAddress original_ip_address = 1;
    if (has_original_ip_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->original_ip_address());
    }

    // optional fixed64 bucket = 2;
    if (has_bucket()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgIPAddressBucket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgIPAddressBucket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgIPAddressBucket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgIPAddressBucket::MergeFrom(const CMsgIPAddressBucket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_original_ip_address()) {
      mutable_original_ip_address()->::CMsgIPAddress::MergeFrom(from.original_ip_address());
    }
    if (from.has_bucket()) {
      set_bucket(from.bucket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgIPAddressBucket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgIPAddressBucket::CopyFrom(const CMsgIPAddressBucket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgIPAddressBucket::IsInitialized() const {

  return true;
}

void CMsgIPAddressBucket::Swap(CMsgIPAddressBucket* other) {
  if (other != this) {
    std::swap(original_ip_address_, other->original_ip_address_);
    std::swap(bucket_, other->bucket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgIPAddressBucket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgIPAddressBucket_descriptor_;
  metadata.reflection = CMsgIPAddressBucket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgProtoBufHeader::kSteamidFieldNumber;
const int CMsgProtoBufHeader::kClientSessionidFieldNumber;
const int CMsgProtoBufHeader::kRoutingAppidFieldNumber;
const int CMsgProtoBufHeader::kJobidSourceFieldNumber;
const int CMsgProtoBufHeader::kJobidTargetFieldNumber;
const int CMsgProtoBufHeader::kTargetJobNameFieldNumber;
const int CMsgProtoBufHeader::kSeqNumFieldNumber;
const int CMsgProtoBufHeader::kEresultFieldNumber;
const int CMsgProtoBufHeader::kErrorMessageFieldNumber;
const int CMsgProtoBufHeader::kAuthAccountFlagsFieldNumber;
const int CMsgProtoBufHeader::kTokenSourceFieldNumber;
const int CMsgProtoBufHeader::kAdminSpoofingUserFieldNumber;
const int CMsgProtoBufHeader::kTransportErrorFieldNumber;
const int CMsgProtoBufHeader::kMessageidFieldNumber;
const int CMsgProtoBufHeader::kPublisherGroupIdFieldNumber;
const int CMsgProtoBufHeader::kSysidFieldNumber;
const int CMsgProtoBufHeader::kTraceTagFieldNumber;
const int CMsgProtoBufHeader::kWebapiKeyIdFieldNumber;
const int CMsgProtoBufHeader::kIsFromExternalSourceFieldNumber;
const int CMsgProtoBufHeader::kForwardToSysidFieldNumber;
const int CMsgProtoBufHeader::kCmSysidFieldNumber;
const int CMsgProtoBufHeader::kLauncherTypeFieldNumber;
const int CMsgProtoBufHeader::kRealmFieldNumber;
const int CMsgProtoBufHeader::kTimeoutMsFieldNumber;
const int CMsgProtoBufHeader::kDebugSourceFieldNumber;
const int CMsgProtoBufHeader::kDebugSourceStringIndexFieldNumber;
const int CMsgProtoBufHeader::kTokenIdFieldNumber;
const int CMsgProtoBufHeader::kIpFieldNumber;
const int CMsgProtoBufHeader::kIpV6FieldNumber;
#endif  // !_MSC_VER

CMsgProtoBufHeader::CMsgProtoBufHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgProtoBufHeader::InitAsDefaultInstance() {
}

CMsgProtoBufHeader::CMsgProtoBufHeader(const CMsgProtoBufHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgProtoBufHeader::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  client_sessionid_ = 0;
  routing_appid_ = 0u;
  jobid_source_ = GOOGLE_ULONGLONG(18446744073709551615);
  jobid_target_ = GOOGLE_ULONGLONG(18446744073709551615);
  target_job_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seq_num_ = 0;
  eresult_ = 2;
  error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  auth_account_flags_ = 0u;
  token_source_ = 0u;
  admin_spoofing_user_ = false;
  transport_error_ = 1;
  messageid_ = GOOGLE_ULONGLONG(18446744073709551615);
  publisher_group_id_ = 0u;
  sysid_ = 0u;
  trace_tag_ = GOOGLE_ULONGLONG(0);
  webapi_key_id_ = 0u;
  is_from_external_source_ = false;
  cm_sysid_ = 0u;
  launcher_type_ = 0u;
  realm_ = 0u;
  timeout_ms_ = -1;
  debug_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  debug_source_string_index_ = 0u;
  token_id_ = GOOGLE_ULONGLONG(0);
  ip_ = 0u;
  ip_v6_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgProtoBufHeader::~CMsgProtoBufHeader() {
  SharedDtor();
}

void CMsgProtoBufHeader::SharedDtor() {
  if (target_job_name_ != &::google::protobuf::internal::kEmptyString) {
    delete target_job_name_;
  }
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    delete error_message_;
  }
  if (debug_source_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_source_;
  }
  if (ip_v6_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_v6_;
  }
  if (this != default_instance_) {
  }
}

void CMsgProtoBufHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgProtoBufHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgProtoBufHeader_descriptor_;
}

const CMsgProtoBufHeader& CMsgProtoBufHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fbase_2eproto();
  return *default_instance_;
}

CMsgProtoBufHeader* CMsgProtoBufHeader::default_instance_ = NULL;

CMsgProtoBufHeader* CMsgProtoBufHeader::New() const {
  return new CMsgProtoBufHeader;
}

void CMsgProtoBufHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_ = GOOGLE_ULONGLONG(0);
    client_sessionid_ = 0;
    routing_appid_ = 0u;
    jobid_source_ = GOOGLE_ULONGLONG(18446744073709551615);
    jobid_target_ = GOOGLE_ULONGLONG(18446744073709551615);
    if (has_target_job_name()) {
      if (target_job_name_ != &::google::protobuf::internal::kEmptyString) {
        target_job_name_->clear();
      }
    }
    seq_num_ = 0;
    eresult_ = 2;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_error_message()) {
      if (error_message_ != &::google::protobuf::internal::kEmptyString) {
        error_message_->clear();
      }
    }
    auth_account_flags_ = 0u;
    token_source_ = 0u;
    admin_spoofing_user_ = false;
    transport_error_ = 1;
    messageid_ = GOOGLE_ULONGLONG(18446744073709551615);
    publisher_group_id_ = 0u;
    sysid_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    trace_tag_ = GOOGLE_ULONGLONG(0);
    webapi_key_id_ = 0u;
    is_from_external_source_ = false;
    cm_sysid_ = 0u;
    launcher_type_ = 0u;
    realm_ = 0u;
    timeout_ms_ = -1;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_debug_source()) {
      if (debug_source_ != &::google::protobuf::internal::kEmptyString) {
        debug_source_->clear();
      }
    }
    debug_source_string_index_ = 0u;
    token_id_ = GOOGLE_ULONGLONG(0);
    ip_ = 0u;
    if (has_ip_v6()) {
      if (ip_v6_ != &::google::protobuf::internal::kEmptyString) {
        ip_v6_->clear();
      }
    }
  }
  forward_to_sysid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgProtoBufHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_client_sessionid;
        break;
      }

      // optional int32 client_sessionid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_sessionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_sessionid_)));
          set_has_client_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_routing_appid;
        break;
      }

      // optional uint32 routing_appid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_routing_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &routing_appid_)));
          set_has_routing_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_jobid_source;
        break;
      }

      // optional fixed64 jobid_source = 10 [default = 18446744073709551615];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_jobid_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &jobid_source_)));
          set_has_jobid_source();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_jobid_target;
        break;
      }

      // optional fixed64 jobid_target = 11 [default = 18446744073709551615];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_jobid_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &jobid_target_)));
          set_has_jobid_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_target_job_name;
        break;
      }

      // optional string target_job_name = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_job_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_job_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->target_job_name().data(), this->target_job_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_eresult;
        break;
      }

      // optional int32 eresult = 13 [default = 2];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_error_message;
        break;
      }

      // optional string error_message = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_message().data(), this->error_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_ip;
        break;
      }

      // optional uint32 ip = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_auth_account_flags;
        break;
      }

      // optional uint32 auth_account_flags = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auth_account_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auth_account_flags_)));
          set_has_auth_account_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_transport_error;
        break;
      }

      // optional int32 transport_error = 17 [default = 1];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transport_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transport_error_)));
          set_has_transport_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_messageid;
        break;
      }

      // optional uint64 messageid = 18 [default = 18446744073709551615];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_messageid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &messageid_)));
          set_has_messageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_publisher_group_id;
        break;
      }

      // optional uint32 publisher_group_id = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_publisher_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &publisher_group_id_)));
          set_has_publisher_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_sysid;
        break;
      }

      // optional uint32 sysid = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sysid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sysid_)));
          set_has_sysid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_trace_tag;
        break;
      }

      // optional uint64 trace_tag = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trace_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trace_tag_)));
          set_has_trace_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_token_source;
        break;
      }

      // optional uint32 token_source = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_token_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &token_source_)));
          set_has_token_source();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_admin_spoofing_user;
        break;
      }

      // optional bool admin_spoofing_user = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_admin_spoofing_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &admin_spoofing_user_)));
          set_has_admin_spoofing_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_seq_num;
        break;
      }

      // optional int32 seq_num = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_num_)));
          set_has_seq_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_webapi_key_id;
        break;
      }

      // optional uint32 webapi_key_id = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_webapi_key_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webapi_key_id_)));
          set_has_webapi_key_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_is_from_external_source;
        break;
      }

      // optional bool is_from_external_source = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_from_external_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_from_external_source_)));
          set_has_is_from_external_source();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_forward_to_sysid;
        break;
      }

      // repeated uint32 forward_to_sysid = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forward_to_sysid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 216, input, this->mutable_forward_to_sysid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_forward_to_sysid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_forward_to_sysid;
        if (input->ExpectTag(224)) goto parse_cm_sysid;
        break;
      }

      // optional uint32 cm_sysid = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cm_sysid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cm_sysid_)));
          set_has_cm_sysid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_ip_v6;
        break;
      }

      // optional bytes ip_v6 = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip_v6:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip_v6()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_launcher_type;
        break;
      }

      // optional uint32 launcher_type = 31 [default = 0];
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_launcher_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &launcher_type_)));
          set_has_launcher_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_realm;
        break;
      }

      // optional uint32 realm = 32 [default = 0];
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_realm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &realm_)));
          set_has_realm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_timeout_ms;
        break;
      }

      // optional int32 timeout_ms = 33 [default = -1];
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeout_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_ms_)));
          set_has_timeout_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_debug_source;
        break;
      }

      // optional string debug_source = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->debug_source().data(), this->debug_source().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_debug_source_string_index;
        break;
      }

      // optional uint32 debug_source_string_index = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_debug_source_string_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &debug_source_string_index_)));
          set_has_debug_source_string_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_token_id;
        break;
      }

      // optional uint64 token_id = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_token_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &token_id_)));
          set_has_token_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgProtoBufHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional int32 client_sessionid = 2;
  if (has_client_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->client_sessionid(), output);
  }

  // optional uint32 routing_appid = 3;
  if (has_routing_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->routing_appid(), output);
  }

  // optional fixed64 jobid_source = 10 [default = 18446744073709551615];
  if (has_jobid_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(10, this->jobid_source(), output);
  }

  // optional fixed64 jobid_target = 11 [default = 18446744073709551615];
  if (has_jobid_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(11, this->jobid_target(), output);
  }

  // optional string target_job_name = 12;
  if (has_target_job_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_job_name().data(), this->target_job_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->target_job_name(), output);
  }

  // optional int32 eresult = 13 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->eresult(), output);
  }

  // optional string error_message = 14;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->error_message(), output);
  }

  // optional uint32 ip = 15;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->ip(), output);
  }

  // optional uint32 auth_account_flags = 16;
  if (has_auth_account_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->auth_account_flags(), output);
  }

  // optional int32 transport_error = 17 [default = 1];
  if (has_transport_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->transport_error(), output);
  }

  // optional uint64 messageid = 18 [default = 18446744073709551615];
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->messageid(), output);
  }

  // optional uint32 publisher_group_id = 19;
  if (has_publisher_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->publisher_group_id(), output);
  }

  // optional uint32 sysid = 20;
  if (has_sysid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->sysid(), output);
  }

  // optional uint64 trace_tag = 21;
  if (has_trace_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->trace_tag(), output);
  }

  // optional uint32 token_source = 22;
  if (has_token_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->token_source(), output);
  }

  // optional bool admin_spoofing_user = 23;
  if (has_admin_spoofing_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->admin_spoofing_user(), output);
  }

  // optional int32 seq_num = 24;
  if (has_seq_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->seq_num(), output);
  }

  // optional uint32 webapi_key_id = 25;
  if (has_webapi_key_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->webapi_key_id(), output);
  }

  // optional bool is_from_external_source = 26;
  if (has_is_from_external_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->is_from_external_source(), output);
  }

  // repeated uint32 forward_to_sysid = 27;
  for (int i = 0; i < this->forward_to_sysid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      27, this->forward_to_sysid(i), output);
  }

  // optional uint32 cm_sysid = 28;
  if (has_cm_sysid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->cm_sysid(), output);
  }

  // optional bytes ip_v6 = 29;
  if (has_ip_v6()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      29, this->ip_v6(), output);
  }

  // optional uint32 launcher_type = 31 [default = 0];
  if (has_launcher_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->launcher_type(), output);
  }

  // optional uint32 realm = 32 [default = 0];
  if (has_realm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->realm(), output);
  }

  // optional int32 timeout_ms = 33 [default = -1];
  if (has_timeout_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->timeout_ms(), output);
  }

  // optional string debug_source = 34;
  if (has_debug_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_source().data(), this->debug_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      34, this->debug_source(), output);
  }

  // optional uint32 debug_source_string_index = 35;
  if (has_debug_source_string_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->debug_source_string_index(), output);
  }

  // optional uint64 token_id = 36;
  if (has_token_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(36, this->token_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgProtoBufHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional int32 client_sessionid = 2;
  if (has_client_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->client_sessionid(), target);
  }

  // optional uint32 routing_appid = 3;
  if (has_routing_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->routing_appid(), target);
  }

  // optional fixed64 jobid_source = 10 [default = 18446744073709551615];
  if (has_jobid_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(10, this->jobid_source(), target);
  }

  // optional fixed64 jobid_target = 11 [default = 18446744073709551615];
  if (has_jobid_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(11, this->jobid_target(), target);
  }

  // optional string target_job_name = 12;
  if (has_target_job_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_job_name().data(), this->target_job_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->target_job_name(), target);
  }

  // optional int32 eresult = 13 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->eresult(), target);
  }

  // optional string error_message = 14;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->error_message(), target);
  }

  // optional uint32 ip = 15;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->ip(), target);
  }

  // optional uint32 auth_account_flags = 16;
  if (has_auth_account_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->auth_account_flags(), target);
  }

  // optional int32 transport_error = 17 [default = 1];
  if (has_transport_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->transport_error(), target);
  }

  // optional uint64 messageid = 18 [default = 18446744073709551615];
  if (has_messageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->messageid(), target);
  }

  // optional uint32 publisher_group_id = 19;
  if (has_publisher_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->publisher_group_id(), target);
  }

  // optional uint32 sysid = 20;
  if (has_sysid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->sysid(), target);
  }

  // optional uint64 trace_tag = 21;
  if (has_trace_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->trace_tag(), target);
  }

  // optional uint32 token_source = 22;
  if (has_token_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->token_source(), target);
  }

  // optional bool admin_spoofing_user = 23;
  if (has_admin_spoofing_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->admin_spoofing_user(), target);
  }

  // optional int32 seq_num = 24;
  if (has_seq_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->seq_num(), target);
  }

  // optional uint32 webapi_key_id = 25;
  if (has_webapi_key_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->webapi_key_id(), target);
  }

  // optional bool is_from_external_source = 26;
  if (has_is_from_external_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->is_from_external_source(), target);
  }

  // repeated uint32 forward_to_sysid = 27;
  for (int i = 0; i < this->forward_to_sysid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(27, this->forward_to_sysid(i), target);
  }

  // optional uint32 cm_sysid = 28;
  if (has_cm_sysid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->cm_sysid(), target);
  }

  // optional bytes ip_v6 = 29;
  if (has_ip_v6()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        29, this->ip_v6(), target);
  }

  // optional uint32 launcher_type = 31 [default = 0];
  if (has_launcher_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->launcher_type(), target);
  }

  // optional uint32 realm = 32 [default = 0];
  if (has_realm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->realm(), target);
  }

  // optional int32 timeout_ms = 33 [default = -1];
  if (has_timeout_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->timeout_ms(), target);
  }

  // optional string debug_source = 34;
  if (has_debug_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_source().data(), this->debug_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->debug_source(), target);
  }

  // optional uint32 debug_source_string_index = 35;
  if (has_debug_source_string_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->debug_source_string_index(), target);
  }

  // optional uint64 token_id = 36;
  if (has_token_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(36, this->token_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgProtoBufHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional int32 client_sessionid = 2;
    if (has_client_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_sessionid());
    }

    // optional uint32 routing_appid = 3;
    if (has_routing_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->routing_appid());
    }

    // optional fixed64 jobid_source = 10 [default = 18446744073709551615];
    if (has_jobid_source()) {
      total_size += 1 + 8;
    }

    // optional fixed64 jobid_target = 11 [default = 18446744073709551615];
    if (has_jobid_target()) {
      total_size += 1 + 8;
    }

    // optional string target_job_name = 12;
    if (has_target_job_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_job_name());
    }

    // optional int32 seq_num = 24;
    if (has_seq_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seq_num());
    }

    // optional int32 eresult = 13 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string error_message = 14;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }

    // optional uint32 auth_account_flags = 16;
    if (has_auth_account_flags()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auth_account_flags());
    }

    // optional uint32 token_source = 22;
    if (has_token_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->token_source());
    }

    // optional bool admin_spoofing_user = 23;
    if (has_admin_spoofing_user()) {
      total_size += 2 + 1;
    }

    // optional int32 transport_error = 17 [default = 1];
    if (has_transport_error()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transport_error());
    }

    // optional uint64 messageid = 18 [default = 18446744073709551615];
    if (has_messageid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->messageid());
    }

    // optional uint32 publisher_group_id = 19;
    if (has_publisher_group_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->publisher_group_id());
    }

    // optional uint32 sysid = 20;
    if (has_sysid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sysid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 trace_tag = 21;
    if (has_trace_tag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->trace_tag());
    }

    // optional uint32 webapi_key_id = 25;
    if (has_webapi_key_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webapi_key_id());
    }

    // optional bool is_from_external_source = 26;
    if (has_is_from_external_source()) {
      total_size += 2 + 1;
    }

    // optional uint32 cm_sysid = 28;
    if (has_cm_sysid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cm_sysid());
    }

    // optional uint32 launcher_type = 31 [default = 0];
    if (has_launcher_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->launcher_type());
    }

    // optional uint32 realm = 32 [default = 0];
    if (has_realm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->realm());
    }

    // optional int32 timeout_ms = 33 [default = -1];
    if (has_timeout_ms()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout_ms());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string debug_source = 34;
    if (has_debug_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_source());
    }

    // optional uint32 debug_source_string_index = 35;
    if (has_debug_source_string_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->debug_source_string_index());
    }

    // optional uint64 token_id = 36;
    if (has_token_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->token_id());
    }

    // optional uint32 ip = 15;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }

    // optional bytes ip_v6 = 29;
    if (has_ip_v6()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip_v6());
    }

  }
  // repeated uint32 forward_to_sysid = 27;
  {
    int data_size = 0;
    for (int i = 0; i < this->forward_to_sysid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->forward_to_sysid(i));
    }
    total_size += 2 * this->forward_to_sysid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgProtoBufHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgProtoBufHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgProtoBufHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgProtoBufHeader::MergeFrom(const CMsgProtoBufHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  forward_to_sysid_.MergeFrom(from.forward_to_sysid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_client_sessionid()) {
      set_client_sessionid(from.client_sessionid());
    }
    if (from.has_routing_appid()) {
      set_routing_appid(from.routing_appid());
    }
    if (from.has_jobid_source()) {
      set_jobid_source(from.jobid_source());
    }
    if (from.has_jobid_target()) {
      set_jobid_target(from.jobid_target());
    }
    if (from.has_target_job_name()) {
      set_target_job_name(from.target_job_name());
    }
    if (from.has_seq_num()) {
      set_seq_num(from.seq_num());
    }
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_error_message()) {
      set_error_message(from.error_message());
    }
    if (from.has_auth_account_flags()) {
      set_auth_account_flags(from.auth_account_flags());
    }
    if (from.has_token_source()) {
      set_token_source(from.token_source());
    }
    if (from.has_admin_spoofing_user()) {
      set_admin_spoofing_user(from.admin_spoofing_user());
    }
    if (from.has_transport_error()) {
      set_transport_error(from.transport_error());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_publisher_group_id()) {
      set_publisher_group_id(from.publisher_group_id());
    }
    if (from.has_sysid()) {
      set_sysid(from.sysid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_trace_tag()) {
      set_trace_tag(from.trace_tag());
    }
    if (from.has_webapi_key_id()) {
      set_webapi_key_id(from.webapi_key_id());
    }
    if (from.has_is_from_external_source()) {
      set_is_from_external_source(from.is_from_external_source());
    }
    if (from.has_cm_sysid()) {
      set_cm_sysid(from.cm_sysid());
    }
    if (from.has_launcher_type()) {
      set_launcher_type(from.launcher_type());
    }
    if (from.has_realm()) {
      set_realm(from.realm());
    }
    if (from.has_timeout_ms()) {
      set_timeout_ms(from.timeout_ms());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_debug_source()) {
      set_debug_source(from.debug_source());
    }
    if (from.has_debug_source_string_index()) {
      set_debug_source_string_index(from.debug_source_string_index());
    }
    if (from.has_token_id()) {
      set_token_id(from.token_id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_ip_v6()) {
      set_ip_v6(from.ip_v6());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgProtoBufHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgProtoBufHeader::CopyFrom(const CMsgProtoBufHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgProtoBufHeader::IsInitialized() const {

  return true;
}

void CMsgProtoBufHeader::Swap(CMsgProtoBufHeader* other) {
  if (other != this) {
    std::swap(steamid_, other->steamid_);
    std::swap(client_sessionid_, other->client_sessionid_);
    std::swap(routing_appid_, other->routing_appid_);
    std::swap(jobid_source_, other->jobid_source_);
    std::swap(jobid_target_, other->jobid_target_);
    std::swap(target_job_name_, other->target_job_name_);
    std::swap(seq_num_, other->seq_num_);
    std::swap(eresult_, other->eresult_);
    std::swap(error_message_, other->error_message_);
    std::swap(auth_account_flags_, other->auth_account_flags_);
    std::swap(token_source_, other->token_source_);
    std::swap(admin_spoofing_user_, other->admin_spoofing_user_);
    std::swap(transport_error_, other->transport_error_);
    std::swap(messageid_, other->messageid_);
    std::swap(publisher_group_id_, other->publisher_group_id_);
    std::swap(sysid_, other->sysid_);
    std::swap(trace_tag_, other->trace_tag_);
    std::swap(webapi_key_id_, other->webapi_key_id_);
    std::swap(is_from_external_source_, other->is_from_external_source_);
    forward_to_sysid_.Swap(&other->forward_to_sysid_);
    std::swap(cm_sysid_, other->cm_sysid_);
    std::swap(launcher_type_, other->launcher_type_);
    std::swap(realm_, other->realm_);
    std::swap(timeout_ms_, other->timeout_ms_);
    std::swap(debug_source_, other->debug_source_);
    std::swap(debug_source_string_index_, other->debug_source_string_index_);
    std::swap(token_id_, other->token_id_);
    std::swap(ip_, other->ip_);
    std::swap(ip_v6_, other->ip_v6_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgProtoBufHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgProtoBufHeader_descriptor_;
  metadata.reflection = CMsgProtoBufHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgMulti::kSizeUnzippedFieldNumber;
const int CMsgMulti::kMessageBodyFieldNumber;
#endif  // !_MSC_VER

CMsgMulti::CMsgMulti()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgMulti::InitAsDefaultInstance() {
}

CMsgMulti::CMsgMulti(const CMsgMulti& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgMulti::SharedCtor() {
  _cached_size_ = 0;
  size_unzipped_ = 0u;
  message_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgMulti::~CMsgMulti() {
  SharedDtor();
}

void CMsgMulti::SharedDtor() {
  if (message_body_ != &::google::protobuf::internal::kEmptyString) {
    delete message_body_;
  }
  if (this != default_instance_) {
  }
}

void CMsgMulti::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgMulti::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgMulti_descriptor_;
}

const CMsgMulti& CMsgMulti::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fbase_2eproto();
  return *default_instance_;
}

CMsgMulti* CMsgMulti::default_instance_ = NULL;

CMsgMulti* CMsgMulti::New() const {
  return new CMsgMulti;
}

void CMsgMulti::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    size_unzipped_ = 0u;
    if (has_message_body()) {
      if (message_body_ != &::google::protobuf::internal::kEmptyString) {
        message_body_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgMulti::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 size_unzipped = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_unzipped_)));
          set_has_size_unzipped();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message_body;
        break;
      }

      // optional bytes message_body = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgMulti::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 size_unzipped = 1;
  if (has_size_unzipped()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->size_unzipped(), output);
  }

  // optional bytes message_body = 2;
  if (has_message_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->message_body(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgMulti::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 size_unzipped = 1;
  if (has_size_unzipped()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->size_unzipped(), target);
  }

  // optional bytes message_body = 2;
  if (has_message_body()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->message_body(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgMulti::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 size_unzipped = 1;
    if (has_size_unzipped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size_unzipped());
    }

    // optional bytes message_body = 2;
    if (has_message_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message_body());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgMulti::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgMulti* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgMulti*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgMulti::MergeFrom(const CMsgMulti& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size_unzipped()) {
      set_size_unzipped(from.size_unzipped());
    }
    if (from.has_message_body()) {
      set_message_body(from.message_body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgMulti::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMulti::CopyFrom(const CMsgMulti& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMulti::IsInitialized() const {

  return true;
}

void CMsgMulti::Swap(CMsgMulti* other) {
  if (other != this) {
    std::swap(size_unzipped_, other->size_unzipped_);
    std::swap(message_body_, other->message_body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgMulti::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgMulti_descriptor_;
  metadata.reflection = CMsgMulti_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgProtobufWrapped::kMessageBodyFieldNumber;
#endif  // !_MSC_VER

CMsgProtobufWrapped::CMsgProtobufWrapped()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgProtobufWrapped::InitAsDefaultInstance() {
}

CMsgProtobufWrapped::CMsgProtobufWrapped(const CMsgProtobufWrapped& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgProtobufWrapped::SharedCtor() {
  _cached_size_ = 0;
  message_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgProtobufWrapped::~CMsgProtobufWrapped() {
  SharedDtor();
}

void CMsgProtobufWrapped::SharedDtor() {
  if (message_body_ != &::google::protobuf::internal::kEmptyString) {
    delete message_body_;
  }
  if (this != default_instance_) {
  }
}

void CMsgProtobufWrapped::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgProtobufWrapped::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgProtobufWrapped_descriptor_;
}

const CMsgProtobufWrapped& CMsgProtobufWrapped::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fbase_2eproto();
  return *default_instance_;
}

CMsgProtobufWrapped* CMsgProtobufWrapped::default_instance_ = NULL;

CMsgProtobufWrapped* CMsgProtobufWrapped::New() const {
  return new CMsgProtobufWrapped;
}

void CMsgProtobufWrapped::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_message_body()) {
      if (message_body_ != &::google::protobuf::internal::kEmptyString) {
        message_body_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgProtobufWrapped::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes message_body = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgProtobufWrapped::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes message_body = 1;
  if (has_message_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->message_body(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgProtobufWrapped::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes message_body = 1;
  if (has_message_body()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->message_body(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgProtobufWrapped::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes message_body = 1;
    if (has_message_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message_body());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgProtobufWrapped::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgProtobufWrapped* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgProtobufWrapped*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgProtobufWrapped::MergeFrom(const CMsgProtobufWrapped& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_body()) {
      set_message_body(from.message_body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgProtobufWrapped::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgProtobufWrapped::CopyFrom(const CMsgProtobufWrapped& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgProtobufWrapped::IsInitialized() const {

  return true;
}

void CMsgProtobufWrapped::Swap(CMsgProtobufWrapped* other) {
  if (other != this) {
    std::swap(message_body_, other->message_body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgProtobufWrapped::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgProtobufWrapped_descriptor_;
  metadata.reflection = CMsgProtobufWrapped_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgAuthTicket::kEstateFieldNumber;
const int CMsgAuthTicket::kEresultFieldNumber;
const int CMsgAuthTicket::kSteamidFieldNumber;
const int CMsgAuthTicket::kGameidFieldNumber;
const int CMsgAuthTicket::kHSteamPipeFieldNumber;
const int CMsgAuthTicket::kTicketCrcFieldNumber;
const int CMsgAuthTicket::kTicketFieldNumber;
#endif  // !_MSC_VER

CMsgAuthTicket::CMsgAuthTicket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgAuthTicket::InitAsDefaultInstance() {
}

CMsgAuthTicket::CMsgAuthTicket(const CMsgAuthTicket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgAuthTicket::SharedCtor() {
  _cached_size_ = 0;
  estate_ = 0u;
  eresult_ = 2u;
  steamid_ = GOOGLE_ULONGLONG(0);
  gameid_ = GOOGLE_ULONGLONG(0);
  h_steam_pipe_ = 0u;
  ticket_crc_ = 0u;
  ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgAuthTicket::~CMsgAuthTicket() {
  SharedDtor();
}

void CMsgAuthTicket::SharedDtor() {
  if (ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete ticket_;
  }
  if (this != default_instance_) {
  }
}

void CMsgAuthTicket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAuthTicket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgAuthTicket_descriptor_;
}

const CMsgAuthTicket& CMsgAuthTicket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fbase_2eproto();
  return *default_instance_;
}

CMsgAuthTicket* CMsgAuthTicket::default_instance_ = NULL;

CMsgAuthTicket* CMsgAuthTicket::New() const {
  return new CMsgAuthTicket;
}

void CMsgAuthTicket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    estate_ = 0u;
    eresult_ = 2u;
    steamid_ = GOOGLE_ULONGLONG(0);
    gameid_ = GOOGLE_ULONGLONG(0);
    h_steam_pipe_ = 0u;
    ticket_crc_ = 0u;
    if (has_ticket()) {
      if (ticket_ != &::google::protobuf::internal::kEmptyString) {
        ticket_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgAuthTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 estate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &estate_)));
          set_has_estate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eresult;
        break;
      }

      // optional uint32 eresult = 2 [default = 2];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_steamid;
        break;
      }

      // optional fixed64 steamid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_gameid;
        break;
      }

      // optional fixed64 gameid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_h_steam_pipe;
        break;
      }

      // optional uint32 h_steam_pipe = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_h_steam_pipe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &h_steam_pipe_)));
          set_has_h_steam_pipe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ticket_crc;
        break;
      }

      // optional uint32 ticket_crc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ticket_crc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ticket_crc_)));
          set_has_ticket_crc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ticket;
        break;
      }

      // optional bytes ticket = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ticket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgAuthTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 estate = 1;
  if (has_estate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->estate(), output);
  }

  // optional uint32 eresult = 2 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->eresult(), output);
  }

  // optional fixed64 steamid = 3;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steamid(), output);
  }

  // optional fixed64 gameid = 4;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->gameid(), output);
  }

  // optional uint32 h_steam_pipe = 5;
  if (has_h_steam_pipe()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->h_steam_pipe(), output);
  }

  // optional uint32 ticket_crc = 6;
  if (has_ticket_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ticket_crc(), output);
  }

  // optional bytes ticket = 7;
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->ticket(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgAuthTicket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 estate = 1;
  if (has_estate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->estate(), target);
  }

  // optional uint32 eresult = 2 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->eresult(), target);
  }

  // optional fixed64 steamid = 3;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->steamid(), target);
  }

  // optional fixed64 gameid = 4;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->gameid(), target);
  }

  // optional uint32 h_steam_pipe = 5;
  if (has_h_steam_pipe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->h_steam_pipe(), target);
  }

  // optional uint32 ticket_crc = 6;
  if (has_ticket_crc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ticket_crc(), target);
  }

  // optional bytes ticket = 7;
  if (has_ticket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->ticket(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgAuthTicket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 estate = 1;
    if (has_estate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->estate());
    }

    // optional uint32 eresult = 2 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

    // optional fixed64 steamid = 3;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 gameid = 4;
    if (has_gameid()) {
      total_size += 1 + 8;
    }

    // optional uint32 h_steam_pipe = 5;
    if (has_h_steam_pipe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->h_steam_pipe());
    }

    // optional uint32 ticket_crc = 6;
    if (has_ticket_crc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ticket_crc());
    }

    // optional bytes ticket = 7;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ticket());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAuthTicket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgAuthTicket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgAuthTicket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgAuthTicket::MergeFrom(const CMsgAuthTicket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_estate()) {
      set_estate(from.estate());
    }
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_h_steam_pipe()) {
      set_h_steam_pipe(from.h_steam_pipe());
    }
    if (from.has_ticket_crc()) {
      set_ticket_crc(from.ticket_crc());
    }
    if (from.has_ticket()) {
      set_ticket(from.ticket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgAuthTicket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAuthTicket::CopyFrom(const CMsgAuthTicket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAuthTicket::IsInitialized() const {

  return true;
}

void CMsgAuthTicket::Swap(CMsgAuthTicket* other) {
  if (other != this) {
    std::swap(estate_, other->estate_);
    std::swap(eresult_, other->eresult_);
    std::swap(steamid_, other->steamid_);
    std::swap(gameid_, other->gameid_);
    std::swap(h_steam_pipe_, other->h_steam_pipe_);
    std::swap(ticket_crc_, other->ticket_crc_);
    std::swap(ticket_, other->ticket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgAuthTicket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgAuthTicket_descriptor_;
  metadata.reflection = CMsgAuthTicket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCDDBAppDetailCommon::kAppidFieldNumber;
const int CCDDBAppDetailCommon::kNameFieldNumber;
const int CCDDBAppDetailCommon::kIconFieldNumber;
const int CCDDBAppDetailCommon::kToolFieldNumber;
const int CCDDBAppDetailCommon::kDemoFieldNumber;
const int CCDDBAppDetailCommon::kMediaFieldNumber;
const int CCDDBAppDetailCommon::kCommunityVisibleStatsFieldNumber;
const int CCDDBAppDetailCommon::kFriendlyNameFieldNumber;
const int CCDDBAppDetailCommon::kPropagationFieldNumber;
const int CCDDBAppDetailCommon::kHasAdultContentFieldNumber;
const int CCDDBAppDetailCommon::kIsVisibleInSteamChinaFieldNumber;
const int CCDDBAppDetailCommon::kAppTypeFieldNumber;
#endif  // !_MSC_VER

CCDDBAppDetailCommon::CCDDBAppDetailCommon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCDDBAppDetailCommon::InitAsDefaultInstance() {
}

CCDDBAppDetailCommon::CCDDBAppDetailCommon(const CCDDBAppDetailCommon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCDDBAppDetailCommon::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tool_ = false;
  demo_ = false;
  media_ = false;
  community_visible_stats_ = false;
  friendly_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  propagation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  has_adult_content_ = false;
  is_visible_in_steam_china_ = false;
  app_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCDDBAppDetailCommon::~CCDDBAppDetailCommon() {
  SharedDtor();
}

void CCDDBAppDetailCommon::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (friendly_name_ != &::google::protobuf::internal::kEmptyString) {
    delete friendly_name_;
  }
  if (propagation_ != &::google::protobuf::internal::kEmptyString) {
    delete propagation_;
  }
  if (this != default_instance_) {
  }
}

void CCDDBAppDetailCommon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCDDBAppDetailCommon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCDDBAppDetailCommon_descriptor_;
}

const CCDDBAppDetailCommon& CCDDBAppDetailCommon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fbase_2eproto();
  return *default_instance_;
}

CCDDBAppDetailCommon* CCDDBAppDetailCommon::default_instance_ = NULL;

CCDDBAppDetailCommon* CCDDBAppDetailCommon::New() const {
  return new CCDDBAppDetailCommon;
}

void CCDDBAppDetailCommon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    tool_ = false;
    demo_ = false;
    media_ = false;
    community_visible_stats_ = false;
    if (has_friendly_name()) {
      if (friendly_name_ != &::google::protobuf::internal::kEmptyString) {
        friendly_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_propagation()) {
      if (propagation_ != &::google::protobuf::internal::kEmptyString) {
        propagation_->clear();
      }
    }
    has_adult_content_ = false;
    is_visible_in_steam_china_ = false;
    app_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCDDBAppDetailCommon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_icon;
        break;
      }

      // optional string icon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tool;
        break;
      }

      // optional bool tool = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tool_)));
          set_has_tool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_demo;
        break;
      }

      // optional bool demo = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_demo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &demo_)));
          set_has_demo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_media;
        break;
      }

      // optional bool media = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_media:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &media_)));
          set_has_media();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_community_visible_stats;
        break;
      }

      // optional bool community_visible_stats = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_community_visible_stats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &community_visible_stats_)));
          set_has_community_visible_stats();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_friendly_name;
        break;
      }

      // optional string friendly_name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendly_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendly_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->friendly_name().data(), this->friendly_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_propagation;
        break;
      }

      // optional string propagation = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_propagation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_propagation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->propagation().data(), this->propagation().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_has_adult_content;
        break;
      }

      // optional bool has_adult_content = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_adult_content:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_adult_content_)));
          set_has_has_adult_content();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_is_visible_in_steam_china;
        break;
      }

      // optional bool is_visible_in_steam_china = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_visible_in_steam_china:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_visible_in_steam_china_)));
          set_has_is_visible_in_steam_china();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_app_type;
        break;
      }

      // optional uint32 app_type = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_type_)));
          set_has_app_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCDDBAppDetailCommon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string icon = 3;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->icon(), output);
  }

  // optional bool tool = 6;
  if (has_tool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->tool(), output);
  }

  // optional bool demo = 7;
  if (has_demo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->demo(), output);
  }

  // optional bool media = 8;
  if (has_media()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->media(), output);
  }

  // optional bool community_visible_stats = 9;
  if (has_community_visible_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->community_visible_stats(), output);
  }

  // optional string friendly_name = 10;
  if (has_friendly_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendly_name().data(), this->friendly_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->friendly_name(), output);
  }

  // optional string propagation = 11;
  if (has_propagation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->propagation().data(), this->propagation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->propagation(), output);
  }

  // optional bool has_adult_content = 12;
  if (has_has_adult_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->has_adult_content(), output);
  }

  // optional bool is_visible_in_steam_china = 13;
  if (has_is_visible_in_steam_china()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_visible_in_steam_china(), output);
  }

  // optional uint32 app_type = 14;
  if (has_app_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->app_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCDDBAppDetailCommon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 appid = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string icon = 3;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->icon(), target);
  }

  // optional bool tool = 6;
  if (has_tool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->tool(), target);
  }

  // optional bool demo = 7;
  if (has_demo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->demo(), target);
  }

  // optional bool media = 8;
  if (has_media()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->media(), target);
  }

  // optional bool community_visible_stats = 9;
  if (has_community_visible_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->community_visible_stats(), target);
  }

  // optional string friendly_name = 10;
  if (has_friendly_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendly_name().data(), this->friendly_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->friendly_name(), target);
  }

  // optional string propagation = 11;
  if (has_propagation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->propagation().data(), this->propagation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->propagation(), target);
  }

  // optional bool has_adult_content = 12;
  if (has_has_adult_content()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->has_adult_content(), target);
  }

  // optional bool is_visible_in_steam_china = 13;
  if (has_is_visible_in_steam_china()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_visible_in_steam_china(), target);
  }

  // optional uint32 app_type = 14;
  if (has_app_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->app_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCDDBAppDetailCommon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string icon = 3;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // optional bool tool = 6;
    if (has_tool()) {
      total_size += 1 + 1;
    }

    // optional bool demo = 7;
    if (has_demo()) {
      total_size += 1 + 1;
    }

    // optional bool media = 8;
    if (has_media()) {
      total_size += 1 + 1;
    }

    // optional bool community_visible_stats = 9;
    if (has_community_visible_stats()) {
      total_size += 1 + 1;
    }

    // optional string friendly_name = 10;
    if (has_friendly_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friendly_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string propagation = 11;
    if (has_propagation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->propagation());
    }

    // optional bool has_adult_content = 12;
    if (has_has_adult_content()) {
      total_size += 1 + 1;
    }

    // optional bool is_visible_in_steam_china = 13;
    if (has_is_visible_in_steam_china()) {
      total_size += 1 + 1;
    }

    // optional uint32 app_type = 14;
    if (has_app_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCDDBAppDetailCommon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCDDBAppDetailCommon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCDDBAppDetailCommon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCDDBAppDetailCommon::MergeFrom(const CCDDBAppDetailCommon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_tool()) {
      set_tool(from.tool());
    }
    if (from.has_demo()) {
      set_demo(from.demo());
    }
    if (from.has_media()) {
      set_media(from.media());
    }
    if (from.has_community_visible_stats()) {
      set_community_visible_stats(from.community_visible_stats());
    }
    if (from.has_friendly_name()) {
      set_friendly_name(from.friendly_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_propagation()) {
      set_propagation(from.propagation());
    }
    if (from.has_has_adult_content()) {
      set_has_adult_content(from.has_adult_content());
    }
    if (from.has_is_visible_in_steam_china()) {
      set_is_visible_in_steam_china(from.is_visible_in_steam_china());
    }
    if (from.has_app_type()) {
      set_app_type(from.app_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCDDBAppDetailCommon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCDDBAppDetailCommon::CopyFrom(const CCDDBAppDetailCommon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCDDBAppDetailCommon::IsInitialized() const {

  return true;
}

void CCDDBAppDetailCommon::Swap(CCDDBAppDetailCommon* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(name_, other->name_);
    std::swap(icon_, other->icon_);
    std::swap(tool_, other->tool_);
    std::swap(demo_, other->demo_);
    std::swap(media_, other->media_);
    std::swap(community_visible_stats_, other->community_visible_stats_);
    std::swap(friendly_name_, other->friendly_name_);
    std::swap(propagation_, other->propagation_);
    std::swap(has_adult_content_, other->has_adult_content_);
    std::swap(is_visible_in_steam_china_, other->is_visible_in_steam_china_);
    std::swap(app_type_, other->app_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCDDBAppDetailCommon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCDDBAppDetailCommon_descriptor_;
  metadata.reflection = CCDDBAppDetailCommon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgAppRights::kEditInfoFieldNumber;
const int CMsgAppRights::kPublishFieldNumber;
const int CMsgAppRights::kViewErrorDataFieldNumber;
const int CMsgAppRights::kDownloadFieldNumber;
const int CMsgAppRights::kUploadCdkeysFieldNumber;
const int CMsgAppRights::kGenerateCdkeysFieldNumber;
const int CMsgAppRights::kViewFinancialsFieldNumber;
const int CMsgAppRights::kManageCegFieldNumber;
const int CMsgAppRights::kManageSigningFieldNumber;
const int CMsgAppRights::kManageCdkeysFieldNumber;
const int CMsgAppRights::kEditMarketingFieldNumber;
const int CMsgAppRights::kEconomySupportFieldNumber;
const int CMsgAppRights::kEconomySupportSupervisorFieldNumber;
const int CMsgAppRights::kManagePricingFieldNumber;
const int CMsgAppRights::kBroadcastLiveFieldNumber;
const int CMsgAppRights::kViewMarketingTrafficFieldNumber;
const int CMsgAppRights::kEditStoreDisplayContentFieldNumber;
#endif  // !_MSC_VER

CMsgAppRights::CMsgAppRights()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgAppRights::InitAsDefaultInstance() {
}

CMsgAppRights::CMsgAppRights(const CMsgAppRights& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgAppRights::SharedCtor() {
  _cached_size_ = 0;
  edit_info_ = false;
  publish_ = false;
  view_error_data_ = false;
  download_ = false;
  upload_cdkeys_ = false;
  generate_cdkeys_ = false;
  view_financials_ = false;
  manage_ceg_ = false;
  manage_signing_ = false;
  manage_cdkeys_ = false;
  edit_marketing_ = false;
  economy_support_ = false;
  economy_support_supervisor_ = false;
  manage_pricing_ = false;
  broadcast_live_ = false;
  view_marketing_traffic_ = false;
  edit_store_display_content_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgAppRights::~CMsgAppRights() {
  SharedDtor();
}

void CMsgAppRights::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgAppRights::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAppRights::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgAppRights_descriptor_;
}

const CMsgAppRights& CMsgAppRights::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fbase_2eproto();
  return *default_instance_;
}

CMsgAppRights* CMsgAppRights::default_instance_ = NULL;

CMsgAppRights* CMsgAppRights::New() const {
  return new CMsgAppRights;
}

void CMsgAppRights::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    edit_info_ = false;
    publish_ = false;
    view_error_data_ = false;
    download_ = false;
    upload_cdkeys_ = false;
    generate_cdkeys_ = false;
    view_financials_ = false;
    manage_ceg_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    manage_signing_ = false;
    manage_cdkeys_ = false;
    edit_marketing_ = false;
    economy_support_ = false;
    economy_support_supervisor_ = false;
    manage_pricing_ = false;
    broadcast_live_ = false;
    view_marketing_traffic_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    edit_store_display_content_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgAppRights::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool edit_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &edit_info_)));
          set_has_edit_info();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_publish;
        break;
      }

      // optional bool publish = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_publish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &publish_)));
          set_has_publish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_view_error_data;
        break;
      }

      // optional bool view_error_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_view_error_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &view_error_data_)));
          set_has_view_error_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_download;
        break;
      }

      // optional bool download = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_download:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &download_)));
          set_has_download();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_upload_cdkeys;
        break;
      }

      // optional bool upload_cdkeys = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upload_cdkeys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upload_cdkeys_)));
          set_has_upload_cdkeys();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_generate_cdkeys;
        break;
      }

      // optional bool generate_cdkeys = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_generate_cdkeys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &generate_cdkeys_)));
          set_has_generate_cdkeys();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_view_financials;
        break;
      }

      // optional bool view_financials = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_view_financials:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &view_financials_)));
          set_has_view_financials();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_manage_ceg;
        break;
      }

      // optional bool manage_ceg = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manage_ceg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &manage_ceg_)));
          set_has_manage_ceg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_manage_signing;
        break;
      }

      // optional bool manage_signing = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manage_signing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &manage_signing_)));
          set_has_manage_signing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_manage_cdkeys;
        break;
      }

      // optional bool manage_cdkeys = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manage_cdkeys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &manage_cdkeys_)));
          set_has_manage_cdkeys();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_edit_marketing;
        break;
      }

      // optional bool edit_marketing = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_edit_marketing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &edit_marketing_)));
          set_has_edit_marketing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_economy_support;
        break;
      }

      // optional bool economy_support = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_economy_support:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &economy_support_)));
          set_has_economy_support();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_economy_support_supervisor;
        break;
      }

      // optional bool economy_support_supervisor = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_economy_support_supervisor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &economy_support_supervisor_)));
          set_has_economy_support_supervisor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_manage_pricing;
        break;
      }

      // optional bool manage_pricing = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manage_pricing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &manage_pricing_)));
          set_has_manage_pricing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_broadcast_live;
        break;
      }

      // optional bool broadcast_live = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_broadcast_live:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &broadcast_live_)));
          set_has_broadcast_live();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_view_marketing_traffic;
        break;
      }

      // optional bool view_marketing_traffic = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_view_marketing_traffic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &view_marketing_traffic_)));
          set_has_view_marketing_traffic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_edit_store_display_content;
        break;
      }

      // optional bool edit_store_display_content = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_edit_store_display_content:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &edit_store_display_content_)));
          set_has_edit_store_display_content();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgAppRights::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool edit_info = 1;
  if (has_edit_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->edit_info(), output);
  }

  // optional bool publish = 2;
  if (has_publish()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->publish(), output);
  }

  // optional bool view_error_data = 3;
  if (has_view_error_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->view_error_data(), output);
  }

  // optional bool download = 4;
  if (has_download()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->download(), output);
  }

  // optional bool upload_cdkeys = 5;
  if (has_upload_cdkeys()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->upload_cdkeys(), output);
  }

  // optional bool generate_cdkeys = 6;
  if (has_generate_cdkeys()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->generate_cdkeys(), output);
  }

  // optional bool view_financials = 7;
  if (has_view_financials()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->view_financials(), output);
  }

  // optional bool manage_ceg = 8;
  if (has_manage_ceg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->manage_ceg(), output);
  }

  // optional bool manage_signing = 9;
  if (has_manage_signing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->manage_signing(), output);
  }

  // optional bool manage_cdkeys = 10;
  if (has_manage_cdkeys()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->manage_cdkeys(), output);
  }

  // optional bool edit_marketing = 11;
  if (has_edit_marketing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->edit_marketing(), output);
  }

  // optional bool economy_support = 12;
  if (has_economy_support()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->economy_support(), output);
  }

  // optional bool economy_support_supervisor = 13;
  if (has_economy_support_supervisor()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->economy_support_supervisor(), output);
  }

  // optional bool manage_pricing = 14;
  if (has_manage_pricing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->manage_pricing(), output);
  }

  // optional bool broadcast_live = 15;
  if (has_broadcast_live()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->broadcast_live(), output);
  }

  // optional bool view_marketing_traffic = 16;
  if (has_view_marketing_traffic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->view_marketing_traffic(), output);
  }

  // optional bool edit_store_display_content = 17;
  if (has_edit_store_display_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->edit_store_display_content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgAppRights::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool edit_info = 1;
  if (has_edit_info()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->edit_info(), target);
  }

  // optional bool publish = 2;
  if (has_publish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->publish(), target);
  }

  // optional bool view_error_data = 3;
  if (has_view_error_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->view_error_data(), target);
  }

  // optional bool download = 4;
  if (has_download()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->download(), target);
  }

  // optional bool upload_cdkeys = 5;
  if (has_upload_cdkeys()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->upload_cdkeys(), target);
  }

  // optional bool generate_cdkeys = 6;
  if (has_generate_cdkeys()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->generate_cdkeys(), target);
  }

  // optional bool view_financials = 7;
  if (has_view_financials()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->view_financials(), target);
  }

  // optional bool manage_ceg = 8;
  if (has_manage_ceg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->manage_ceg(), target);
  }

  // optional bool manage_signing = 9;
  if (has_manage_signing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->manage_signing(), target);
  }

  // optional bool manage_cdkeys = 10;
  if (has_manage_cdkeys()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->manage_cdkeys(), target);
  }

  // optional bool edit_marketing = 11;
  if (has_edit_marketing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->edit_marketing(), target);
  }

  // optional bool economy_support = 12;
  if (has_economy_support()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->economy_support(), target);
  }

  // optional bool economy_support_supervisor = 13;
  if (has_economy_support_supervisor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->economy_support_supervisor(), target);
  }

  // optional bool manage_pricing = 14;
  if (has_manage_pricing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->manage_pricing(), target);
  }

  // optional bool broadcast_live = 15;
  if (has_broadcast_live()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->broadcast_live(), target);
  }

  // optional bool view_marketing_traffic = 16;
  if (has_view_marketing_traffic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->view_marketing_traffic(), target);
  }

  // optional bool edit_store_display_content = 17;
  if (has_edit_store_display_content()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->edit_store_display_content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgAppRights::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool edit_info = 1;
    if (has_edit_info()) {
      total_size += 1 + 1;
    }

    // optional bool publish = 2;
    if (has_publish()) {
      total_size += 1 + 1;
    }

    // optional bool view_error_data = 3;
    if (has_view_error_data()) {
      total_size += 1 + 1;
    }

    // optional bool download = 4;
    if (has_download()) {
      total_size += 1 + 1;
    }

    // optional bool upload_cdkeys = 5;
    if (has_upload_cdkeys()) {
      total_size += 1 + 1;
    }

    // optional bool generate_cdkeys = 6;
    if (has_generate_cdkeys()) {
      total_size += 1 + 1;
    }

    // optional bool view_financials = 7;
    if (has_view_financials()) {
      total_size += 1 + 1;
    }

    // optional bool manage_ceg = 8;
    if (has_manage_ceg()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool manage_signing = 9;
    if (has_manage_signing()) {
      total_size += 1 + 1;
    }

    // optional bool manage_cdkeys = 10;
    if (has_manage_cdkeys()) {
      total_size += 1 + 1;
    }

    // optional bool edit_marketing = 11;
    if (has_edit_marketing()) {
      total_size += 1 + 1;
    }

    // optional bool economy_support = 12;
    if (has_economy_support()) {
      total_size += 1 + 1;
    }

    // optional bool economy_support_supervisor = 13;
    if (has_economy_support_supervisor()) {
      total_size += 1 + 1;
    }

    // optional bool manage_pricing = 14;
    if (has_manage_pricing()) {
      total_size += 1 + 1;
    }

    // optional bool broadcast_live = 15;
    if (has_broadcast_live()) {
      total_size += 1 + 1;
    }

    // optional bool view_marketing_traffic = 16;
    if (has_view_marketing_traffic()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool edit_store_display_content = 17;
    if (has_edit_store_display_content()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAppRights::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgAppRights* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgAppRights*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgAppRights::MergeFrom(const CMsgAppRights& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_edit_info()) {
      set_edit_info(from.edit_info());
    }
    if (from.has_publish()) {
      set_publish(from.publish());
    }
    if (from.has_view_error_data()) {
      set_view_error_data(from.view_error_data());
    }
    if (from.has_download()) {
      set_download(from.download());
    }
    if (from.has_upload_cdkeys()) {
      set_upload_cdkeys(from.upload_cdkeys());
    }
    if (from.has_generate_cdkeys()) {
      set_generate_cdkeys(from.generate_cdkeys());
    }
    if (from.has_view_financials()) {
      set_view_financials(from.view_financials());
    }
    if (from.has_manage_ceg()) {
      set_manage_ceg(from.manage_ceg());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_manage_signing()) {
      set_manage_signing(from.manage_signing());
    }
    if (from.has_manage_cdkeys()) {
      set_manage_cdkeys(from.manage_cdkeys());
    }
    if (from.has_edit_marketing()) {
      set_edit_marketing(from.edit_marketing());
    }
    if (from.has_economy_support()) {
      set_economy_support(from.economy_support());
    }
    if (from.has_economy_support_supervisor()) {
      set_economy_support_supervisor(from.economy_support_supervisor());
    }
    if (from.has_manage_pricing()) {
      set_manage_pricing(from.manage_pricing());
    }
    if (from.has_broadcast_live()) {
      set_broadcast_live(from.broadcast_live());
    }
    if (from.has_view_marketing_traffic()) {
      set_view_marketing_traffic(from.view_marketing_traffic());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_edit_store_display_content()) {
      set_edit_store_display_content(from.edit_store_display_content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgAppRights::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAppRights::CopyFrom(const CMsgAppRights& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAppRights::IsInitialized() const {

  return true;
}

void CMsgAppRights::Swap(CMsgAppRights* other) {
  if (other != this) {
    std::swap(edit_info_, other->edit_info_);
    std::swap(publish_, other->publish_);
    std::swap(view_error_data_, other->view_error_data_);
    std::swap(download_, other->download_);
    std::swap(upload_cdkeys_, other->upload_cdkeys_);
    std::swap(generate_cdkeys_, other->generate_cdkeys_);
    std::swap(view_financials_, other->view_financials_);
    std::swap(manage_ceg_, other->manage_ceg_);
    std::swap(manage_signing_, other->manage_signing_);
    std::swap(manage_cdkeys_, other->manage_cdkeys_);
    std::swap(edit_marketing_, other->edit_marketing_);
    std::swap(economy_support_, other->economy_support_);
    std::swap(economy_support_supervisor_, other->economy_support_supervisor_);
    std::swap(manage_pricing_, other->manage_pricing_);
    std::swap(broadcast_live_, other->broadcast_live_);
    std::swap(view_marketing_traffic_, other->view_marketing_traffic_);
    std::swap(edit_store_display_content_, other->edit_store_display_content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgAppRights::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgAppRights_descriptor_;
  metadata.reflection = CMsgAppRights_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCuratorPreferences::kSupportedLanguagesFieldNumber;
const int CCuratorPreferences::kPlatformWindowsFieldNumber;
const int CCuratorPreferences::kPlatformMacFieldNumber;
const int CCuratorPreferences::kPlatformLinuxFieldNumber;
const int CCuratorPreferences::kVrContentFieldNumber;
const int CCuratorPreferences::kAdultContentViolenceFieldNumber;
const int CCuratorPreferences::kAdultContentSexFieldNumber;
const int CCuratorPreferences::kTimestampUpdatedFieldNumber;
const int CCuratorPreferences::kTagidsCuratedFieldNumber;
const int CCuratorPreferences::kTagidsFilteredFieldNumber;
const int CCuratorPreferences::kWebsiteTitleFieldNumber;
const int CCuratorPreferences::kWebsiteUrlFieldNumber;
const int CCuratorPreferences::kDiscussionUrlFieldNumber;
const int CCuratorPreferences::kShowBroadcastFieldNumber;
#endif  // !_MSC_VER

CCuratorPreferences::CCuratorPreferences()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCuratorPreferences::InitAsDefaultInstance() {
}

CCuratorPreferences::CCuratorPreferences(const CCuratorPreferences& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCuratorPreferences::SharedCtor() {
  _cached_size_ = 0;
  supported_languages_ = 0u;
  platform_windows_ = false;
  platform_mac_ = false;
  platform_linux_ = false;
  vr_content_ = false;
  adult_content_violence_ = false;
  adult_content_sex_ = false;
  timestamp_updated_ = 0u;
  website_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  website_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  discussion_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  show_broadcast_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCuratorPreferences::~CCuratorPreferences() {
  SharedDtor();
}

void CCuratorPreferences::SharedDtor() {
  if (website_title_ != &::google::protobuf::internal::kEmptyString) {
    delete website_title_;
  }
  if (website_url_ != &::google::protobuf::internal::kEmptyString) {
    delete website_url_;
  }
  if (discussion_url_ != &::google::protobuf::internal::kEmptyString) {
    delete discussion_url_;
  }
  if (this != default_instance_) {
  }
}

void CCuratorPreferences::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCuratorPreferences::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCuratorPreferences_descriptor_;
}

const CCuratorPreferences& CCuratorPreferences::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fbase_2eproto();
  return *default_instance_;
}

CCuratorPreferences* CCuratorPreferences::default_instance_ = NULL;

CCuratorPreferences* CCuratorPreferences::New() const {
  return new CCuratorPreferences;
}

void CCuratorPreferences::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    supported_languages_ = 0u;
    platform_windows_ = false;
    platform_mac_ = false;
    platform_linux_ = false;
    vr_content_ = false;
    adult_content_violence_ = false;
    adult_content_sex_ = false;
    timestamp_updated_ = 0u;
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (has_website_title()) {
      if (website_title_ != &::google::protobuf::internal::kEmptyString) {
        website_title_->clear();
      }
    }
    if (has_website_url()) {
      if (website_url_ != &::google::protobuf::internal::kEmptyString) {
        website_url_->clear();
      }
    }
    if (has_discussion_url()) {
      if (discussion_url_ != &::google::protobuf::internal::kEmptyString) {
        discussion_url_->clear();
      }
    }
    show_broadcast_ = false;
  }
  tagids_curated_.Clear();
  tagids_filtered_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCuratorPreferences::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 supported_languages = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &supported_languages_)));
          set_has_supported_languages();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_platform_windows;
        break;
      }

      // optional bool platform_windows = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform_windows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &platform_windows_)));
          set_has_platform_windows();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_platform_mac;
        break;
      }

      // optional bool platform_mac = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform_mac:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &platform_mac_)));
          set_has_platform_mac();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_platform_linux;
        break;
      }

      // optional bool platform_linux = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform_linux:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &platform_linux_)));
          set_has_platform_linux();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_vr_content;
        break;
      }

      // optional bool vr_content = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vr_content:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vr_content_)));
          set_has_vr_content();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_adult_content_violence;
        break;
      }

      // optional bool adult_content_violence = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adult_content_violence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &adult_content_violence_)));
          set_has_adult_content_violence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_adult_content_sex;
        break;
      }

      // optional bool adult_content_sex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adult_content_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &adult_content_sex_)));
          set_has_adult_content_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_timestamp_updated;
        break;
      }

      // optional uint32 timestamp_updated = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp_updated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_updated_)));
          set_has_timestamp_updated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_tagids_curated;
        break;
      }

      // repeated uint32 tagids_curated = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tagids_curated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_tagids_curated())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tagids_curated())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_tagids_curated;
        if (input->ExpectTag(80)) goto parse_tagids_filtered;
        break;
      }

      // repeated uint32 tagids_filtered = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tagids_filtered:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80, input, this->mutable_tagids_filtered())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tagids_filtered())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_tagids_filtered;
        if (input->ExpectTag(90)) goto parse_website_title;
        break;
      }

      // optional string website_title = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_website_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_website_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->website_title().data(), this->website_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_website_url;
        break;
      }

      // optional string website_url = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_website_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_website_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->website_url().data(), this->website_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_discussion_url;
        break;
      }

      // optional string discussion_url = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_discussion_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_discussion_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->discussion_url().data(), this->discussion_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_show_broadcast;
        break;
      }

      // optional bool show_broadcast = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_broadcast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_broadcast_)));
          set_has_show_broadcast();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCuratorPreferences::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 supported_languages = 1;
  if (has_supported_languages()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->supported_languages(), output);
  }

  // optional bool platform_windows = 2;
  if (has_platform_windows()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->platform_windows(), output);
  }

  // optional bool platform_mac = 3;
  if (has_platform_mac()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->platform_mac(), output);
  }

  // optional bool platform_linux = 4;
  if (has_platform_linux()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->platform_linux(), output);
  }

  // optional bool vr_content = 5;
  if (has_vr_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->vr_content(), output);
  }

  // optional bool adult_content_violence = 6;
  if (has_adult_content_violence()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->adult_content_violence(), output);
  }

  // optional bool adult_content_sex = 7;
  if (has_adult_content_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->adult_content_sex(), output);
  }

  // optional uint32 timestamp_updated = 8;
  if (has_timestamp_updated()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->timestamp_updated(), output);
  }

  // repeated uint32 tagids_curated = 9;
  for (int i = 0; i < this->tagids_curated_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->tagids_curated(i), output);
  }

  // repeated uint32 tagids_filtered = 10;
  for (int i = 0; i < this->tagids_filtered_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->tagids_filtered(i), output);
  }

  // optional string website_title = 11;
  if (has_website_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->website_title().data(), this->website_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->website_title(), output);
  }

  // optional string website_url = 12;
  if (has_website_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->website_url().data(), this->website_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->website_url(), output);
  }

  // optional string discussion_url = 13;
  if (has_discussion_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->discussion_url().data(), this->discussion_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->discussion_url(), output);
  }

  // optional bool show_broadcast = 14;
  if (has_show_broadcast()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->show_broadcast(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCuratorPreferences::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 supported_languages = 1;
  if (has_supported_languages()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->supported_languages(), target);
  }

  // optional bool platform_windows = 2;
  if (has_platform_windows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->platform_windows(), target);
  }

  // optional bool platform_mac = 3;
  if (has_platform_mac()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->platform_mac(), target);
  }

  // optional bool platform_linux = 4;
  if (has_platform_linux()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->platform_linux(), target);
  }

  // optional bool vr_content = 5;
  if (has_vr_content()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->vr_content(), target);
  }

  // optional bool adult_content_violence = 6;
  if (has_adult_content_violence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->adult_content_violence(), target);
  }

  // optional bool adult_content_sex = 7;
  if (has_adult_content_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->adult_content_sex(), target);
  }

  // optional uint32 timestamp_updated = 8;
  if (has_timestamp_updated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->timestamp_updated(), target);
  }

  // repeated uint32 tagids_curated = 9;
  for (int i = 0; i < this->tagids_curated_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(9, this->tagids_curated(i), target);
  }

  // repeated uint32 tagids_filtered = 10;
  for (int i = 0; i < this->tagids_filtered_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(10, this->tagids_filtered(i), target);
  }

  // optional string website_title = 11;
  if (has_website_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->website_title().data(), this->website_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->website_title(), target);
  }

  // optional string website_url = 12;
  if (has_website_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->website_url().data(), this->website_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->website_url(), target);
  }

  // optional string discussion_url = 13;
  if (has_discussion_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->discussion_url().data(), this->discussion_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->discussion_url(), target);
  }

  // optional bool show_broadcast = 14;
  if (has_show_broadcast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->show_broadcast(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCuratorPreferences::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 supported_languages = 1;
    if (has_supported_languages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->supported_languages());
    }

    // optional bool platform_windows = 2;
    if (has_platform_windows()) {
      total_size += 1 + 1;
    }

    // optional bool platform_mac = 3;
    if (has_platform_mac()) {
      total_size += 1 + 1;
    }

    // optional bool platform_linux = 4;
    if (has_platform_linux()) {
      total_size += 1 + 1;
    }

    // optional bool vr_content = 5;
    if (has_vr_content()) {
      total_size += 1 + 1;
    }

    // optional bool adult_content_violence = 6;
    if (has_adult_content_violence()) {
      total_size += 1 + 1;
    }

    // optional bool adult_content_sex = 7;
    if (has_adult_content_sex()) {
      total_size += 1 + 1;
    }

    // optional uint32 timestamp_updated = 8;
    if (has_timestamp_updated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp_updated());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional string website_title = 11;
    if (has_website_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->website_title());
    }

    // optional string website_url = 12;
    if (has_website_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->website_url());
    }

    // optional string discussion_url = 13;
    if (has_discussion_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->discussion_url());
    }

    // optional bool show_broadcast = 14;
    if (has_show_broadcast()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 tagids_curated = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->tagids_curated_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->tagids_curated(i));
    }
    total_size += 1 * this->tagids_curated_size() + data_size;
  }

  // repeated uint32 tagids_filtered = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->tagids_filtered_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->tagids_filtered(i));
    }
    total_size += 1 * this->tagids_filtered_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCuratorPreferences::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCuratorPreferences* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCuratorPreferences*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCuratorPreferences::MergeFrom(const CCuratorPreferences& from) {
  GOOGLE_CHECK_NE(&from, this);
  tagids_curated_.MergeFrom(from.tagids_curated_);
  tagids_filtered_.MergeFrom(from.tagids_filtered_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_supported_languages()) {
      set_supported_languages(from.supported_languages());
    }
    if (from.has_platform_windows()) {
      set_platform_windows(from.platform_windows());
    }
    if (from.has_platform_mac()) {
      set_platform_mac(from.platform_mac());
    }
    if (from.has_platform_linux()) {
      set_platform_linux(from.platform_linux());
    }
    if (from.has_vr_content()) {
      set_vr_content(from.vr_content());
    }
    if (from.has_adult_content_violence()) {
      set_adult_content_violence(from.adult_content_violence());
    }
    if (from.has_adult_content_sex()) {
      set_adult_content_sex(from.adult_content_sex());
    }
    if (from.has_timestamp_updated()) {
      set_timestamp_updated(from.timestamp_updated());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_website_title()) {
      set_website_title(from.website_title());
    }
    if (from.has_website_url()) {
      set_website_url(from.website_url());
    }
    if (from.has_discussion_url()) {
      set_discussion_url(from.discussion_url());
    }
    if (from.has_show_broadcast()) {
      set_show_broadcast(from.show_broadcast());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCuratorPreferences::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCuratorPreferences::CopyFrom(const CCuratorPreferences& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCuratorPreferences::IsInitialized() const {

  return true;
}

void CCuratorPreferences::Swap(CCuratorPreferences* other) {
  if (other != this) {
    std::swap(supported_languages_, other->supported_languages_);
    std::swap(platform_windows_, other->platform_windows_);
    std::swap(platform_mac_, other->platform_mac_);
    std::swap(platform_linux_, other->platform_linux_);
    std::swap(vr_content_, other->vr_content_);
    std::swap(adult_content_violence_, other->adult_content_violence_);
    std::swap(adult_content_sex_, other->adult_content_sex_);
    std::swap(timestamp_updated_, other->timestamp_updated_);
    tagids_curated_.Swap(&other->tagids_curated_);
    tagids_filtered_.Swap(&other->tagids_filtered_);
    std::swap(website_title_, other->website_title_);
    std::swap(website_url_, other->website_url_);
    std::swap(discussion_url_, other->discussion_url_);
    std::swap(show_broadcast_, other->show_broadcast_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCuratorPreferences::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCuratorPreferences_descriptor_;
  metadata.reflection = CCuratorPreferences_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLocalizationToken::kLanguageFieldNumber;
const int CLocalizationToken::kLocalizedStringFieldNumber;
#endif  // !_MSC_VER

CLocalizationToken::CLocalizationToken()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLocalizationToken::InitAsDefaultInstance() {
}

CLocalizationToken::CLocalizationToken(const CLocalizationToken& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLocalizationToken::SharedCtor() {
  _cached_size_ = 0;
  language_ = 0u;
  localized_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLocalizationToken::~CLocalizationToken() {
  SharedDtor();
}

void CLocalizationToken::SharedDtor() {
  if (localized_string_ != &::google::protobuf::internal::kEmptyString) {
    delete localized_string_;
  }
  if (this != default_instance_) {
  }
}

void CLocalizationToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLocalizationToken::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLocalizationToken_descriptor_;
}

const CLocalizationToken& CLocalizationToken::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fbase_2eproto();
  return *default_instance_;
}

CLocalizationToken* CLocalizationToken::default_instance_ = NULL;

CLocalizationToken* CLocalizationToken::New() const {
  return new CLocalizationToken;
}

void CLocalizationToken::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    language_ = 0u;
    if (has_localized_string()) {
      if (localized_string_ != &::google::protobuf::internal::kEmptyString) {
        localized_string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLocalizationToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 language = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &language_)));
          set_has_language();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_localized_string;
        break;
      }

      // optional string localized_string = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_localized_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_localized_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->localized_string().data(), this->localized_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLocalizationToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 language = 1;
  if (has_language()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->language(), output);
  }

  // optional string localized_string = 2;
  if (has_localized_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->localized_string().data(), this->localized_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->localized_string(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLocalizationToken::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 language = 1;
  if (has_language()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->language(), target);
  }

  // optional string localized_string = 2;
  if (has_localized_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->localized_string().data(), this->localized_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->localized_string(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLocalizationToken::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 language = 1;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->language());
    }

    // optional string localized_string = 2;
    if (has_localized_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->localized_string());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLocalizationToken::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLocalizationToken* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLocalizationToken*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLocalizationToken::MergeFrom(const CLocalizationToken& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_localized_string()) {
      set_localized_string(from.localized_string());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLocalizationToken::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLocalizationToken::CopyFrom(const CLocalizationToken& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLocalizationToken::IsInitialized() const {

  return true;
}

void CLocalizationToken::Swap(CLocalizationToken* other) {
  if (other != this) {
    std::swap(language_, other->language_);
    std::swap(localized_string_, other->localized_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLocalizationToken::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLocalizationToken_descriptor_;
  metadata.reflection = CLocalizationToken_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CClanEventUserNewsTuple::kClanidFieldNumber;
const int CClanEventUserNewsTuple::kEventGidFieldNumber;
const int CClanEventUserNewsTuple::kAnnouncementGidFieldNumber;
const int CClanEventUserNewsTuple::kRtimeStartFieldNumber;
const int CClanEventUserNewsTuple::kRtimeEndFieldNumber;
const int CClanEventUserNewsTuple::kPriorityScoreFieldNumber;
const int CClanEventUserNewsTuple::kTypeFieldNumber;
const int CClanEventUserNewsTuple::kClampRangeSlotFieldNumber;
const int CClanEventUserNewsTuple::kAppidFieldNumber;
const int CClanEventUserNewsTuple::kRtime32LastModifiedFieldNumber;
#endif  // !_MSC_VER

CClanEventUserNewsTuple::CClanEventUserNewsTuple()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CClanEventUserNewsTuple::InitAsDefaultInstance() {
}

CClanEventUserNewsTuple::CClanEventUserNewsTuple(const CClanEventUserNewsTuple& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CClanEventUserNewsTuple::SharedCtor() {
  _cached_size_ = 0;
  clanid_ = 0u;
  event_gid_ = GOOGLE_ULONGLONG(0);
  announcement_gid_ = GOOGLE_ULONGLONG(0);
  rtime_start_ = 0u;
  rtime_end_ = 0u;
  priority_score_ = 0u;
  type_ = 0u;
  clamp_range_slot_ = 0u;
  appid_ = 0u;
  rtime32_last_modified_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CClanEventUserNewsTuple::~CClanEventUserNewsTuple() {
  SharedDtor();
}

void CClanEventUserNewsTuple::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CClanEventUserNewsTuple::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CClanEventUserNewsTuple::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CClanEventUserNewsTuple_descriptor_;
}

const CClanEventUserNewsTuple& CClanEventUserNewsTuple::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fbase_2eproto();
  return *default_instance_;
}

CClanEventUserNewsTuple* CClanEventUserNewsTuple::default_instance_ = NULL;

CClanEventUserNewsTuple* CClanEventUserNewsTuple::New() const {
  return new CClanEventUserNewsTuple;
}

void CClanEventUserNewsTuple::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clanid_ = 0u;
    event_gid_ = GOOGLE_ULONGLONG(0);
    announcement_gid_ = GOOGLE_ULONGLONG(0);
    rtime_start_ = 0u;
    rtime_end_ = 0u;
    priority_score_ = 0u;
    type_ = 0u;
    clamp_range_slot_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    appid_ = 0u;
    rtime32_last_modified_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CClanEventUserNewsTuple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 clanid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clanid_)));
          set_has_clanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_event_gid;
        break;
      }

      // optional fixed64 event_gid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_event_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &event_gid_)));
          set_has_event_gid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_announcement_gid;
        break;
      }

      // optional fixed64 announcement_gid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_announcement_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &announcement_gid_)));
          set_has_announcement_gid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rtime_start;
        break;
      }

      // optional uint32 rtime_start = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtime_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtime_start_)));
          set_has_rtime_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rtime_end;
        break;
      }

      // optional uint32 rtime_end = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtime_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtime_end_)));
          set_has_rtime_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_priority_score;
        break;
      }

      // optional uint32 priority_score = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priority_score_)));
          set_has_priority_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }

      // optional uint32 type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_clamp_range_slot;
        break;
      }

      // optional uint32 clamp_range_slot = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clamp_range_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clamp_range_slot_)));
          set_has_clamp_range_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_appid;
        break;
      }

      // optional uint32 appid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_rtime32_last_modified;
        break;
      }

      // optional uint32 rtime32_last_modified = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtime32_last_modified:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtime32_last_modified_)));
          set_has_rtime32_last_modified();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CClanEventUserNewsTuple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 clanid = 1;
  if (has_clanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->clanid(), output);
  }

  // optional fixed64 event_gid = 2;
  if (has_event_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->event_gid(), output);
  }

  // optional fixed64 announcement_gid = 3;
  if (has_announcement_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->announcement_gid(), output);
  }

  // optional uint32 rtime_start = 4;
  if (has_rtime_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rtime_start(), output);
  }

  // optional uint32 rtime_end = 5;
  if (has_rtime_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rtime_end(), output);
  }

  // optional uint32 priority_score = 6;
  if (has_priority_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->priority_score(), output);
  }

  // optional uint32 type = 7;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->type(), output);
  }

  // optional uint32 clamp_range_slot = 8;
  if (has_clamp_range_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->clamp_range_slot(), output);
  }

  // optional uint32 appid = 9;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->appid(), output);
  }

  // optional uint32 rtime32_last_modified = 10;
  if (has_rtime32_last_modified()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->rtime32_last_modified(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CClanEventUserNewsTuple::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 clanid = 1;
  if (has_clanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->clanid(), target);
  }

  // optional fixed64 event_gid = 2;
  if (has_event_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->event_gid(), target);
  }

  // optional fixed64 announcement_gid = 3;
  if (has_announcement_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->announcement_gid(), target);
  }

  // optional uint32 rtime_start = 4;
  if (has_rtime_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rtime_start(), target);
  }

  // optional uint32 rtime_end = 5;
  if (has_rtime_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rtime_end(), target);
  }

  // optional uint32 priority_score = 6;
  if (has_priority_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->priority_score(), target);
  }

  // optional uint32 type = 7;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->type(), target);
  }

  // optional uint32 clamp_range_slot = 8;
  if (has_clamp_range_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->clamp_range_slot(), target);
  }

  // optional uint32 appid = 9;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->appid(), target);
  }

  // optional uint32 rtime32_last_modified = 10;
  if (has_rtime32_last_modified()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->rtime32_last_modified(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CClanEventUserNewsTuple::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 clanid = 1;
    if (has_clanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clanid());
    }

    // optional fixed64 event_gid = 2;
    if (has_event_gid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 announcement_gid = 3;
    if (has_announcement_gid()) {
      total_size += 1 + 8;
    }

    // optional uint32 rtime_start = 4;
    if (has_rtime_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtime_start());
    }

    // optional uint32 rtime_end = 5;
    if (has_rtime_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtime_end());
    }

    // optional uint32 priority_score = 6;
    if (has_priority_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->priority_score());
    }

    // optional uint32 type = 7;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 clamp_range_slot = 8;
    if (has_clamp_range_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clamp_range_slot());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 appid = 9;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 rtime32_last_modified = 10;
    if (has_rtime32_last_modified()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtime32_last_modified());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CClanEventUserNewsTuple::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CClanEventUserNewsTuple* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CClanEventUserNewsTuple*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CClanEventUserNewsTuple::MergeFrom(const CClanEventUserNewsTuple& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clanid()) {
      set_clanid(from.clanid());
    }
    if (from.has_event_gid()) {
      set_event_gid(from.event_gid());
    }
    if (from.has_announcement_gid()) {
      set_announcement_gid(from.announcement_gid());
    }
    if (from.has_rtime_start()) {
      set_rtime_start(from.rtime_start());
    }
    if (from.has_rtime_end()) {
      set_rtime_end(from.rtime_end());
    }
    if (from.has_priority_score()) {
      set_priority_score(from.priority_score());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_clamp_range_slot()) {
      set_clamp_range_slot(from.clamp_range_slot());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_rtime32_last_modified()) {
      set_rtime32_last_modified(from.rtime32_last_modified());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CClanEventUserNewsTuple::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CClanEventUserNewsTuple::CopyFrom(const CClanEventUserNewsTuple& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClanEventUserNewsTuple::IsInitialized() const {

  return true;
}

void CClanEventUserNewsTuple::Swap(CClanEventUserNewsTuple* other) {
  if (other != this) {
    std::swap(clanid_, other->clanid_);
    std::swap(event_gid_, other->event_gid_);
    std::swap(announcement_gid_, other->announcement_gid_);
    std::swap(rtime_start_, other->rtime_start_);
    std::swap(rtime_end_, other->rtime_end_);
    std::swap(priority_score_, other->priority_score_);
    std::swap(type_, other->type_);
    std::swap(clamp_range_slot_, other->clamp_range_slot_);
    std::swap(appid_, other->appid_);
    std::swap(rtime32_last_modified_, other->rtime32_last_modified_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CClanEventUserNewsTuple::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CClanEventUserNewsTuple_descriptor_;
  metadata.reflection = CClanEventUserNewsTuple_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CClanMatchEventByRange::kRtimeBeforeFieldNumber;
const int CClanMatchEventByRange::kRtimeAfterFieldNumber;
const int CClanMatchEventByRange::kQualifiedFieldNumber;
const int CClanMatchEventByRange::kEventsFieldNumber;
#endif  // !_MSC_VER

CClanMatchEventByRange::CClanMatchEventByRange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CClanMatchEventByRange::InitAsDefaultInstance() {
}

CClanMatchEventByRange::CClanMatchEventByRange(const CClanMatchEventByRange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CClanMatchEventByRange::SharedCtor() {
  _cached_size_ = 0;
  rtime_before_ = 0u;
  rtime_after_ = 0u;
  qualified_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CClanMatchEventByRange::~CClanMatchEventByRange() {
  SharedDtor();
}

void CClanMatchEventByRange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CClanMatchEventByRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CClanMatchEventByRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CClanMatchEventByRange_descriptor_;
}

const CClanMatchEventByRange& CClanMatchEventByRange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fbase_2eproto();
  return *default_instance_;
}

CClanMatchEventByRange* CClanMatchEventByRange::default_instance_ = NULL;

CClanMatchEventByRange* CClanMatchEventByRange::New() const {
  return new CClanMatchEventByRange;
}

void CClanMatchEventByRange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rtime_before_ = 0u;
    rtime_after_ = 0u;
    qualified_ = 0u;
  }
  events_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CClanMatchEventByRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rtime_before = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtime_before_)));
          set_has_rtime_before();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rtime_after;
        break;
      }

      // optional uint32 rtime_after = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtime_after:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtime_after_)));
          set_has_rtime_after();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_qualified;
        break;
      }

      // optional uint32 qualified = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qualified:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qualified_)));
          set_has_qualified();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_events;
        break;
      }

      // repeated .CClanEventUserNewsTuple events = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_events()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_events;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CClanMatchEventByRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rtime_before = 1;
  if (has_rtime_before()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rtime_before(), output);
  }

  // optional uint32 rtime_after = 2;
  if (has_rtime_after()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rtime_after(), output);
  }

  // optional uint32 qualified = 3;
  if (has_qualified()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->qualified(), output);
  }

  // repeated .CClanEventUserNewsTuple events = 4;
  for (int i = 0; i < this->events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->events(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CClanMatchEventByRange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rtime_before = 1;
  if (has_rtime_before()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rtime_before(), target);
  }

  // optional uint32 rtime_after = 2;
  if (has_rtime_after()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rtime_after(), target);
  }

  // optional uint32 qualified = 3;
  if (has_qualified()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->qualified(), target);
  }

  // repeated .CClanEventUserNewsTuple events = 4;
  for (int i = 0; i < this->events_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->events(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CClanMatchEventByRange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rtime_before = 1;
    if (has_rtime_before()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtime_before());
    }

    // optional uint32 rtime_after = 2;
    if (has_rtime_after()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtime_after());
    }

    // optional uint32 qualified = 3;
    if (has_qualified()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qualified());
    }

  }
  // repeated .CClanEventUserNewsTuple events = 4;
  total_size += 1 * this->events_size();
  for (int i = 0; i < this->events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->events(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CClanMatchEventByRange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CClanMatchEventByRange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CClanMatchEventByRange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CClanMatchEventByRange::MergeFrom(const CClanMatchEventByRange& from) {
  GOOGLE_CHECK_NE(&from, this);
  events_.MergeFrom(from.events_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rtime_before()) {
      set_rtime_before(from.rtime_before());
    }
    if (from.has_rtime_after()) {
      set_rtime_after(from.rtime_after());
    }
    if (from.has_qualified()) {
      set_qualified(from.qualified());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CClanMatchEventByRange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CClanMatchEventByRange::CopyFrom(const CClanMatchEventByRange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClanMatchEventByRange::IsInitialized() const {

  return true;
}

void CClanMatchEventByRange::Swap(CClanMatchEventByRange* other) {
  if (other != this) {
    std::swap(rtime_before_, other->rtime_before_);
    std::swap(rtime_after_, other->rtime_after_);
    std::swap(qualified_, other->qualified_);
    events_.Swap(&other->events_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CClanMatchEventByRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CClanMatchEventByRange_descriptor_;
  metadata.reflection = CClanMatchEventByRange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCommunity_ClanAnnouncementInfo::kGidFieldNumber;
const int CCommunity_ClanAnnouncementInfo::kClanidFieldNumber;
const int CCommunity_ClanAnnouncementInfo::kPosteridFieldNumber;
const int CCommunity_ClanAnnouncementInfo::kHeadlineFieldNumber;
const int CCommunity_ClanAnnouncementInfo::kPosttimeFieldNumber;
const int CCommunity_ClanAnnouncementInfo::kUpdatetimeFieldNumber;
const int CCommunity_ClanAnnouncementInfo::kBodyFieldNumber;
const int CCommunity_ClanAnnouncementInfo::kCommentcountFieldNumber;
const int CCommunity_ClanAnnouncementInfo::kTagsFieldNumber;
const int CCommunity_ClanAnnouncementInfo::kLanguageFieldNumber;
const int CCommunity_ClanAnnouncementInfo::kHiddenFieldNumber;
const int CCommunity_ClanAnnouncementInfo::kForumTopicIdFieldNumber;
const int CCommunity_ClanAnnouncementInfo::kEventGidFieldNumber;
const int CCommunity_ClanAnnouncementInfo::kVoteupcountFieldNumber;
const int CCommunity_ClanAnnouncementInfo::kVotedowncountFieldNumber;
const int CCommunity_ClanAnnouncementInfo::kBanCheckResultFieldNumber;
#endif  // !_MSC_VER

CCommunity_ClanAnnouncementInfo::CCommunity_ClanAnnouncementInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCommunity_ClanAnnouncementInfo::InitAsDefaultInstance() {
}

CCommunity_ClanAnnouncementInfo::CCommunity_ClanAnnouncementInfo(const CCommunity_ClanAnnouncementInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCommunity_ClanAnnouncementInfo::SharedCtor() {
  _cached_size_ = 0;
  gid_ = GOOGLE_ULONGLONG(0);
  clanid_ = GOOGLE_ULONGLONG(0);
  posterid_ = GOOGLE_ULONGLONG(0);
  headline_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  posttime_ = 0u;
  updatetime_ = 0u;
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  commentcount_ = 0;
  language_ = 0;
  hidden_ = false;
  forum_topic_id_ = GOOGLE_ULONGLONG(0);
  event_gid_ = GOOGLE_ULONGLONG(0);
  voteupcount_ = 0;
  votedowncount_ = 0;
  ban_check_result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCommunity_ClanAnnouncementInfo::~CCommunity_ClanAnnouncementInfo() {
  SharedDtor();
}

void CCommunity_ClanAnnouncementInfo::SharedDtor() {
  if (headline_ != &::google::protobuf::internal::kEmptyString) {
    delete headline_;
  }
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (this != default_instance_) {
  }
}

void CCommunity_ClanAnnouncementInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCommunity_ClanAnnouncementInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCommunity_ClanAnnouncementInfo_descriptor_;
}

const CCommunity_ClanAnnouncementInfo& CCommunity_ClanAnnouncementInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fbase_2eproto();
  return *default_instance_;
}

CCommunity_ClanAnnouncementInfo* CCommunity_ClanAnnouncementInfo::default_instance_ = NULL;

CCommunity_ClanAnnouncementInfo* CCommunity_ClanAnnouncementInfo::New() const {
  return new CCommunity_ClanAnnouncementInfo;
}

void CCommunity_ClanAnnouncementInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gid_ = GOOGLE_ULONGLONG(0);
    clanid_ = GOOGLE_ULONGLONG(0);
    posterid_ = GOOGLE_ULONGLONG(0);
    if (has_headline()) {
      if (headline_ != &::google::protobuf::internal::kEmptyString) {
        headline_->clear();
      }
    }
    posttime_ = 0u;
    updatetime_ = 0u;
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::kEmptyString) {
        body_->clear();
      }
    }
    commentcount_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    language_ = 0;
    hidden_ = false;
    forum_topic_id_ = GOOGLE_ULONGLONG(0);
    event_gid_ = GOOGLE_ULONGLONG(0);
    voteupcount_ = 0;
    votedowncount_ = 0;
    ban_check_result_ = 0;
  }
  tags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCommunity_ClanAnnouncementInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 gid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clanid;
        break;
      }

      // optional uint64 clanid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clanid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clanid_)));
          set_has_clanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_posterid;
        break;
      }

      // optional uint64 posterid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &posterid_)));
          set_has_posterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_headline;
        break;
      }

      // optional string headline = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headline:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headline()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->headline().data(), this->headline().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_posttime;
        break;
      }

      // optional uint32 posttime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &posttime_)));
          set_has_posttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_updatetime;
        break;
      }

      // optional uint32 updatetime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_updatetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_body;
        break;
      }

      // optional string body = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->body().data(), this->body().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_commentcount;
        break;
      }

      // optional int32 commentcount = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commentcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &commentcount_)));
          set_has_commentcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_tags;
        break;
      }

      // repeated string tags = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tags(this->tags_size() - 1).data(),
            this->tags(this->tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_tags;
        if (input->ExpectTag(80)) goto parse_language;
        break;
      }

      // optional int32 language = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_language:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &language_)));
          set_has_language();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_hidden;
        break;
      }

      // optional bool hidden = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hidden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hidden_)));
          set_has_hidden();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_forum_topic_id;
        break;
      }

      // optional fixed64 forum_topic_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_forum_topic_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &forum_topic_id_)));
          set_has_forum_topic_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_event_gid;
        break;
      }

      // optional fixed64 event_gid = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_event_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &event_gid_)));
          set_has_event_gid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_voteupcount;
        break;
      }

      // optional int32 voteupcount = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_voteupcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &voteupcount_)));
          set_has_voteupcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_votedowncount;
        break;
      }

      // optional int32 votedowncount = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_votedowncount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &votedowncount_)));
          set_has_votedowncount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_ban_check_result;
        break;
      }

      // optional .EBanContentCheckResult ban_check_result = 16 [default = k_EBanContentCheckResult_NotScanned];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ban_check_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EBanContentCheckResult_IsValid(value)) {
            set_ban_check_result(static_cast< ::EBanContentCheckResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCommunity_ClanAnnouncementInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 gid = 1;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->gid(), output);
  }

  // optional uint64 clanid = 2;
  if (has_clanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->clanid(), output);
  }

  // optional uint64 posterid = 3;
  if (has_posterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->posterid(), output);
  }

  // optional string headline = 4;
  if (has_headline()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headline().data(), this->headline().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->headline(), output);
  }

  // optional uint32 posttime = 5;
  if (has_posttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->posttime(), output);
  }

  // optional uint32 updatetime = 6;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->updatetime(), output);
  }

  // optional string body = 7;
  if (has_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->body(), output);
  }

  // optional int32 commentcount = 8;
  if (has_commentcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->commentcount(), output);
  }

  // repeated string tags = 9;
  for (int i = 0; i < this->tags_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->tags(i).data(), this->tags(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->tags(i), output);
  }

  // optional int32 language = 10;
  if (has_language()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->language(), output);
  }

  // optional bool hidden = 11;
  if (has_hidden()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->hidden(), output);
  }

  // optional fixed64 forum_topic_id = 12;
  if (has_forum_topic_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(12, this->forum_topic_id(), output);
  }

  // optional fixed64 event_gid = 13;
  if (has_event_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(13, this->event_gid(), output);
  }

  // optional int32 voteupcount = 14;
  if (has_voteupcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->voteupcount(), output);
  }

  // optional int32 votedowncount = 15;
  if (has_votedowncount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->votedowncount(), output);
  }

  // optional .EBanContentCheckResult ban_check_result = 16 [default = k_EBanContentCheckResult_NotScanned];
  if (has_ban_check_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->ban_check_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCommunity_ClanAnnouncementInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 gid = 1;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->gid(), target);
  }

  // optional uint64 clanid = 2;
  if (has_clanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->clanid(), target);
  }

  // optional uint64 posterid = 3;
  if (has_posterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->posterid(), target);
  }

  // optional string headline = 4;
  if (has_headline()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headline().data(), this->headline().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->headline(), target);
  }

  // optional uint32 posttime = 5;
  if (has_posttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->posttime(), target);
  }

  // optional uint32 updatetime = 6;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->updatetime(), target);
  }

  // optional string body = 7;
  if (has_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->body(), target);
  }

  // optional int32 commentcount = 8;
  if (has_commentcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->commentcount(), target);
  }

  // repeated string tags = 9;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->tags(i), target);
  }

  // optional int32 language = 10;
  if (has_language()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->language(), target);
  }

  // optional bool hidden = 11;
  if (has_hidden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->hidden(), target);
  }

  // optional fixed64 forum_topic_id = 12;
  if (has_forum_topic_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(12, this->forum_topic_id(), target);
  }

  // optional fixed64 event_gid = 13;
  if (has_event_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(13, this->event_gid(), target);
  }

  // optional int32 voteupcount = 14;
  if (has_voteupcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->voteupcount(), target);
  }

  // optional int32 votedowncount = 15;
  if (has_votedowncount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->votedowncount(), target);
  }

  // optional .EBanContentCheckResult ban_check_result = 16 [default = k_EBanContentCheckResult_NotScanned];
  if (has_ban_check_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->ban_check_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCommunity_ClanAnnouncementInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 gid = 1;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gid());
    }

    // optional uint64 clanid = 2;
    if (has_clanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clanid());
    }

    // optional uint64 posterid = 3;
    if (has_posterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->posterid());
    }

    // optional string headline = 4;
    if (has_headline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headline());
    }

    // optional uint32 posttime = 5;
    if (has_posttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->posttime());
    }

    // optional uint32 updatetime = 6;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->updatetime());
    }

    // optional string body = 7;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->body());
    }

    // optional int32 commentcount = 8;
    if (has_commentcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->commentcount());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 language = 10;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->language());
    }

    // optional bool hidden = 11;
    if (has_hidden()) {
      total_size += 1 + 1;
    }

    // optional fixed64 forum_topic_id = 12;
    if (has_forum_topic_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 event_gid = 13;
    if (has_event_gid()) {
      total_size += 1 + 8;
    }

    // optional int32 voteupcount = 14;
    if (has_voteupcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->voteupcount());
    }

    // optional int32 votedowncount = 15;
    if (has_votedowncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->votedowncount());
    }

    // optional .EBanContentCheckResult ban_check_result = 16 [default = k_EBanContentCheckResult_NotScanned];
    if (has_ban_check_result()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ban_check_result());
    }

  }
  // repeated string tags = 9;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCommunity_ClanAnnouncementInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCommunity_ClanAnnouncementInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCommunity_ClanAnnouncementInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCommunity_ClanAnnouncementInfo::MergeFrom(const CCommunity_ClanAnnouncementInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  tags_.MergeFrom(from.tags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_clanid()) {
      set_clanid(from.clanid());
    }
    if (from.has_posterid()) {
      set_posterid(from.posterid());
    }
    if (from.has_headline()) {
      set_headline(from.headline());
    }
    if (from.has_posttime()) {
      set_posttime(from.posttime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
    if (from.has_commentcount()) {
      set_commentcount(from.commentcount());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_hidden()) {
      set_hidden(from.hidden());
    }
    if (from.has_forum_topic_id()) {
      set_forum_topic_id(from.forum_topic_id());
    }
    if (from.has_event_gid()) {
      set_event_gid(from.event_gid());
    }
    if (from.has_voteupcount()) {
      set_voteupcount(from.voteupcount());
    }
    if (from.has_votedowncount()) {
      set_votedowncount(from.votedowncount());
    }
    if (from.has_ban_check_result()) {
      set_ban_check_result(from.ban_check_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCommunity_ClanAnnouncementInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_ClanAnnouncementInfo::CopyFrom(const CCommunity_ClanAnnouncementInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_ClanAnnouncementInfo::IsInitialized() const {

  return true;
}

void CCommunity_ClanAnnouncementInfo::Swap(CCommunity_ClanAnnouncementInfo* other) {
  if (other != this) {
    std::swap(gid_, other->gid_);
    std::swap(clanid_, other->clanid_);
    std::swap(posterid_, other->posterid_);
    std::swap(headline_, other->headline_);
    std::swap(posttime_, other->posttime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(body_, other->body_);
    std::swap(commentcount_, other->commentcount_);
    tags_.Swap(&other->tags_);
    std::swap(language_, other->language_);
    std::swap(hidden_, other->hidden_);
    std::swap(forum_topic_id_, other->forum_topic_id_);
    std::swap(event_gid_, other->event_gid_);
    std::swap(voteupcount_, other->voteupcount_);
    std::swap(votedowncount_, other->votedowncount_);
    std::swap(ban_check_result_, other->ban_check_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCommunity_ClanAnnouncementInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCommunity_ClanAnnouncementInfo_descriptor_;
  metadata.reflection = CCommunity_ClanAnnouncementInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CClanEventData::kGidFieldNumber;
const int CClanEventData::kClanSteamidFieldNumber;
const int CClanEventData::kEventNameFieldNumber;
const int CClanEventData::kEventTypeFieldNumber;
const int CClanEventData::kAppidFieldNumber;
const int CClanEventData::kServerAddressFieldNumber;
const int CClanEventData::kServerPasswordFieldNumber;
const int CClanEventData::kRtime32StartTimeFieldNumber;
const int CClanEventData::kRtime32EndTimeFieldNumber;
const int CClanEventData::kCommentCountFieldNumber;
const int CClanEventData::kCreatorSteamidFieldNumber;
const int CClanEventData::kLastUpdateSteamidFieldNumber;
const int CClanEventData::kEventNotesFieldNumber;
const int CClanEventData::kJsondataFieldNumber;
const int CClanEventData::kAnnouncementBodyFieldNumber;
const int CClanEventData::kPublishedFieldNumber;
const int CClanEventData::kHiddenFieldNumber;
const int CClanEventData::kRtime32VisibilityStartFieldNumber;
const int CClanEventData::kRtime32VisibilityEndFieldNumber;
const int CClanEventData::kBroadcasterAccountidFieldNumber;
const int CClanEventData::kFollowerCountFieldNumber;
const int CClanEventData::kIgnoreCountFieldNumber;
const int CClanEventData::kForumTopicIdFieldNumber;
const int CClanEventData::kRtime32LastModifiedFieldNumber;
const int CClanEventData::kNewsPostGidFieldNumber;
const int CClanEventData::kRtimeModReviewedFieldNumber;
const int CClanEventData::kFeaturedAppTagidFieldNumber;
const int CClanEventData::kReferencedAppidsFieldNumber;
const int CClanEventData::kBuildIdFieldNumber;
const int CClanEventData::kBuildBranchFieldNumber;
#endif  // !_MSC_VER

CClanEventData::CClanEventData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CClanEventData::InitAsDefaultInstance() {
  announcement_body_ = const_cast< ::CCommunity_ClanAnnouncementInfo*>(&::CCommunity_ClanAnnouncementInfo::default_instance());
}

CClanEventData::CClanEventData(const CClanEventData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CClanEventData::SharedCtor() {
  _cached_size_ = 0;
  gid_ = GOOGLE_ULONGLONG(0);
  clan_steamid_ = GOOGLE_ULONGLONG(0);
  event_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  event_type_ = 1;
  appid_ = 0u;
  server_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rtime32_start_time_ = 0u;
  rtime32_end_time_ = 0u;
  comment_count_ = 0;
  creator_steamid_ = GOOGLE_ULONGLONG(0);
  last_update_steamid_ = GOOGLE_ULONGLONG(0);
  event_notes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  jsondata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  announcement_body_ = NULL;
  published_ = false;
  hidden_ = false;
  rtime32_visibility_start_ = 0u;
  rtime32_visibility_end_ = 0u;
  broadcaster_accountid_ = 0u;
  follower_count_ = 0u;
  ignore_count_ = 0u;
  forum_topic_id_ = GOOGLE_ULONGLONG(0);
  rtime32_last_modified_ = 0u;
  news_post_gid_ = GOOGLE_ULONGLONG(0);
  rtime_mod_reviewed_ = 0u;
  featured_app_tagid_ = 0u;
  build_id_ = 0u;
  build_branch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CClanEventData::~CClanEventData() {
  SharedDtor();
}

void CClanEventData::SharedDtor() {
  if (event_name_ != &::google::protobuf::internal::kEmptyString) {
    delete event_name_;
  }
  if (server_address_ != &::google::protobuf::internal::kEmptyString) {
    delete server_address_;
  }
  if (server_password_ != &::google::protobuf::internal::kEmptyString) {
    delete server_password_;
  }
  if (event_notes_ != &::google::protobuf::internal::kEmptyString) {
    delete event_notes_;
  }
  if (jsondata_ != &::google::protobuf::internal::kEmptyString) {
    delete jsondata_;
  }
  if (build_branch_ != &::google::protobuf::internal::kEmptyString) {
    delete build_branch_;
  }
  if (this != default_instance_) {
    delete announcement_body_;
  }
}

void CClanEventData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CClanEventData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CClanEventData_descriptor_;
}

const CClanEventData& CClanEventData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fbase_2eproto();
  return *default_instance_;
}

CClanEventData* CClanEventData::default_instance_ = NULL;

CClanEventData* CClanEventData::New() const {
  return new CClanEventData;
}

void CClanEventData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gid_ = GOOGLE_ULONGLONG(0);
    clan_steamid_ = GOOGLE_ULONGLONG(0);
    if (has_event_name()) {
      if (event_name_ != &::google::protobuf::internal::kEmptyString) {
        event_name_->clear();
      }
    }
    event_type_ = 1;
    appid_ = 0u;
    if (has_server_address()) {
      if (server_address_ != &::google::protobuf::internal::kEmptyString) {
        server_address_->clear();
      }
    }
    if (has_server_password()) {
      if (server_password_ != &::google::protobuf::internal::kEmptyString) {
        server_password_->clear();
      }
    }
    rtime32_start_time_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    rtime32_end_time_ = 0u;
    comment_count_ = 0;
    creator_steamid_ = GOOGLE_ULONGLONG(0);
    last_update_steamid_ = GOOGLE_ULONGLONG(0);
    if (has_event_notes()) {
      if (event_notes_ != &::google::protobuf::internal::kEmptyString) {
        event_notes_->clear();
      }
    }
    if (has_jsondata()) {
      if (jsondata_ != &::google::protobuf::internal::kEmptyString) {
        jsondata_->clear();
      }
    }
    if (has_announcement_body()) {
      if (announcement_body_ != NULL) announcement_body_->::CCommunity_ClanAnnouncementInfo::Clear();
    }
    published_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    hidden_ = false;
    rtime32_visibility_start_ = 0u;
    rtime32_visibility_end_ = 0u;
    broadcaster_accountid_ = 0u;
    follower_count_ = 0u;
    ignore_count_ = 0u;
    forum_topic_id_ = GOOGLE_ULONGLONG(0);
    rtime32_last_modified_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    news_post_gid_ = GOOGLE_ULONGLONG(0);
    rtime_mod_reviewed_ = 0u;
    featured_app_tagid_ = 0u;
    build_id_ = 0u;
    if (has_build_branch()) {
      if (build_branch_ != &::google::protobuf::internal::kEmptyString) {
        build_branch_->clear();
      }
    }
  }
  referenced_appids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CClanEventData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 gid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_clan_steamid;
        break;
      }

      // optional fixed64 clan_steamid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_clan_steamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &clan_steamid_)));
          set_has_clan_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_event_name;
        break;
      }

      // optional string event_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->event_name().data(), this->event_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_event_type;
        break;
      }

      // optional .EProtoClanEventType event_type = 4 [default = k_EClanOtherEvent];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EProtoClanEventType_IsValid(value)) {
            set_event_type(static_cast< ::EProtoClanEventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_appid;
        break;
      }

      // optional uint32 appid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_server_address;
        break;
      }

      // optional string server_address = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_address().data(), this->server_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_server_password;
        break;
      }

      // optional string server_password = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_password().data(), this->server_password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_rtime32_start_time;
        break;
      }

      // optional uint32 rtime32_start_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtime32_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtime32_start_time_)));
          set_has_rtime32_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_rtime32_end_time;
        break;
      }

      // optional uint32 rtime32_end_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtime32_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtime32_end_time_)));
          set_has_rtime32_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_comment_count;
        break;
      }

      // optional int32 comment_count = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_comment_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comment_count_)));
          set_has_comment_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_creator_steamid;
        break;
      }

      // optional fixed64 creator_steamid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_creator_steamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &creator_steamid_)));
          set_has_creator_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_last_update_steamid;
        break;
      }

      // optional fixed64 last_update_steamid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_last_update_steamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &last_update_steamid_)));
          set_has_last_update_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_event_notes;
        break;
      }

      // optional string event_notes = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_notes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_notes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->event_notes().data(), this->event_notes().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_jsondata;
        break;
      }

      // optional string jsondata = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jsondata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jsondata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jsondata().data(), this->jsondata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_announcement_body;
        break;
      }

      // optional .CCommunity_ClanAnnouncementInfo announcement_body = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_announcement_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_announcement_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_published;
        break;
      }

      // optional bool published = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_published:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &published_)));
          set_has_published();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_hidden;
        break;
      }

      // optional bool hidden = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hidden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hidden_)));
          set_has_hidden();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_rtime32_visibility_start;
        break;
      }

      // optional uint32 rtime32_visibility_start = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtime32_visibility_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtime32_visibility_start_)));
          set_has_rtime32_visibility_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_rtime32_visibility_end;
        break;
      }

      // optional uint32 rtime32_visibility_end = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtime32_visibility_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtime32_visibility_end_)));
          set_has_rtime32_visibility_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_broadcaster_accountid;
        break;
      }

      // optional uint32 broadcaster_accountid = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_broadcaster_accountid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &broadcaster_accountid_)));
          set_has_broadcaster_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_follower_count;
        break;
      }

      // optional uint32 follower_count = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_follower_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &follower_count_)));
          set_has_follower_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_ignore_count;
        break;
      }

      // optional uint32 ignore_count = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ignore_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ignore_count_)));
          set_has_ignore_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_forum_topic_id;
        break;
      }

      // optional fixed64 forum_topic_id = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_forum_topic_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &forum_topic_id_)));
          set_has_forum_topic_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_rtime32_last_modified;
        break;
      }

      // optional uint32 rtime32_last_modified = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtime32_last_modified:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtime32_last_modified_)));
          set_has_rtime32_last_modified();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_news_post_gid;
        break;
      }

      // optional fixed64 news_post_gid = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_news_post_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &news_post_gid_)));
          set_has_news_post_gid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_rtime_mod_reviewed;
        break;
      }

      // optional uint32 rtime_mod_reviewed = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtime_mod_reviewed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtime_mod_reviewed_)));
          set_has_rtime_mod_reviewed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_featured_app_tagid;
        break;
      }

      // optional uint32 featured_app_tagid = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_featured_app_tagid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &featured_app_tagid_)));
          set_has_featured_app_tagid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_referenced_appids;
        break;
      }

      // repeated uint32 referenced_appids = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_referenced_appids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 224, input, this->mutable_referenced_appids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_referenced_appids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_referenced_appids;
        if (input->ExpectTag(232)) goto parse_build_id;
        break;
      }

      // optional uint32 build_id = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_build_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &build_id_)));
          set_has_build_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_build_branch;
        break;
      }

      // optional string build_branch = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_build_branch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_build_branch()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->build_branch().data(), this->build_branch().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CClanEventData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 gid = 1;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->gid(), output);
  }

  // optional fixed64 clan_steamid = 2;
  if (has_clan_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->clan_steamid(), output);
  }

  // optional string event_name = 3;
  if (has_event_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_name().data(), this->event_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->event_name(), output);
  }

  // optional .EProtoClanEventType event_type = 4 [default = k_EClanOtherEvent];
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->event_type(), output);
  }

  // optional uint32 appid = 5;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->appid(), output);
  }

  // optional string server_address = 6;
  if (has_server_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_address().data(), this->server_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->server_address(), output);
  }

  // optional string server_password = 7;
  if (has_server_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_password().data(), this->server_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->server_password(), output);
  }

  // optional uint32 rtime32_start_time = 8;
  if (has_rtime32_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->rtime32_start_time(), output);
  }

  // optional uint32 rtime32_end_time = 9;
  if (has_rtime32_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->rtime32_end_time(), output);
  }

  // optional int32 comment_count = 10;
  if (has_comment_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->comment_count(), output);
  }

  // optional fixed64 creator_steamid = 11;
  if (has_creator_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(11, this->creator_steamid(), output);
  }

  // optional fixed64 last_update_steamid = 12;
  if (has_last_update_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(12, this->last_update_steamid(), output);
  }

  // optional string event_notes = 13;
  if (has_event_notes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_notes().data(), this->event_notes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->event_notes(), output);
  }

  // optional string jsondata = 14;
  if (has_jsondata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jsondata().data(), this->jsondata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->jsondata(), output);
  }

  // optional .CCommunity_ClanAnnouncementInfo announcement_body = 15;
  if (has_announcement_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->announcement_body(), output);
  }

  // optional bool published = 16;
  if (has_published()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->published(), output);
  }

  // optional bool hidden = 17;
  if (has_hidden()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->hidden(), output);
  }

  // optional uint32 rtime32_visibility_start = 18;
  if (has_rtime32_visibility_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->rtime32_visibility_start(), output);
  }

  // optional uint32 rtime32_visibility_end = 19;
  if (has_rtime32_visibility_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->rtime32_visibility_end(), output);
  }

  // optional uint32 broadcaster_accountid = 20;
  if (has_broadcaster_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->broadcaster_accountid(), output);
  }

  // optional uint32 follower_count = 21;
  if (has_follower_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->follower_count(), output);
  }

  // optional uint32 ignore_count = 22;
  if (has_ignore_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->ignore_count(), output);
  }

  // optional fixed64 forum_topic_id = 23;
  if (has_forum_topic_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(23, this->forum_topic_id(), output);
  }

  // optional uint32 rtime32_last_modified = 24;
  if (has_rtime32_last_modified()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->rtime32_last_modified(), output);
  }

  // optional fixed64 news_post_gid = 25;
  if (has_news_post_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(25, this->news_post_gid(), output);
  }

  // optional uint32 rtime_mod_reviewed = 26;
  if (has_rtime_mod_reviewed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->rtime_mod_reviewed(), output);
  }

  // optional uint32 featured_app_tagid = 27;
  if (has_featured_app_tagid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->featured_app_tagid(), output);
  }

  // repeated uint32 referenced_appids = 28;
  for (int i = 0; i < this->referenced_appids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      28, this->referenced_appids(i), output);
  }

  // optional uint32 build_id = 29;
  if (has_build_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->build_id(), output);
  }

  // optional string build_branch = 30;
  if (has_build_branch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->build_branch().data(), this->build_branch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->build_branch(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CClanEventData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 gid = 1;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->gid(), target);
  }

  // optional fixed64 clan_steamid = 2;
  if (has_clan_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->clan_steamid(), target);
  }

  // optional string event_name = 3;
  if (has_event_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_name().data(), this->event_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->event_name(), target);
  }

  // optional .EProtoClanEventType event_type = 4 [default = k_EClanOtherEvent];
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->event_type(), target);
  }

  // optional uint32 appid = 5;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->appid(), target);
  }

  // optional string server_address = 6;
  if (has_server_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_address().data(), this->server_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->server_address(), target);
  }

  // optional string server_password = 7;
  if (has_server_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_password().data(), this->server_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->server_password(), target);
  }

  // optional uint32 rtime32_start_time = 8;
  if (has_rtime32_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->rtime32_start_time(), target);
  }

  // optional uint32 rtime32_end_time = 9;
  if (has_rtime32_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->rtime32_end_time(), target);
  }

  // optional int32 comment_count = 10;
  if (has_comment_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->comment_count(), target);
  }

  // optional fixed64 creator_steamid = 11;
  if (has_creator_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(11, this->creator_steamid(), target);
  }

  // optional fixed64 last_update_steamid = 12;
  if (has_last_update_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(12, this->last_update_steamid(), target);
  }

  // optional string event_notes = 13;
  if (has_event_notes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_notes().data(), this->event_notes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->event_notes(), target);
  }

  // optional string jsondata = 14;
  if (has_jsondata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jsondata().data(), this->jsondata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->jsondata(), target);
  }

  // optional .CCommunity_ClanAnnouncementInfo announcement_body = 15;
  if (has_announcement_body()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->announcement_body(), target);
  }

  // optional bool published = 16;
  if (has_published()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->published(), target);
  }

  // optional bool hidden = 17;
  if (has_hidden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->hidden(), target);
  }

  // optional uint32 rtime32_visibility_start = 18;
  if (has_rtime32_visibility_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->rtime32_visibility_start(), target);
  }

  // optional uint32 rtime32_visibility_end = 19;
  if (has_rtime32_visibility_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->rtime32_visibility_end(), target);
  }

  // optional uint32 broadcaster_accountid = 20;
  if (has_broadcaster_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->broadcaster_accountid(), target);
  }

  // optional uint32 follower_count = 21;
  if (has_follower_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->follower_count(), target);
  }

  // optional uint32 ignore_count = 22;
  if (has_ignore_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->ignore_count(), target);
  }

  // optional fixed64 forum_topic_id = 23;
  if (has_forum_topic_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(23, this->forum_topic_id(), target);
  }

  // optional uint32 rtime32_last_modified = 24;
  if (has_rtime32_last_modified()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->rtime32_last_modified(), target);
  }

  // optional fixed64 news_post_gid = 25;
  if (has_news_post_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(25, this->news_post_gid(), target);
  }

  // optional uint32 rtime_mod_reviewed = 26;
  if (has_rtime_mod_reviewed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->rtime_mod_reviewed(), target);
  }

  // optional uint32 featured_app_tagid = 27;
  if (has_featured_app_tagid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->featured_app_tagid(), target);
  }

  // repeated uint32 referenced_appids = 28;
  for (int i = 0; i < this->referenced_appids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(28, this->referenced_appids(i), target);
  }

  // optional uint32 build_id = 29;
  if (has_build_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->build_id(), target);
  }

  // optional string build_branch = 30;
  if (has_build_branch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->build_branch().data(), this->build_branch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->build_branch(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CClanEventData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 gid = 1;
    if (has_gid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 clan_steamid = 2;
    if (has_clan_steamid()) {
      total_size += 1 + 8;
    }

    // optional string event_name = 3;
    if (has_event_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_name());
    }

    // optional .EProtoClanEventType event_type = 4 [default = k_EClanOtherEvent];
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_type());
    }

    // optional uint32 appid = 5;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional string server_address = 6;
    if (has_server_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_address());
    }

    // optional string server_password = 7;
    if (has_server_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_password());
    }

    // optional uint32 rtime32_start_time = 8;
    if (has_rtime32_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtime32_start_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 rtime32_end_time = 9;
    if (has_rtime32_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtime32_end_time());
    }

    // optional int32 comment_count = 10;
    if (has_comment_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comment_count());
    }

    // optional fixed64 creator_steamid = 11;
    if (has_creator_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 last_update_steamid = 12;
    if (has_last_update_steamid()) {
      total_size += 1 + 8;
    }

    // optional string event_notes = 13;
    if (has_event_notes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_notes());
    }

    // optional string jsondata = 14;
    if (has_jsondata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jsondata());
    }

    // optional .CCommunity_ClanAnnouncementInfo announcement_body = 15;
    if (has_announcement_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->announcement_body());
    }

    // optional bool published = 16;
    if (has_published()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool hidden = 17;
    if (has_hidden()) {
      total_size += 2 + 1;
    }

    // optional uint32 rtime32_visibility_start = 18;
    if (has_rtime32_visibility_start()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtime32_visibility_start());
    }

    // optional uint32 rtime32_visibility_end = 19;
    if (has_rtime32_visibility_end()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtime32_visibility_end());
    }

    // optional uint32 broadcaster_accountid = 20;
    if (has_broadcaster_accountid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->broadcaster_accountid());
    }

    // optional uint32 follower_count = 21;
    if (has_follower_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->follower_count());
    }

    // optional uint32 ignore_count = 22;
    if (has_ignore_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ignore_count());
    }

    // optional fixed64 forum_topic_id = 23;
    if (has_forum_topic_id()) {
      total_size += 2 + 8;
    }

    // optional uint32 rtime32_last_modified = 24;
    if (has_rtime32_last_modified()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtime32_last_modified());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional fixed64 news_post_gid = 25;
    if (has_news_post_gid()) {
      total_size += 2 + 8;
    }

    // optional uint32 rtime_mod_reviewed = 26;
    if (has_rtime_mod_reviewed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtime_mod_reviewed());
    }

    // optional uint32 featured_app_tagid = 27;
    if (has_featured_app_tagid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->featured_app_tagid());
    }

    // optional uint32 build_id = 29;
    if (has_build_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->build_id());
    }

    // optional string build_branch = 30;
    if (has_build_branch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->build_branch());
    }

  }
  // repeated uint32 referenced_appids = 28;
  {
    int data_size = 0;
    for (int i = 0; i < this->referenced_appids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->referenced_appids(i));
    }
    total_size += 2 * this->referenced_appids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CClanEventData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CClanEventData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CClanEventData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CClanEventData::MergeFrom(const CClanEventData& from) {
  GOOGLE_CHECK_NE(&from, this);
  referenced_appids_.MergeFrom(from.referenced_appids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_clan_steamid()) {
      set_clan_steamid(from.clan_steamid());
    }
    if (from.has_event_name()) {
      set_event_name(from.event_name());
    }
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_server_address()) {
      set_server_address(from.server_address());
    }
    if (from.has_server_password()) {
      set_server_password(from.server_password());
    }
    if (from.has_rtime32_start_time()) {
      set_rtime32_start_time(from.rtime32_start_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rtime32_end_time()) {
      set_rtime32_end_time(from.rtime32_end_time());
    }
    if (from.has_comment_count()) {
      set_comment_count(from.comment_count());
    }
    if (from.has_creator_steamid()) {
      set_creator_steamid(from.creator_steamid());
    }
    if (from.has_last_update_steamid()) {
      set_last_update_steamid(from.last_update_steamid());
    }
    if (from.has_event_notes()) {
      set_event_notes(from.event_notes());
    }
    if (from.has_jsondata()) {
      set_jsondata(from.jsondata());
    }
    if (from.has_announcement_body()) {
      mutable_announcement_body()->::CCommunity_ClanAnnouncementInfo::MergeFrom(from.announcement_body());
    }
    if (from.has_published()) {
      set_published(from.published());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_hidden()) {
      set_hidden(from.hidden());
    }
    if (from.has_rtime32_visibility_start()) {
      set_rtime32_visibility_start(from.rtime32_visibility_start());
    }
    if (from.has_rtime32_visibility_end()) {
      set_rtime32_visibility_end(from.rtime32_visibility_end());
    }
    if (from.has_broadcaster_accountid()) {
      set_broadcaster_accountid(from.broadcaster_accountid());
    }
    if (from.has_follower_count()) {
      set_follower_count(from.follower_count());
    }
    if (from.has_ignore_count()) {
      set_ignore_count(from.ignore_count());
    }
    if (from.has_forum_topic_id()) {
      set_forum_topic_id(from.forum_topic_id());
    }
    if (from.has_rtime32_last_modified()) {
      set_rtime32_last_modified(from.rtime32_last_modified());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_news_post_gid()) {
      set_news_post_gid(from.news_post_gid());
    }
    if (from.has_rtime_mod_reviewed()) {
      set_rtime_mod_reviewed(from.rtime_mod_reviewed());
    }
    if (from.has_featured_app_tagid()) {
      set_featured_app_tagid(from.featured_app_tagid());
    }
    if (from.has_build_id()) {
      set_build_id(from.build_id());
    }
    if (from.has_build_branch()) {
      set_build_branch(from.build_branch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CClanEventData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CClanEventData::CopyFrom(const CClanEventData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClanEventData::IsInitialized() const {

  return true;
}

void CClanEventData::Swap(CClanEventData* other) {
  if (other != this) {
    std::swap(gid_, other->gid_);
    std::swap(clan_steamid_, other->clan_steamid_);
    std::swap(event_name_, other->event_name_);
    std::swap(event_type_, other->event_type_);
    std::swap(appid_, other->appid_);
    std::swap(server_address_, other->server_address_);
    std::swap(server_password_, other->server_password_);
    std::swap(rtime32_start_time_, other->rtime32_start_time_);
    std::swap(rtime32_end_time_, other->rtime32_end_time_);
    std::swap(comment_count_, other->comment_count_);
    std::swap(creator_steamid_, other->creator_steamid_);
    std::swap(last_update_steamid_, other->last_update_steamid_);
    std::swap(event_notes_, other->event_notes_);
    std::swap(jsondata_, other->jsondata_);
    std::swap(announcement_body_, other->announcement_body_);
    std::swap(published_, other->published_);
    std::swap(hidden_, other->hidden_);
    std::swap(rtime32_visibility_start_, other->rtime32_visibility_start_);
    std::swap(rtime32_visibility_end_, other->rtime32_visibility_end_);
    std::swap(broadcaster_accountid_, other->broadcaster_accountid_);
    std::swap(follower_count_, other->follower_count_);
    std::swap(ignore_count_, other->ignore_count_);
    std::swap(forum_topic_id_, other->forum_topic_id_);
    std::swap(rtime32_last_modified_, other->rtime32_last_modified_);
    std::swap(news_post_gid_, other->news_post_gid_);
    std::swap(rtime_mod_reviewed_, other->rtime_mod_reviewed_);
    std::swap(featured_app_tagid_, other->featured_app_tagid_);
    referenced_appids_.Swap(&other->referenced_appids_);
    std::swap(build_id_, other->build_id_);
    std::swap(build_branch_, other->build_branch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CClanEventData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CClanEventData_descriptor_;
  metadata.reflection = CClanEventData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CBilling_Address::kFirstNameFieldNumber;
const int CBilling_Address::kLastNameFieldNumber;
const int CBilling_Address::kAddress1FieldNumber;
const int CBilling_Address::kAddress2FieldNumber;
const int CBilling_Address::kCityFieldNumber;
const int CBilling_Address::kUsStateFieldNumber;
const int CBilling_Address::kCountryCodeFieldNumber;
const int CBilling_Address::kPostcodeFieldNumber;
const int CBilling_Address::kZipPlus4FieldNumber;
const int CBilling_Address::kPhoneFieldNumber;
#endif  // !_MSC_VER

CBilling_Address::CBilling_Address()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CBilling_Address::InitAsDefaultInstance() {
}

CBilling_Address::CBilling_Address(const CBilling_Address& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CBilling_Address::SharedCtor() {
  _cached_size_ = 0;
  first_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  last_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  address1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  address2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  us_state_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  postcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zip_plus4_ = 0;
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CBilling_Address::~CBilling_Address() {
  SharedDtor();
}

void CBilling_Address::SharedDtor() {
  if (first_name_ != &::google::protobuf::internal::kEmptyString) {
    delete first_name_;
  }
  if (last_name_ != &::google::protobuf::internal::kEmptyString) {
    delete last_name_;
  }
  if (address1_ != &::google::protobuf::internal::kEmptyString) {
    delete address1_;
  }
  if (address2_ != &::google::protobuf::internal::kEmptyString) {
    delete address2_;
  }
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (us_state_ != &::google::protobuf::internal::kEmptyString) {
    delete us_state_;
  }
  if (country_code_ != &::google::protobuf::internal::kEmptyString) {
    delete country_code_;
  }
  if (postcode_ != &::google::protobuf::internal::kEmptyString) {
    delete postcode_;
  }
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (this != default_instance_) {
  }
}

void CBilling_Address::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CBilling_Address::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CBilling_Address_descriptor_;
}

const CBilling_Address& CBilling_Address::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fbase_2eproto();
  return *default_instance_;
}

CBilling_Address* CBilling_Address::default_instance_ = NULL;

CBilling_Address* CBilling_Address::New() const {
  return new CBilling_Address;
}

void CBilling_Address::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_first_name()) {
      if (first_name_ != &::google::protobuf::internal::kEmptyString) {
        first_name_->clear();
      }
    }
    if (has_last_name()) {
      if (last_name_ != &::google::protobuf::internal::kEmptyString) {
        last_name_->clear();
      }
    }
    if (has_address1()) {
      if (address1_ != &::google::protobuf::internal::kEmptyString) {
        address1_->clear();
      }
    }
    if (has_address2()) {
      if (address2_ != &::google::protobuf::internal::kEmptyString) {
        address2_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::kEmptyString) {
        city_->clear();
      }
    }
    if (has_us_state()) {
      if (us_state_ != &::google::protobuf::internal::kEmptyString) {
        us_state_->clear();
      }
    }
    if (has_country_code()) {
      if (country_code_ != &::google::protobuf::internal::kEmptyString) {
        country_code_->clear();
      }
    }
    if (has_postcode()) {
      if (postcode_ != &::google::protobuf::internal::kEmptyString) {
        postcode_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    zip_plus4_ = 0;
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CBilling_Address::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string first_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_first_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->first_name().data(), this->first_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_last_name;
        break;
      }

      // optional string last_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->last_name().data(), this->last_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_address1;
        break;
      }

      // optional string address1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address1().data(), this->address1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_address2;
        break;
      }

      // optional string address2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address2().data(), this->address2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_city;
        break;
      }

      // optional string city = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_us_state;
        break;
      }

      // optional string us_state = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_us_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_us_state()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->us_state().data(), this->us_state().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_country_code;
        break;
      }

      // optional string country_code = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_country_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->country_code().data(), this->country_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_postcode;
        break;
      }

      // optional string postcode = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_postcode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_postcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->postcode().data(), this->postcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_zip_plus4;
        break;
      }

      // optional int32 zip_plus4 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zip_plus4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zip_plus4_)));
          set_has_zip_plus4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_phone;
        break;
      }

      // optional string phone = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CBilling_Address::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string first_name = 1;
  if (has_first_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->first_name().data(), this->first_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->first_name(), output);
  }

  // optional string last_name = 2;
  if (has_last_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_name().data(), this->last_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->last_name(), output);
  }

  // optional string address1 = 3;
  if (has_address1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address1().data(), this->address1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->address1(), output);
  }

  // optional string address2 = 4;
  if (has_address2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address2().data(), this->address2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->address2(), output);
  }

  // optional string city = 5;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->city(), output);
  }

  // optional string us_state = 6;
  if (has_us_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->us_state().data(), this->us_state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->us_state(), output);
  }

  // optional string country_code = 7;
  if (has_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->country_code(), output);
  }

  // optional string postcode = 8;
  if (has_postcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->postcode().data(), this->postcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->postcode(), output);
  }

  // optional int32 zip_plus4 = 9;
  if (has_zip_plus4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->zip_plus4(), output);
  }

  // optional string phone = 10;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->phone(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CBilling_Address::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string first_name = 1;
  if (has_first_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->first_name().data(), this->first_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->first_name(), target);
  }

  // optional string last_name = 2;
  if (has_last_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_name().data(), this->last_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->last_name(), target);
  }

  // optional string address1 = 3;
  if (has_address1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address1().data(), this->address1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->address1(), target);
  }

  // optional string address2 = 4;
  if (has_address2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address2().data(), this->address2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->address2(), target);
  }

  // optional string city = 5;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->city(), target);
  }

  // optional string us_state = 6;
  if (has_us_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->us_state().data(), this->us_state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->us_state(), target);
  }

  // optional string country_code = 7;
  if (has_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->country_code(), target);
  }

  // optional string postcode = 8;
  if (has_postcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->postcode().data(), this->postcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->postcode(), target);
  }

  // optional int32 zip_plus4 = 9;
  if (has_zip_plus4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->zip_plus4(), target);
  }

  // optional string phone = 10;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->phone(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CBilling_Address::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string first_name = 1;
    if (has_first_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->first_name());
    }

    // optional string last_name = 2;
    if (has_last_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_name());
    }

    // optional string address1 = 3;
    if (has_address1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address1());
    }

    // optional string address2 = 4;
    if (has_address2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address2());
    }

    // optional string city = 5;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // optional string us_state = 6;
    if (has_us_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->us_state());
    }

    // optional string country_code = 7;
    if (has_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_code());
    }

    // optional string postcode = 8;
    if (has_postcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->postcode());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 zip_plus4 = 9;
    if (has_zip_plus4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zip_plus4());
    }

    // optional string phone = 10;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CBilling_Address::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CBilling_Address* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CBilling_Address*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CBilling_Address::MergeFrom(const CBilling_Address& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_first_name()) {
      set_first_name(from.first_name());
    }
    if (from.has_last_name()) {
      set_last_name(from.last_name());
    }
    if (from.has_address1()) {
      set_address1(from.address1());
    }
    if (from.has_address2()) {
      set_address2(from.address2());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_us_state()) {
      set_us_state(from.us_state());
    }
    if (from.has_country_code()) {
      set_country_code(from.country_code());
    }
    if (from.has_postcode()) {
      set_postcode(from.postcode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_zip_plus4()) {
      set_zip_plus4(from.zip_plus4());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CBilling_Address::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBilling_Address::CopyFrom(const CBilling_Address& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBilling_Address::IsInitialized() const {

  return true;
}

void CBilling_Address::Swap(CBilling_Address* other) {
  if (other != this) {
    std::swap(first_name_, other->first_name_);
    std::swap(last_name_, other->last_name_);
    std::swap(address1_, other->address1_);
    std::swap(address2_, other->address2_);
    std::swap(city_, other->city_);
    std::swap(us_state_, other->us_state_);
    std::swap(country_code_, other->country_code_);
    std::swap(postcode_, other->postcode_);
    std::swap(zip_plus4_, other->zip_plus4_);
    std::swap(phone_, other->phone_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CBilling_Address::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CBilling_Address_descriptor_;
  metadata.reflection = CBilling_Address_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CPackageReservationStatus::kPackageidFieldNumber;
const int CPackageReservationStatus::kReservationStateFieldNumber;
const int CPackageReservationStatus::kQueuePositionFieldNumber;
const int CPackageReservationStatus::kTotalQueueSizeFieldNumber;
const int CPackageReservationStatus::kReservationCountryCodeFieldNumber;
const int CPackageReservationStatus::kExpiredFieldNumber;
const int CPackageReservationStatus::kTimeExpiresFieldNumber;
const int CPackageReservationStatus::kTimeReservedFieldNumber;
#endif  // !_MSC_VER

CPackageReservationStatus::CPackageReservationStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CPackageReservationStatus::InitAsDefaultInstance() {
}

CPackageReservationStatus::CPackageReservationStatus(const CPackageReservationStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CPackageReservationStatus::SharedCtor() {
  _cached_size_ = 0;
  packageid_ = 0u;
  reservation_state_ = 0;
  queue_position_ = 0;
  total_queue_size_ = 0;
  reservation_country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  expired_ = false;
  time_expires_ = 0u;
  time_reserved_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CPackageReservationStatus::~CPackageReservationStatus() {
  SharedDtor();
}

void CPackageReservationStatus::SharedDtor() {
  if (reservation_country_code_ != &::google::protobuf::internal::kEmptyString) {
    delete reservation_country_code_;
  }
  if (this != default_instance_) {
  }
}

void CPackageReservationStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPackageReservationStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CPackageReservationStatus_descriptor_;
}

const CPackageReservationStatus& CPackageReservationStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fbase_2eproto();
  return *default_instance_;
}

CPackageReservationStatus* CPackageReservationStatus::default_instance_ = NULL;

CPackageReservationStatus* CPackageReservationStatus::New() const {
  return new CPackageReservationStatus;
}

void CPackageReservationStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packageid_ = 0u;
    reservation_state_ = 0;
    queue_position_ = 0;
    total_queue_size_ = 0;
    if (has_reservation_country_code()) {
      if (reservation_country_code_ != &::google::protobuf::internal::kEmptyString) {
        reservation_country_code_->clear();
      }
    }
    expired_ = false;
    time_expires_ = 0u;
    time_reserved_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CPackageReservationStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 packageid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packageid_)));
          set_has_packageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reservation_state;
        break;
      }

      // optional int32 reservation_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reservation_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reservation_state_)));
          set_has_reservation_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_queue_position;
        break;
      }

      // optional int32 queue_position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_queue_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &queue_position_)));
          set_has_queue_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_queue_size;
        break;
      }

      // optional int32 total_queue_size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_queue_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_queue_size_)));
          set_has_total_queue_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_reservation_country_code;
        break;
      }

      // optional string reservation_country_code = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reservation_country_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reservation_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reservation_country_code().data(), this->reservation_country_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_expired;
        break;
      }

      // optional bool expired = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &expired_)));
          set_has_expired();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_time_expires;
        break;
      }

      // optional uint32 time_expires = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_expires:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_expires_)));
          set_has_time_expires();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_time_reserved;
        break;
      }

      // optional uint32 time_reserved = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_reserved:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_reserved_)));
          set_has_time_reserved();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CPackageReservationStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 packageid = 1;
  if (has_packageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->packageid(), output);
  }

  // optional int32 reservation_state = 2;
  if (has_reservation_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reservation_state(), output);
  }

  // optional int32 queue_position = 3;
  if (has_queue_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->queue_position(), output);
  }

  // optional int32 total_queue_size = 4;
  if (has_total_queue_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->total_queue_size(), output);
  }

  // optional string reservation_country_code = 5;
  if (has_reservation_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reservation_country_code().data(), this->reservation_country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->reservation_country_code(), output);
  }

  // optional bool expired = 6;
  if (has_expired()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->expired(), output);
  }

  // optional uint32 time_expires = 7;
  if (has_time_expires()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->time_expires(), output);
  }

  // optional uint32 time_reserved = 8;
  if (has_time_reserved()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->time_reserved(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CPackageReservationStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 packageid = 1;
  if (has_packageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->packageid(), target);
  }

  // optional int32 reservation_state = 2;
  if (has_reservation_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reservation_state(), target);
  }

  // optional int32 queue_position = 3;
  if (has_queue_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->queue_position(), target);
  }

  // optional int32 total_queue_size = 4;
  if (has_total_queue_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->total_queue_size(), target);
  }

  // optional string reservation_country_code = 5;
  if (has_reservation_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reservation_country_code().data(), this->reservation_country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->reservation_country_code(), target);
  }

  // optional bool expired = 6;
  if (has_expired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->expired(), target);
  }

  // optional uint32 time_expires = 7;
  if (has_time_expires()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->time_expires(), target);
  }

  // optional uint32 time_reserved = 8;
  if (has_time_reserved()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->time_reserved(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CPackageReservationStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 packageid = 1;
    if (has_packageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packageid());
    }

    // optional int32 reservation_state = 2;
    if (has_reservation_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reservation_state());
    }

    // optional int32 queue_position = 3;
    if (has_queue_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->queue_position());
    }

    // optional int32 total_queue_size = 4;
    if (has_total_queue_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_queue_size());
    }

    // optional string reservation_country_code = 5;
    if (has_reservation_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reservation_country_code());
    }

    // optional bool expired = 6;
    if (has_expired()) {
      total_size += 1 + 1;
    }

    // optional uint32 time_expires = 7;
    if (has_time_expires()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_expires());
    }

    // optional uint32 time_reserved = 8;
    if (has_time_reserved()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_reserved());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPackageReservationStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CPackageReservationStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CPackageReservationStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CPackageReservationStatus::MergeFrom(const CPackageReservationStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packageid()) {
      set_packageid(from.packageid());
    }
    if (from.has_reservation_state()) {
      set_reservation_state(from.reservation_state());
    }
    if (from.has_queue_position()) {
      set_queue_position(from.queue_position());
    }
    if (from.has_total_queue_size()) {
      set_total_queue_size(from.total_queue_size());
    }
    if (from.has_reservation_country_code()) {
      set_reservation_country_code(from.reservation_country_code());
    }
    if (from.has_expired()) {
      set_expired(from.expired());
    }
    if (from.has_time_expires()) {
      set_time_expires(from.time_expires());
    }
    if (from.has_time_reserved()) {
      set_time_reserved(from.time_reserved());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CPackageReservationStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPackageReservationStatus::CopyFrom(const CPackageReservationStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPackageReservationStatus::IsInitialized() const {

  return true;
}

void CPackageReservationStatus::Swap(CPackageReservationStatus* other) {
  if (other != this) {
    std::swap(packageid_, other->packageid_);
    std::swap(reservation_state_, other->reservation_state_);
    std::swap(queue_position_, other->queue_position_);
    std::swap(total_queue_size_, other->total_queue_size_);
    std::swap(reservation_country_code_, other->reservation_country_code_);
    std::swap(expired_, other->expired_);
    std::swap(time_expires_, other->time_expires_);
    std::swap(time_reserved_, other->time_reserved_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CPackageReservationStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CPackageReservationStatus_descriptor_;
  metadata.reflection = CPackageReservationStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgKeyValuePair::kNameFieldNumber;
const int CMsgKeyValuePair::kValueFieldNumber;
#endif  // !_MSC_VER

CMsgKeyValuePair::CMsgKeyValuePair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgKeyValuePair::InitAsDefaultInstance() {
}

CMsgKeyValuePair::CMsgKeyValuePair(const CMsgKeyValuePair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgKeyValuePair::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgKeyValuePair::~CMsgKeyValuePair() {
  SharedDtor();
}

void CMsgKeyValuePair::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void CMsgKeyValuePair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgKeyValuePair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgKeyValuePair_descriptor_;
}

const CMsgKeyValuePair& CMsgKeyValuePair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fbase_2eproto();
  return *default_instance_;
}

CMsgKeyValuePair* CMsgKeyValuePair::default_instance_ = NULL;

CMsgKeyValuePair* CMsgKeyValuePair::New() const {
  return new CMsgKeyValuePair;
}

void CMsgKeyValuePair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgKeyValuePair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgKeyValuePair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgKeyValuePair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgKeyValuePair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgKeyValuePair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgKeyValuePair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgKeyValuePair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgKeyValuePair::MergeFrom(const CMsgKeyValuePair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgKeyValuePair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgKeyValuePair::CopyFrom(const CMsgKeyValuePair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgKeyValuePair::IsInitialized() const {

  return true;
}

void CMsgKeyValuePair::Swap(CMsgKeyValuePair* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgKeyValuePair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgKeyValuePair_descriptor_;
  metadata.reflection = CMsgKeyValuePair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgKeyValueSet::kPairsFieldNumber;
#endif  // !_MSC_VER

CMsgKeyValueSet::CMsgKeyValueSet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgKeyValueSet::InitAsDefaultInstance() {
}

CMsgKeyValueSet::CMsgKeyValueSet(const CMsgKeyValueSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgKeyValueSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgKeyValueSet::~CMsgKeyValueSet() {
  SharedDtor();
}

void CMsgKeyValueSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgKeyValueSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgKeyValueSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgKeyValueSet_descriptor_;
}

const CMsgKeyValueSet& CMsgKeyValueSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fbase_2eproto();
  return *default_instance_;
}

CMsgKeyValueSet* CMsgKeyValueSet::default_instance_ = NULL;

CMsgKeyValueSet* CMsgKeyValueSet::New() const {
  return new CMsgKeyValueSet;
}

void CMsgKeyValueSet::Clear() {
  pairs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgKeyValueSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgKeyValuePair pairs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pairs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pairs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pairs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgKeyValueSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgKeyValuePair pairs = 1;
  for (int i = 0; i < this->pairs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pairs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgKeyValueSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgKeyValuePair pairs = 1;
  for (int i = 0; i < this->pairs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pairs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgKeyValueSet::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgKeyValuePair pairs = 1;
  total_size += 1 * this->pairs_size();
  for (int i = 0; i < this->pairs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pairs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgKeyValueSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgKeyValueSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgKeyValueSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgKeyValueSet::MergeFrom(const CMsgKeyValueSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  pairs_.MergeFrom(from.pairs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgKeyValueSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgKeyValueSet::CopyFrom(const CMsgKeyValueSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgKeyValueSet::IsInitialized() const {

  return true;
}

void CMsgKeyValueSet::Swap(CMsgKeyValueSet* other) {
  if (other != this) {
    pairs_.Swap(&other->pairs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgKeyValueSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgKeyValueSet_descriptor_;
  metadata.reflection = CMsgKeyValueSet_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int32 >, 5, false >
  msgpool_soft_limit(kMsgpoolSoftLimitFieldNumber, 32);
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int32 >, 5, false >
  msgpool_hard_limit(kMsgpoolHardLimitFieldNumber, 384);
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FileOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  force_php_generation(kForcePhpGenerationFieldNumber, false);
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  php_output_always_number(kPhpOutputAlwaysNumberFieldNumber, false);
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  allow_field_named_steam_id(kAllowFieldNamedSteamIdFieldNumber, false);

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

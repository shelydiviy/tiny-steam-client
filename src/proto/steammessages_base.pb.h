// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_base.proto

#ifndef PROTOBUF_steammessages_5fbase_2eproto__INCLUDED
#define PROTOBUF_steammessages_5fbase_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/protobuf/descriptor.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_steammessages_5fbase_2eproto();
void protobuf_AssignDesc_steammessages_5fbase_2eproto();
void protobuf_ShutdownFile_steammessages_5fbase_2eproto();

class CMsgIPAddress;
class CMsgIPAddressBucket;
class CMsgProtoBufHeader;
class CMsgMulti;
class CMsgProtobufWrapped;
class CMsgAuthTicket;
class CCDDBAppDetailCommon;
class CMsgAppRights;
class CCuratorPreferences;
class CLocalizationToken;
class CClanEventUserNewsTuple;
class CClanMatchEventByRange;
class CCommunity_ClanAnnouncementInfo;
class CClanEventData;
class CBilling_Address;
class CPackageReservationStatus;
class CMsgKeyValuePair;
class CMsgKeyValueSet;

enum EBanContentCheckResult {
  k_EBanContentCheckResult_NotScanned = 0,
  k_EBanContentCheckResult_Reset = 1,
  k_EBanContentCheckResult_NeedsChecking = 2,
  k_EBanContentCheckResult_VeryUnlikely = 5,
  k_EBanContentCheckResult_Unlikely = 30,
  k_EBanContentCheckResult_Possible = 50,
  k_EBanContentCheckResult_Likely = 75,
  k_EBanContentCheckResult_VeryLikely = 100
};
bool EBanContentCheckResult_IsValid(int value);
const EBanContentCheckResult EBanContentCheckResult_MIN = k_EBanContentCheckResult_NotScanned;
const EBanContentCheckResult EBanContentCheckResult_MAX = k_EBanContentCheckResult_VeryLikely;
const int EBanContentCheckResult_ARRAYSIZE = EBanContentCheckResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* EBanContentCheckResult_descriptor();
inline const ::std::string& EBanContentCheckResult_Name(EBanContentCheckResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    EBanContentCheckResult_descriptor(), value);
}
inline bool EBanContentCheckResult_Parse(
    const ::std::string& name, EBanContentCheckResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EBanContentCheckResult>(
    EBanContentCheckResult_descriptor(), name, value);
}
enum EProtoClanEventType {
  k_EClanOtherEvent = 1,
  k_EClanGameEvent = 2,
  k_EClanPartyEvent = 3,
  k_EClanMeetingEvent = 4,
  k_EClanSpecialCauseEvent = 5,
  k_EClanMusicAndArtsEvent = 6,
  k_EClanSportsEvent = 7,
  k_EClanTripEvent = 8,
  k_EClanChatEvent = 9,
  k_EClanGameReleaseEvent = 10,
  k_EClanBroadcastEvent = 11,
  k_EClanSmallUpdateEvent = 12,
  k_EClanPreAnnounceMajorUpdateEvent = 13,
  k_EClanMajorUpdateEvent = 14,
  k_EClanDLCReleaseEvent = 15,
  k_EClanFutureReleaseEvent = 16,
  k_EClanESportTournamentStreamEvent = 17,
  k_EClanDevStreamEvent = 18,
  k_EClanFamousStreamEvent = 19,
  k_EClanGameSalesEvent = 20,
  k_EClanGameItemSalesEvent = 21,
  k_EClanInGameBonusXPEvent = 22,
  k_EClanInGameLootEvent = 23,
  k_EClanInGamePerksEvent = 24,
  k_EClanInGameChallengeEvent = 25,
  k_EClanInGameContestEvent = 26,
  k_EClanIRLEvent = 27,
  k_EClanNewsEvent = 28,
  k_EClanBetaReleaseEvent = 29,
  k_EClanInGameContentReleaseEvent = 30,
  k_EClanFreeTrial = 31,
  k_EClanSeasonRelease = 32,
  k_EClanSeasonUpdate = 33,
  k_EClanCrosspostEvent = 34,
  k_EClanInGameEventGeneral = 35
};
bool EProtoClanEventType_IsValid(int value);
const EProtoClanEventType EProtoClanEventType_MIN = k_EClanOtherEvent;
const EProtoClanEventType EProtoClanEventType_MAX = k_EClanInGameEventGeneral;
const int EProtoClanEventType_ARRAYSIZE = EProtoClanEventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EProtoClanEventType_descriptor();
inline const ::std::string& EProtoClanEventType_Name(EProtoClanEventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EProtoClanEventType_descriptor(), value);
}
inline bool EProtoClanEventType_Parse(
    const ::std::string& name, EProtoClanEventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EProtoClanEventType>(
    EProtoClanEventType_descriptor(), name, value);
}
enum PartnerEventNotificationType {
  k_EEventStart = 0,
  k_EEventBroadcastStart = 1,
  k_EEventMatchStart = 2,
  k_EEventPartnerMaxType = 3
};
bool PartnerEventNotificationType_IsValid(int value);
const PartnerEventNotificationType PartnerEventNotificationType_MIN = k_EEventStart;
const PartnerEventNotificationType PartnerEventNotificationType_MAX = k_EEventPartnerMaxType;
const int PartnerEventNotificationType_ARRAYSIZE = PartnerEventNotificationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PartnerEventNotificationType_descriptor();
inline const ::std::string& PartnerEventNotificationType_Name(PartnerEventNotificationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PartnerEventNotificationType_descriptor(), value);
}
inline bool PartnerEventNotificationType_Parse(
    const ::std::string& name, PartnerEventNotificationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PartnerEventNotificationType>(
    PartnerEventNotificationType_descriptor(), name, value);
}
// ===================================================================

class CMsgIPAddress : public ::google::protobuf::Message {
 public:
  CMsgIPAddress();
  virtual ~CMsgIPAddress();

  CMsgIPAddress(const CMsgIPAddress& from);

  inline CMsgIPAddress& operator=(const CMsgIPAddress& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgIPAddress& default_instance();

  void Swap(CMsgIPAddress* other);

  // implements Message ----------------------------------------------

  CMsgIPAddress* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgIPAddress& from);
  void MergeFrom(const CMsgIPAddress& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 v4 = 1;
  inline bool has_v4() const;
  inline void clear_v4();
  static const int kV4FieldNumber = 1;
  inline ::google::protobuf::uint32 v4() const;
  inline void set_v4(::google::protobuf::uint32 value);

  // optional bytes v6 = 2;
  inline bool has_v6() const;
  inline void clear_v6();
  static const int kV6FieldNumber = 2;
  inline const ::std::string& v6() const;
  inline void set_v6(const ::std::string& value);
  inline void set_v6(const char* value);
  inline void set_v6(const void* value, size_t size);
  inline ::std::string* mutable_v6();
  inline ::std::string* release_v6();
  inline void set_allocated_v6(::std::string* v6);

  // @@protoc_insertion_point(class_scope:CMsgIPAddress)
 private:
  inline void set_has_v4();
  inline void clear_has_v4();
  inline void set_has_v6();
  inline void clear_has_v6();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* v6_;
  ::google::protobuf::uint32 v4_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fbase_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fbase_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fbase_2eproto();

  void InitAsDefaultInstance();
  static CMsgIPAddress* default_instance_;
};
// -------------------------------------------------------------------

class CMsgIPAddressBucket : public ::google::protobuf::Message {
 public:
  CMsgIPAddressBucket();
  virtual ~CMsgIPAddressBucket();

  CMsgIPAddressBucket(const CMsgIPAddressBucket& from);

  inline CMsgIPAddressBucket& operator=(const CMsgIPAddressBucket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgIPAddressBucket& default_instance();

  void Swap(CMsgIPAddressBucket* other);

  // implements Message ----------------------------------------------

  CMsgIPAddressBucket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgIPAddressBucket& from);
  void MergeFrom(const CMsgIPAddressBucket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgIPAddress original_ip_address = 1;
  inline bool has_original_ip_address() const;
  inline void clear_original_ip_address();
  static const int kOriginalIpAddressFieldNumber = 1;
  inline const ::CMsgIPAddress& original_ip_address() const;
  inline ::CMsgIPAddress* mutable_original_ip_address();
  inline ::CMsgIPAddress* release_original_ip_address();
  inline void set_allocated_original_ip_address(::CMsgIPAddress* original_ip_address);

  // optional fixed64 bucket = 2;
  inline bool has_bucket() const;
  inline void clear_bucket();
  static const int kBucketFieldNumber = 2;
  inline ::google::protobuf::uint64 bucket() const;
  inline void set_bucket(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgIPAddressBucket)
 private:
  inline void set_has_original_ip_address();
  inline void clear_has_original_ip_address();
  inline void set_has_bucket();
  inline void clear_has_bucket();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CMsgIPAddress* original_ip_address_;
  ::google::protobuf::uint64 bucket_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fbase_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fbase_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fbase_2eproto();

  void InitAsDefaultInstance();
  static CMsgIPAddressBucket* default_instance_;
};
// -------------------------------------------------------------------

class CMsgProtoBufHeader : public ::google::protobuf::Message {
 public:
  CMsgProtoBufHeader();
  virtual ~CMsgProtoBufHeader();

  CMsgProtoBufHeader(const CMsgProtoBufHeader& from);

  inline CMsgProtoBufHeader& operator=(const CMsgProtoBufHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgProtoBufHeader& default_instance();

  void Swap(CMsgProtoBufHeader* other);

  // implements Message ----------------------------------------------

  CMsgProtoBufHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgProtoBufHeader& from);
  void MergeFrom(const CMsgProtoBufHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steamid = 1;
  inline bool has_steamid() const;
  inline void clear_steamid();
  static const int kSteamidFieldNumber = 1;
  inline ::google::protobuf::uint64 steamid() const;
  inline void set_steamid(::google::protobuf::uint64 value);

  // optional int32 client_sessionid = 2;
  inline bool has_client_sessionid() const;
  inline void clear_client_sessionid();
  static const int kClientSessionidFieldNumber = 2;
  inline ::google::protobuf::int32 client_sessionid() const;
  inline void set_client_sessionid(::google::protobuf::int32 value);

  // optional uint32 routing_appid = 3;
  inline bool has_routing_appid() const;
  inline void clear_routing_appid();
  static const int kRoutingAppidFieldNumber = 3;
  inline ::google::protobuf::uint32 routing_appid() const;
  inline void set_routing_appid(::google::protobuf::uint32 value);

  // optional fixed64 jobid_source = 10 [default = 18446744073709551615];
  inline bool has_jobid_source() const;
  inline void clear_jobid_source();
  static const int kJobidSourceFieldNumber = 10;
  inline ::google::protobuf::uint64 jobid_source() const;
  inline void set_jobid_source(::google::protobuf::uint64 value);

  // optional fixed64 jobid_target = 11 [default = 18446744073709551615];
  inline bool has_jobid_target() const;
  inline void clear_jobid_target();
  static const int kJobidTargetFieldNumber = 11;
  inline ::google::protobuf::uint64 jobid_target() const;
  inline void set_jobid_target(::google::protobuf::uint64 value);

  // optional string target_job_name = 12;
  inline bool has_target_job_name() const;
  inline void clear_target_job_name();
  static const int kTargetJobNameFieldNumber = 12;
  inline const ::std::string& target_job_name() const;
  inline void set_target_job_name(const ::std::string& value);
  inline void set_target_job_name(const char* value);
  inline void set_target_job_name(const char* value, size_t size);
  inline ::std::string* mutable_target_job_name();
  inline ::std::string* release_target_job_name();
  inline void set_allocated_target_job_name(::std::string* target_job_name);

  // optional int32 seq_num = 24;
  inline bool has_seq_num() const;
  inline void clear_seq_num();
  static const int kSeqNumFieldNumber = 24;
  inline ::google::protobuf::int32 seq_num() const;
  inline void set_seq_num(::google::protobuf::int32 value);

  // optional int32 eresult = 13 [default = 2];
  inline bool has_eresult() const;
  inline void clear_eresult();
  static const int kEresultFieldNumber = 13;
  inline ::google::protobuf::int32 eresult() const;
  inline void set_eresult(::google::protobuf::int32 value);

  // optional string error_message = 14;
  inline bool has_error_message() const;
  inline void clear_error_message();
  static const int kErrorMessageFieldNumber = 14;
  inline const ::std::string& error_message() const;
  inline void set_error_message(const ::std::string& value);
  inline void set_error_message(const char* value);
  inline void set_error_message(const char* value, size_t size);
  inline ::std::string* mutable_error_message();
  inline ::std::string* release_error_message();
  inline void set_allocated_error_message(::std::string* error_message);

  // optional uint32 auth_account_flags = 16;
  inline bool has_auth_account_flags() const;
  inline void clear_auth_account_flags();
  static const int kAuthAccountFlagsFieldNumber = 16;
  inline ::google::protobuf::uint32 auth_account_flags() const;
  inline void set_auth_account_flags(::google::protobuf::uint32 value);

  // optional uint32 token_source = 22;
  inline bool has_token_source() const;
  inline void clear_token_source();
  static const int kTokenSourceFieldNumber = 22;
  inline ::google::protobuf::uint32 token_source() const;
  inline void set_token_source(::google::protobuf::uint32 value);

  // optional bool admin_spoofing_user = 23;
  inline bool has_admin_spoofing_user() const;
  inline void clear_admin_spoofing_user();
  static const int kAdminSpoofingUserFieldNumber = 23;
  inline bool admin_spoofing_user() const;
  inline void set_admin_spoofing_user(bool value);

  // optional int32 transport_error = 17 [default = 1];
  inline bool has_transport_error() const;
  inline void clear_transport_error();
  static const int kTransportErrorFieldNumber = 17;
  inline ::google::protobuf::int32 transport_error() const;
  inline void set_transport_error(::google::protobuf::int32 value);

  // optional uint64 messageid = 18 [default = 18446744073709551615];
  inline bool has_messageid() const;
  inline void clear_messageid();
  static const int kMessageidFieldNumber = 18;
  inline ::google::protobuf::uint64 messageid() const;
  inline void set_messageid(::google::protobuf::uint64 value);

  // optional uint32 publisher_group_id = 19;
  inline bool has_publisher_group_id() const;
  inline void clear_publisher_group_id();
  static const int kPublisherGroupIdFieldNumber = 19;
  inline ::google::protobuf::uint32 publisher_group_id() const;
  inline void set_publisher_group_id(::google::protobuf::uint32 value);

  // optional uint32 sysid = 20;
  inline bool has_sysid() const;
  inline void clear_sysid();
  static const int kSysidFieldNumber = 20;
  inline ::google::protobuf::uint32 sysid() const;
  inline void set_sysid(::google::protobuf::uint32 value);

  // optional uint64 trace_tag = 21;
  inline bool has_trace_tag() const;
  inline void clear_trace_tag();
  static const int kTraceTagFieldNumber = 21;
  inline ::google::protobuf::uint64 trace_tag() const;
  inline void set_trace_tag(::google::protobuf::uint64 value);

  // optional uint32 webapi_key_id = 25;
  inline bool has_webapi_key_id() const;
  inline void clear_webapi_key_id();
  static const int kWebapiKeyIdFieldNumber = 25;
  inline ::google::protobuf::uint32 webapi_key_id() const;
  inline void set_webapi_key_id(::google::protobuf::uint32 value);

  // optional bool is_from_external_source = 26;
  inline bool has_is_from_external_source() const;
  inline void clear_is_from_external_source();
  static const int kIsFromExternalSourceFieldNumber = 26;
  inline bool is_from_external_source() const;
  inline void set_is_from_external_source(bool value);

  // repeated uint32 forward_to_sysid = 27;
  inline int forward_to_sysid_size() const;
  inline void clear_forward_to_sysid();
  static const int kForwardToSysidFieldNumber = 27;
  inline ::google::protobuf::uint32 forward_to_sysid(int index) const;
  inline void set_forward_to_sysid(int index, ::google::protobuf::uint32 value);
  inline void add_forward_to_sysid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      forward_to_sysid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_forward_to_sysid();

  // optional uint32 cm_sysid = 28;
  inline bool has_cm_sysid() const;
  inline void clear_cm_sysid();
  static const int kCmSysidFieldNumber = 28;
  inline ::google::protobuf::uint32 cm_sysid() const;
  inline void set_cm_sysid(::google::protobuf::uint32 value);

  // optional uint32 launcher_type = 31 [default = 0];
  inline bool has_launcher_type() const;
  inline void clear_launcher_type();
  static const int kLauncherTypeFieldNumber = 31;
  inline ::google::protobuf::uint32 launcher_type() const;
  inline void set_launcher_type(::google::protobuf::uint32 value);

  // optional uint32 realm = 32 [default = 0];
  inline bool has_realm() const;
  inline void clear_realm();
  static const int kRealmFieldNumber = 32;
  inline ::google::protobuf::uint32 realm() const;
  inline void set_realm(::google::protobuf::uint32 value);

  // optional int32 timeout_ms = 33 [default = -1];
  inline bool has_timeout_ms() const;
  inline void clear_timeout_ms();
  static const int kTimeoutMsFieldNumber = 33;
  inline ::google::protobuf::int32 timeout_ms() const;
  inline void set_timeout_ms(::google::protobuf::int32 value);

  // optional string debug_source = 34;
  inline bool has_debug_source() const;
  inline void clear_debug_source();
  static const int kDebugSourceFieldNumber = 34;
  inline const ::std::string& debug_source() const;
  inline void set_debug_source(const ::std::string& value);
  inline void set_debug_source(const char* value);
  inline void set_debug_source(const char* value, size_t size);
  inline ::std::string* mutable_debug_source();
  inline ::std::string* release_debug_source();
  inline void set_allocated_debug_source(::std::string* debug_source);

  // optional uint32 debug_source_string_index = 35;
  inline bool has_debug_source_string_index() const;
  inline void clear_debug_source_string_index();
  static const int kDebugSourceStringIndexFieldNumber = 35;
  inline ::google::protobuf::uint32 debug_source_string_index() const;
  inline void set_debug_source_string_index(::google::protobuf::uint32 value);

  // optional uint64 token_id = 36;
  inline bool has_token_id() const;
  inline void clear_token_id();
  static const int kTokenIdFieldNumber = 36;
  inline ::google::protobuf::uint64 token_id() const;
  inline void set_token_id(::google::protobuf::uint64 value);

  // optional uint32 ip = 15;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 15;
  inline ::google::protobuf::uint32 ip() const;
  inline void set_ip(::google::protobuf::uint32 value);

  // optional bytes ip_v6 = 29;
  inline bool has_ip_v6() const;
  inline void clear_ip_v6();
  static const int kIpV6FieldNumber = 29;
  inline const ::std::string& ip_v6() const;
  inline void set_ip_v6(const ::std::string& value);
  inline void set_ip_v6(const char* value);
  inline void set_ip_v6(const void* value, size_t size);
  inline ::std::string* mutable_ip_v6();
  inline ::std::string* release_ip_v6();
  inline void set_allocated_ip_v6(::std::string* ip_v6);

  // @@protoc_insertion_point(class_scope:CMsgProtoBufHeader)
 private:
  inline void set_has_steamid();
  inline void clear_has_steamid();
  inline void set_has_client_sessionid();
  inline void clear_has_client_sessionid();
  inline void set_has_routing_appid();
  inline void clear_has_routing_appid();
  inline void set_has_jobid_source();
  inline void clear_has_jobid_source();
  inline void set_has_jobid_target();
  inline void clear_has_jobid_target();
  inline void set_has_target_job_name();
  inline void clear_has_target_job_name();
  inline void set_has_seq_num();
  inline void clear_has_seq_num();
  inline void set_has_eresult();
  inline void clear_has_eresult();
  inline void set_has_error_message();
  inline void clear_has_error_message();
  inline void set_has_auth_account_flags();
  inline void clear_has_auth_account_flags();
  inline void set_has_token_source();
  inline void clear_has_token_source();
  inline void set_has_admin_spoofing_user();
  inline void clear_has_admin_spoofing_user();
  inline void set_has_transport_error();
  inline void clear_has_transport_error();
  inline void set_has_messageid();
  inline void clear_has_messageid();
  inline void set_has_publisher_group_id();
  inline void clear_has_publisher_group_id();
  inline void set_has_sysid();
  inline void clear_has_sysid();
  inline void set_has_trace_tag();
  inline void clear_has_trace_tag();
  inline void set_has_webapi_key_id();
  inline void clear_has_webapi_key_id();
  inline void set_has_is_from_external_source();
  inline void clear_has_is_from_external_source();
  inline void set_has_cm_sysid();
  inline void clear_has_cm_sysid();
  inline void set_has_launcher_type();
  inline void clear_has_launcher_type();
  inline void set_has_realm();
  inline void clear_has_realm();
  inline void set_has_timeout_ms();
  inline void clear_has_timeout_ms();
  inline void set_has_debug_source();
  inline void clear_has_debug_source();
  inline void set_has_debug_source_string_index();
  inline void clear_has_debug_source_string_index();
  inline void set_has_token_id();
  inline void clear_has_token_id();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_ip_v6();
  inline void clear_has_ip_v6();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 steamid_;
  ::google::protobuf::int32 client_sessionid_;
  ::google::protobuf::uint32 routing_appid_;
  ::google::protobuf::uint64 jobid_source_;
  ::google::protobuf::uint64 jobid_target_;
  ::std::string* target_job_name_;
  ::google::protobuf::int32 seq_num_;
  ::google::protobuf::int32 eresult_;
  ::std::string* error_message_;
  ::google::protobuf::uint32 auth_account_flags_;
  ::google::protobuf::uint32 token_source_;
  ::google::protobuf::uint64 messageid_;
  ::google::protobuf::int32 transport_error_;
  ::google::protobuf::uint32 publisher_group_id_;
  bool admin_spoofing_user_;
  bool is_from_external_source_;
  ::google::protobuf::uint32 sysid_;
  ::google::protobuf::uint64 trace_tag_;
  ::google::protobuf::uint32 webapi_key_id_;
  ::google::protobuf::uint32 cm_sysid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > forward_to_sysid_;
  ::google::protobuf::uint32 launcher_type_;
  ::google::protobuf::uint32 realm_;
  ::google::protobuf::int32 timeout_ms_;
  ::google::protobuf::uint32 debug_source_string_index_;
  ::std::string* debug_source_;
  ::google::protobuf::uint64 token_id_;
  ::std::string* ip_v6_;
  ::google::protobuf::uint32 ip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(29 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fbase_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fbase_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fbase_2eproto();

  void InitAsDefaultInstance();
  static CMsgProtoBufHeader* default_instance_;
};
// -------------------------------------------------------------------

class CMsgMulti : public ::google::protobuf::Message {
 public:
  CMsgMulti();
  virtual ~CMsgMulti();

  CMsgMulti(const CMsgMulti& from);

  inline CMsgMulti& operator=(const CMsgMulti& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgMulti& default_instance();

  void Swap(CMsgMulti* other);

  // implements Message ----------------------------------------------

  CMsgMulti* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgMulti& from);
  void MergeFrom(const CMsgMulti& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 size_unzipped = 1;
  inline bool has_size_unzipped() const;
  inline void clear_size_unzipped();
  static const int kSizeUnzippedFieldNumber = 1;
  inline ::google::protobuf::uint32 size_unzipped() const;
  inline void set_size_unzipped(::google::protobuf::uint32 value);

  // optional bytes message_body = 2;
  inline bool has_message_body() const;
  inline void clear_message_body();
  static const int kMessageBodyFieldNumber = 2;
  inline const ::std::string& message_body() const;
  inline void set_message_body(const ::std::string& value);
  inline void set_message_body(const char* value);
  inline void set_message_body(const void* value, size_t size);
  inline ::std::string* mutable_message_body();
  inline ::std::string* release_message_body();
  inline void set_allocated_message_body(::std::string* message_body);

  // @@protoc_insertion_point(class_scope:CMsgMulti)
 private:
  inline void set_has_size_unzipped();
  inline void clear_has_size_unzipped();
  inline void set_has_message_body();
  inline void clear_has_message_body();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_body_;
  ::google::protobuf::uint32 size_unzipped_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fbase_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fbase_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fbase_2eproto();

  void InitAsDefaultInstance();
  static CMsgMulti* default_instance_;
};
// -------------------------------------------------------------------

class CMsgProtobufWrapped : public ::google::protobuf::Message {
 public:
  CMsgProtobufWrapped();
  virtual ~CMsgProtobufWrapped();

  CMsgProtobufWrapped(const CMsgProtobufWrapped& from);

  inline CMsgProtobufWrapped& operator=(const CMsgProtobufWrapped& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgProtobufWrapped& default_instance();

  void Swap(CMsgProtobufWrapped* other);

  // implements Message ----------------------------------------------

  CMsgProtobufWrapped* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgProtobufWrapped& from);
  void MergeFrom(const CMsgProtobufWrapped& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes message_body = 1;
  inline bool has_message_body() const;
  inline void clear_message_body();
  static const int kMessageBodyFieldNumber = 1;
  inline const ::std::string& message_body() const;
  inline void set_message_body(const ::std::string& value);
  inline void set_message_body(const char* value);
  inline void set_message_body(const void* value, size_t size);
  inline ::std::string* mutable_message_body();
  inline ::std::string* release_message_body();
  inline void set_allocated_message_body(::std::string* message_body);

  // @@protoc_insertion_point(class_scope:CMsgProtobufWrapped)
 private:
  inline void set_has_message_body();
  inline void clear_has_message_body();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_body_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fbase_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fbase_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fbase_2eproto();

  void InitAsDefaultInstance();
  static CMsgProtobufWrapped* default_instance_;
};
// -------------------------------------------------------------------

class CMsgAuthTicket : public ::google::protobuf::Message {
 public:
  CMsgAuthTicket();
  virtual ~CMsgAuthTicket();

  CMsgAuthTicket(const CMsgAuthTicket& from);

  inline CMsgAuthTicket& operator=(const CMsgAuthTicket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgAuthTicket& default_instance();

  void Swap(CMsgAuthTicket* other);

  // implements Message ----------------------------------------------

  CMsgAuthTicket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgAuthTicket& from);
  void MergeFrom(const CMsgAuthTicket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 estate = 1;
  inline bool has_estate() const;
  inline void clear_estate();
  static const int kEstateFieldNumber = 1;
  inline ::google::protobuf::uint32 estate() const;
  inline void set_estate(::google::protobuf::uint32 value);

  // optional uint32 eresult = 2 [default = 2];
  inline bool has_eresult() const;
  inline void clear_eresult();
  static const int kEresultFieldNumber = 2;
  inline ::google::protobuf::uint32 eresult() const;
  inline void set_eresult(::google::protobuf::uint32 value);

  // optional fixed64 steamid = 3;
  inline bool has_steamid() const;
  inline void clear_steamid();
  static const int kSteamidFieldNumber = 3;
  inline ::google::protobuf::uint64 steamid() const;
  inline void set_steamid(::google::protobuf::uint64 value);

  // optional fixed64 gameid = 4;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 4;
  inline ::google::protobuf::uint64 gameid() const;
  inline void set_gameid(::google::protobuf::uint64 value);

  // optional uint32 h_steam_pipe = 5;
  inline bool has_h_steam_pipe() const;
  inline void clear_h_steam_pipe();
  static const int kHSteamPipeFieldNumber = 5;
  inline ::google::protobuf::uint32 h_steam_pipe() const;
  inline void set_h_steam_pipe(::google::protobuf::uint32 value);

  // optional uint32 ticket_crc = 6;
  inline bool has_ticket_crc() const;
  inline void clear_ticket_crc();
  static const int kTicketCrcFieldNumber = 6;
  inline ::google::protobuf::uint32 ticket_crc() const;
  inline void set_ticket_crc(::google::protobuf::uint32 value);

  // optional bytes ticket = 7;
  inline bool has_ticket() const;
  inline void clear_ticket();
  static const int kTicketFieldNumber = 7;
  inline const ::std::string& ticket() const;
  inline void set_ticket(const ::std::string& value);
  inline void set_ticket(const char* value);
  inline void set_ticket(const void* value, size_t size);
  inline ::std::string* mutable_ticket();
  inline ::std::string* release_ticket();
  inline void set_allocated_ticket(::std::string* ticket);

  // @@protoc_insertion_point(class_scope:CMsgAuthTicket)
 private:
  inline void set_has_estate();
  inline void clear_has_estate();
  inline void set_has_eresult();
  inline void clear_has_eresult();
  inline void set_has_steamid();
  inline void clear_has_steamid();
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_h_steam_pipe();
  inline void clear_has_h_steam_pipe();
  inline void set_has_ticket_crc();
  inline void clear_has_ticket_crc();
  inline void set_has_ticket();
  inline void clear_has_ticket();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 estate_;
  ::google::protobuf::uint32 eresult_;
  ::google::protobuf::uint64 steamid_;
  ::google::protobuf::uint64 gameid_;
  ::google::protobuf::uint32 h_steam_pipe_;
  ::google::protobuf::uint32 ticket_crc_;
  ::std::string* ticket_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fbase_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fbase_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fbase_2eproto();

  void InitAsDefaultInstance();
  static CMsgAuthTicket* default_instance_;
};
// -------------------------------------------------------------------

class CCDDBAppDetailCommon : public ::google::protobuf::Message {
 public:
  CCDDBAppDetailCommon();
  virtual ~CCDDBAppDetailCommon();

  CCDDBAppDetailCommon(const CCDDBAppDetailCommon& from);

  inline CCDDBAppDetailCommon& operator=(const CCDDBAppDetailCommon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CCDDBAppDetailCommon& default_instance();

  void Swap(CCDDBAppDetailCommon* other);

  // implements Message ----------------------------------------------

  CCDDBAppDetailCommon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CCDDBAppDetailCommon& from);
  void MergeFrom(const CCDDBAppDetailCommon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 appid = 1;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 1;
  inline ::google::protobuf::uint32 appid() const;
  inline void set_appid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string icon = 3;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 3;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // optional bool tool = 6;
  inline bool has_tool() const;
  inline void clear_tool();
  static const int kToolFieldNumber = 6;
  inline bool tool() const;
  inline void set_tool(bool value);

  // optional bool demo = 7;
  inline bool has_demo() const;
  inline void clear_demo();
  static const int kDemoFieldNumber = 7;
  inline bool demo() const;
  inline void set_demo(bool value);

  // optional bool media = 8;
  inline bool has_media() const;
  inline void clear_media();
  static const int kMediaFieldNumber = 8;
  inline bool media() const;
  inline void set_media(bool value);

  // optional bool community_visible_stats = 9;
  inline bool has_community_visible_stats() const;
  inline void clear_community_visible_stats();
  static const int kCommunityVisibleStatsFieldNumber = 9;
  inline bool community_visible_stats() const;
  inline void set_community_visible_stats(bool value);

  // optional string friendly_name = 10;
  inline bool has_friendly_name() const;
  inline void clear_friendly_name();
  static const int kFriendlyNameFieldNumber = 10;
  inline const ::std::string& friendly_name() const;
  inline void set_friendly_name(const ::std::string& value);
  inline void set_friendly_name(const char* value);
  inline void set_friendly_name(const char* value, size_t size);
  inline ::std::string* mutable_friendly_name();
  inline ::std::string* release_friendly_name();
  inline void set_allocated_friendly_name(::std::string* friendly_name);

  // optional string propagation = 11;
  inline bool has_propagation() const;
  inline void clear_propagation();
  static const int kPropagationFieldNumber = 11;
  inline const ::std::string& propagation() const;
  inline void set_propagation(const ::std::string& value);
  inline void set_propagation(const char* value);
  inline void set_propagation(const char* value, size_t size);
  inline ::std::string* mutable_propagation();
  inline ::std::string* release_propagation();
  inline void set_allocated_propagation(::std::string* propagation);

  // optional bool has_adult_content = 12;
  inline bool has_has_adult_content() const;
  inline void clear_has_adult_content();
  static const int kHasAdultContentFieldNumber = 12;
  inline bool has_adult_content() const;
  inline void set_has_adult_content(bool value);

  // optional bool is_visible_in_steam_china = 13;
  inline bool has_is_visible_in_steam_china() const;
  inline void clear_is_visible_in_steam_china();
  static const int kIsVisibleInSteamChinaFieldNumber = 13;
  inline bool is_visible_in_steam_china() const;
  inline void set_is_visible_in_steam_china(bool value);

  // optional uint32 app_type = 14;
  inline bool has_app_type() const;
  inline void clear_app_type();
  static const int kAppTypeFieldNumber = 14;
  inline ::google::protobuf::uint32 app_type() const;
  inline void set_app_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CCDDBAppDetailCommon)
 private:
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_tool();
  inline void clear_has_tool();
  inline void set_has_demo();
  inline void clear_has_demo();
  inline void set_has_media();
  inline void clear_has_media();
  inline void set_has_community_visible_stats();
  inline void clear_has_community_visible_stats();
  inline void set_has_friendly_name();
  inline void clear_has_friendly_name();
  inline void set_has_propagation();
  inline void clear_has_propagation();
  inline void set_has_has_adult_content();
  inline void clear_has_has_adult_content();
  inline void set_has_is_visible_in_steam_china();
  inline void clear_has_is_visible_in_steam_china();
  inline void set_has_app_type();
  inline void clear_has_app_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* icon_;
  ::google::protobuf::uint32 appid_;
  bool tool_;
  bool demo_;
  bool media_;
  bool community_visible_stats_;
  ::std::string* friendly_name_;
  ::std::string* propagation_;
  bool has_adult_content_;
  bool is_visible_in_steam_china_;
  ::google::protobuf::uint32 app_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fbase_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fbase_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fbase_2eproto();

  void InitAsDefaultInstance();
  static CCDDBAppDetailCommon* default_instance_;
};
// -------------------------------------------------------------------

class CMsgAppRights : public ::google::protobuf::Message {
 public:
  CMsgAppRights();
  virtual ~CMsgAppRights();

  CMsgAppRights(const CMsgAppRights& from);

  inline CMsgAppRights& operator=(const CMsgAppRights& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgAppRights& default_instance();

  void Swap(CMsgAppRights* other);

  // implements Message ----------------------------------------------

  CMsgAppRights* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgAppRights& from);
  void MergeFrom(const CMsgAppRights& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool edit_info = 1;
  inline bool has_edit_info() const;
  inline void clear_edit_info();
  static const int kEditInfoFieldNumber = 1;
  inline bool edit_info() const;
  inline void set_edit_info(bool value);

  // optional bool publish = 2;
  inline bool has_publish() const;
  inline void clear_publish();
  static const int kPublishFieldNumber = 2;
  inline bool publish() const;
  inline void set_publish(bool value);

  // optional bool view_error_data = 3;
  inline bool has_view_error_data() const;
  inline void clear_view_error_data();
  static const int kViewErrorDataFieldNumber = 3;
  inline bool view_error_data() const;
  inline void set_view_error_data(bool value);

  // optional bool download = 4;
  inline bool has_download() const;
  inline void clear_download();
  static const int kDownloadFieldNumber = 4;
  inline bool download() const;
  inline void set_download(bool value);

  // optional bool upload_cdkeys = 5;
  inline bool has_upload_cdkeys() const;
  inline void clear_upload_cdkeys();
  static const int kUploadCdkeysFieldNumber = 5;
  inline bool upload_cdkeys() const;
  inline void set_upload_cdkeys(bool value);

  // optional bool generate_cdkeys = 6;
  inline bool has_generate_cdkeys() const;
  inline void clear_generate_cdkeys();
  static const int kGenerateCdkeysFieldNumber = 6;
  inline bool generate_cdkeys() const;
  inline void set_generate_cdkeys(bool value);

  // optional bool view_financials = 7;
  inline bool has_view_financials() const;
  inline void clear_view_financials();
  static const int kViewFinancialsFieldNumber = 7;
  inline bool view_financials() const;
  inline void set_view_financials(bool value);

  // optional bool manage_ceg = 8;
  inline bool has_manage_ceg() const;
  inline void clear_manage_ceg();
  static const int kManageCegFieldNumber = 8;
  inline bool manage_ceg() const;
  inline void set_manage_ceg(bool value);

  // optional bool manage_signing = 9;
  inline bool has_manage_signing() const;
  inline void clear_manage_signing();
  static const int kManageSigningFieldNumber = 9;
  inline bool manage_signing() const;
  inline void set_manage_signing(bool value);

  // optional bool manage_cdkeys = 10;
  inline bool has_manage_cdkeys() const;
  inline void clear_manage_cdkeys();
  static const int kManageCdkeysFieldNumber = 10;
  inline bool manage_cdkeys() const;
  inline void set_manage_cdkeys(bool value);

  // optional bool edit_marketing = 11;
  inline bool has_edit_marketing() const;
  inline void clear_edit_marketing();
  static const int kEditMarketingFieldNumber = 11;
  inline bool edit_marketing() const;
  inline void set_edit_marketing(bool value);

  // optional bool economy_support = 12;
  inline bool has_economy_support() const;
  inline void clear_economy_support();
  static const int kEconomySupportFieldNumber = 12;
  inline bool economy_support() const;
  inline void set_economy_support(bool value);

  // optional bool economy_support_supervisor = 13;
  inline bool has_economy_support_supervisor() const;
  inline void clear_economy_support_supervisor();
  static const int kEconomySupportSupervisorFieldNumber = 13;
  inline bool economy_support_supervisor() const;
  inline void set_economy_support_supervisor(bool value);

  // optional bool manage_pricing = 14;
  inline bool has_manage_pricing() const;
  inline void clear_manage_pricing();
  static const int kManagePricingFieldNumber = 14;
  inline bool manage_pricing() const;
  inline void set_manage_pricing(bool value);

  // optional bool broadcast_live = 15;
  inline bool has_broadcast_live() const;
  inline void clear_broadcast_live();
  static const int kBroadcastLiveFieldNumber = 15;
  inline bool broadcast_live() const;
  inline void set_broadcast_live(bool value);

  // optional bool view_marketing_traffic = 16;
  inline bool has_view_marketing_traffic() const;
  inline void clear_view_marketing_traffic();
  static const int kViewMarketingTrafficFieldNumber = 16;
  inline bool view_marketing_traffic() const;
  inline void set_view_marketing_traffic(bool value);

  // optional bool edit_store_display_content = 17;
  inline bool has_edit_store_display_content() const;
  inline void clear_edit_store_display_content();
  static const int kEditStoreDisplayContentFieldNumber = 17;
  inline bool edit_store_display_content() const;
  inline void set_edit_store_display_content(bool value);

  // @@protoc_insertion_point(class_scope:CMsgAppRights)
 private:
  inline void set_has_edit_info();
  inline void clear_has_edit_info();
  inline void set_has_publish();
  inline void clear_has_publish();
  inline void set_has_view_error_data();
  inline void clear_has_view_error_data();
  inline void set_has_download();
  inline void clear_has_download();
  inline void set_has_upload_cdkeys();
  inline void clear_has_upload_cdkeys();
  inline void set_has_generate_cdkeys();
  inline void clear_has_generate_cdkeys();
  inline void set_has_view_financials();
  inline void clear_has_view_financials();
  inline void set_has_manage_ceg();
  inline void clear_has_manage_ceg();
  inline void set_has_manage_signing();
  inline void clear_has_manage_signing();
  inline void set_has_manage_cdkeys();
  inline void clear_has_manage_cdkeys();
  inline void set_has_edit_marketing();
  inline void clear_has_edit_marketing();
  inline void set_has_economy_support();
  inline void clear_has_economy_support();
  inline void set_has_economy_support_supervisor();
  inline void clear_has_economy_support_supervisor();
  inline void set_has_manage_pricing();
  inline void clear_has_manage_pricing();
  inline void set_has_broadcast_live();
  inline void clear_has_broadcast_live();
  inline void set_has_view_marketing_traffic();
  inline void clear_has_view_marketing_traffic();
  inline void set_has_edit_store_display_content();
  inline void clear_has_edit_store_display_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool edit_info_;
  bool publish_;
  bool view_error_data_;
  bool download_;
  bool upload_cdkeys_;
  bool generate_cdkeys_;
  bool view_financials_;
  bool manage_ceg_;
  bool manage_signing_;
  bool manage_cdkeys_;
  bool edit_marketing_;
  bool economy_support_;
  bool economy_support_supervisor_;
  bool manage_pricing_;
  bool broadcast_live_;
  bool view_marketing_traffic_;
  bool edit_store_display_content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fbase_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fbase_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fbase_2eproto();

  void InitAsDefaultInstance();
  static CMsgAppRights* default_instance_;
};
// -------------------------------------------------------------------

class CCuratorPreferences : public ::google::protobuf::Message {
 public:
  CCuratorPreferences();
  virtual ~CCuratorPreferences();

  CCuratorPreferences(const CCuratorPreferences& from);

  inline CCuratorPreferences& operator=(const CCuratorPreferences& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CCuratorPreferences& default_instance();

  void Swap(CCuratorPreferences* other);

  // implements Message ----------------------------------------------

  CCuratorPreferences* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CCuratorPreferences& from);
  void MergeFrom(const CCuratorPreferences& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 supported_languages = 1;
  inline bool has_supported_languages() const;
  inline void clear_supported_languages();
  static const int kSupportedLanguagesFieldNumber = 1;
  inline ::google::protobuf::uint32 supported_languages() const;
  inline void set_supported_languages(::google::protobuf::uint32 value);

  // optional bool platform_windows = 2;
  inline bool has_platform_windows() const;
  inline void clear_platform_windows();
  static const int kPlatformWindowsFieldNumber = 2;
  inline bool platform_windows() const;
  inline void set_platform_windows(bool value);

  // optional bool platform_mac = 3;
  inline bool has_platform_mac() const;
  inline void clear_platform_mac();
  static const int kPlatformMacFieldNumber = 3;
  inline bool platform_mac() const;
  inline void set_platform_mac(bool value);

  // optional bool platform_linux = 4;
  inline bool has_platform_linux() const;
  inline void clear_platform_linux();
  static const int kPlatformLinuxFieldNumber = 4;
  inline bool platform_linux() const;
  inline void set_platform_linux(bool value);

  // optional bool vr_content = 5;
  inline bool has_vr_content() const;
  inline void clear_vr_content();
  static const int kVrContentFieldNumber = 5;
  inline bool vr_content() const;
  inline void set_vr_content(bool value);

  // optional bool adult_content_violence = 6;
  inline bool has_adult_content_violence() const;
  inline void clear_adult_content_violence();
  static const int kAdultContentViolenceFieldNumber = 6;
  inline bool adult_content_violence() const;
  inline void set_adult_content_violence(bool value);

  // optional bool adult_content_sex = 7;
  inline bool has_adult_content_sex() const;
  inline void clear_adult_content_sex();
  static const int kAdultContentSexFieldNumber = 7;
  inline bool adult_content_sex() const;
  inline void set_adult_content_sex(bool value);

  // optional uint32 timestamp_updated = 8;
  inline bool has_timestamp_updated() const;
  inline void clear_timestamp_updated();
  static const int kTimestampUpdatedFieldNumber = 8;
  inline ::google::protobuf::uint32 timestamp_updated() const;
  inline void set_timestamp_updated(::google::protobuf::uint32 value);

  // repeated uint32 tagids_curated = 9;
  inline int tagids_curated_size() const;
  inline void clear_tagids_curated();
  static const int kTagidsCuratedFieldNumber = 9;
  inline ::google::protobuf::uint32 tagids_curated(int index) const;
  inline void set_tagids_curated(int index, ::google::protobuf::uint32 value);
  inline void add_tagids_curated(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      tagids_curated() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_tagids_curated();

  // repeated uint32 tagids_filtered = 10;
  inline int tagids_filtered_size() const;
  inline void clear_tagids_filtered();
  static const int kTagidsFilteredFieldNumber = 10;
  inline ::google::protobuf::uint32 tagids_filtered(int index) const;
  inline void set_tagids_filtered(int index, ::google::protobuf::uint32 value);
  inline void add_tagids_filtered(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      tagids_filtered() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_tagids_filtered();

  // optional string website_title = 11;
  inline bool has_website_title() const;
  inline void clear_website_title();
  static const int kWebsiteTitleFieldNumber = 11;
  inline const ::std::string& website_title() const;
  inline void set_website_title(const ::std::string& value);
  inline void set_website_title(const char* value);
  inline void set_website_title(const char* value, size_t size);
  inline ::std::string* mutable_website_title();
  inline ::std::string* release_website_title();
  inline void set_allocated_website_title(::std::string* website_title);

  // optional string website_url = 12;
  inline bool has_website_url() const;
  inline void clear_website_url();
  static const int kWebsiteUrlFieldNumber = 12;
  inline const ::std::string& website_url() const;
  inline void set_website_url(const ::std::string& value);
  inline void set_website_url(const char* value);
  inline void set_website_url(const char* value, size_t size);
  inline ::std::string* mutable_website_url();
  inline ::std::string* release_website_url();
  inline void set_allocated_website_url(::std::string* website_url);

  // optional string discussion_url = 13;
  inline bool has_discussion_url() const;
  inline void clear_discussion_url();
  static const int kDiscussionUrlFieldNumber = 13;
  inline const ::std::string& discussion_url() const;
  inline void set_discussion_url(const ::std::string& value);
  inline void set_discussion_url(const char* value);
  inline void set_discussion_url(const char* value, size_t size);
  inline ::std::string* mutable_discussion_url();
  inline ::std::string* release_discussion_url();
  inline void set_allocated_discussion_url(::std::string* discussion_url);

  // optional bool show_broadcast = 14;
  inline bool has_show_broadcast() const;
  inline void clear_show_broadcast();
  static const int kShowBroadcastFieldNumber = 14;
  inline bool show_broadcast() const;
  inline void set_show_broadcast(bool value);

  // @@protoc_insertion_point(class_scope:CCuratorPreferences)
 private:
  inline void set_has_supported_languages();
  inline void clear_has_supported_languages();
  inline void set_has_platform_windows();
  inline void clear_has_platform_windows();
  inline void set_has_platform_mac();
  inline void clear_has_platform_mac();
  inline void set_has_platform_linux();
  inline void clear_has_platform_linux();
  inline void set_has_vr_content();
  inline void clear_has_vr_content();
  inline void set_has_adult_content_violence();
  inline void clear_has_adult_content_violence();
  inline void set_has_adult_content_sex();
  inline void clear_has_adult_content_sex();
  inline void set_has_timestamp_updated();
  inline void clear_has_timestamp_updated();
  inline void set_has_website_title();
  inline void clear_has_website_title();
  inline void set_has_website_url();
  inline void clear_has_website_url();
  inline void set_has_discussion_url();
  inline void clear_has_discussion_url();
  inline void set_has_show_broadcast();
  inline void clear_has_show_broadcast();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 supported_languages_;
  bool platform_windows_;
  bool platform_mac_;
  bool platform_linux_;
  bool vr_content_;
  ::google::protobuf::uint32 timestamp_updated_;
  bool adult_content_violence_;
  bool adult_content_sex_;
  bool show_broadcast_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > tagids_curated_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > tagids_filtered_;
  ::std::string* website_title_;
  ::std::string* website_url_;
  ::std::string* discussion_url_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fbase_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fbase_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fbase_2eproto();

  void InitAsDefaultInstance();
  static CCuratorPreferences* default_instance_;
};
// -------------------------------------------------------------------

class CLocalizationToken : public ::google::protobuf::Message {
 public:
  CLocalizationToken();
  virtual ~CLocalizationToken();

  CLocalizationToken(const CLocalizationToken& from);

  inline CLocalizationToken& operator=(const CLocalizationToken& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CLocalizationToken& default_instance();

  void Swap(CLocalizationToken* other);

  // implements Message ----------------------------------------------

  CLocalizationToken* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CLocalizationToken& from);
  void MergeFrom(const CLocalizationToken& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 language = 1;
  inline bool has_language() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 1;
  inline ::google::protobuf::uint32 language() const;
  inline void set_language(::google::protobuf::uint32 value);

  // optional string localized_string = 2;
  inline bool has_localized_string() const;
  inline void clear_localized_string();
  static const int kLocalizedStringFieldNumber = 2;
  inline const ::std::string& localized_string() const;
  inline void set_localized_string(const ::std::string& value);
  inline void set_localized_string(const char* value);
  inline void set_localized_string(const char* value, size_t size);
  inline ::std::string* mutable_localized_string();
  inline ::std::string* release_localized_string();
  inline void set_allocated_localized_string(::std::string* localized_string);

  // @@protoc_insertion_point(class_scope:CLocalizationToken)
 private:
  inline void set_has_language();
  inline void clear_has_language();
  inline void set_has_localized_string();
  inline void clear_has_localized_string();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* localized_string_;
  ::google::protobuf::uint32 language_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fbase_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fbase_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fbase_2eproto();

  void InitAsDefaultInstance();
  static CLocalizationToken* default_instance_;
};
// -------------------------------------------------------------------

class CClanEventUserNewsTuple : public ::google::protobuf::Message {
 public:
  CClanEventUserNewsTuple();
  virtual ~CClanEventUserNewsTuple();

  CClanEventUserNewsTuple(const CClanEventUserNewsTuple& from);

  inline CClanEventUserNewsTuple& operator=(const CClanEventUserNewsTuple& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CClanEventUserNewsTuple& default_instance();

  void Swap(CClanEventUserNewsTuple* other);

  // implements Message ----------------------------------------------

  CClanEventUserNewsTuple* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CClanEventUserNewsTuple& from);
  void MergeFrom(const CClanEventUserNewsTuple& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 clanid = 1;
  inline bool has_clanid() const;
  inline void clear_clanid();
  static const int kClanidFieldNumber = 1;
  inline ::google::protobuf::uint32 clanid() const;
  inline void set_clanid(::google::protobuf::uint32 value);

  // optional fixed64 event_gid = 2;
  inline bool has_event_gid() const;
  inline void clear_event_gid();
  static const int kEventGidFieldNumber = 2;
  inline ::google::protobuf::uint64 event_gid() const;
  inline void set_event_gid(::google::protobuf::uint64 value);

  // optional fixed64 announcement_gid = 3;
  inline bool has_announcement_gid() const;
  inline void clear_announcement_gid();
  static const int kAnnouncementGidFieldNumber = 3;
  inline ::google::protobuf::uint64 announcement_gid() const;
  inline void set_announcement_gid(::google::protobuf::uint64 value);

  // optional uint32 rtime_start = 4;
  inline bool has_rtime_start() const;
  inline void clear_rtime_start();
  static const int kRtimeStartFieldNumber = 4;
  inline ::google::protobuf::uint32 rtime_start() const;
  inline void set_rtime_start(::google::protobuf::uint32 value);

  // optional uint32 rtime_end = 5;
  inline bool has_rtime_end() const;
  inline void clear_rtime_end();
  static const int kRtimeEndFieldNumber = 5;
  inline ::google::protobuf::uint32 rtime_end() const;
  inline void set_rtime_end(::google::protobuf::uint32 value);

  // optional uint32 priority_score = 6;
  inline bool has_priority_score() const;
  inline void clear_priority_score();
  static const int kPriorityScoreFieldNumber = 6;
  inline ::google::protobuf::uint32 priority_score() const;
  inline void set_priority_score(::google::protobuf::uint32 value);

  // optional uint32 type = 7;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 7;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 clamp_range_slot = 8;
  inline bool has_clamp_range_slot() const;
  inline void clear_clamp_range_slot();
  static const int kClampRangeSlotFieldNumber = 8;
  inline ::google::protobuf::uint32 clamp_range_slot() const;
  inline void set_clamp_range_slot(::google::protobuf::uint32 value);

  // optional uint32 appid = 9;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 9;
  inline ::google::protobuf::uint32 appid() const;
  inline void set_appid(::google::protobuf::uint32 value);

  // optional uint32 rtime32_last_modified = 10;
  inline bool has_rtime32_last_modified() const;
  inline void clear_rtime32_last_modified();
  static const int kRtime32LastModifiedFieldNumber = 10;
  inline ::google::protobuf::uint32 rtime32_last_modified() const;
  inline void set_rtime32_last_modified(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CClanEventUserNewsTuple)
 private:
  inline void set_has_clanid();
  inline void clear_has_clanid();
  inline void set_has_event_gid();
  inline void clear_has_event_gid();
  inline void set_has_announcement_gid();
  inline void clear_has_announcement_gid();
  inline void set_has_rtime_start();
  inline void clear_has_rtime_start();
  inline void set_has_rtime_end();
  inline void clear_has_rtime_end();
  inline void set_has_priority_score();
  inline void clear_has_priority_score();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_clamp_range_slot();
  inline void clear_has_clamp_range_slot();
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_rtime32_last_modified();
  inline void clear_has_rtime32_last_modified();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 event_gid_;
  ::google::protobuf::uint32 clanid_;
  ::google::protobuf::uint32 rtime_start_;
  ::google::protobuf::uint64 announcement_gid_;
  ::google::protobuf::uint32 rtime_end_;
  ::google::protobuf::uint32 priority_score_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 clamp_range_slot_;
  ::google::protobuf::uint32 appid_;
  ::google::protobuf::uint32 rtime32_last_modified_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fbase_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fbase_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fbase_2eproto();

  void InitAsDefaultInstance();
  static CClanEventUserNewsTuple* default_instance_;
};
// -------------------------------------------------------------------

class CClanMatchEventByRange : public ::google::protobuf::Message {
 public:
  CClanMatchEventByRange();
  virtual ~CClanMatchEventByRange();

  CClanMatchEventByRange(const CClanMatchEventByRange& from);

  inline CClanMatchEventByRange& operator=(const CClanMatchEventByRange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CClanMatchEventByRange& default_instance();

  void Swap(CClanMatchEventByRange* other);

  // implements Message ----------------------------------------------

  CClanMatchEventByRange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CClanMatchEventByRange& from);
  void MergeFrom(const CClanMatchEventByRange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 rtime_before = 1;
  inline bool has_rtime_before() const;
  inline void clear_rtime_before();
  static const int kRtimeBeforeFieldNumber = 1;
  inline ::google::protobuf::uint32 rtime_before() const;
  inline void set_rtime_before(::google::protobuf::uint32 value);

  // optional uint32 rtime_after = 2;
  inline bool has_rtime_after() const;
  inline void clear_rtime_after();
  static const int kRtimeAfterFieldNumber = 2;
  inline ::google::protobuf::uint32 rtime_after() const;
  inline void set_rtime_after(::google::protobuf::uint32 value);

  // optional uint32 qualified = 3;
  inline bool has_qualified() const;
  inline void clear_qualified();
  static const int kQualifiedFieldNumber = 3;
  inline ::google::protobuf::uint32 qualified() const;
  inline void set_qualified(::google::protobuf::uint32 value);

  // repeated .CClanEventUserNewsTuple events = 4;
  inline int events_size() const;
  inline void clear_events();
  static const int kEventsFieldNumber = 4;
  inline const ::CClanEventUserNewsTuple& events(int index) const;
  inline ::CClanEventUserNewsTuple* mutable_events(int index);
  inline ::CClanEventUserNewsTuple* add_events();
  inline const ::google::protobuf::RepeatedPtrField< ::CClanEventUserNewsTuple >&
      events() const;
  inline ::google::protobuf::RepeatedPtrField< ::CClanEventUserNewsTuple >*
      mutable_events();

  // @@protoc_insertion_point(class_scope:CClanMatchEventByRange)
 private:
  inline void set_has_rtime_before();
  inline void clear_has_rtime_before();
  inline void set_has_rtime_after();
  inline void clear_has_rtime_after();
  inline void set_has_qualified();
  inline void clear_has_qualified();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 rtime_before_;
  ::google::protobuf::uint32 rtime_after_;
  ::google::protobuf::RepeatedPtrField< ::CClanEventUserNewsTuple > events_;
  ::google::protobuf::uint32 qualified_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fbase_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fbase_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fbase_2eproto();

  void InitAsDefaultInstance();
  static CClanMatchEventByRange* default_instance_;
};
// -------------------------------------------------------------------

class CCommunity_ClanAnnouncementInfo : public ::google::protobuf::Message {
 public:
  CCommunity_ClanAnnouncementInfo();
  virtual ~CCommunity_ClanAnnouncementInfo();

  CCommunity_ClanAnnouncementInfo(const CCommunity_ClanAnnouncementInfo& from);

  inline CCommunity_ClanAnnouncementInfo& operator=(const CCommunity_ClanAnnouncementInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CCommunity_ClanAnnouncementInfo& default_instance();

  void Swap(CCommunity_ClanAnnouncementInfo* other);

  // implements Message ----------------------------------------------

  CCommunity_ClanAnnouncementInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CCommunity_ClanAnnouncementInfo& from);
  void MergeFrom(const CCommunity_ClanAnnouncementInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 gid = 1;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 1;
  inline ::google::protobuf::uint64 gid() const;
  inline void set_gid(::google::protobuf::uint64 value);

  // optional uint64 clanid = 2;
  inline bool has_clanid() const;
  inline void clear_clanid();
  static const int kClanidFieldNumber = 2;
  inline ::google::protobuf::uint64 clanid() const;
  inline void set_clanid(::google::protobuf::uint64 value);

  // optional uint64 posterid = 3;
  inline bool has_posterid() const;
  inline void clear_posterid();
  static const int kPosteridFieldNumber = 3;
  inline ::google::protobuf::uint64 posterid() const;
  inline void set_posterid(::google::protobuf::uint64 value);

  // optional string headline = 4;
  inline bool has_headline() const;
  inline void clear_headline();
  static const int kHeadlineFieldNumber = 4;
  inline const ::std::string& headline() const;
  inline void set_headline(const ::std::string& value);
  inline void set_headline(const char* value);
  inline void set_headline(const char* value, size_t size);
  inline ::std::string* mutable_headline();
  inline ::std::string* release_headline();
  inline void set_allocated_headline(::std::string* headline);

  // optional uint32 posttime = 5;
  inline bool has_posttime() const;
  inline void clear_posttime();
  static const int kPosttimeFieldNumber = 5;
  inline ::google::protobuf::uint32 posttime() const;
  inline void set_posttime(::google::protobuf::uint32 value);

  // optional uint32 updatetime = 6;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdatetimeFieldNumber = 6;
  inline ::google::protobuf::uint32 updatetime() const;
  inline void set_updatetime(::google::protobuf::uint32 value);

  // optional string body = 7;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 7;
  inline const ::std::string& body() const;
  inline void set_body(const ::std::string& value);
  inline void set_body(const char* value);
  inline void set_body(const char* value, size_t size);
  inline ::std::string* mutable_body();
  inline ::std::string* release_body();
  inline void set_allocated_body(::std::string* body);

  // optional int32 commentcount = 8;
  inline bool has_commentcount() const;
  inline void clear_commentcount();
  static const int kCommentcountFieldNumber = 8;
  inline ::google::protobuf::int32 commentcount() const;
  inline void set_commentcount(::google::protobuf::int32 value);

  // repeated string tags = 9;
  inline int tags_size() const;
  inline void clear_tags();
  static const int kTagsFieldNumber = 9;
  inline const ::std::string& tags(int index) const;
  inline ::std::string* mutable_tags(int index);
  inline void set_tags(int index, const ::std::string& value);
  inline void set_tags(int index, const char* value);
  inline void set_tags(int index, const char* value, size_t size);
  inline ::std::string* add_tags();
  inline void add_tags(const ::std::string& value);
  inline void add_tags(const char* value);
  inline void add_tags(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();

  // optional int32 language = 10;
  inline bool has_language() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 10;
  inline ::google::protobuf::int32 language() const;
  inline void set_language(::google::protobuf::int32 value);

  // optional bool hidden = 11;
  inline bool has_hidden() const;
  inline void clear_hidden();
  static const int kHiddenFieldNumber = 11;
  inline bool hidden() const;
  inline void set_hidden(bool value);

  // optional fixed64 forum_topic_id = 12;
  inline bool has_forum_topic_id() const;
  inline void clear_forum_topic_id();
  static const int kForumTopicIdFieldNumber = 12;
  inline ::google::protobuf::uint64 forum_topic_id() const;
  inline void set_forum_topic_id(::google::protobuf::uint64 value);

  // optional fixed64 event_gid = 13;
  inline bool has_event_gid() const;
  inline void clear_event_gid();
  static const int kEventGidFieldNumber = 13;
  inline ::google::protobuf::uint64 event_gid() const;
  inline void set_event_gid(::google::protobuf::uint64 value);

  // optional int32 voteupcount = 14;
  inline bool has_voteupcount() const;
  inline void clear_voteupcount();
  static const int kVoteupcountFieldNumber = 14;
  inline ::google::protobuf::int32 voteupcount() const;
  inline void set_voteupcount(::google::protobuf::int32 value);

  // optional int32 votedowncount = 15;
  inline bool has_votedowncount() const;
  inline void clear_votedowncount();
  static const int kVotedowncountFieldNumber = 15;
  inline ::google::protobuf::int32 votedowncount() const;
  inline void set_votedowncount(::google::protobuf::int32 value);

  // optional .EBanContentCheckResult ban_check_result = 16 [default = k_EBanContentCheckResult_NotScanned];
  inline bool has_ban_check_result() const;
  inline void clear_ban_check_result();
  static const int kBanCheckResultFieldNumber = 16;
  inline ::EBanContentCheckResult ban_check_result() const;
  inline void set_ban_check_result(::EBanContentCheckResult value);

  // @@protoc_insertion_point(class_scope:CCommunity_ClanAnnouncementInfo)
 private:
  inline void set_has_gid();
  inline void clear_has_gid();
  inline void set_has_clanid();
  inline void clear_has_clanid();
  inline void set_has_posterid();
  inline void clear_has_posterid();
  inline void set_has_headline();
  inline void clear_has_headline();
  inline void set_has_posttime();
  inline void clear_has_posttime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_body();
  inline void clear_has_body();
  inline void set_has_commentcount();
  inline void clear_has_commentcount();
  inline void set_has_language();
  inline void clear_has_language();
  inline void set_has_hidden();
  inline void clear_has_hidden();
  inline void set_has_forum_topic_id();
  inline void clear_has_forum_topic_id();
  inline void set_has_event_gid();
  inline void clear_has_event_gid();
  inline void set_has_voteupcount();
  inline void clear_has_voteupcount();
  inline void set_has_votedowncount();
  inline void clear_has_votedowncount();
  inline void set_has_ban_check_result();
  inline void clear_has_ban_check_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 gid_;
  ::google::protobuf::uint64 clanid_;
  ::google::protobuf::uint64 posterid_;
  ::std::string* headline_;
  ::google::protobuf::uint32 posttime_;
  ::google::protobuf::uint32 updatetime_;
  ::std::string* body_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  ::google::protobuf::int32 commentcount_;
  ::google::protobuf::int32 language_;
  ::google::protobuf::uint64 forum_topic_id_;
  bool hidden_;
  ::google::protobuf::int32 voteupcount_;
  ::google::protobuf::uint64 event_gid_;
  ::google::protobuf::int32 votedowncount_;
  int ban_check_result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fbase_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fbase_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fbase_2eproto();

  void InitAsDefaultInstance();
  static CCommunity_ClanAnnouncementInfo* default_instance_;
};
// -------------------------------------------------------------------

class CClanEventData : public ::google::protobuf::Message {
 public:
  CClanEventData();
  virtual ~CClanEventData();

  CClanEventData(const CClanEventData& from);

  inline CClanEventData& operator=(const CClanEventData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CClanEventData& default_instance();

  void Swap(CClanEventData* other);

  // implements Message ----------------------------------------------

  CClanEventData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CClanEventData& from);
  void MergeFrom(const CClanEventData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 gid = 1;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 1;
  inline ::google::protobuf::uint64 gid() const;
  inline void set_gid(::google::protobuf::uint64 value);

  // optional fixed64 clan_steamid = 2;
  inline bool has_clan_steamid() const;
  inline void clear_clan_steamid();
  static const int kClanSteamidFieldNumber = 2;
  inline ::google::protobuf::uint64 clan_steamid() const;
  inline void set_clan_steamid(::google::protobuf::uint64 value);

  // optional string event_name = 3;
  inline bool has_event_name() const;
  inline void clear_event_name();
  static const int kEventNameFieldNumber = 3;
  inline const ::std::string& event_name() const;
  inline void set_event_name(const ::std::string& value);
  inline void set_event_name(const char* value);
  inline void set_event_name(const char* value, size_t size);
  inline ::std::string* mutable_event_name();
  inline ::std::string* release_event_name();
  inline void set_allocated_event_name(::std::string* event_name);

  // optional .EProtoClanEventType event_type = 4 [default = k_EClanOtherEvent];
  inline bool has_event_type() const;
  inline void clear_event_type();
  static const int kEventTypeFieldNumber = 4;
  inline ::EProtoClanEventType event_type() const;
  inline void set_event_type(::EProtoClanEventType value);

  // optional uint32 appid = 5;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 5;
  inline ::google::protobuf::uint32 appid() const;
  inline void set_appid(::google::protobuf::uint32 value);

  // optional string server_address = 6;
  inline bool has_server_address() const;
  inline void clear_server_address();
  static const int kServerAddressFieldNumber = 6;
  inline const ::std::string& server_address() const;
  inline void set_server_address(const ::std::string& value);
  inline void set_server_address(const char* value);
  inline void set_server_address(const char* value, size_t size);
  inline ::std::string* mutable_server_address();
  inline ::std::string* release_server_address();
  inline void set_allocated_server_address(::std::string* server_address);

  // optional string server_password = 7;
  inline bool has_server_password() const;
  inline void clear_server_password();
  static const int kServerPasswordFieldNumber = 7;
  inline const ::std::string& server_password() const;
  inline void set_server_password(const ::std::string& value);
  inline void set_server_password(const char* value);
  inline void set_server_password(const char* value, size_t size);
  inline ::std::string* mutable_server_password();
  inline ::std::string* release_server_password();
  inline void set_allocated_server_password(::std::string* server_password);

  // optional uint32 rtime32_start_time = 8;
  inline bool has_rtime32_start_time() const;
  inline void clear_rtime32_start_time();
  static const int kRtime32StartTimeFieldNumber = 8;
  inline ::google::protobuf::uint32 rtime32_start_time() const;
  inline void set_rtime32_start_time(::google::protobuf::uint32 value);

  // optional uint32 rtime32_end_time = 9;
  inline bool has_rtime32_end_time() const;
  inline void clear_rtime32_end_time();
  static const int kRtime32EndTimeFieldNumber = 9;
  inline ::google::protobuf::uint32 rtime32_end_time() const;
  inline void set_rtime32_end_time(::google::protobuf::uint32 value);

  // optional int32 comment_count = 10;
  inline bool has_comment_count() const;
  inline void clear_comment_count();
  static const int kCommentCountFieldNumber = 10;
  inline ::google::protobuf::int32 comment_count() const;
  inline void set_comment_count(::google::protobuf::int32 value);

  // optional fixed64 creator_steamid = 11;
  inline bool has_creator_steamid() const;
  inline void clear_creator_steamid();
  static const int kCreatorSteamidFieldNumber = 11;
  inline ::google::protobuf::uint64 creator_steamid() const;
  inline void set_creator_steamid(::google::protobuf::uint64 value);

  // optional fixed64 last_update_steamid = 12;
  inline bool has_last_update_steamid() const;
  inline void clear_last_update_steamid();
  static const int kLastUpdateSteamidFieldNumber = 12;
  inline ::google::protobuf::uint64 last_update_steamid() const;
  inline void set_last_update_steamid(::google::protobuf::uint64 value);

  // optional string event_notes = 13;
  inline bool has_event_notes() const;
  inline void clear_event_notes();
  static const int kEventNotesFieldNumber = 13;
  inline const ::std::string& event_notes() const;
  inline void set_event_notes(const ::std::string& value);
  inline void set_event_notes(const char* value);
  inline void set_event_notes(const char* value, size_t size);
  inline ::std::string* mutable_event_notes();
  inline ::std::string* release_event_notes();
  inline void set_allocated_event_notes(::std::string* event_notes);

  // optional string jsondata = 14;
  inline bool has_jsondata() const;
  inline void clear_jsondata();
  static const int kJsondataFieldNumber = 14;
  inline const ::std::string& jsondata() const;
  inline void set_jsondata(const ::std::string& value);
  inline void set_jsondata(const char* value);
  inline void set_jsondata(const char* value, size_t size);
  inline ::std::string* mutable_jsondata();
  inline ::std::string* release_jsondata();
  inline void set_allocated_jsondata(::std::string* jsondata);

  // optional .CCommunity_ClanAnnouncementInfo announcement_body = 15;
  inline bool has_announcement_body() const;
  inline void clear_announcement_body();
  static const int kAnnouncementBodyFieldNumber = 15;
  inline const ::CCommunity_ClanAnnouncementInfo& announcement_body() const;
  inline ::CCommunity_ClanAnnouncementInfo* mutable_announcement_body();
  inline ::CCommunity_ClanAnnouncementInfo* release_announcement_body();
  inline void set_allocated_announcement_body(::CCommunity_ClanAnnouncementInfo* announcement_body);

  // optional bool published = 16;
  inline bool has_published() const;
  inline void clear_published();
  static const int kPublishedFieldNumber = 16;
  inline bool published() const;
  inline void set_published(bool value);

  // optional bool hidden = 17;
  inline bool has_hidden() const;
  inline void clear_hidden();
  static const int kHiddenFieldNumber = 17;
  inline bool hidden() const;
  inline void set_hidden(bool value);

  // optional uint32 rtime32_visibility_start = 18;
  inline bool has_rtime32_visibility_start() const;
  inline void clear_rtime32_visibility_start();
  static const int kRtime32VisibilityStartFieldNumber = 18;
  inline ::google::protobuf::uint32 rtime32_visibility_start() const;
  inline void set_rtime32_visibility_start(::google::protobuf::uint32 value);

  // optional uint32 rtime32_visibility_end = 19;
  inline bool has_rtime32_visibility_end() const;
  inline void clear_rtime32_visibility_end();
  static const int kRtime32VisibilityEndFieldNumber = 19;
  inline ::google::protobuf::uint32 rtime32_visibility_end() const;
  inline void set_rtime32_visibility_end(::google::protobuf::uint32 value);

  // optional uint32 broadcaster_accountid = 20;
  inline bool has_broadcaster_accountid() const;
  inline void clear_broadcaster_accountid();
  static const int kBroadcasterAccountidFieldNumber = 20;
  inline ::google::protobuf::uint32 broadcaster_accountid() const;
  inline void set_broadcaster_accountid(::google::protobuf::uint32 value);

  // optional uint32 follower_count = 21;
  inline bool has_follower_count() const;
  inline void clear_follower_count();
  static const int kFollowerCountFieldNumber = 21;
  inline ::google::protobuf::uint32 follower_count() const;
  inline void set_follower_count(::google::protobuf::uint32 value);

  // optional uint32 ignore_count = 22;
  inline bool has_ignore_count() const;
  inline void clear_ignore_count();
  static const int kIgnoreCountFieldNumber = 22;
  inline ::google::protobuf::uint32 ignore_count() const;
  inline void set_ignore_count(::google::protobuf::uint32 value);

  // optional fixed64 forum_topic_id = 23;
  inline bool has_forum_topic_id() const;
  inline void clear_forum_topic_id();
  static const int kForumTopicIdFieldNumber = 23;
  inline ::google::protobuf::uint64 forum_topic_id() const;
  inline void set_forum_topic_id(::google::protobuf::uint64 value);

  // optional uint32 rtime32_last_modified = 24;
  inline bool has_rtime32_last_modified() const;
  inline void clear_rtime32_last_modified();
  static const int kRtime32LastModifiedFieldNumber = 24;
  inline ::google::protobuf::uint32 rtime32_last_modified() const;
  inline void set_rtime32_last_modified(::google::protobuf::uint32 value);

  // optional fixed64 news_post_gid = 25;
  inline bool has_news_post_gid() const;
  inline void clear_news_post_gid();
  static const int kNewsPostGidFieldNumber = 25;
  inline ::google::protobuf::uint64 news_post_gid() const;
  inline void set_news_post_gid(::google::protobuf::uint64 value);

  // optional uint32 rtime_mod_reviewed = 26;
  inline bool has_rtime_mod_reviewed() const;
  inline void clear_rtime_mod_reviewed();
  static const int kRtimeModReviewedFieldNumber = 26;
  inline ::google::protobuf::uint32 rtime_mod_reviewed() const;
  inline void set_rtime_mod_reviewed(::google::protobuf::uint32 value);

  // optional uint32 featured_app_tagid = 27;
  inline bool has_featured_app_tagid() const;
  inline void clear_featured_app_tagid();
  static const int kFeaturedAppTagidFieldNumber = 27;
  inline ::google::protobuf::uint32 featured_app_tagid() const;
  inline void set_featured_app_tagid(::google::protobuf::uint32 value);

  // repeated uint32 referenced_appids = 28;
  inline int referenced_appids_size() const;
  inline void clear_referenced_appids();
  static const int kReferencedAppidsFieldNumber = 28;
  inline ::google::protobuf::uint32 referenced_appids(int index) const;
  inline void set_referenced_appids(int index, ::google::protobuf::uint32 value);
  inline void add_referenced_appids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      referenced_appids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_referenced_appids();

  // optional uint32 build_id = 29;
  inline bool has_build_id() const;
  inline void clear_build_id();
  static const int kBuildIdFieldNumber = 29;
  inline ::google::protobuf::uint32 build_id() const;
  inline void set_build_id(::google::protobuf::uint32 value);

  // optional string build_branch = 30;
  inline bool has_build_branch() const;
  inline void clear_build_branch();
  static const int kBuildBranchFieldNumber = 30;
  inline const ::std::string& build_branch() const;
  inline void set_build_branch(const ::std::string& value);
  inline void set_build_branch(const char* value);
  inline void set_build_branch(const char* value, size_t size);
  inline ::std::string* mutable_build_branch();
  inline ::std::string* release_build_branch();
  inline void set_allocated_build_branch(::std::string* build_branch);

  // @@protoc_insertion_point(class_scope:CClanEventData)
 private:
  inline void set_has_gid();
  inline void clear_has_gid();
  inline void set_has_clan_steamid();
  inline void clear_has_clan_steamid();
  inline void set_has_event_name();
  inline void clear_has_event_name();
  inline void set_has_event_type();
  inline void clear_has_event_type();
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_server_address();
  inline void clear_has_server_address();
  inline void set_has_server_password();
  inline void clear_has_server_password();
  inline void set_has_rtime32_start_time();
  inline void clear_has_rtime32_start_time();
  inline void set_has_rtime32_end_time();
  inline void clear_has_rtime32_end_time();
  inline void set_has_comment_count();
  inline void clear_has_comment_count();
  inline void set_has_creator_steamid();
  inline void clear_has_creator_steamid();
  inline void set_has_last_update_steamid();
  inline void clear_has_last_update_steamid();
  inline void set_has_event_notes();
  inline void clear_has_event_notes();
  inline void set_has_jsondata();
  inline void clear_has_jsondata();
  inline void set_has_announcement_body();
  inline void clear_has_announcement_body();
  inline void set_has_published();
  inline void clear_has_published();
  inline void set_has_hidden();
  inline void clear_has_hidden();
  inline void set_has_rtime32_visibility_start();
  inline void clear_has_rtime32_visibility_start();
  inline void set_has_rtime32_visibility_end();
  inline void clear_has_rtime32_visibility_end();
  inline void set_has_broadcaster_accountid();
  inline void clear_has_broadcaster_accountid();
  inline void set_has_follower_count();
  inline void clear_has_follower_count();
  inline void set_has_ignore_count();
  inline void clear_has_ignore_count();
  inline void set_has_forum_topic_id();
  inline void clear_has_forum_topic_id();
  inline void set_has_rtime32_last_modified();
  inline void clear_has_rtime32_last_modified();
  inline void set_has_news_post_gid();
  inline void clear_has_news_post_gid();
  inline void set_has_rtime_mod_reviewed();
  inline void clear_has_rtime_mod_reviewed();
  inline void set_has_featured_app_tagid();
  inline void clear_has_featured_app_tagid();
  inline void set_has_build_id();
  inline void clear_has_build_id();
  inline void set_has_build_branch();
  inline void clear_has_build_branch();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 gid_;
  ::google::protobuf::uint64 clan_steamid_;
  ::std::string* event_name_;
  int event_type_;
  ::google::protobuf::uint32 appid_;
  ::std::string* server_address_;
  ::std::string* server_password_;
  ::google::protobuf::uint32 rtime32_start_time_;
  ::google::protobuf::uint32 rtime32_end_time_;
  ::google::protobuf::uint64 creator_steamid_;
  ::google::protobuf::uint64 last_update_steamid_;
  ::std::string* event_notes_;
  ::std::string* jsondata_;
  ::google::protobuf::int32 comment_count_;
  bool published_;
  bool hidden_;
  ::CCommunity_ClanAnnouncementInfo* announcement_body_;
  ::google::protobuf::uint32 rtime32_visibility_start_;
  ::google::protobuf::uint32 rtime32_visibility_end_;
  ::google::protobuf::uint32 broadcaster_accountid_;
  ::google::protobuf::uint32 follower_count_;
  ::google::protobuf::uint32 ignore_count_;
  ::google::protobuf::uint32 rtime32_last_modified_;
  ::google::protobuf::uint64 forum_topic_id_;
  ::google::protobuf::uint64 news_post_gid_;
  ::google::protobuf::uint32 rtime_mod_reviewed_;
  ::google::protobuf::uint32 featured_app_tagid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > referenced_appids_;
  ::std::string* build_branch_;
  ::google::protobuf::uint32 build_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(30 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fbase_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fbase_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fbase_2eproto();

  void InitAsDefaultInstance();
  static CClanEventData* default_instance_;
};
// -------------------------------------------------------------------

class CBilling_Address : public ::google::protobuf::Message {
 public:
  CBilling_Address();
  virtual ~CBilling_Address();

  CBilling_Address(const CBilling_Address& from);

  inline CBilling_Address& operator=(const CBilling_Address& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CBilling_Address& default_instance();

  void Swap(CBilling_Address* other);

  // implements Message ----------------------------------------------

  CBilling_Address* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CBilling_Address& from);
  void MergeFrom(const CBilling_Address& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string first_name = 1;
  inline bool has_first_name() const;
  inline void clear_first_name();
  static const int kFirstNameFieldNumber = 1;
  inline const ::std::string& first_name() const;
  inline void set_first_name(const ::std::string& value);
  inline void set_first_name(const char* value);
  inline void set_first_name(const char* value, size_t size);
  inline ::std::string* mutable_first_name();
  inline ::std::string* release_first_name();
  inline void set_allocated_first_name(::std::string* first_name);

  // optional string last_name = 2;
  inline bool has_last_name() const;
  inline void clear_last_name();
  static const int kLastNameFieldNumber = 2;
  inline const ::std::string& last_name() const;
  inline void set_last_name(const ::std::string& value);
  inline void set_last_name(const char* value);
  inline void set_last_name(const char* value, size_t size);
  inline ::std::string* mutable_last_name();
  inline ::std::string* release_last_name();
  inline void set_allocated_last_name(::std::string* last_name);

  // optional string address1 = 3;
  inline bool has_address1() const;
  inline void clear_address1();
  static const int kAddress1FieldNumber = 3;
  inline const ::std::string& address1() const;
  inline void set_address1(const ::std::string& value);
  inline void set_address1(const char* value);
  inline void set_address1(const char* value, size_t size);
  inline ::std::string* mutable_address1();
  inline ::std::string* release_address1();
  inline void set_allocated_address1(::std::string* address1);

  // optional string address2 = 4;
  inline bool has_address2() const;
  inline void clear_address2();
  static const int kAddress2FieldNumber = 4;
  inline const ::std::string& address2() const;
  inline void set_address2(const ::std::string& value);
  inline void set_address2(const char* value);
  inline void set_address2(const char* value, size_t size);
  inline ::std::string* mutable_address2();
  inline ::std::string* release_address2();
  inline void set_allocated_address2(::std::string* address2);

  // optional string city = 5;
  inline bool has_city() const;
  inline void clear_city();
  static const int kCityFieldNumber = 5;
  inline const ::std::string& city() const;
  inline void set_city(const ::std::string& value);
  inline void set_city(const char* value);
  inline void set_city(const char* value, size_t size);
  inline ::std::string* mutable_city();
  inline ::std::string* release_city();
  inline void set_allocated_city(::std::string* city);

  // optional string us_state = 6;
  inline bool has_us_state() const;
  inline void clear_us_state();
  static const int kUsStateFieldNumber = 6;
  inline const ::std::string& us_state() const;
  inline void set_us_state(const ::std::string& value);
  inline void set_us_state(const char* value);
  inline void set_us_state(const char* value, size_t size);
  inline ::std::string* mutable_us_state();
  inline ::std::string* release_us_state();
  inline void set_allocated_us_state(::std::string* us_state);

  // optional string country_code = 7;
  inline bool has_country_code() const;
  inline void clear_country_code();
  static const int kCountryCodeFieldNumber = 7;
  inline const ::std::string& country_code() const;
  inline void set_country_code(const ::std::string& value);
  inline void set_country_code(const char* value);
  inline void set_country_code(const char* value, size_t size);
  inline ::std::string* mutable_country_code();
  inline ::std::string* release_country_code();
  inline void set_allocated_country_code(::std::string* country_code);

  // optional string postcode = 8;
  inline bool has_postcode() const;
  inline void clear_postcode();
  static const int kPostcodeFieldNumber = 8;
  inline const ::std::string& postcode() const;
  inline void set_postcode(const ::std::string& value);
  inline void set_postcode(const char* value);
  inline void set_postcode(const char* value, size_t size);
  inline ::std::string* mutable_postcode();
  inline ::std::string* release_postcode();
  inline void set_allocated_postcode(::std::string* postcode);

  // optional int32 zip_plus4 = 9;
  inline bool has_zip_plus4() const;
  inline void clear_zip_plus4();
  static const int kZipPlus4FieldNumber = 9;
  inline ::google::protobuf::int32 zip_plus4() const;
  inline void set_zip_plus4(::google::protobuf::int32 value);

  // optional string phone = 10;
  inline bool has_phone() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 10;
  inline const ::std::string& phone() const;
  inline void set_phone(const ::std::string& value);
  inline void set_phone(const char* value);
  inline void set_phone(const char* value, size_t size);
  inline ::std::string* mutable_phone();
  inline ::std::string* release_phone();
  inline void set_allocated_phone(::std::string* phone);

  // @@protoc_insertion_point(class_scope:CBilling_Address)
 private:
  inline void set_has_first_name();
  inline void clear_has_first_name();
  inline void set_has_last_name();
  inline void clear_has_last_name();
  inline void set_has_address1();
  inline void clear_has_address1();
  inline void set_has_address2();
  inline void clear_has_address2();
  inline void set_has_city();
  inline void clear_has_city();
  inline void set_has_us_state();
  inline void clear_has_us_state();
  inline void set_has_country_code();
  inline void clear_has_country_code();
  inline void set_has_postcode();
  inline void clear_has_postcode();
  inline void set_has_zip_plus4();
  inline void clear_has_zip_plus4();
  inline void set_has_phone();
  inline void clear_has_phone();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* first_name_;
  ::std::string* last_name_;
  ::std::string* address1_;
  ::std::string* address2_;
  ::std::string* city_;
  ::std::string* us_state_;
  ::std::string* country_code_;
  ::std::string* postcode_;
  ::std::string* phone_;
  ::google::protobuf::int32 zip_plus4_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fbase_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fbase_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fbase_2eproto();

  void InitAsDefaultInstance();
  static CBilling_Address* default_instance_;
};
// -------------------------------------------------------------------

class CPackageReservationStatus : public ::google::protobuf::Message {
 public:
  CPackageReservationStatus();
  virtual ~CPackageReservationStatus();

  CPackageReservationStatus(const CPackageReservationStatus& from);

  inline CPackageReservationStatus& operator=(const CPackageReservationStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPackageReservationStatus& default_instance();

  void Swap(CPackageReservationStatus* other);

  // implements Message ----------------------------------------------

  CPackageReservationStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CPackageReservationStatus& from);
  void MergeFrom(const CPackageReservationStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 packageid = 1;
  inline bool has_packageid() const;
  inline void clear_packageid();
  static const int kPackageidFieldNumber = 1;
  inline ::google::protobuf::uint32 packageid() const;
  inline void set_packageid(::google::protobuf::uint32 value);

  // optional int32 reservation_state = 2;
  inline bool has_reservation_state() const;
  inline void clear_reservation_state();
  static const int kReservationStateFieldNumber = 2;
  inline ::google::protobuf::int32 reservation_state() const;
  inline void set_reservation_state(::google::protobuf::int32 value);

  // optional int32 queue_position = 3;
  inline bool has_queue_position() const;
  inline void clear_queue_position();
  static const int kQueuePositionFieldNumber = 3;
  inline ::google::protobuf::int32 queue_position() const;
  inline void set_queue_position(::google::protobuf::int32 value);

  // optional int32 total_queue_size = 4;
  inline bool has_total_queue_size() const;
  inline void clear_total_queue_size();
  static const int kTotalQueueSizeFieldNumber = 4;
  inline ::google::protobuf::int32 total_queue_size() const;
  inline void set_total_queue_size(::google::protobuf::int32 value);

  // optional string reservation_country_code = 5;
  inline bool has_reservation_country_code() const;
  inline void clear_reservation_country_code();
  static const int kReservationCountryCodeFieldNumber = 5;
  inline const ::std::string& reservation_country_code() const;
  inline void set_reservation_country_code(const ::std::string& value);
  inline void set_reservation_country_code(const char* value);
  inline void set_reservation_country_code(const char* value, size_t size);
  inline ::std::string* mutable_reservation_country_code();
  inline ::std::string* release_reservation_country_code();
  inline void set_allocated_reservation_country_code(::std::string* reservation_country_code);

  // optional bool expired = 6;
  inline bool has_expired() const;
  inline void clear_expired();
  static const int kExpiredFieldNumber = 6;
  inline bool expired() const;
  inline void set_expired(bool value);

  // optional uint32 time_expires = 7;
  inline bool has_time_expires() const;
  inline void clear_time_expires();
  static const int kTimeExpiresFieldNumber = 7;
  inline ::google::protobuf::uint32 time_expires() const;
  inline void set_time_expires(::google::protobuf::uint32 value);

  // optional uint32 time_reserved = 8;
  inline bool has_time_reserved() const;
  inline void clear_time_reserved();
  static const int kTimeReservedFieldNumber = 8;
  inline ::google::protobuf::uint32 time_reserved() const;
  inline void set_time_reserved(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CPackageReservationStatus)
 private:
  inline void set_has_packageid();
  inline void clear_has_packageid();
  inline void set_has_reservation_state();
  inline void clear_has_reservation_state();
  inline void set_has_queue_position();
  inline void clear_has_queue_position();
  inline void set_has_total_queue_size();
  inline void clear_has_total_queue_size();
  inline void set_has_reservation_country_code();
  inline void clear_has_reservation_country_code();
  inline void set_has_expired();
  inline void clear_has_expired();
  inline void set_has_time_expires();
  inline void clear_has_time_expires();
  inline void set_has_time_reserved();
  inline void clear_has_time_reserved();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 packageid_;
  ::google::protobuf::int32 reservation_state_;
  ::google::protobuf::int32 queue_position_;
  ::google::protobuf::int32 total_queue_size_;
  ::std::string* reservation_country_code_;
  bool expired_;
  ::google::protobuf::uint32 time_expires_;
  ::google::protobuf::uint32 time_reserved_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fbase_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fbase_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fbase_2eproto();

  void InitAsDefaultInstance();
  static CPackageReservationStatus* default_instance_;
};
// -------------------------------------------------------------------

class CMsgKeyValuePair : public ::google::protobuf::Message {
 public:
  CMsgKeyValuePair();
  virtual ~CMsgKeyValuePair();

  CMsgKeyValuePair(const CMsgKeyValuePair& from);

  inline CMsgKeyValuePair& operator=(const CMsgKeyValuePair& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgKeyValuePair& default_instance();

  void Swap(CMsgKeyValuePair* other);

  // implements Message ----------------------------------------------

  CMsgKeyValuePair* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgKeyValuePair& from);
  void MergeFrom(const CMsgKeyValuePair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:CMsgKeyValuePair)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fbase_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fbase_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fbase_2eproto();

  void InitAsDefaultInstance();
  static CMsgKeyValuePair* default_instance_;
};
// -------------------------------------------------------------------

class CMsgKeyValueSet : public ::google::protobuf::Message {
 public:
  CMsgKeyValueSet();
  virtual ~CMsgKeyValueSet();

  CMsgKeyValueSet(const CMsgKeyValueSet& from);

  inline CMsgKeyValueSet& operator=(const CMsgKeyValueSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgKeyValueSet& default_instance();

  void Swap(CMsgKeyValueSet* other);

  // implements Message ----------------------------------------------

  CMsgKeyValueSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgKeyValueSet& from);
  void MergeFrom(const CMsgKeyValueSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CMsgKeyValuePair pairs = 1;
  inline int pairs_size() const;
  inline void clear_pairs();
  static const int kPairsFieldNumber = 1;
  inline const ::CMsgKeyValuePair& pairs(int index) const;
  inline ::CMsgKeyValuePair* mutable_pairs(int index);
  inline ::CMsgKeyValuePair* add_pairs();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgKeyValuePair >&
      pairs() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgKeyValuePair >*
      mutable_pairs();

  // @@protoc_insertion_point(class_scope:CMsgKeyValueSet)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CMsgKeyValuePair > pairs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fbase_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fbase_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fbase_2eproto();

  void InitAsDefaultInstance();
  static CMsgKeyValueSet* default_instance_;
};
// ===================================================================

static const int kMsgpoolSoftLimitFieldNumber = 50000;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int32 >, 5, false >
  msgpool_soft_limit;
static const int kMsgpoolHardLimitFieldNumber = 50001;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int32 >, 5, false >
  msgpool_hard_limit;
static const int kForcePhpGenerationFieldNumber = 50000;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FileOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  force_php_generation;
static const int kPhpOutputAlwaysNumberFieldNumber = 50020;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  php_output_always_number;
static const int kAllowFieldNamedSteamIdFieldNumber = 50024;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  allow_field_named_steam_id;

// ===================================================================

// CMsgIPAddress

// optional fixed32 v4 = 1;
inline bool CMsgIPAddress::has_v4() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgIPAddress::set_has_v4() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgIPAddress::clear_has_v4() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgIPAddress::clear_v4() {
  v4_ = 0u;
  clear_has_v4();
}
inline ::google::protobuf::uint32 CMsgIPAddress::v4() const {
  return v4_;
}
inline void CMsgIPAddress::set_v4(::google::protobuf::uint32 value) {
  set_has_v4();
  v4_ = value;
}

// optional bytes v6 = 2;
inline bool CMsgIPAddress::has_v6() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgIPAddress::set_has_v6() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgIPAddress::clear_has_v6() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgIPAddress::clear_v6() {
  if (v6_ != &::google::protobuf::internal::kEmptyString) {
    v6_->clear();
  }
  clear_has_v6();
}
inline const ::std::string& CMsgIPAddress::v6() const {
  return *v6_;
}
inline void CMsgIPAddress::set_v6(const ::std::string& value) {
  set_has_v6();
  if (v6_ == &::google::protobuf::internal::kEmptyString) {
    v6_ = new ::std::string;
  }
  v6_->assign(value);
}
inline void CMsgIPAddress::set_v6(const char* value) {
  set_has_v6();
  if (v6_ == &::google::protobuf::internal::kEmptyString) {
    v6_ = new ::std::string;
  }
  v6_->assign(value);
}
inline void CMsgIPAddress::set_v6(const void* value, size_t size) {
  set_has_v6();
  if (v6_ == &::google::protobuf::internal::kEmptyString) {
    v6_ = new ::std::string;
  }
  v6_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgIPAddress::mutable_v6() {
  set_has_v6();
  if (v6_ == &::google::protobuf::internal::kEmptyString) {
    v6_ = new ::std::string;
  }
  return v6_;
}
inline ::std::string* CMsgIPAddress::release_v6() {
  clear_has_v6();
  if (v6_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = v6_;
    v6_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgIPAddress::set_allocated_v6(::std::string* v6) {
  if (v6_ != &::google::protobuf::internal::kEmptyString) {
    delete v6_;
  }
  if (v6) {
    set_has_v6();
    v6_ = v6;
  } else {
    clear_has_v6();
    v6_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgIPAddressBucket

// optional .CMsgIPAddress original_ip_address = 1;
inline bool CMsgIPAddressBucket::has_original_ip_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgIPAddressBucket::set_has_original_ip_address() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgIPAddressBucket::clear_has_original_ip_address() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgIPAddressBucket::clear_original_ip_address() {
  if (original_ip_address_ != NULL) original_ip_address_->::CMsgIPAddress::Clear();
  clear_has_original_ip_address();
}
inline const ::CMsgIPAddress& CMsgIPAddressBucket::original_ip_address() const {
  return original_ip_address_ != NULL ? *original_ip_address_ : *default_instance_->original_ip_address_;
}
inline ::CMsgIPAddress* CMsgIPAddressBucket::mutable_original_ip_address() {
  set_has_original_ip_address();
  if (original_ip_address_ == NULL) original_ip_address_ = new ::CMsgIPAddress;
  return original_ip_address_;
}
inline ::CMsgIPAddress* CMsgIPAddressBucket::release_original_ip_address() {
  clear_has_original_ip_address();
  ::CMsgIPAddress* temp = original_ip_address_;
  original_ip_address_ = NULL;
  return temp;
}
inline void CMsgIPAddressBucket::set_allocated_original_ip_address(::CMsgIPAddress* original_ip_address) {
  delete original_ip_address_;
  original_ip_address_ = original_ip_address;
  if (original_ip_address) {
    set_has_original_ip_address();
  } else {
    clear_has_original_ip_address();
  }
}

// optional fixed64 bucket = 2;
inline bool CMsgIPAddressBucket::has_bucket() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgIPAddressBucket::set_has_bucket() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgIPAddressBucket::clear_has_bucket() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgIPAddressBucket::clear_bucket() {
  bucket_ = GOOGLE_ULONGLONG(0);
  clear_has_bucket();
}
inline ::google::protobuf::uint64 CMsgIPAddressBucket::bucket() const {
  return bucket_;
}
inline void CMsgIPAddressBucket::set_bucket(::google::protobuf::uint64 value) {
  set_has_bucket();
  bucket_ = value;
}

// -------------------------------------------------------------------

// CMsgProtoBufHeader

// optional fixed64 steamid = 1;
inline bool CMsgProtoBufHeader::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgProtoBufHeader::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgProtoBufHeader::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgProtoBufHeader::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
inline ::google::protobuf::uint64 CMsgProtoBufHeader::steamid() const {
  return steamid_;
}
inline void CMsgProtoBufHeader::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
}

// optional int32 client_sessionid = 2;
inline bool CMsgProtoBufHeader::has_client_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgProtoBufHeader::set_has_client_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgProtoBufHeader::clear_has_client_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgProtoBufHeader::clear_client_sessionid() {
  client_sessionid_ = 0;
  clear_has_client_sessionid();
}
inline ::google::protobuf::int32 CMsgProtoBufHeader::client_sessionid() const {
  return client_sessionid_;
}
inline void CMsgProtoBufHeader::set_client_sessionid(::google::protobuf::int32 value) {
  set_has_client_sessionid();
  client_sessionid_ = value;
}

// optional uint32 routing_appid = 3;
inline bool CMsgProtoBufHeader::has_routing_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgProtoBufHeader::set_has_routing_appid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgProtoBufHeader::clear_has_routing_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgProtoBufHeader::clear_routing_appid() {
  routing_appid_ = 0u;
  clear_has_routing_appid();
}
inline ::google::protobuf::uint32 CMsgProtoBufHeader::routing_appid() const {
  return routing_appid_;
}
inline void CMsgProtoBufHeader::set_routing_appid(::google::protobuf::uint32 value) {
  set_has_routing_appid();
  routing_appid_ = value;
}

// optional fixed64 jobid_source = 10 [default = 18446744073709551615];
inline bool CMsgProtoBufHeader::has_jobid_source() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgProtoBufHeader::set_has_jobid_source() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgProtoBufHeader::clear_has_jobid_source() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgProtoBufHeader::clear_jobid_source() {
  jobid_source_ = GOOGLE_ULONGLONG(18446744073709551615);
  clear_has_jobid_source();
}
inline ::google::protobuf::uint64 CMsgProtoBufHeader::jobid_source() const {
  return jobid_source_;
}
inline void CMsgProtoBufHeader::set_jobid_source(::google::protobuf::uint64 value) {
  set_has_jobid_source();
  jobid_source_ = value;
}

// optional fixed64 jobid_target = 11 [default = 18446744073709551615];
inline bool CMsgProtoBufHeader::has_jobid_target() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgProtoBufHeader::set_has_jobid_target() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgProtoBufHeader::clear_has_jobid_target() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgProtoBufHeader::clear_jobid_target() {
  jobid_target_ = GOOGLE_ULONGLONG(18446744073709551615);
  clear_has_jobid_target();
}
inline ::google::protobuf::uint64 CMsgProtoBufHeader::jobid_target() const {
  return jobid_target_;
}
inline void CMsgProtoBufHeader::set_jobid_target(::google::protobuf::uint64 value) {
  set_has_jobid_target();
  jobid_target_ = value;
}

// optional string target_job_name = 12;
inline bool CMsgProtoBufHeader::has_target_job_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgProtoBufHeader::set_has_target_job_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgProtoBufHeader::clear_has_target_job_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgProtoBufHeader::clear_target_job_name() {
  if (target_job_name_ != &::google::protobuf::internal::kEmptyString) {
    target_job_name_->clear();
  }
  clear_has_target_job_name();
}
inline const ::std::string& CMsgProtoBufHeader::target_job_name() const {
  return *target_job_name_;
}
inline void CMsgProtoBufHeader::set_target_job_name(const ::std::string& value) {
  set_has_target_job_name();
  if (target_job_name_ == &::google::protobuf::internal::kEmptyString) {
    target_job_name_ = new ::std::string;
  }
  target_job_name_->assign(value);
}
inline void CMsgProtoBufHeader::set_target_job_name(const char* value) {
  set_has_target_job_name();
  if (target_job_name_ == &::google::protobuf::internal::kEmptyString) {
    target_job_name_ = new ::std::string;
  }
  target_job_name_->assign(value);
}
inline void CMsgProtoBufHeader::set_target_job_name(const char* value, size_t size) {
  set_has_target_job_name();
  if (target_job_name_ == &::google::protobuf::internal::kEmptyString) {
    target_job_name_ = new ::std::string;
  }
  target_job_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgProtoBufHeader::mutable_target_job_name() {
  set_has_target_job_name();
  if (target_job_name_ == &::google::protobuf::internal::kEmptyString) {
    target_job_name_ = new ::std::string;
  }
  return target_job_name_;
}
inline ::std::string* CMsgProtoBufHeader::release_target_job_name() {
  clear_has_target_job_name();
  if (target_job_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = target_job_name_;
    target_job_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgProtoBufHeader::set_allocated_target_job_name(::std::string* target_job_name) {
  if (target_job_name_ != &::google::protobuf::internal::kEmptyString) {
    delete target_job_name_;
  }
  if (target_job_name) {
    set_has_target_job_name();
    target_job_name_ = target_job_name;
  } else {
    clear_has_target_job_name();
    target_job_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 seq_num = 24;
inline bool CMsgProtoBufHeader::has_seq_num() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgProtoBufHeader::set_has_seq_num() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgProtoBufHeader::clear_has_seq_num() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgProtoBufHeader::clear_seq_num() {
  seq_num_ = 0;
  clear_has_seq_num();
}
inline ::google::protobuf::int32 CMsgProtoBufHeader::seq_num() const {
  return seq_num_;
}
inline void CMsgProtoBufHeader::set_seq_num(::google::protobuf::int32 value) {
  set_has_seq_num();
  seq_num_ = value;
}

// optional int32 eresult = 13 [default = 2];
inline bool CMsgProtoBufHeader::has_eresult() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgProtoBufHeader::set_has_eresult() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgProtoBufHeader::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgProtoBufHeader::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
inline ::google::protobuf::int32 CMsgProtoBufHeader::eresult() const {
  return eresult_;
}
inline void CMsgProtoBufHeader::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
}

// optional string error_message = 14;
inline bool CMsgProtoBufHeader::has_error_message() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgProtoBufHeader::set_has_error_message() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgProtoBufHeader::clear_has_error_message() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgProtoBufHeader::clear_error_message() {
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    error_message_->clear();
  }
  clear_has_error_message();
}
inline const ::std::string& CMsgProtoBufHeader::error_message() const {
  return *error_message_;
}
inline void CMsgProtoBufHeader::set_error_message(const ::std::string& value) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(value);
}
inline void CMsgProtoBufHeader::set_error_message(const char* value) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(value);
}
inline void CMsgProtoBufHeader::set_error_message(const char* value, size_t size) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgProtoBufHeader::mutable_error_message() {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  return error_message_;
}
inline ::std::string* CMsgProtoBufHeader::release_error_message() {
  clear_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_message_;
    error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgProtoBufHeader::set_allocated_error_message(::std::string* error_message) {
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    delete error_message_;
  }
  if (error_message) {
    set_has_error_message();
    error_message_ = error_message;
  } else {
    clear_has_error_message();
    error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 auth_account_flags = 16;
inline bool CMsgProtoBufHeader::has_auth_account_flags() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgProtoBufHeader::set_has_auth_account_flags() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgProtoBufHeader::clear_has_auth_account_flags() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgProtoBufHeader::clear_auth_account_flags() {
  auth_account_flags_ = 0u;
  clear_has_auth_account_flags();
}
inline ::google::protobuf::uint32 CMsgProtoBufHeader::auth_account_flags() const {
  return auth_account_flags_;
}
inline void CMsgProtoBufHeader::set_auth_account_flags(::google::protobuf::uint32 value) {
  set_has_auth_account_flags();
  auth_account_flags_ = value;
}

// optional uint32 token_source = 22;
inline bool CMsgProtoBufHeader::has_token_source() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgProtoBufHeader::set_has_token_source() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgProtoBufHeader::clear_has_token_source() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgProtoBufHeader::clear_token_source() {
  token_source_ = 0u;
  clear_has_token_source();
}
inline ::google::protobuf::uint32 CMsgProtoBufHeader::token_source() const {
  return token_source_;
}
inline void CMsgProtoBufHeader::set_token_source(::google::protobuf::uint32 value) {
  set_has_token_source();
  token_source_ = value;
}

// optional bool admin_spoofing_user = 23;
inline bool CMsgProtoBufHeader::has_admin_spoofing_user() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgProtoBufHeader::set_has_admin_spoofing_user() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgProtoBufHeader::clear_has_admin_spoofing_user() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgProtoBufHeader::clear_admin_spoofing_user() {
  admin_spoofing_user_ = false;
  clear_has_admin_spoofing_user();
}
inline bool CMsgProtoBufHeader::admin_spoofing_user() const {
  return admin_spoofing_user_;
}
inline void CMsgProtoBufHeader::set_admin_spoofing_user(bool value) {
  set_has_admin_spoofing_user();
  admin_spoofing_user_ = value;
}

// optional int32 transport_error = 17 [default = 1];
inline bool CMsgProtoBufHeader::has_transport_error() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgProtoBufHeader::set_has_transport_error() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgProtoBufHeader::clear_has_transport_error() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgProtoBufHeader::clear_transport_error() {
  transport_error_ = 1;
  clear_has_transport_error();
}
inline ::google::protobuf::int32 CMsgProtoBufHeader::transport_error() const {
  return transport_error_;
}
inline void CMsgProtoBufHeader::set_transport_error(::google::protobuf::int32 value) {
  set_has_transport_error();
  transport_error_ = value;
}

// optional uint64 messageid = 18 [default = 18446744073709551615];
inline bool CMsgProtoBufHeader::has_messageid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgProtoBufHeader::set_has_messageid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgProtoBufHeader::clear_has_messageid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgProtoBufHeader::clear_messageid() {
  messageid_ = GOOGLE_ULONGLONG(18446744073709551615);
  clear_has_messageid();
}
inline ::google::protobuf::uint64 CMsgProtoBufHeader::messageid() const {
  return messageid_;
}
inline void CMsgProtoBufHeader::set_messageid(::google::protobuf::uint64 value) {
  set_has_messageid();
  messageid_ = value;
}

// optional uint32 publisher_group_id = 19;
inline bool CMsgProtoBufHeader::has_publisher_group_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgProtoBufHeader::set_has_publisher_group_id() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgProtoBufHeader::clear_has_publisher_group_id() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgProtoBufHeader::clear_publisher_group_id() {
  publisher_group_id_ = 0u;
  clear_has_publisher_group_id();
}
inline ::google::protobuf::uint32 CMsgProtoBufHeader::publisher_group_id() const {
  return publisher_group_id_;
}
inline void CMsgProtoBufHeader::set_publisher_group_id(::google::protobuf::uint32 value) {
  set_has_publisher_group_id();
  publisher_group_id_ = value;
}

// optional uint32 sysid = 20;
inline bool CMsgProtoBufHeader::has_sysid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgProtoBufHeader::set_has_sysid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgProtoBufHeader::clear_has_sysid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgProtoBufHeader::clear_sysid() {
  sysid_ = 0u;
  clear_has_sysid();
}
inline ::google::protobuf::uint32 CMsgProtoBufHeader::sysid() const {
  return sysid_;
}
inline void CMsgProtoBufHeader::set_sysid(::google::protobuf::uint32 value) {
  set_has_sysid();
  sysid_ = value;
}

// optional uint64 trace_tag = 21;
inline bool CMsgProtoBufHeader::has_trace_tag() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgProtoBufHeader::set_has_trace_tag() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMsgProtoBufHeader::clear_has_trace_tag() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMsgProtoBufHeader::clear_trace_tag() {
  trace_tag_ = GOOGLE_ULONGLONG(0);
  clear_has_trace_tag();
}
inline ::google::protobuf::uint64 CMsgProtoBufHeader::trace_tag() const {
  return trace_tag_;
}
inline void CMsgProtoBufHeader::set_trace_tag(::google::protobuf::uint64 value) {
  set_has_trace_tag();
  trace_tag_ = value;
}

// optional uint32 webapi_key_id = 25;
inline bool CMsgProtoBufHeader::has_webapi_key_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgProtoBufHeader::set_has_webapi_key_id() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMsgProtoBufHeader::clear_has_webapi_key_id() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMsgProtoBufHeader::clear_webapi_key_id() {
  webapi_key_id_ = 0u;
  clear_has_webapi_key_id();
}
inline ::google::protobuf::uint32 CMsgProtoBufHeader::webapi_key_id() const {
  return webapi_key_id_;
}
inline void CMsgProtoBufHeader::set_webapi_key_id(::google::protobuf::uint32 value) {
  set_has_webapi_key_id();
  webapi_key_id_ = value;
}

// optional bool is_from_external_source = 26;
inline bool CMsgProtoBufHeader::has_is_from_external_source() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMsgProtoBufHeader::set_has_is_from_external_source() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CMsgProtoBufHeader::clear_has_is_from_external_source() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CMsgProtoBufHeader::clear_is_from_external_source() {
  is_from_external_source_ = false;
  clear_has_is_from_external_source();
}
inline bool CMsgProtoBufHeader::is_from_external_source() const {
  return is_from_external_source_;
}
inline void CMsgProtoBufHeader::set_is_from_external_source(bool value) {
  set_has_is_from_external_source();
  is_from_external_source_ = value;
}

// repeated uint32 forward_to_sysid = 27;
inline int CMsgProtoBufHeader::forward_to_sysid_size() const {
  return forward_to_sysid_.size();
}
inline void CMsgProtoBufHeader::clear_forward_to_sysid() {
  forward_to_sysid_.Clear();
}
inline ::google::protobuf::uint32 CMsgProtoBufHeader::forward_to_sysid(int index) const {
  return forward_to_sysid_.Get(index);
}
inline void CMsgProtoBufHeader::set_forward_to_sysid(int index, ::google::protobuf::uint32 value) {
  forward_to_sysid_.Set(index, value);
}
inline void CMsgProtoBufHeader::add_forward_to_sysid(::google::protobuf::uint32 value) {
  forward_to_sysid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgProtoBufHeader::forward_to_sysid() const {
  return forward_to_sysid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgProtoBufHeader::mutable_forward_to_sysid() {
  return &forward_to_sysid_;
}

// optional uint32 cm_sysid = 28;
inline bool CMsgProtoBufHeader::has_cm_sysid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CMsgProtoBufHeader::set_has_cm_sysid() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CMsgProtoBufHeader::clear_has_cm_sysid() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CMsgProtoBufHeader::clear_cm_sysid() {
  cm_sysid_ = 0u;
  clear_has_cm_sysid();
}
inline ::google::protobuf::uint32 CMsgProtoBufHeader::cm_sysid() const {
  return cm_sysid_;
}
inline void CMsgProtoBufHeader::set_cm_sysid(::google::protobuf::uint32 value) {
  set_has_cm_sysid();
  cm_sysid_ = value;
}

// optional uint32 launcher_type = 31 [default = 0];
inline bool CMsgProtoBufHeader::has_launcher_type() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CMsgProtoBufHeader::set_has_launcher_type() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CMsgProtoBufHeader::clear_has_launcher_type() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CMsgProtoBufHeader::clear_launcher_type() {
  launcher_type_ = 0u;
  clear_has_launcher_type();
}
inline ::google::protobuf::uint32 CMsgProtoBufHeader::launcher_type() const {
  return launcher_type_;
}
inline void CMsgProtoBufHeader::set_launcher_type(::google::protobuf::uint32 value) {
  set_has_launcher_type();
  launcher_type_ = value;
}

// optional uint32 realm = 32 [default = 0];
inline bool CMsgProtoBufHeader::has_realm() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CMsgProtoBufHeader::set_has_realm() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CMsgProtoBufHeader::clear_has_realm() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CMsgProtoBufHeader::clear_realm() {
  realm_ = 0u;
  clear_has_realm();
}
inline ::google::protobuf::uint32 CMsgProtoBufHeader::realm() const {
  return realm_;
}
inline void CMsgProtoBufHeader::set_realm(::google::protobuf::uint32 value) {
  set_has_realm();
  realm_ = value;
}

// optional int32 timeout_ms = 33 [default = -1];
inline bool CMsgProtoBufHeader::has_timeout_ms() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CMsgProtoBufHeader::set_has_timeout_ms() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CMsgProtoBufHeader::clear_has_timeout_ms() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CMsgProtoBufHeader::clear_timeout_ms() {
  timeout_ms_ = -1;
  clear_has_timeout_ms();
}
inline ::google::protobuf::int32 CMsgProtoBufHeader::timeout_ms() const {
  return timeout_ms_;
}
inline void CMsgProtoBufHeader::set_timeout_ms(::google::protobuf::int32 value) {
  set_has_timeout_ms();
  timeout_ms_ = value;
}

// optional string debug_source = 34;
inline bool CMsgProtoBufHeader::has_debug_source() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CMsgProtoBufHeader::set_has_debug_source() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CMsgProtoBufHeader::clear_has_debug_source() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CMsgProtoBufHeader::clear_debug_source() {
  if (debug_source_ != &::google::protobuf::internal::kEmptyString) {
    debug_source_->clear();
  }
  clear_has_debug_source();
}
inline const ::std::string& CMsgProtoBufHeader::debug_source() const {
  return *debug_source_;
}
inline void CMsgProtoBufHeader::set_debug_source(const ::std::string& value) {
  set_has_debug_source();
  if (debug_source_ == &::google::protobuf::internal::kEmptyString) {
    debug_source_ = new ::std::string;
  }
  debug_source_->assign(value);
}
inline void CMsgProtoBufHeader::set_debug_source(const char* value) {
  set_has_debug_source();
  if (debug_source_ == &::google::protobuf::internal::kEmptyString) {
    debug_source_ = new ::std::string;
  }
  debug_source_->assign(value);
}
inline void CMsgProtoBufHeader::set_debug_source(const char* value, size_t size) {
  set_has_debug_source();
  if (debug_source_ == &::google::protobuf::internal::kEmptyString) {
    debug_source_ = new ::std::string;
  }
  debug_source_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgProtoBufHeader::mutable_debug_source() {
  set_has_debug_source();
  if (debug_source_ == &::google::protobuf::internal::kEmptyString) {
    debug_source_ = new ::std::string;
  }
  return debug_source_;
}
inline ::std::string* CMsgProtoBufHeader::release_debug_source() {
  clear_has_debug_source();
  if (debug_source_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = debug_source_;
    debug_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgProtoBufHeader::set_allocated_debug_source(::std::string* debug_source) {
  if (debug_source_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_source_;
  }
  if (debug_source) {
    set_has_debug_source();
    debug_source_ = debug_source;
  } else {
    clear_has_debug_source();
    debug_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 debug_source_string_index = 35;
inline bool CMsgProtoBufHeader::has_debug_source_string_index() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CMsgProtoBufHeader::set_has_debug_source_string_index() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CMsgProtoBufHeader::clear_has_debug_source_string_index() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CMsgProtoBufHeader::clear_debug_source_string_index() {
  debug_source_string_index_ = 0u;
  clear_has_debug_source_string_index();
}
inline ::google::protobuf::uint32 CMsgProtoBufHeader::debug_source_string_index() const {
  return debug_source_string_index_;
}
inline void CMsgProtoBufHeader::set_debug_source_string_index(::google::protobuf::uint32 value) {
  set_has_debug_source_string_index();
  debug_source_string_index_ = value;
}

// optional uint64 token_id = 36;
inline bool CMsgProtoBufHeader::has_token_id() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CMsgProtoBufHeader::set_has_token_id() {
  _has_bits_[0] |= 0x04000000u;
}
inline void CMsgProtoBufHeader::clear_has_token_id() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void CMsgProtoBufHeader::clear_token_id() {
  token_id_ = GOOGLE_ULONGLONG(0);
  clear_has_token_id();
}
inline ::google::protobuf::uint64 CMsgProtoBufHeader::token_id() const {
  return token_id_;
}
inline void CMsgProtoBufHeader::set_token_id(::google::protobuf::uint64 value) {
  set_has_token_id();
  token_id_ = value;
}

// optional uint32 ip = 15;
inline bool CMsgProtoBufHeader::has_ip() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CMsgProtoBufHeader::set_has_ip() {
  _has_bits_[0] |= 0x08000000u;
}
inline void CMsgProtoBufHeader::clear_has_ip() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void CMsgProtoBufHeader::clear_ip() {
  ip_ = 0u;
  clear_has_ip();
}
inline ::google::protobuf::uint32 CMsgProtoBufHeader::ip() const {
  return ip_;
}
inline void CMsgProtoBufHeader::set_ip(::google::protobuf::uint32 value) {
  set_has_ip();
  ip_ = value;
}

// optional bytes ip_v6 = 29;
inline bool CMsgProtoBufHeader::has_ip_v6() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CMsgProtoBufHeader::set_has_ip_v6() {
  _has_bits_[0] |= 0x10000000u;
}
inline void CMsgProtoBufHeader::clear_has_ip_v6() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void CMsgProtoBufHeader::clear_ip_v6() {
  if (ip_v6_ != &::google::protobuf::internal::kEmptyString) {
    ip_v6_->clear();
  }
  clear_has_ip_v6();
}
inline const ::std::string& CMsgProtoBufHeader::ip_v6() const {
  return *ip_v6_;
}
inline void CMsgProtoBufHeader::set_ip_v6(const ::std::string& value) {
  set_has_ip_v6();
  if (ip_v6_ == &::google::protobuf::internal::kEmptyString) {
    ip_v6_ = new ::std::string;
  }
  ip_v6_->assign(value);
}
inline void CMsgProtoBufHeader::set_ip_v6(const char* value) {
  set_has_ip_v6();
  if (ip_v6_ == &::google::protobuf::internal::kEmptyString) {
    ip_v6_ = new ::std::string;
  }
  ip_v6_->assign(value);
}
inline void CMsgProtoBufHeader::set_ip_v6(const void* value, size_t size) {
  set_has_ip_v6();
  if (ip_v6_ == &::google::protobuf::internal::kEmptyString) {
    ip_v6_ = new ::std::string;
  }
  ip_v6_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgProtoBufHeader::mutable_ip_v6() {
  set_has_ip_v6();
  if (ip_v6_ == &::google::protobuf::internal::kEmptyString) {
    ip_v6_ = new ::std::string;
  }
  return ip_v6_;
}
inline ::std::string* CMsgProtoBufHeader::release_ip_v6() {
  clear_has_ip_v6();
  if (ip_v6_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_v6_;
    ip_v6_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgProtoBufHeader::set_allocated_ip_v6(::std::string* ip_v6) {
  if (ip_v6_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_v6_;
  }
  if (ip_v6) {
    set_has_ip_v6();
    ip_v6_ = ip_v6;
  } else {
    clear_has_ip_v6();
    ip_v6_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgMulti

// optional uint32 size_unzipped = 1;
inline bool CMsgMulti::has_size_unzipped() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgMulti::set_has_size_unzipped() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgMulti::clear_has_size_unzipped() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgMulti::clear_size_unzipped() {
  size_unzipped_ = 0u;
  clear_has_size_unzipped();
}
inline ::google::protobuf::uint32 CMsgMulti::size_unzipped() const {
  return size_unzipped_;
}
inline void CMsgMulti::set_size_unzipped(::google::protobuf::uint32 value) {
  set_has_size_unzipped();
  size_unzipped_ = value;
}

// optional bytes message_body = 2;
inline bool CMsgMulti::has_message_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgMulti::set_has_message_body() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgMulti::clear_has_message_body() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgMulti::clear_message_body() {
  if (message_body_ != &::google::protobuf::internal::kEmptyString) {
    message_body_->clear();
  }
  clear_has_message_body();
}
inline const ::std::string& CMsgMulti::message_body() const {
  return *message_body_;
}
inline void CMsgMulti::set_message_body(const ::std::string& value) {
  set_has_message_body();
  if (message_body_ == &::google::protobuf::internal::kEmptyString) {
    message_body_ = new ::std::string;
  }
  message_body_->assign(value);
}
inline void CMsgMulti::set_message_body(const char* value) {
  set_has_message_body();
  if (message_body_ == &::google::protobuf::internal::kEmptyString) {
    message_body_ = new ::std::string;
  }
  message_body_->assign(value);
}
inline void CMsgMulti::set_message_body(const void* value, size_t size) {
  set_has_message_body();
  if (message_body_ == &::google::protobuf::internal::kEmptyString) {
    message_body_ = new ::std::string;
  }
  message_body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgMulti::mutable_message_body() {
  set_has_message_body();
  if (message_body_ == &::google::protobuf::internal::kEmptyString) {
    message_body_ = new ::std::string;
  }
  return message_body_;
}
inline ::std::string* CMsgMulti::release_message_body() {
  clear_has_message_body();
  if (message_body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_body_;
    message_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgMulti::set_allocated_message_body(::std::string* message_body) {
  if (message_body_ != &::google::protobuf::internal::kEmptyString) {
    delete message_body_;
  }
  if (message_body) {
    set_has_message_body();
    message_body_ = message_body;
  } else {
    clear_has_message_body();
    message_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgProtobufWrapped

// optional bytes message_body = 1;
inline bool CMsgProtobufWrapped::has_message_body() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgProtobufWrapped::set_has_message_body() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgProtobufWrapped::clear_has_message_body() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgProtobufWrapped::clear_message_body() {
  if (message_body_ != &::google::protobuf::internal::kEmptyString) {
    message_body_->clear();
  }
  clear_has_message_body();
}
inline const ::std::string& CMsgProtobufWrapped::message_body() const {
  return *message_body_;
}
inline void CMsgProtobufWrapped::set_message_body(const ::std::string& value) {
  set_has_message_body();
  if (message_body_ == &::google::protobuf::internal::kEmptyString) {
    message_body_ = new ::std::string;
  }
  message_body_->assign(value);
}
inline void CMsgProtobufWrapped::set_message_body(const char* value) {
  set_has_message_body();
  if (message_body_ == &::google::protobuf::internal::kEmptyString) {
    message_body_ = new ::std::string;
  }
  message_body_->assign(value);
}
inline void CMsgProtobufWrapped::set_message_body(const void* value, size_t size) {
  set_has_message_body();
  if (message_body_ == &::google::protobuf::internal::kEmptyString) {
    message_body_ = new ::std::string;
  }
  message_body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgProtobufWrapped::mutable_message_body() {
  set_has_message_body();
  if (message_body_ == &::google::protobuf::internal::kEmptyString) {
    message_body_ = new ::std::string;
  }
  return message_body_;
}
inline ::std::string* CMsgProtobufWrapped::release_message_body() {
  clear_has_message_body();
  if (message_body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_body_;
    message_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgProtobufWrapped::set_allocated_message_body(::std::string* message_body) {
  if (message_body_ != &::google::protobuf::internal::kEmptyString) {
    delete message_body_;
  }
  if (message_body) {
    set_has_message_body();
    message_body_ = message_body;
  } else {
    clear_has_message_body();
    message_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgAuthTicket

// optional uint32 estate = 1;
inline bool CMsgAuthTicket::has_estate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgAuthTicket::set_has_estate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgAuthTicket::clear_has_estate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgAuthTicket::clear_estate() {
  estate_ = 0u;
  clear_has_estate();
}
inline ::google::protobuf::uint32 CMsgAuthTicket::estate() const {
  return estate_;
}
inline void CMsgAuthTicket::set_estate(::google::protobuf::uint32 value) {
  set_has_estate();
  estate_ = value;
}

// optional uint32 eresult = 2 [default = 2];
inline bool CMsgAuthTicket::has_eresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgAuthTicket::set_has_eresult() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgAuthTicket::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgAuthTicket::clear_eresult() {
  eresult_ = 2u;
  clear_has_eresult();
}
inline ::google::protobuf::uint32 CMsgAuthTicket::eresult() const {
  return eresult_;
}
inline void CMsgAuthTicket::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
}

// optional fixed64 steamid = 3;
inline bool CMsgAuthTicket::has_steamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgAuthTicket::set_has_steamid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgAuthTicket::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgAuthTicket::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
inline ::google::protobuf::uint64 CMsgAuthTicket::steamid() const {
  return steamid_;
}
inline void CMsgAuthTicket::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
}

// optional fixed64 gameid = 4;
inline bool CMsgAuthTicket::has_gameid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgAuthTicket::set_has_gameid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgAuthTicket::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgAuthTicket::clear_gameid() {
  gameid_ = GOOGLE_ULONGLONG(0);
  clear_has_gameid();
}
inline ::google::protobuf::uint64 CMsgAuthTicket::gameid() const {
  return gameid_;
}
inline void CMsgAuthTicket::set_gameid(::google::protobuf::uint64 value) {
  set_has_gameid();
  gameid_ = value;
}

// optional uint32 h_steam_pipe = 5;
inline bool CMsgAuthTicket::has_h_steam_pipe() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgAuthTicket::set_has_h_steam_pipe() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgAuthTicket::clear_has_h_steam_pipe() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgAuthTicket::clear_h_steam_pipe() {
  h_steam_pipe_ = 0u;
  clear_has_h_steam_pipe();
}
inline ::google::protobuf::uint32 CMsgAuthTicket::h_steam_pipe() const {
  return h_steam_pipe_;
}
inline void CMsgAuthTicket::set_h_steam_pipe(::google::protobuf::uint32 value) {
  set_has_h_steam_pipe();
  h_steam_pipe_ = value;
}

// optional uint32 ticket_crc = 6;
inline bool CMsgAuthTicket::has_ticket_crc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgAuthTicket::set_has_ticket_crc() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgAuthTicket::clear_has_ticket_crc() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgAuthTicket::clear_ticket_crc() {
  ticket_crc_ = 0u;
  clear_has_ticket_crc();
}
inline ::google::protobuf::uint32 CMsgAuthTicket::ticket_crc() const {
  return ticket_crc_;
}
inline void CMsgAuthTicket::set_ticket_crc(::google::protobuf::uint32 value) {
  set_has_ticket_crc();
  ticket_crc_ = value;
}

// optional bytes ticket = 7;
inline bool CMsgAuthTicket::has_ticket() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgAuthTicket::set_has_ticket() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgAuthTicket::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgAuthTicket::clear_ticket() {
  if (ticket_ != &::google::protobuf::internal::kEmptyString) {
    ticket_->clear();
  }
  clear_has_ticket();
}
inline const ::std::string& CMsgAuthTicket::ticket() const {
  return *ticket_;
}
inline void CMsgAuthTicket::set_ticket(const ::std::string& value) {
  set_has_ticket();
  if (ticket_ == &::google::protobuf::internal::kEmptyString) {
    ticket_ = new ::std::string;
  }
  ticket_->assign(value);
}
inline void CMsgAuthTicket::set_ticket(const char* value) {
  set_has_ticket();
  if (ticket_ == &::google::protobuf::internal::kEmptyString) {
    ticket_ = new ::std::string;
  }
  ticket_->assign(value);
}
inline void CMsgAuthTicket::set_ticket(const void* value, size_t size) {
  set_has_ticket();
  if (ticket_ == &::google::protobuf::internal::kEmptyString) {
    ticket_ = new ::std::string;
  }
  ticket_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgAuthTicket::mutable_ticket() {
  set_has_ticket();
  if (ticket_ == &::google::protobuf::internal::kEmptyString) {
    ticket_ = new ::std::string;
  }
  return ticket_;
}
inline ::std::string* CMsgAuthTicket::release_ticket() {
  clear_has_ticket();
  if (ticket_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ticket_;
    ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgAuthTicket::set_allocated_ticket(::std::string* ticket) {
  if (ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete ticket_;
  }
  if (ticket) {
    set_has_ticket();
    ticket_ = ticket;
  } else {
    clear_has_ticket();
    ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CCDDBAppDetailCommon

// optional uint32 appid = 1;
inline bool CCDDBAppDetailCommon::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCDDBAppDetailCommon::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CCDDBAppDetailCommon::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CCDDBAppDetailCommon::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 CCDDBAppDetailCommon::appid() const {
  return appid_;
}
inline void CCDDBAppDetailCommon::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
}

// optional string name = 2;
inline bool CCDDBAppDetailCommon::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CCDDBAppDetailCommon::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CCDDBAppDetailCommon::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CCDDBAppDetailCommon::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CCDDBAppDetailCommon::name() const {
  return *name_;
}
inline void CCDDBAppDetailCommon::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CCDDBAppDetailCommon::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CCDDBAppDetailCommon::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CCDDBAppDetailCommon::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CCDDBAppDetailCommon::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CCDDBAppDetailCommon::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string icon = 3;
inline bool CCDDBAppDetailCommon::has_icon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CCDDBAppDetailCommon::set_has_icon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CCDDBAppDetailCommon::clear_has_icon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CCDDBAppDetailCommon::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& CCDDBAppDetailCommon::icon() const {
  return *icon_;
}
inline void CCDDBAppDetailCommon::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void CCDDBAppDetailCommon::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void CCDDBAppDetailCommon::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CCDDBAppDetailCommon::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* CCDDBAppDetailCommon::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CCDDBAppDetailCommon::set_allocated_icon(::std::string* icon) {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool tool = 6;
inline bool CCDDBAppDetailCommon::has_tool() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CCDDBAppDetailCommon::set_has_tool() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CCDDBAppDetailCommon::clear_has_tool() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CCDDBAppDetailCommon::clear_tool() {
  tool_ = false;
  clear_has_tool();
}
inline bool CCDDBAppDetailCommon::tool() const {
  return tool_;
}
inline void CCDDBAppDetailCommon::set_tool(bool value) {
  set_has_tool();
  tool_ = value;
}

// optional bool demo = 7;
inline bool CCDDBAppDetailCommon::has_demo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CCDDBAppDetailCommon::set_has_demo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CCDDBAppDetailCommon::clear_has_demo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CCDDBAppDetailCommon::clear_demo() {
  demo_ = false;
  clear_has_demo();
}
inline bool CCDDBAppDetailCommon::demo() const {
  return demo_;
}
inline void CCDDBAppDetailCommon::set_demo(bool value) {
  set_has_demo();
  demo_ = value;
}

// optional bool media = 8;
inline bool CCDDBAppDetailCommon::has_media() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CCDDBAppDetailCommon::set_has_media() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CCDDBAppDetailCommon::clear_has_media() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CCDDBAppDetailCommon::clear_media() {
  media_ = false;
  clear_has_media();
}
inline bool CCDDBAppDetailCommon::media() const {
  return media_;
}
inline void CCDDBAppDetailCommon::set_media(bool value) {
  set_has_media();
  media_ = value;
}

// optional bool community_visible_stats = 9;
inline bool CCDDBAppDetailCommon::has_community_visible_stats() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CCDDBAppDetailCommon::set_has_community_visible_stats() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CCDDBAppDetailCommon::clear_has_community_visible_stats() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CCDDBAppDetailCommon::clear_community_visible_stats() {
  community_visible_stats_ = false;
  clear_has_community_visible_stats();
}
inline bool CCDDBAppDetailCommon::community_visible_stats() const {
  return community_visible_stats_;
}
inline void CCDDBAppDetailCommon::set_community_visible_stats(bool value) {
  set_has_community_visible_stats();
  community_visible_stats_ = value;
}

// optional string friendly_name = 10;
inline bool CCDDBAppDetailCommon::has_friendly_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CCDDBAppDetailCommon::set_has_friendly_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CCDDBAppDetailCommon::clear_has_friendly_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CCDDBAppDetailCommon::clear_friendly_name() {
  if (friendly_name_ != &::google::protobuf::internal::kEmptyString) {
    friendly_name_->clear();
  }
  clear_has_friendly_name();
}
inline const ::std::string& CCDDBAppDetailCommon::friendly_name() const {
  return *friendly_name_;
}
inline void CCDDBAppDetailCommon::set_friendly_name(const ::std::string& value) {
  set_has_friendly_name();
  if (friendly_name_ == &::google::protobuf::internal::kEmptyString) {
    friendly_name_ = new ::std::string;
  }
  friendly_name_->assign(value);
}
inline void CCDDBAppDetailCommon::set_friendly_name(const char* value) {
  set_has_friendly_name();
  if (friendly_name_ == &::google::protobuf::internal::kEmptyString) {
    friendly_name_ = new ::std::string;
  }
  friendly_name_->assign(value);
}
inline void CCDDBAppDetailCommon::set_friendly_name(const char* value, size_t size) {
  set_has_friendly_name();
  if (friendly_name_ == &::google::protobuf::internal::kEmptyString) {
    friendly_name_ = new ::std::string;
  }
  friendly_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CCDDBAppDetailCommon::mutable_friendly_name() {
  set_has_friendly_name();
  if (friendly_name_ == &::google::protobuf::internal::kEmptyString) {
    friendly_name_ = new ::std::string;
  }
  return friendly_name_;
}
inline ::std::string* CCDDBAppDetailCommon::release_friendly_name() {
  clear_has_friendly_name();
  if (friendly_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = friendly_name_;
    friendly_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CCDDBAppDetailCommon::set_allocated_friendly_name(::std::string* friendly_name) {
  if (friendly_name_ != &::google::protobuf::internal::kEmptyString) {
    delete friendly_name_;
  }
  if (friendly_name) {
    set_has_friendly_name();
    friendly_name_ = friendly_name;
  } else {
    clear_has_friendly_name();
    friendly_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string propagation = 11;
inline bool CCDDBAppDetailCommon::has_propagation() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CCDDBAppDetailCommon::set_has_propagation() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CCDDBAppDetailCommon::clear_has_propagation() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CCDDBAppDetailCommon::clear_propagation() {
  if (propagation_ != &::google::protobuf::internal::kEmptyString) {
    propagation_->clear();
  }
  clear_has_propagation();
}
inline const ::std::string& CCDDBAppDetailCommon::propagation() const {
  return *propagation_;
}
inline void CCDDBAppDetailCommon::set_propagation(const ::std::string& value) {
  set_has_propagation();
  if (propagation_ == &::google::protobuf::internal::kEmptyString) {
    propagation_ = new ::std::string;
  }
  propagation_->assign(value);
}
inline void CCDDBAppDetailCommon::set_propagation(const char* value) {
  set_has_propagation();
  if (propagation_ == &::google::protobuf::internal::kEmptyString) {
    propagation_ = new ::std::string;
  }
  propagation_->assign(value);
}
inline void CCDDBAppDetailCommon::set_propagation(const char* value, size_t size) {
  set_has_propagation();
  if (propagation_ == &::google::protobuf::internal::kEmptyString) {
    propagation_ = new ::std::string;
  }
  propagation_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CCDDBAppDetailCommon::mutable_propagation() {
  set_has_propagation();
  if (propagation_ == &::google::protobuf::internal::kEmptyString) {
    propagation_ = new ::std::string;
  }
  return propagation_;
}
inline ::std::string* CCDDBAppDetailCommon::release_propagation() {
  clear_has_propagation();
  if (propagation_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = propagation_;
    propagation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CCDDBAppDetailCommon::set_allocated_propagation(::std::string* propagation) {
  if (propagation_ != &::google::protobuf::internal::kEmptyString) {
    delete propagation_;
  }
  if (propagation) {
    set_has_propagation();
    propagation_ = propagation;
  } else {
    clear_has_propagation();
    propagation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool has_adult_content = 12;
inline bool CCDDBAppDetailCommon::has_has_adult_content() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CCDDBAppDetailCommon::set_has_has_adult_content() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CCDDBAppDetailCommon::clear_has_has_adult_content() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CCDDBAppDetailCommon::clear_has_adult_content() {
  has_adult_content_ = false;
  clear_has_has_adult_content();
}
inline bool CCDDBAppDetailCommon::has_adult_content() const {
  return has_adult_content_;
}
inline void CCDDBAppDetailCommon::set_has_adult_content(bool value) {
  set_has_has_adult_content();
  has_adult_content_ = value;
}

// optional bool is_visible_in_steam_china = 13;
inline bool CCDDBAppDetailCommon::has_is_visible_in_steam_china() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CCDDBAppDetailCommon::set_has_is_visible_in_steam_china() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CCDDBAppDetailCommon::clear_has_is_visible_in_steam_china() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CCDDBAppDetailCommon::clear_is_visible_in_steam_china() {
  is_visible_in_steam_china_ = false;
  clear_has_is_visible_in_steam_china();
}
inline bool CCDDBAppDetailCommon::is_visible_in_steam_china() const {
  return is_visible_in_steam_china_;
}
inline void CCDDBAppDetailCommon::set_is_visible_in_steam_china(bool value) {
  set_has_is_visible_in_steam_china();
  is_visible_in_steam_china_ = value;
}

// optional uint32 app_type = 14;
inline bool CCDDBAppDetailCommon::has_app_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CCDDBAppDetailCommon::set_has_app_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CCDDBAppDetailCommon::clear_has_app_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CCDDBAppDetailCommon::clear_app_type() {
  app_type_ = 0u;
  clear_has_app_type();
}
inline ::google::protobuf::uint32 CCDDBAppDetailCommon::app_type() const {
  return app_type_;
}
inline void CCDDBAppDetailCommon::set_app_type(::google::protobuf::uint32 value) {
  set_has_app_type();
  app_type_ = value;
}

// -------------------------------------------------------------------

// CMsgAppRights

// optional bool edit_info = 1;
inline bool CMsgAppRights::has_edit_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgAppRights::set_has_edit_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgAppRights::clear_has_edit_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgAppRights::clear_edit_info() {
  edit_info_ = false;
  clear_has_edit_info();
}
inline bool CMsgAppRights::edit_info() const {
  return edit_info_;
}
inline void CMsgAppRights::set_edit_info(bool value) {
  set_has_edit_info();
  edit_info_ = value;
}

// optional bool publish = 2;
inline bool CMsgAppRights::has_publish() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgAppRights::set_has_publish() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgAppRights::clear_has_publish() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgAppRights::clear_publish() {
  publish_ = false;
  clear_has_publish();
}
inline bool CMsgAppRights::publish() const {
  return publish_;
}
inline void CMsgAppRights::set_publish(bool value) {
  set_has_publish();
  publish_ = value;
}

// optional bool view_error_data = 3;
inline bool CMsgAppRights::has_view_error_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgAppRights::set_has_view_error_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgAppRights::clear_has_view_error_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgAppRights::clear_view_error_data() {
  view_error_data_ = false;
  clear_has_view_error_data();
}
inline bool CMsgAppRights::view_error_data() const {
  return view_error_data_;
}
inline void CMsgAppRights::set_view_error_data(bool value) {
  set_has_view_error_data();
  view_error_data_ = value;
}

// optional bool download = 4;
inline bool CMsgAppRights::has_download() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgAppRights::set_has_download() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgAppRights::clear_has_download() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgAppRights::clear_download() {
  download_ = false;
  clear_has_download();
}
inline bool CMsgAppRights::download() const {
  return download_;
}
inline void CMsgAppRights::set_download(bool value) {
  set_has_download();
  download_ = value;
}

// optional bool upload_cdkeys = 5;
inline bool CMsgAppRights::has_upload_cdkeys() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgAppRights::set_has_upload_cdkeys() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgAppRights::clear_has_upload_cdkeys() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgAppRights::clear_upload_cdkeys() {
  upload_cdkeys_ = false;
  clear_has_upload_cdkeys();
}
inline bool CMsgAppRights::upload_cdkeys() const {
  return upload_cdkeys_;
}
inline void CMsgAppRights::set_upload_cdkeys(bool value) {
  set_has_upload_cdkeys();
  upload_cdkeys_ = value;
}

// optional bool generate_cdkeys = 6;
inline bool CMsgAppRights::has_generate_cdkeys() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgAppRights::set_has_generate_cdkeys() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgAppRights::clear_has_generate_cdkeys() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgAppRights::clear_generate_cdkeys() {
  generate_cdkeys_ = false;
  clear_has_generate_cdkeys();
}
inline bool CMsgAppRights::generate_cdkeys() const {
  return generate_cdkeys_;
}
inline void CMsgAppRights::set_generate_cdkeys(bool value) {
  set_has_generate_cdkeys();
  generate_cdkeys_ = value;
}

// optional bool view_financials = 7;
inline bool CMsgAppRights::has_view_financials() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgAppRights::set_has_view_financials() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgAppRights::clear_has_view_financials() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgAppRights::clear_view_financials() {
  view_financials_ = false;
  clear_has_view_financials();
}
inline bool CMsgAppRights::view_financials() const {
  return view_financials_;
}
inline void CMsgAppRights::set_view_financials(bool value) {
  set_has_view_financials();
  view_financials_ = value;
}

// optional bool manage_ceg = 8;
inline bool CMsgAppRights::has_manage_ceg() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgAppRights::set_has_manage_ceg() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgAppRights::clear_has_manage_ceg() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgAppRights::clear_manage_ceg() {
  manage_ceg_ = false;
  clear_has_manage_ceg();
}
inline bool CMsgAppRights::manage_ceg() const {
  return manage_ceg_;
}
inline void CMsgAppRights::set_manage_ceg(bool value) {
  set_has_manage_ceg();
  manage_ceg_ = value;
}

// optional bool manage_signing = 9;
inline bool CMsgAppRights::has_manage_signing() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgAppRights::set_has_manage_signing() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgAppRights::clear_has_manage_signing() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgAppRights::clear_manage_signing() {
  manage_signing_ = false;
  clear_has_manage_signing();
}
inline bool CMsgAppRights::manage_signing() const {
  return manage_signing_;
}
inline void CMsgAppRights::set_manage_signing(bool value) {
  set_has_manage_signing();
  manage_signing_ = value;
}

// optional bool manage_cdkeys = 10;
inline bool CMsgAppRights::has_manage_cdkeys() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgAppRights::set_has_manage_cdkeys() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgAppRights::clear_has_manage_cdkeys() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgAppRights::clear_manage_cdkeys() {
  manage_cdkeys_ = false;
  clear_has_manage_cdkeys();
}
inline bool CMsgAppRights::manage_cdkeys() const {
  return manage_cdkeys_;
}
inline void CMsgAppRights::set_manage_cdkeys(bool value) {
  set_has_manage_cdkeys();
  manage_cdkeys_ = value;
}

// optional bool edit_marketing = 11;
inline bool CMsgAppRights::has_edit_marketing() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgAppRights::set_has_edit_marketing() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgAppRights::clear_has_edit_marketing() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgAppRights::clear_edit_marketing() {
  edit_marketing_ = false;
  clear_has_edit_marketing();
}
inline bool CMsgAppRights::edit_marketing() const {
  return edit_marketing_;
}
inline void CMsgAppRights::set_edit_marketing(bool value) {
  set_has_edit_marketing();
  edit_marketing_ = value;
}

// optional bool economy_support = 12;
inline bool CMsgAppRights::has_economy_support() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgAppRights::set_has_economy_support() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgAppRights::clear_has_economy_support() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgAppRights::clear_economy_support() {
  economy_support_ = false;
  clear_has_economy_support();
}
inline bool CMsgAppRights::economy_support() const {
  return economy_support_;
}
inline void CMsgAppRights::set_economy_support(bool value) {
  set_has_economy_support();
  economy_support_ = value;
}

// optional bool economy_support_supervisor = 13;
inline bool CMsgAppRights::has_economy_support_supervisor() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgAppRights::set_has_economy_support_supervisor() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgAppRights::clear_has_economy_support_supervisor() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgAppRights::clear_economy_support_supervisor() {
  economy_support_supervisor_ = false;
  clear_has_economy_support_supervisor();
}
inline bool CMsgAppRights::economy_support_supervisor() const {
  return economy_support_supervisor_;
}
inline void CMsgAppRights::set_economy_support_supervisor(bool value) {
  set_has_economy_support_supervisor();
  economy_support_supervisor_ = value;
}

// optional bool manage_pricing = 14;
inline bool CMsgAppRights::has_manage_pricing() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgAppRights::set_has_manage_pricing() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgAppRights::clear_has_manage_pricing() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgAppRights::clear_manage_pricing() {
  manage_pricing_ = false;
  clear_has_manage_pricing();
}
inline bool CMsgAppRights::manage_pricing() const {
  return manage_pricing_;
}
inline void CMsgAppRights::set_manage_pricing(bool value) {
  set_has_manage_pricing();
  manage_pricing_ = value;
}

// optional bool broadcast_live = 15;
inline bool CMsgAppRights::has_broadcast_live() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgAppRights::set_has_broadcast_live() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgAppRights::clear_has_broadcast_live() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgAppRights::clear_broadcast_live() {
  broadcast_live_ = false;
  clear_has_broadcast_live();
}
inline bool CMsgAppRights::broadcast_live() const {
  return broadcast_live_;
}
inline void CMsgAppRights::set_broadcast_live(bool value) {
  set_has_broadcast_live();
  broadcast_live_ = value;
}

// optional bool view_marketing_traffic = 16;
inline bool CMsgAppRights::has_view_marketing_traffic() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgAppRights::set_has_view_marketing_traffic() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgAppRights::clear_has_view_marketing_traffic() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgAppRights::clear_view_marketing_traffic() {
  view_marketing_traffic_ = false;
  clear_has_view_marketing_traffic();
}
inline bool CMsgAppRights::view_marketing_traffic() const {
  return view_marketing_traffic_;
}
inline void CMsgAppRights::set_view_marketing_traffic(bool value) {
  set_has_view_marketing_traffic();
  view_marketing_traffic_ = value;
}

// optional bool edit_store_display_content = 17;
inline bool CMsgAppRights::has_edit_store_display_content() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgAppRights::set_has_edit_store_display_content() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMsgAppRights::clear_has_edit_store_display_content() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMsgAppRights::clear_edit_store_display_content() {
  edit_store_display_content_ = false;
  clear_has_edit_store_display_content();
}
inline bool CMsgAppRights::edit_store_display_content() const {
  return edit_store_display_content_;
}
inline void CMsgAppRights::set_edit_store_display_content(bool value) {
  set_has_edit_store_display_content();
  edit_store_display_content_ = value;
}

// -------------------------------------------------------------------

// CCuratorPreferences

// optional uint32 supported_languages = 1;
inline bool CCuratorPreferences::has_supported_languages() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCuratorPreferences::set_has_supported_languages() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CCuratorPreferences::clear_has_supported_languages() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CCuratorPreferences::clear_supported_languages() {
  supported_languages_ = 0u;
  clear_has_supported_languages();
}
inline ::google::protobuf::uint32 CCuratorPreferences::supported_languages() const {
  return supported_languages_;
}
inline void CCuratorPreferences::set_supported_languages(::google::protobuf::uint32 value) {
  set_has_supported_languages();
  supported_languages_ = value;
}

// optional bool platform_windows = 2;
inline bool CCuratorPreferences::has_platform_windows() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CCuratorPreferences::set_has_platform_windows() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CCuratorPreferences::clear_has_platform_windows() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CCuratorPreferences::clear_platform_windows() {
  platform_windows_ = false;
  clear_has_platform_windows();
}
inline bool CCuratorPreferences::platform_windows() const {
  return platform_windows_;
}
inline void CCuratorPreferences::set_platform_windows(bool value) {
  set_has_platform_windows();
  platform_windows_ = value;
}

// optional bool platform_mac = 3;
inline bool CCuratorPreferences::has_platform_mac() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CCuratorPreferences::set_has_platform_mac() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CCuratorPreferences::clear_has_platform_mac() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CCuratorPreferences::clear_platform_mac() {
  platform_mac_ = false;
  clear_has_platform_mac();
}
inline bool CCuratorPreferences::platform_mac() const {
  return platform_mac_;
}
inline void CCuratorPreferences::set_platform_mac(bool value) {
  set_has_platform_mac();
  platform_mac_ = value;
}

// optional bool platform_linux = 4;
inline bool CCuratorPreferences::has_platform_linux() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CCuratorPreferences::set_has_platform_linux() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CCuratorPreferences::clear_has_platform_linux() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CCuratorPreferences::clear_platform_linux() {
  platform_linux_ = false;
  clear_has_platform_linux();
}
inline bool CCuratorPreferences::platform_linux() const {
  return platform_linux_;
}
inline void CCuratorPreferences::set_platform_linux(bool value) {
  set_has_platform_linux();
  platform_linux_ = value;
}

// optional bool vr_content = 5;
inline bool CCuratorPreferences::has_vr_content() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CCuratorPreferences::set_has_vr_content() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CCuratorPreferences::clear_has_vr_content() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CCuratorPreferences::clear_vr_content() {
  vr_content_ = false;
  clear_has_vr_content();
}
inline bool CCuratorPreferences::vr_content() const {
  return vr_content_;
}
inline void CCuratorPreferences::set_vr_content(bool value) {
  set_has_vr_content();
  vr_content_ = value;
}

// optional bool adult_content_violence = 6;
inline bool CCuratorPreferences::has_adult_content_violence() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CCuratorPreferences::set_has_adult_content_violence() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CCuratorPreferences::clear_has_adult_content_violence() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CCuratorPreferences::clear_adult_content_violence() {
  adult_content_violence_ = false;
  clear_has_adult_content_violence();
}
inline bool CCuratorPreferences::adult_content_violence() const {
  return adult_content_violence_;
}
inline void CCuratorPreferences::set_adult_content_violence(bool value) {
  set_has_adult_content_violence();
  adult_content_violence_ = value;
}

// optional bool adult_content_sex = 7;
inline bool CCuratorPreferences::has_adult_content_sex() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CCuratorPreferences::set_has_adult_content_sex() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CCuratorPreferences::clear_has_adult_content_sex() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CCuratorPreferences::clear_adult_content_sex() {
  adult_content_sex_ = false;
  clear_has_adult_content_sex();
}
inline bool CCuratorPreferences::adult_content_sex() const {
  return adult_content_sex_;
}
inline void CCuratorPreferences::set_adult_content_sex(bool value) {
  set_has_adult_content_sex();
  adult_content_sex_ = value;
}

// optional uint32 timestamp_updated = 8;
inline bool CCuratorPreferences::has_timestamp_updated() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CCuratorPreferences::set_has_timestamp_updated() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CCuratorPreferences::clear_has_timestamp_updated() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CCuratorPreferences::clear_timestamp_updated() {
  timestamp_updated_ = 0u;
  clear_has_timestamp_updated();
}
inline ::google::protobuf::uint32 CCuratorPreferences::timestamp_updated() const {
  return timestamp_updated_;
}
inline void CCuratorPreferences::set_timestamp_updated(::google::protobuf::uint32 value) {
  set_has_timestamp_updated();
  timestamp_updated_ = value;
}

// repeated uint32 tagids_curated = 9;
inline int CCuratorPreferences::tagids_curated_size() const {
  return tagids_curated_.size();
}
inline void CCuratorPreferences::clear_tagids_curated() {
  tagids_curated_.Clear();
}
inline ::google::protobuf::uint32 CCuratorPreferences::tagids_curated(int index) const {
  return tagids_curated_.Get(index);
}
inline void CCuratorPreferences::set_tagids_curated(int index, ::google::protobuf::uint32 value) {
  tagids_curated_.Set(index, value);
}
inline void CCuratorPreferences::add_tagids_curated(::google::protobuf::uint32 value) {
  tagids_curated_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CCuratorPreferences::tagids_curated() const {
  return tagids_curated_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CCuratorPreferences::mutable_tagids_curated() {
  return &tagids_curated_;
}

// repeated uint32 tagids_filtered = 10;
inline int CCuratorPreferences::tagids_filtered_size() const {
  return tagids_filtered_.size();
}
inline void CCuratorPreferences::clear_tagids_filtered() {
  tagids_filtered_.Clear();
}
inline ::google::protobuf::uint32 CCuratorPreferences::tagids_filtered(int index) const {
  return tagids_filtered_.Get(index);
}
inline void CCuratorPreferences::set_tagids_filtered(int index, ::google::protobuf::uint32 value) {
  tagids_filtered_.Set(index, value);
}
inline void CCuratorPreferences::add_tagids_filtered(::google::protobuf::uint32 value) {
  tagids_filtered_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CCuratorPreferences::tagids_filtered() const {
  return tagids_filtered_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CCuratorPreferences::mutable_tagids_filtered() {
  return &tagids_filtered_;
}

// optional string website_title = 11;
inline bool CCuratorPreferences::has_website_title() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CCuratorPreferences::set_has_website_title() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CCuratorPreferences::clear_has_website_title() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CCuratorPreferences::clear_website_title() {
  if (website_title_ != &::google::protobuf::internal::kEmptyString) {
    website_title_->clear();
  }
  clear_has_website_title();
}
inline const ::std::string& CCuratorPreferences::website_title() const {
  return *website_title_;
}
inline void CCuratorPreferences::set_website_title(const ::std::string& value) {
  set_has_website_title();
  if (website_title_ == &::google::protobuf::internal::kEmptyString) {
    website_title_ = new ::std::string;
  }
  website_title_->assign(value);
}
inline void CCuratorPreferences::set_website_title(const char* value) {
  set_has_website_title();
  if (website_title_ == &::google::protobuf::internal::kEmptyString) {
    website_title_ = new ::std::string;
  }
  website_title_->assign(value);
}
inline void CCuratorPreferences::set_website_title(const char* value, size_t size) {
  set_has_website_title();
  if (website_title_ == &::google::protobuf::internal::kEmptyString) {
    website_title_ = new ::std::string;
  }
  website_title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CCuratorPreferences::mutable_website_title() {
  set_has_website_title();
  if (website_title_ == &::google::protobuf::internal::kEmptyString) {
    website_title_ = new ::std::string;
  }
  return website_title_;
}
inline ::std::string* CCuratorPreferences::release_website_title() {
  clear_has_website_title();
  if (website_title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = website_title_;
    website_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CCuratorPreferences::set_allocated_website_title(::std::string* website_title) {
  if (website_title_ != &::google::protobuf::internal::kEmptyString) {
    delete website_title_;
  }
  if (website_title) {
    set_has_website_title();
    website_title_ = website_title;
  } else {
    clear_has_website_title();
    website_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string website_url = 12;
inline bool CCuratorPreferences::has_website_url() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CCuratorPreferences::set_has_website_url() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CCuratorPreferences::clear_has_website_url() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CCuratorPreferences::clear_website_url() {
  if (website_url_ != &::google::protobuf::internal::kEmptyString) {
    website_url_->clear();
  }
  clear_has_website_url();
}
inline const ::std::string& CCuratorPreferences::website_url() const {
  return *website_url_;
}
inline void CCuratorPreferences::set_website_url(const ::std::string& value) {
  set_has_website_url();
  if (website_url_ == &::google::protobuf::internal::kEmptyString) {
    website_url_ = new ::std::string;
  }
  website_url_->assign(value);
}
inline void CCuratorPreferences::set_website_url(const char* value) {
  set_has_website_url();
  if (website_url_ == &::google::protobuf::internal::kEmptyString) {
    website_url_ = new ::std::string;
  }
  website_url_->assign(value);
}
inline void CCuratorPreferences::set_website_url(const char* value, size_t size) {
  set_has_website_url();
  if (website_url_ == &::google::protobuf::internal::kEmptyString) {
    website_url_ = new ::std::string;
  }
  website_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CCuratorPreferences::mutable_website_url() {
  set_has_website_url();
  if (website_url_ == &::google::protobuf::internal::kEmptyString) {
    website_url_ = new ::std::string;
  }
  return website_url_;
}
inline ::std::string* CCuratorPreferences::release_website_url() {
  clear_has_website_url();
  if (website_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = website_url_;
    website_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CCuratorPreferences::set_allocated_website_url(::std::string* website_url) {
  if (website_url_ != &::google::protobuf::internal::kEmptyString) {
    delete website_url_;
  }
  if (website_url) {
    set_has_website_url();
    website_url_ = website_url;
  } else {
    clear_has_website_url();
    website_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string discussion_url = 13;
inline bool CCuratorPreferences::has_discussion_url() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CCuratorPreferences::set_has_discussion_url() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CCuratorPreferences::clear_has_discussion_url() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CCuratorPreferences::clear_discussion_url() {
  if (discussion_url_ != &::google::protobuf::internal::kEmptyString) {
    discussion_url_->clear();
  }
  clear_has_discussion_url();
}
inline const ::std::string& CCuratorPreferences::discussion_url() const {
  return *discussion_url_;
}
inline void CCuratorPreferences::set_discussion_url(const ::std::string& value) {
  set_has_discussion_url();
  if (discussion_url_ == &::google::protobuf::internal::kEmptyString) {
    discussion_url_ = new ::std::string;
  }
  discussion_url_->assign(value);
}
inline void CCuratorPreferences::set_discussion_url(const char* value) {
  set_has_discussion_url();
  if (discussion_url_ == &::google::protobuf::internal::kEmptyString) {
    discussion_url_ = new ::std::string;
  }
  discussion_url_->assign(value);
}
inline void CCuratorPreferences::set_discussion_url(const char* value, size_t size) {
  set_has_discussion_url();
  if (discussion_url_ == &::google::protobuf::internal::kEmptyString) {
    discussion_url_ = new ::std::string;
  }
  discussion_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CCuratorPreferences::mutable_discussion_url() {
  set_has_discussion_url();
  if (discussion_url_ == &::google::protobuf::internal::kEmptyString) {
    discussion_url_ = new ::std::string;
  }
  return discussion_url_;
}
inline ::std::string* CCuratorPreferences::release_discussion_url() {
  clear_has_discussion_url();
  if (discussion_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = discussion_url_;
    discussion_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CCuratorPreferences::set_allocated_discussion_url(::std::string* discussion_url) {
  if (discussion_url_ != &::google::protobuf::internal::kEmptyString) {
    delete discussion_url_;
  }
  if (discussion_url) {
    set_has_discussion_url();
    discussion_url_ = discussion_url;
  } else {
    clear_has_discussion_url();
    discussion_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool show_broadcast = 14;
inline bool CCuratorPreferences::has_show_broadcast() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CCuratorPreferences::set_has_show_broadcast() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CCuratorPreferences::clear_has_show_broadcast() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CCuratorPreferences::clear_show_broadcast() {
  show_broadcast_ = false;
  clear_has_show_broadcast();
}
inline bool CCuratorPreferences::show_broadcast() const {
  return show_broadcast_;
}
inline void CCuratorPreferences::set_show_broadcast(bool value) {
  set_has_show_broadcast();
  show_broadcast_ = value;
}

// -------------------------------------------------------------------

// CLocalizationToken

// optional uint32 language = 1;
inline bool CLocalizationToken::has_language() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CLocalizationToken::set_has_language() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CLocalizationToken::clear_has_language() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CLocalizationToken::clear_language() {
  language_ = 0u;
  clear_has_language();
}
inline ::google::protobuf::uint32 CLocalizationToken::language() const {
  return language_;
}
inline void CLocalizationToken::set_language(::google::protobuf::uint32 value) {
  set_has_language();
  language_ = value;
}

// optional string localized_string = 2;
inline bool CLocalizationToken::has_localized_string() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CLocalizationToken::set_has_localized_string() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CLocalizationToken::clear_has_localized_string() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CLocalizationToken::clear_localized_string() {
  if (localized_string_ != &::google::protobuf::internal::kEmptyString) {
    localized_string_->clear();
  }
  clear_has_localized_string();
}
inline const ::std::string& CLocalizationToken::localized_string() const {
  return *localized_string_;
}
inline void CLocalizationToken::set_localized_string(const ::std::string& value) {
  set_has_localized_string();
  if (localized_string_ == &::google::protobuf::internal::kEmptyString) {
    localized_string_ = new ::std::string;
  }
  localized_string_->assign(value);
}
inline void CLocalizationToken::set_localized_string(const char* value) {
  set_has_localized_string();
  if (localized_string_ == &::google::protobuf::internal::kEmptyString) {
    localized_string_ = new ::std::string;
  }
  localized_string_->assign(value);
}
inline void CLocalizationToken::set_localized_string(const char* value, size_t size) {
  set_has_localized_string();
  if (localized_string_ == &::google::protobuf::internal::kEmptyString) {
    localized_string_ = new ::std::string;
  }
  localized_string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CLocalizationToken::mutable_localized_string() {
  set_has_localized_string();
  if (localized_string_ == &::google::protobuf::internal::kEmptyString) {
    localized_string_ = new ::std::string;
  }
  return localized_string_;
}
inline ::std::string* CLocalizationToken::release_localized_string() {
  clear_has_localized_string();
  if (localized_string_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = localized_string_;
    localized_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CLocalizationToken::set_allocated_localized_string(::std::string* localized_string) {
  if (localized_string_ != &::google::protobuf::internal::kEmptyString) {
    delete localized_string_;
  }
  if (localized_string) {
    set_has_localized_string();
    localized_string_ = localized_string;
  } else {
    clear_has_localized_string();
    localized_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CClanEventUserNewsTuple

// optional uint32 clanid = 1;
inline bool CClanEventUserNewsTuple::has_clanid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CClanEventUserNewsTuple::set_has_clanid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CClanEventUserNewsTuple::clear_has_clanid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CClanEventUserNewsTuple::clear_clanid() {
  clanid_ = 0u;
  clear_has_clanid();
}
inline ::google::protobuf::uint32 CClanEventUserNewsTuple::clanid() const {
  return clanid_;
}
inline void CClanEventUserNewsTuple::set_clanid(::google::protobuf::uint32 value) {
  set_has_clanid();
  clanid_ = value;
}

// optional fixed64 event_gid = 2;
inline bool CClanEventUserNewsTuple::has_event_gid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CClanEventUserNewsTuple::set_has_event_gid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CClanEventUserNewsTuple::clear_has_event_gid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CClanEventUserNewsTuple::clear_event_gid() {
  event_gid_ = GOOGLE_ULONGLONG(0);
  clear_has_event_gid();
}
inline ::google::protobuf::uint64 CClanEventUserNewsTuple::event_gid() const {
  return event_gid_;
}
inline void CClanEventUserNewsTuple::set_event_gid(::google::protobuf::uint64 value) {
  set_has_event_gid();
  event_gid_ = value;
}

// optional fixed64 announcement_gid = 3;
inline bool CClanEventUserNewsTuple::has_announcement_gid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CClanEventUserNewsTuple::set_has_announcement_gid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CClanEventUserNewsTuple::clear_has_announcement_gid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CClanEventUserNewsTuple::clear_announcement_gid() {
  announcement_gid_ = GOOGLE_ULONGLONG(0);
  clear_has_announcement_gid();
}
inline ::google::protobuf::uint64 CClanEventUserNewsTuple::announcement_gid() const {
  return announcement_gid_;
}
inline void CClanEventUserNewsTuple::set_announcement_gid(::google::protobuf::uint64 value) {
  set_has_announcement_gid();
  announcement_gid_ = value;
}

// optional uint32 rtime_start = 4;
inline bool CClanEventUserNewsTuple::has_rtime_start() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CClanEventUserNewsTuple::set_has_rtime_start() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CClanEventUserNewsTuple::clear_has_rtime_start() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CClanEventUserNewsTuple::clear_rtime_start() {
  rtime_start_ = 0u;
  clear_has_rtime_start();
}
inline ::google::protobuf::uint32 CClanEventUserNewsTuple::rtime_start() const {
  return rtime_start_;
}
inline void CClanEventUserNewsTuple::set_rtime_start(::google::protobuf::uint32 value) {
  set_has_rtime_start();
  rtime_start_ = value;
}

// optional uint32 rtime_end = 5;
inline bool CClanEventUserNewsTuple::has_rtime_end() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CClanEventUserNewsTuple::set_has_rtime_end() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CClanEventUserNewsTuple::clear_has_rtime_end() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CClanEventUserNewsTuple::clear_rtime_end() {
  rtime_end_ = 0u;
  clear_has_rtime_end();
}
inline ::google::protobuf::uint32 CClanEventUserNewsTuple::rtime_end() const {
  return rtime_end_;
}
inline void CClanEventUserNewsTuple::set_rtime_end(::google::protobuf::uint32 value) {
  set_has_rtime_end();
  rtime_end_ = value;
}

// optional uint32 priority_score = 6;
inline bool CClanEventUserNewsTuple::has_priority_score() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CClanEventUserNewsTuple::set_has_priority_score() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CClanEventUserNewsTuple::clear_has_priority_score() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CClanEventUserNewsTuple::clear_priority_score() {
  priority_score_ = 0u;
  clear_has_priority_score();
}
inline ::google::protobuf::uint32 CClanEventUserNewsTuple::priority_score() const {
  return priority_score_;
}
inline void CClanEventUserNewsTuple::set_priority_score(::google::protobuf::uint32 value) {
  set_has_priority_score();
  priority_score_ = value;
}

// optional uint32 type = 7;
inline bool CClanEventUserNewsTuple::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CClanEventUserNewsTuple::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CClanEventUserNewsTuple::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CClanEventUserNewsTuple::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 CClanEventUserNewsTuple::type() const {
  return type_;
}
inline void CClanEventUserNewsTuple::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 clamp_range_slot = 8;
inline bool CClanEventUserNewsTuple::has_clamp_range_slot() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CClanEventUserNewsTuple::set_has_clamp_range_slot() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CClanEventUserNewsTuple::clear_has_clamp_range_slot() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CClanEventUserNewsTuple::clear_clamp_range_slot() {
  clamp_range_slot_ = 0u;
  clear_has_clamp_range_slot();
}
inline ::google::protobuf::uint32 CClanEventUserNewsTuple::clamp_range_slot() const {
  return clamp_range_slot_;
}
inline void CClanEventUserNewsTuple::set_clamp_range_slot(::google::protobuf::uint32 value) {
  set_has_clamp_range_slot();
  clamp_range_slot_ = value;
}

// optional uint32 appid = 9;
inline bool CClanEventUserNewsTuple::has_appid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CClanEventUserNewsTuple::set_has_appid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CClanEventUserNewsTuple::clear_has_appid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CClanEventUserNewsTuple::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 CClanEventUserNewsTuple::appid() const {
  return appid_;
}
inline void CClanEventUserNewsTuple::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
}

// optional uint32 rtime32_last_modified = 10;
inline bool CClanEventUserNewsTuple::has_rtime32_last_modified() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CClanEventUserNewsTuple::set_has_rtime32_last_modified() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CClanEventUserNewsTuple::clear_has_rtime32_last_modified() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CClanEventUserNewsTuple::clear_rtime32_last_modified() {
  rtime32_last_modified_ = 0u;
  clear_has_rtime32_last_modified();
}
inline ::google::protobuf::uint32 CClanEventUserNewsTuple::rtime32_last_modified() const {
  return rtime32_last_modified_;
}
inline void CClanEventUserNewsTuple::set_rtime32_last_modified(::google::protobuf::uint32 value) {
  set_has_rtime32_last_modified();
  rtime32_last_modified_ = value;
}

// -------------------------------------------------------------------

// CClanMatchEventByRange

// optional uint32 rtime_before = 1;
inline bool CClanMatchEventByRange::has_rtime_before() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CClanMatchEventByRange::set_has_rtime_before() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CClanMatchEventByRange::clear_has_rtime_before() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CClanMatchEventByRange::clear_rtime_before() {
  rtime_before_ = 0u;
  clear_has_rtime_before();
}
inline ::google::protobuf::uint32 CClanMatchEventByRange::rtime_before() const {
  return rtime_before_;
}
inline void CClanMatchEventByRange::set_rtime_before(::google::protobuf::uint32 value) {
  set_has_rtime_before();
  rtime_before_ = value;
}

// optional uint32 rtime_after = 2;
inline bool CClanMatchEventByRange::has_rtime_after() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CClanMatchEventByRange::set_has_rtime_after() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CClanMatchEventByRange::clear_has_rtime_after() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CClanMatchEventByRange::clear_rtime_after() {
  rtime_after_ = 0u;
  clear_has_rtime_after();
}
inline ::google::protobuf::uint32 CClanMatchEventByRange::rtime_after() const {
  return rtime_after_;
}
inline void CClanMatchEventByRange::set_rtime_after(::google::protobuf::uint32 value) {
  set_has_rtime_after();
  rtime_after_ = value;
}

// optional uint32 qualified = 3;
inline bool CClanMatchEventByRange::has_qualified() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CClanMatchEventByRange::set_has_qualified() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CClanMatchEventByRange::clear_has_qualified() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CClanMatchEventByRange::clear_qualified() {
  qualified_ = 0u;
  clear_has_qualified();
}
inline ::google::protobuf::uint32 CClanMatchEventByRange::qualified() const {
  return qualified_;
}
inline void CClanMatchEventByRange::set_qualified(::google::protobuf::uint32 value) {
  set_has_qualified();
  qualified_ = value;
}

// repeated .CClanEventUserNewsTuple events = 4;
inline int CClanMatchEventByRange::events_size() const {
  return events_.size();
}
inline void CClanMatchEventByRange::clear_events() {
  events_.Clear();
}
inline const ::CClanEventUserNewsTuple& CClanMatchEventByRange::events(int index) const {
  return events_.Get(index);
}
inline ::CClanEventUserNewsTuple* CClanMatchEventByRange::mutable_events(int index) {
  return events_.Mutable(index);
}
inline ::CClanEventUserNewsTuple* CClanMatchEventByRange::add_events() {
  return events_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CClanEventUserNewsTuple >&
CClanMatchEventByRange::events() const {
  return events_;
}
inline ::google::protobuf::RepeatedPtrField< ::CClanEventUserNewsTuple >*
CClanMatchEventByRange::mutable_events() {
  return &events_;
}

// -------------------------------------------------------------------

// CCommunity_ClanAnnouncementInfo

// optional uint64 gid = 1;
inline bool CCommunity_ClanAnnouncementInfo::has_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCommunity_ClanAnnouncementInfo::set_has_gid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CCommunity_ClanAnnouncementInfo::clear_has_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CCommunity_ClanAnnouncementInfo::clear_gid() {
  gid_ = GOOGLE_ULONGLONG(0);
  clear_has_gid();
}
inline ::google::protobuf::uint64 CCommunity_ClanAnnouncementInfo::gid() const {
  return gid_;
}
inline void CCommunity_ClanAnnouncementInfo::set_gid(::google::protobuf::uint64 value) {
  set_has_gid();
  gid_ = value;
}

// optional uint64 clanid = 2;
inline bool CCommunity_ClanAnnouncementInfo::has_clanid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CCommunity_ClanAnnouncementInfo::set_has_clanid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CCommunity_ClanAnnouncementInfo::clear_has_clanid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CCommunity_ClanAnnouncementInfo::clear_clanid() {
  clanid_ = GOOGLE_ULONGLONG(0);
  clear_has_clanid();
}
inline ::google::protobuf::uint64 CCommunity_ClanAnnouncementInfo::clanid() const {
  return clanid_;
}
inline void CCommunity_ClanAnnouncementInfo::set_clanid(::google::protobuf::uint64 value) {
  set_has_clanid();
  clanid_ = value;
}

// optional uint64 posterid = 3;
inline bool CCommunity_ClanAnnouncementInfo::has_posterid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CCommunity_ClanAnnouncementInfo::set_has_posterid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CCommunity_ClanAnnouncementInfo::clear_has_posterid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CCommunity_ClanAnnouncementInfo::clear_posterid() {
  posterid_ = GOOGLE_ULONGLONG(0);
  clear_has_posterid();
}
inline ::google::protobuf::uint64 CCommunity_ClanAnnouncementInfo::posterid() const {
  return posterid_;
}
inline void CCommunity_ClanAnnouncementInfo::set_posterid(::google::protobuf::uint64 value) {
  set_has_posterid();
  posterid_ = value;
}

// optional string headline = 4;
inline bool CCommunity_ClanAnnouncementInfo::has_headline() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CCommunity_ClanAnnouncementInfo::set_has_headline() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CCommunity_ClanAnnouncementInfo::clear_has_headline() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CCommunity_ClanAnnouncementInfo::clear_headline() {
  if (headline_ != &::google::protobuf::internal::kEmptyString) {
    headline_->clear();
  }
  clear_has_headline();
}
inline const ::std::string& CCommunity_ClanAnnouncementInfo::headline() const {
  return *headline_;
}
inline void CCommunity_ClanAnnouncementInfo::set_headline(const ::std::string& value) {
  set_has_headline();
  if (headline_ == &::google::protobuf::internal::kEmptyString) {
    headline_ = new ::std::string;
  }
  headline_->assign(value);
}
inline void CCommunity_ClanAnnouncementInfo::set_headline(const char* value) {
  set_has_headline();
  if (headline_ == &::google::protobuf::internal::kEmptyString) {
    headline_ = new ::std::string;
  }
  headline_->assign(value);
}
inline void CCommunity_ClanAnnouncementInfo::set_headline(const char* value, size_t size) {
  set_has_headline();
  if (headline_ == &::google::protobuf::internal::kEmptyString) {
    headline_ = new ::std::string;
  }
  headline_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CCommunity_ClanAnnouncementInfo::mutable_headline() {
  set_has_headline();
  if (headline_ == &::google::protobuf::internal::kEmptyString) {
    headline_ = new ::std::string;
  }
  return headline_;
}
inline ::std::string* CCommunity_ClanAnnouncementInfo::release_headline() {
  clear_has_headline();
  if (headline_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = headline_;
    headline_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CCommunity_ClanAnnouncementInfo::set_allocated_headline(::std::string* headline) {
  if (headline_ != &::google::protobuf::internal::kEmptyString) {
    delete headline_;
  }
  if (headline) {
    set_has_headline();
    headline_ = headline;
  } else {
    clear_has_headline();
    headline_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 posttime = 5;
inline bool CCommunity_ClanAnnouncementInfo::has_posttime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CCommunity_ClanAnnouncementInfo::set_has_posttime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CCommunity_ClanAnnouncementInfo::clear_has_posttime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CCommunity_ClanAnnouncementInfo::clear_posttime() {
  posttime_ = 0u;
  clear_has_posttime();
}
inline ::google::protobuf::uint32 CCommunity_ClanAnnouncementInfo::posttime() const {
  return posttime_;
}
inline void CCommunity_ClanAnnouncementInfo::set_posttime(::google::protobuf::uint32 value) {
  set_has_posttime();
  posttime_ = value;
}

// optional uint32 updatetime = 6;
inline bool CCommunity_ClanAnnouncementInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CCommunity_ClanAnnouncementInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CCommunity_ClanAnnouncementInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CCommunity_ClanAnnouncementInfo::clear_updatetime() {
  updatetime_ = 0u;
  clear_has_updatetime();
}
inline ::google::protobuf::uint32 CCommunity_ClanAnnouncementInfo::updatetime() const {
  return updatetime_;
}
inline void CCommunity_ClanAnnouncementInfo::set_updatetime(::google::protobuf::uint32 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// optional string body = 7;
inline bool CCommunity_ClanAnnouncementInfo::has_body() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CCommunity_ClanAnnouncementInfo::set_has_body() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CCommunity_ClanAnnouncementInfo::clear_has_body() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CCommunity_ClanAnnouncementInfo::clear_body() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    body_->clear();
  }
  clear_has_body();
}
inline const ::std::string& CCommunity_ClanAnnouncementInfo::body() const {
  return *body_;
}
inline void CCommunity_ClanAnnouncementInfo::set_body(const ::std::string& value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void CCommunity_ClanAnnouncementInfo::set_body(const char* value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void CCommunity_ClanAnnouncementInfo::set_body(const char* value, size_t size) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CCommunity_ClanAnnouncementInfo::mutable_body() {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  return body_;
}
inline ::std::string* CCommunity_ClanAnnouncementInfo::release_body() {
  clear_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = body_;
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CCommunity_ClanAnnouncementInfo::set_allocated_body(::std::string* body) {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (body) {
    set_has_body();
    body_ = body;
  } else {
    clear_has_body();
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 commentcount = 8;
inline bool CCommunity_ClanAnnouncementInfo::has_commentcount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CCommunity_ClanAnnouncementInfo::set_has_commentcount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CCommunity_ClanAnnouncementInfo::clear_has_commentcount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CCommunity_ClanAnnouncementInfo::clear_commentcount() {
  commentcount_ = 0;
  clear_has_commentcount();
}
inline ::google::protobuf::int32 CCommunity_ClanAnnouncementInfo::commentcount() const {
  return commentcount_;
}
inline void CCommunity_ClanAnnouncementInfo::set_commentcount(::google::protobuf::int32 value) {
  set_has_commentcount();
  commentcount_ = value;
}

// repeated string tags = 9;
inline int CCommunity_ClanAnnouncementInfo::tags_size() const {
  return tags_.size();
}
inline void CCommunity_ClanAnnouncementInfo::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& CCommunity_ClanAnnouncementInfo::tags(int index) const {
  return tags_.Get(index);
}
inline ::std::string* CCommunity_ClanAnnouncementInfo::mutable_tags(int index) {
  return tags_.Mutable(index);
}
inline void CCommunity_ClanAnnouncementInfo::set_tags(int index, const ::std::string& value) {
  tags_.Mutable(index)->assign(value);
}
inline void CCommunity_ClanAnnouncementInfo::set_tags(int index, const char* value) {
  tags_.Mutable(index)->assign(value);
}
inline void CCommunity_ClanAnnouncementInfo::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CCommunity_ClanAnnouncementInfo::add_tags() {
  return tags_.Add();
}
inline void CCommunity_ClanAnnouncementInfo::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
}
inline void CCommunity_ClanAnnouncementInfo::add_tags(const char* value) {
  tags_.Add()->assign(value);
}
inline void CCommunity_ClanAnnouncementInfo::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CCommunity_ClanAnnouncementInfo::tags() const {
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CCommunity_ClanAnnouncementInfo::mutable_tags() {
  return &tags_;
}

// optional int32 language = 10;
inline bool CCommunity_ClanAnnouncementInfo::has_language() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CCommunity_ClanAnnouncementInfo::set_has_language() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CCommunity_ClanAnnouncementInfo::clear_has_language() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CCommunity_ClanAnnouncementInfo::clear_language() {
  language_ = 0;
  clear_has_language();
}
inline ::google::protobuf::int32 CCommunity_ClanAnnouncementInfo::language() const {
  return language_;
}
inline void CCommunity_ClanAnnouncementInfo::set_language(::google::protobuf::int32 value) {
  set_has_language();
  language_ = value;
}

// optional bool hidden = 11;
inline bool CCommunity_ClanAnnouncementInfo::has_hidden() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CCommunity_ClanAnnouncementInfo::set_has_hidden() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CCommunity_ClanAnnouncementInfo::clear_has_hidden() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CCommunity_ClanAnnouncementInfo::clear_hidden() {
  hidden_ = false;
  clear_has_hidden();
}
inline bool CCommunity_ClanAnnouncementInfo::hidden() const {
  return hidden_;
}
inline void CCommunity_ClanAnnouncementInfo::set_hidden(bool value) {
  set_has_hidden();
  hidden_ = value;
}

// optional fixed64 forum_topic_id = 12;
inline bool CCommunity_ClanAnnouncementInfo::has_forum_topic_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CCommunity_ClanAnnouncementInfo::set_has_forum_topic_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CCommunity_ClanAnnouncementInfo::clear_has_forum_topic_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CCommunity_ClanAnnouncementInfo::clear_forum_topic_id() {
  forum_topic_id_ = GOOGLE_ULONGLONG(0);
  clear_has_forum_topic_id();
}
inline ::google::protobuf::uint64 CCommunity_ClanAnnouncementInfo::forum_topic_id() const {
  return forum_topic_id_;
}
inline void CCommunity_ClanAnnouncementInfo::set_forum_topic_id(::google::protobuf::uint64 value) {
  set_has_forum_topic_id();
  forum_topic_id_ = value;
}

// optional fixed64 event_gid = 13;
inline bool CCommunity_ClanAnnouncementInfo::has_event_gid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CCommunity_ClanAnnouncementInfo::set_has_event_gid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CCommunity_ClanAnnouncementInfo::clear_has_event_gid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CCommunity_ClanAnnouncementInfo::clear_event_gid() {
  event_gid_ = GOOGLE_ULONGLONG(0);
  clear_has_event_gid();
}
inline ::google::protobuf::uint64 CCommunity_ClanAnnouncementInfo::event_gid() const {
  return event_gid_;
}
inline void CCommunity_ClanAnnouncementInfo::set_event_gid(::google::protobuf::uint64 value) {
  set_has_event_gid();
  event_gid_ = value;
}

// optional int32 voteupcount = 14;
inline bool CCommunity_ClanAnnouncementInfo::has_voteupcount() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CCommunity_ClanAnnouncementInfo::set_has_voteupcount() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CCommunity_ClanAnnouncementInfo::clear_has_voteupcount() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CCommunity_ClanAnnouncementInfo::clear_voteupcount() {
  voteupcount_ = 0;
  clear_has_voteupcount();
}
inline ::google::protobuf::int32 CCommunity_ClanAnnouncementInfo::voteupcount() const {
  return voteupcount_;
}
inline void CCommunity_ClanAnnouncementInfo::set_voteupcount(::google::protobuf::int32 value) {
  set_has_voteupcount();
  voteupcount_ = value;
}

// optional int32 votedowncount = 15;
inline bool CCommunity_ClanAnnouncementInfo::has_votedowncount() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CCommunity_ClanAnnouncementInfo::set_has_votedowncount() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CCommunity_ClanAnnouncementInfo::clear_has_votedowncount() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CCommunity_ClanAnnouncementInfo::clear_votedowncount() {
  votedowncount_ = 0;
  clear_has_votedowncount();
}
inline ::google::protobuf::int32 CCommunity_ClanAnnouncementInfo::votedowncount() const {
  return votedowncount_;
}
inline void CCommunity_ClanAnnouncementInfo::set_votedowncount(::google::protobuf::int32 value) {
  set_has_votedowncount();
  votedowncount_ = value;
}

// optional .EBanContentCheckResult ban_check_result = 16 [default = k_EBanContentCheckResult_NotScanned];
inline bool CCommunity_ClanAnnouncementInfo::has_ban_check_result() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CCommunity_ClanAnnouncementInfo::set_has_ban_check_result() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CCommunity_ClanAnnouncementInfo::clear_has_ban_check_result() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CCommunity_ClanAnnouncementInfo::clear_ban_check_result() {
  ban_check_result_ = 0;
  clear_has_ban_check_result();
}
inline ::EBanContentCheckResult CCommunity_ClanAnnouncementInfo::ban_check_result() const {
  return static_cast< ::EBanContentCheckResult >(ban_check_result_);
}
inline void CCommunity_ClanAnnouncementInfo::set_ban_check_result(::EBanContentCheckResult value) {
  assert(::EBanContentCheckResult_IsValid(value));
  set_has_ban_check_result();
  ban_check_result_ = value;
}

// -------------------------------------------------------------------

// CClanEventData

// optional fixed64 gid = 1;
inline bool CClanEventData::has_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CClanEventData::set_has_gid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CClanEventData::clear_has_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CClanEventData::clear_gid() {
  gid_ = GOOGLE_ULONGLONG(0);
  clear_has_gid();
}
inline ::google::protobuf::uint64 CClanEventData::gid() const {
  return gid_;
}
inline void CClanEventData::set_gid(::google::protobuf::uint64 value) {
  set_has_gid();
  gid_ = value;
}

// optional fixed64 clan_steamid = 2;
inline bool CClanEventData::has_clan_steamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CClanEventData::set_has_clan_steamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CClanEventData::clear_has_clan_steamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CClanEventData::clear_clan_steamid() {
  clan_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_clan_steamid();
}
inline ::google::protobuf::uint64 CClanEventData::clan_steamid() const {
  return clan_steamid_;
}
inline void CClanEventData::set_clan_steamid(::google::protobuf::uint64 value) {
  set_has_clan_steamid();
  clan_steamid_ = value;
}

// optional string event_name = 3;
inline bool CClanEventData::has_event_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CClanEventData::set_has_event_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CClanEventData::clear_has_event_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CClanEventData::clear_event_name() {
  if (event_name_ != &::google::protobuf::internal::kEmptyString) {
    event_name_->clear();
  }
  clear_has_event_name();
}
inline const ::std::string& CClanEventData::event_name() const {
  return *event_name_;
}
inline void CClanEventData::set_event_name(const ::std::string& value) {
  set_has_event_name();
  if (event_name_ == &::google::protobuf::internal::kEmptyString) {
    event_name_ = new ::std::string;
  }
  event_name_->assign(value);
}
inline void CClanEventData::set_event_name(const char* value) {
  set_has_event_name();
  if (event_name_ == &::google::protobuf::internal::kEmptyString) {
    event_name_ = new ::std::string;
  }
  event_name_->assign(value);
}
inline void CClanEventData::set_event_name(const char* value, size_t size) {
  set_has_event_name();
  if (event_name_ == &::google::protobuf::internal::kEmptyString) {
    event_name_ = new ::std::string;
  }
  event_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CClanEventData::mutable_event_name() {
  set_has_event_name();
  if (event_name_ == &::google::protobuf::internal::kEmptyString) {
    event_name_ = new ::std::string;
  }
  return event_name_;
}
inline ::std::string* CClanEventData::release_event_name() {
  clear_has_event_name();
  if (event_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = event_name_;
    event_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CClanEventData::set_allocated_event_name(::std::string* event_name) {
  if (event_name_ != &::google::protobuf::internal::kEmptyString) {
    delete event_name_;
  }
  if (event_name) {
    set_has_event_name();
    event_name_ = event_name;
  } else {
    clear_has_event_name();
    event_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .EProtoClanEventType event_type = 4 [default = k_EClanOtherEvent];
inline bool CClanEventData::has_event_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CClanEventData::set_has_event_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CClanEventData::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CClanEventData::clear_event_type() {
  event_type_ = 1;
  clear_has_event_type();
}
inline ::EProtoClanEventType CClanEventData::event_type() const {
  return static_cast< ::EProtoClanEventType >(event_type_);
}
inline void CClanEventData::set_event_type(::EProtoClanEventType value) {
  assert(::EProtoClanEventType_IsValid(value));
  set_has_event_type();
  event_type_ = value;
}

// optional uint32 appid = 5;
inline bool CClanEventData::has_appid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CClanEventData::set_has_appid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CClanEventData::clear_has_appid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CClanEventData::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 CClanEventData::appid() const {
  return appid_;
}
inline void CClanEventData::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
}

// optional string server_address = 6;
inline bool CClanEventData::has_server_address() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CClanEventData::set_has_server_address() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CClanEventData::clear_has_server_address() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CClanEventData::clear_server_address() {
  if (server_address_ != &::google::protobuf::internal::kEmptyString) {
    server_address_->clear();
  }
  clear_has_server_address();
}
inline const ::std::string& CClanEventData::server_address() const {
  return *server_address_;
}
inline void CClanEventData::set_server_address(const ::std::string& value) {
  set_has_server_address();
  if (server_address_ == &::google::protobuf::internal::kEmptyString) {
    server_address_ = new ::std::string;
  }
  server_address_->assign(value);
}
inline void CClanEventData::set_server_address(const char* value) {
  set_has_server_address();
  if (server_address_ == &::google::protobuf::internal::kEmptyString) {
    server_address_ = new ::std::string;
  }
  server_address_->assign(value);
}
inline void CClanEventData::set_server_address(const char* value, size_t size) {
  set_has_server_address();
  if (server_address_ == &::google::protobuf::internal::kEmptyString) {
    server_address_ = new ::std::string;
  }
  server_address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CClanEventData::mutable_server_address() {
  set_has_server_address();
  if (server_address_ == &::google::protobuf::internal::kEmptyString) {
    server_address_ = new ::std::string;
  }
  return server_address_;
}
inline ::std::string* CClanEventData::release_server_address() {
  clear_has_server_address();
  if (server_address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_address_;
    server_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CClanEventData::set_allocated_server_address(::std::string* server_address) {
  if (server_address_ != &::google::protobuf::internal::kEmptyString) {
    delete server_address_;
  }
  if (server_address) {
    set_has_server_address();
    server_address_ = server_address;
  } else {
    clear_has_server_address();
    server_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string server_password = 7;
inline bool CClanEventData::has_server_password() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CClanEventData::set_has_server_password() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CClanEventData::clear_has_server_password() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CClanEventData::clear_server_password() {
  if (server_password_ != &::google::protobuf::internal::kEmptyString) {
    server_password_->clear();
  }
  clear_has_server_password();
}
inline const ::std::string& CClanEventData::server_password() const {
  return *server_password_;
}
inline void CClanEventData::set_server_password(const ::std::string& value) {
  set_has_server_password();
  if (server_password_ == &::google::protobuf::internal::kEmptyString) {
    server_password_ = new ::std::string;
  }
  server_password_->assign(value);
}
inline void CClanEventData::set_server_password(const char* value) {
  set_has_server_password();
  if (server_password_ == &::google::protobuf::internal::kEmptyString) {
    server_password_ = new ::std::string;
  }
  server_password_->assign(value);
}
inline void CClanEventData::set_server_password(const char* value, size_t size) {
  set_has_server_password();
  if (server_password_ == &::google::protobuf::internal::kEmptyString) {
    server_password_ = new ::std::string;
  }
  server_password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CClanEventData::mutable_server_password() {
  set_has_server_password();
  if (server_password_ == &::google::protobuf::internal::kEmptyString) {
    server_password_ = new ::std::string;
  }
  return server_password_;
}
inline ::std::string* CClanEventData::release_server_password() {
  clear_has_server_password();
  if (server_password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_password_;
    server_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CClanEventData::set_allocated_server_password(::std::string* server_password) {
  if (server_password_ != &::google::protobuf::internal::kEmptyString) {
    delete server_password_;
  }
  if (server_password) {
    set_has_server_password();
    server_password_ = server_password;
  } else {
    clear_has_server_password();
    server_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 rtime32_start_time = 8;
inline bool CClanEventData::has_rtime32_start_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CClanEventData::set_has_rtime32_start_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CClanEventData::clear_has_rtime32_start_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CClanEventData::clear_rtime32_start_time() {
  rtime32_start_time_ = 0u;
  clear_has_rtime32_start_time();
}
inline ::google::protobuf::uint32 CClanEventData::rtime32_start_time() const {
  return rtime32_start_time_;
}
inline void CClanEventData::set_rtime32_start_time(::google::protobuf::uint32 value) {
  set_has_rtime32_start_time();
  rtime32_start_time_ = value;
}

// optional uint32 rtime32_end_time = 9;
inline bool CClanEventData::has_rtime32_end_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CClanEventData::set_has_rtime32_end_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CClanEventData::clear_has_rtime32_end_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CClanEventData::clear_rtime32_end_time() {
  rtime32_end_time_ = 0u;
  clear_has_rtime32_end_time();
}
inline ::google::protobuf::uint32 CClanEventData::rtime32_end_time() const {
  return rtime32_end_time_;
}
inline void CClanEventData::set_rtime32_end_time(::google::protobuf::uint32 value) {
  set_has_rtime32_end_time();
  rtime32_end_time_ = value;
}

// optional int32 comment_count = 10;
inline bool CClanEventData::has_comment_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CClanEventData::set_has_comment_count() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CClanEventData::clear_has_comment_count() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CClanEventData::clear_comment_count() {
  comment_count_ = 0;
  clear_has_comment_count();
}
inline ::google::protobuf::int32 CClanEventData::comment_count() const {
  return comment_count_;
}
inline void CClanEventData::set_comment_count(::google::protobuf::int32 value) {
  set_has_comment_count();
  comment_count_ = value;
}

// optional fixed64 creator_steamid = 11;
inline bool CClanEventData::has_creator_steamid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CClanEventData::set_has_creator_steamid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CClanEventData::clear_has_creator_steamid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CClanEventData::clear_creator_steamid() {
  creator_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_creator_steamid();
}
inline ::google::protobuf::uint64 CClanEventData::creator_steamid() const {
  return creator_steamid_;
}
inline void CClanEventData::set_creator_steamid(::google::protobuf::uint64 value) {
  set_has_creator_steamid();
  creator_steamid_ = value;
}

// optional fixed64 last_update_steamid = 12;
inline bool CClanEventData::has_last_update_steamid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CClanEventData::set_has_last_update_steamid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CClanEventData::clear_has_last_update_steamid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CClanEventData::clear_last_update_steamid() {
  last_update_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_last_update_steamid();
}
inline ::google::protobuf::uint64 CClanEventData::last_update_steamid() const {
  return last_update_steamid_;
}
inline void CClanEventData::set_last_update_steamid(::google::protobuf::uint64 value) {
  set_has_last_update_steamid();
  last_update_steamid_ = value;
}

// optional string event_notes = 13;
inline bool CClanEventData::has_event_notes() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CClanEventData::set_has_event_notes() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CClanEventData::clear_has_event_notes() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CClanEventData::clear_event_notes() {
  if (event_notes_ != &::google::protobuf::internal::kEmptyString) {
    event_notes_->clear();
  }
  clear_has_event_notes();
}
inline const ::std::string& CClanEventData::event_notes() const {
  return *event_notes_;
}
inline void CClanEventData::set_event_notes(const ::std::string& value) {
  set_has_event_notes();
  if (event_notes_ == &::google::protobuf::internal::kEmptyString) {
    event_notes_ = new ::std::string;
  }
  event_notes_->assign(value);
}
inline void CClanEventData::set_event_notes(const char* value) {
  set_has_event_notes();
  if (event_notes_ == &::google::protobuf::internal::kEmptyString) {
    event_notes_ = new ::std::string;
  }
  event_notes_->assign(value);
}
inline void CClanEventData::set_event_notes(const char* value, size_t size) {
  set_has_event_notes();
  if (event_notes_ == &::google::protobuf::internal::kEmptyString) {
    event_notes_ = new ::std::string;
  }
  event_notes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CClanEventData::mutable_event_notes() {
  set_has_event_notes();
  if (event_notes_ == &::google::protobuf::internal::kEmptyString) {
    event_notes_ = new ::std::string;
  }
  return event_notes_;
}
inline ::std::string* CClanEventData::release_event_notes() {
  clear_has_event_notes();
  if (event_notes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = event_notes_;
    event_notes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CClanEventData::set_allocated_event_notes(::std::string* event_notes) {
  if (event_notes_ != &::google::protobuf::internal::kEmptyString) {
    delete event_notes_;
  }
  if (event_notes) {
    set_has_event_notes();
    event_notes_ = event_notes;
  } else {
    clear_has_event_notes();
    event_notes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string jsondata = 14;
inline bool CClanEventData::has_jsondata() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CClanEventData::set_has_jsondata() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CClanEventData::clear_has_jsondata() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CClanEventData::clear_jsondata() {
  if (jsondata_ != &::google::protobuf::internal::kEmptyString) {
    jsondata_->clear();
  }
  clear_has_jsondata();
}
inline const ::std::string& CClanEventData::jsondata() const {
  return *jsondata_;
}
inline void CClanEventData::set_jsondata(const ::std::string& value) {
  set_has_jsondata();
  if (jsondata_ == &::google::protobuf::internal::kEmptyString) {
    jsondata_ = new ::std::string;
  }
  jsondata_->assign(value);
}
inline void CClanEventData::set_jsondata(const char* value) {
  set_has_jsondata();
  if (jsondata_ == &::google::protobuf::internal::kEmptyString) {
    jsondata_ = new ::std::string;
  }
  jsondata_->assign(value);
}
inline void CClanEventData::set_jsondata(const char* value, size_t size) {
  set_has_jsondata();
  if (jsondata_ == &::google::protobuf::internal::kEmptyString) {
    jsondata_ = new ::std::string;
  }
  jsondata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CClanEventData::mutable_jsondata() {
  set_has_jsondata();
  if (jsondata_ == &::google::protobuf::internal::kEmptyString) {
    jsondata_ = new ::std::string;
  }
  return jsondata_;
}
inline ::std::string* CClanEventData::release_jsondata() {
  clear_has_jsondata();
  if (jsondata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = jsondata_;
    jsondata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CClanEventData::set_allocated_jsondata(::std::string* jsondata) {
  if (jsondata_ != &::google::protobuf::internal::kEmptyString) {
    delete jsondata_;
  }
  if (jsondata) {
    set_has_jsondata();
    jsondata_ = jsondata;
  } else {
    clear_has_jsondata();
    jsondata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .CCommunity_ClanAnnouncementInfo announcement_body = 15;
inline bool CClanEventData::has_announcement_body() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CClanEventData::set_has_announcement_body() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CClanEventData::clear_has_announcement_body() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CClanEventData::clear_announcement_body() {
  if (announcement_body_ != NULL) announcement_body_->::CCommunity_ClanAnnouncementInfo::Clear();
  clear_has_announcement_body();
}
inline const ::CCommunity_ClanAnnouncementInfo& CClanEventData::announcement_body() const {
  return announcement_body_ != NULL ? *announcement_body_ : *default_instance_->announcement_body_;
}
inline ::CCommunity_ClanAnnouncementInfo* CClanEventData::mutable_announcement_body() {
  set_has_announcement_body();
  if (announcement_body_ == NULL) announcement_body_ = new ::CCommunity_ClanAnnouncementInfo;
  return announcement_body_;
}
inline ::CCommunity_ClanAnnouncementInfo* CClanEventData::release_announcement_body() {
  clear_has_announcement_body();
  ::CCommunity_ClanAnnouncementInfo* temp = announcement_body_;
  announcement_body_ = NULL;
  return temp;
}
inline void CClanEventData::set_allocated_announcement_body(::CCommunity_ClanAnnouncementInfo* announcement_body) {
  delete announcement_body_;
  announcement_body_ = announcement_body;
  if (announcement_body) {
    set_has_announcement_body();
  } else {
    clear_has_announcement_body();
  }
}

// optional bool published = 16;
inline bool CClanEventData::has_published() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CClanEventData::set_has_published() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CClanEventData::clear_has_published() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CClanEventData::clear_published() {
  published_ = false;
  clear_has_published();
}
inline bool CClanEventData::published() const {
  return published_;
}
inline void CClanEventData::set_published(bool value) {
  set_has_published();
  published_ = value;
}

// optional bool hidden = 17;
inline bool CClanEventData::has_hidden() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CClanEventData::set_has_hidden() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CClanEventData::clear_has_hidden() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CClanEventData::clear_hidden() {
  hidden_ = false;
  clear_has_hidden();
}
inline bool CClanEventData::hidden() const {
  return hidden_;
}
inline void CClanEventData::set_hidden(bool value) {
  set_has_hidden();
  hidden_ = value;
}

// optional uint32 rtime32_visibility_start = 18;
inline bool CClanEventData::has_rtime32_visibility_start() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CClanEventData::set_has_rtime32_visibility_start() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CClanEventData::clear_has_rtime32_visibility_start() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CClanEventData::clear_rtime32_visibility_start() {
  rtime32_visibility_start_ = 0u;
  clear_has_rtime32_visibility_start();
}
inline ::google::protobuf::uint32 CClanEventData::rtime32_visibility_start() const {
  return rtime32_visibility_start_;
}
inline void CClanEventData::set_rtime32_visibility_start(::google::protobuf::uint32 value) {
  set_has_rtime32_visibility_start();
  rtime32_visibility_start_ = value;
}

// optional uint32 rtime32_visibility_end = 19;
inline bool CClanEventData::has_rtime32_visibility_end() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CClanEventData::set_has_rtime32_visibility_end() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CClanEventData::clear_has_rtime32_visibility_end() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CClanEventData::clear_rtime32_visibility_end() {
  rtime32_visibility_end_ = 0u;
  clear_has_rtime32_visibility_end();
}
inline ::google::protobuf::uint32 CClanEventData::rtime32_visibility_end() const {
  return rtime32_visibility_end_;
}
inline void CClanEventData::set_rtime32_visibility_end(::google::protobuf::uint32 value) {
  set_has_rtime32_visibility_end();
  rtime32_visibility_end_ = value;
}

// optional uint32 broadcaster_accountid = 20;
inline bool CClanEventData::has_broadcaster_accountid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CClanEventData::set_has_broadcaster_accountid() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CClanEventData::clear_has_broadcaster_accountid() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CClanEventData::clear_broadcaster_accountid() {
  broadcaster_accountid_ = 0u;
  clear_has_broadcaster_accountid();
}
inline ::google::protobuf::uint32 CClanEventData::broadcaster_accountid() const {
  return broadcaster_accountid_;
}
inline void CClanEventData::set_broadcaster_accountid(::google::protobuf::uint32 value) {
  set_has_broadcaster_accountid();
  broadcaster_accountid_ = value;
}

// optional uint32 follower_count = 21;
inline bool CClanEventData::has_follower_count() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CClanEventData::set_has_follower_count() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CClanEventData::clear_has_follower_count() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CClanEventData::clear_follower_count() {
  follower_count_ = 0u;
  clear_has_follower_count();
}
inline ::google::protobuf::uint32 CClanEventData::follower_count() const {
  return follower_count_;
}
inline void CClanEventData::set_follower_count(::google::protobuf::uint32 value) {
  set_has_follower_count();
  follower_count_ = value;
}

// optional uint32 ignore_count = 22;
inline bool CClanEventData::has_ignore_count() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CClanEventData::set_has_ignore_count() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CClanEventData::clear_has_ignore_count() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CClanEventData::clear_ignore_count() {
  ignore_count_ = 0u;
  clear_has_ignore_count();
}
inline ::google::protobuf::uint32 CClanEventData::ignore_count() const {
  return ignore_count_;
}
inline void CClanEventData::set_ignore_count(::google::protobuf::uint32 value) {
  set_has_ignore_count();
  ignore_count_ = value;
}

// optional fixed64 forum_topic_id = 23;
inline bool CClanEventData::has_forum_topic_id() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CClanEventData::set_has_forum_topic_id() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CClanEventData::clear_has_forum_topic_id() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CClanEventData::clear_forum_topic_id() {
  forum_topic_id_ = GOOGLE_ULONGLONG(0);
  clear_has_forum_topic_id();
}
inline ::google::protobuf::uint64 CClanEventData::forum_topic_id() const {
  return forum_topic_id_;
}
inline void CClanEventData::set_forum_topic_id(::google::protobuf::uint64 value) {
  set_has_forum_topic_id();
  forum_topic_id_ = value;
}

// optional uint32 rtime32_last_modified = 24;
inline bool CClanEventData::has_rtime32_last_modified() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CClanEventData::set_has_rtime32_last_modified() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CClanEventData::clear_has_rtime32_last_modified() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CClanEventData::clear_rtime32_last_modified() {
  rtime32_last_modified_ = 0u;
  clear_has_rtime32_last_modified();
}
inline ::google::protobuf::uint32 CClanEventData::rtime32_last_modified() const {
  return rtime32_last_modified_;
}
inline void CClanEventData::set_rtime32_last_modified(::google::protobuf::uint32 value) {
  set_has_rtime32_last_modified();
  rtime32_last_modified_ = value;
}

// optional fixed64 news_post_gid = 25;
inline bool CClanEventData::has_news_post_gid() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CClanEventData::set_has_news_post_gid() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CClanEventData::clear_has_news_post_gid() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CClanEventData::clear_news_post_gid() {
  news_post_gid_ = GOOGLE_ULONGLONG(0);
  clear_has_news_post_gid();
}
inline ::google::protobuf::uint64 CClanEventData::news_post_gid() const {
  return news_post_gid_;
}
inline void CClanEventData::set_news_post_gid(::google::protobuf::uint64 value) {
  set_has_news_post_gid();
  news_post_gid_ = value;
}

// optional uint32 rtime_mod_reviewed = 26;
inline bool CClanEventData::has_rtime_mod_reviewed() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CClanEventData::set_has_rtime_mod_reviewed() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CClanEventData::clear_has_rtime_mod_reviewed() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CClanEventData::clear_rtime_mod_reviewed() {
  rtime_mod_reviewed_ = 0u;
  clear_has_rtime_mod_reviewed();
}
inline ::google::protobuf::uint32 CClanEventData::rtime_mod_reviewed() const {
  return rtime_mod_reviewed_;
}
inline void CClanEventData::set_rtime_mod_reviewed(::google::protobuf::uint32 value) {
  set_has_rtime_mod_reviewed();
  rtime_mod_reviewed_ = value;
}

// optional uint32 featured_app_tagid = 27;
inline bool CClanEventData::has_featured_app_tagid() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CClanEventData::set_has_featured_app_tagid() {
  _has_bits_[0] |= 0x04000000u;
}
inline void CClanEventData::clear_has_featured_app_tagid() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void CClanEventData::clear_featured_app_tagid() {
  featured_app_tagid_ = 0u;
  clear_has_featured_app_tagid();
}
inline ::google::protobuf::uint32 CClanEventData::featured_app_tagid() const {
  return featured_app_tagid_;
}
inline void CClanEventData::set_featured_app_tagid(::google::protobuf::uint32 value) {
  set_has_featured_app_tagid();
  featured_app_tagid_ = value;
}

// repeated uint32 referenced_appids = 28;
inline int CClanEventData::referenced_appids_size() const {
  return referenced_appids_.size();
}
inline void CClanEventData::clear_referenced_appids() {
  referenced_appids_.Clear();
}
inline ::google::protobuf::uint32 CClanEventData::referenced_appids(int index) const {
  return referenced_appids_.Get(index);
}
inline void CClanEventData::set_referenced_appids(int index, ::google::protobuf::uint32 value) {
  referenced_appids_.Set(index, value);
}
inline void CClanEventData::add_referenced_appids(::google::protobuf::uint32 value) {
  referenced_appids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CClanEventData::referenced_appids() const {
  return referenced_appids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CClanEventData::mutable_referenced_appids() {
  return &referenced_appids_;
}

// optional uint32 build_id = 29;
inline bool CClanEventData::has_build_id() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CClanEventData::set_has_build_id() {
  _has_bits_[0] |= 0x10000000u;
}
inline void CClanEventData::clear_has_build_id() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void CClanEventData::clear_build_id() {
  build_id_ = 0u;
  clear_has_build_id();
}
inline ::google::protobuf::uint32 CClanEventData::build_id() const {
  return build_id_;
}
inline void CClanEventData::set_build_id(::google::protobuf::uint32 value) {
  set_has_build_id();
  build_id_ = value;
}

// optional string build_branch = 30;
inline bool CClanEventData::has_build_branch() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CClanEventData::set_has_build_branch() {
  _has_bits_[0] |= 0x20000000u;
}
inline void CClanEventData::clear_has_build_branch() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void CClanEventData::clear_build_branch() {
  if (build_branch_ != &::google::protobuf::internal::kEmptyString) {
    build_branch_->clear();
  }
  clear_has_build_branch();
}
inline const ::std::string& CClanEventData::build_branch() const {
  return *build_branch_;
}
inline void CClanEventData::set_build_branch(const ::std::string& value) {
  set_has_build_branch();
  if (build_branch_ == &::google::protobuf::internal::kEmptyString) {
    build_branch_ = new ::std::string;
  }
  build_branch_->assign(value);
}
inline void CClanEventData::set_build_branch(const char* value) {
  set_has_build_branch();
  if (build_branch_ == &::google::protobuf::internal::kEmptyString) {
    build_branch_ = new ::std::string;
  }
  build_branch_->assign(value);
}
inline void CClanEventData::set_build_branch(const char* value, size_t size) {
  set_has_build_branch();
  if (build_branch_ == &::google::protobuf::internal::kEmptyString) {
    build_branch_ = new ::std::string;
  }
  build_branch_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CClanEventData::mutable_build_branch() {
  set_has_build_branch();
  if (build_branch_ == &::google::protobuf::internal::kEmptyString) {
    build_branch_ = new ::std::string;
  }
  return build_branch_;
}
inline ::std::string* CClanEventData::release_build_branch() {
  clear_has_build_branch();
  if (build_branch_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = build_branch_;
    build_branch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CClanEventData::set_allocated_build_branch(::std::string* build_branch) {
  if (build_branch_ != &::google::protobuf::internal::kEmptyString) {
    delete build_branch_;
  }
  if (build_branch) {
    set_has_build_branch();
    build_branch_ = build_branch;
  } else {
    clear_has_build_branch();
    build_branch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CBilling_Address

// optional string first_name = 1;
inline bool CBilling_Address::has_first_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CBilling_Address::set_has_first_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CBilling_Address::clear_has_first_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CBilling_Address::clear_first_name() {
  if (first_name_ != &::google::protobuf::internal::kEmptyString) {
    first_name_->clear();
  }
  clear_has_first_name();
}
inline const ::std::string& CBilling_Address::first_name() const {
  return *first_name_;
}
inline void CBilling_Address::set_first_name(const ::std::string& value) {
  set_has_first_name();
  if (first_name_ == &::google::protobuf::internal::kEmptyString) {
    first_name_ = new ::std::string;
  }
  first_name_->assign(value);
}
inline void CBilling_Address::set_first_name(const char* value) {
  set_has_first_name();
  if (first_name_ == &::google::protobuf::internal::kEmptyString) {
    first_name_ = new ::std::string;
  }
  first_name_->assign(value);
}
inline void CBilling_Address::set_first_name(const char* value, size_t size) {
  set_has_first_name();
  if (first_name_ == &::google::protobuf::internal::kEmptyString) {
    first_name_ = new ::std::string;
  }
  first_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CBilling_Address::mutable_first_name() {
  set_has_first_name();
  if (first_name_ == &::google::protobuf::internal::kEmptyString) {
    first_name_ = new ::std::string;
  }
  return first_name_;
}
inline ::std::string* CBilling_Address::release_first_name() {
  clear_has_first_name();
  if (first_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = first_name_;
    first_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CBilling_Address::set_allocated_first_name(::std::string* first_name) {
  if (first_name_ != &::google::protobuf::internal::kEmptyString) {
    delete first_name_;
  }
  if (first_name) {
    set_has_first_name();
    first_name_ = first_name;
  } else {
    clear_has_first_name();
    first_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string last_name = 2;
inline bool CBilling_Address::has_last_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CBilling_Address::set_has_last_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CBilling_Address::clear_has_last_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CBilling_Address::clear_last_name() {
  if (last_name_ != &::google::protobuf::internal::kEmptyString) {
    last_name_->clear();
  }
  clear_has_last_name();
}
inline const ::std::string& CBilling_Address::last_name() const {
  return *last_name_;
}
inline void CBilling_Address::set_last_name(const ::std::string& value) {
  set_has_last_name();
  if (last_name_ == &::google::protobuf::internal::kEmptyString) {
    last_name_ = new ::std::string;
  }
  last_name_->assign(value);
}
inline void CBilling_Address::set_last_name(const char* value) {
  set_has_last_name();
  if (last_name_ == &::google::protobuf::internal::kEmptyString) {
    last_name_ = new ::std::string;
  }
  last_name_->assign(value);
}
inline void CBilling_Address::set_last_name(const char* value, size_t size) {
  set_has_last_name();
  if (last_name_ == &::google::protobuf::internal::kEmptyString) {
    last_name_ = new ::std::string;
  }
  last_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CBilling_Address::mutable_last_name() {
  set_has_last_name();
  if (last_name_ == &::google::protobuf::internal::kEmptyString) {
    last_name_ = new ::std::string;
  }
  return last_name_;
}
inline ::std::string* CBilling_Address::release_last_name() {
  clear_has_last_name();
  if (last_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = last_name_;
    last_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CBilling_Address::set_allocated_last_name(::std::string* last_name) {
  if (last_name_ != &::google::protobuf::internal::kEmptyString) {
    delete last_name_;
  }
  if (last_name) {
    set_has_last_name();
    last_name_ = last_name;
  } else {
    clear_has_last_name();
    last_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string address1 = 3;
inline bool CBilling_Address::has_address1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CBilling_Address::set_has_address1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CBilling_Address::clear_has_address1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CBilling_Address::clear_address1() {
  if (address1_ != &::google::protobuf::internal::kEmptyString) {
    address1_->clear();
  }
  clear_has_address1();
}
inline const ::std::string& CBilling_Address::address1() const {
  return *address1_;
}
inline void CBilling_Address::set_address1(const ::std::string& value) {
  set_has_address1();
  if (address1_ == &::google::protobuf::internal::kEmptyString) {
    address1_ = new ::std::string;
  }
  address1_->assign(value);
}
inline void CBilling_Address::set_address1(const char* value) {
  set_has_address1();
  if (address1_ == &::google::protobuf::internal::kEmptyString) {
    address1_ = new ::std::string;
  }
  address1_->assign(value);
}
inline void CBilling_Address::set_address1(const char* value, size_t size) {
  set_has_address1();
  if (address1_ == &::google::protobuf::internal::kEmptyString) {
    address1_ = new ::std::string;
  }
  address1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CBilling_Address::mutable_address1() {
  set_has_address1();
  if (address1_ == &::google::protobuf::internal::kEmptyString) {
    address1_ = new ::std::string;
  }
  return address1_;
}
inline ::std::string* CBilling_Address::release_address1() {
  clear_has_address1();
  if (address1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address1_;
    address1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CBilling_Address::set_allocated_address1(::std::string* address1) {
  if (address1_ != &::google::protobuf::internal::kEmptyString) {
    delete address1_;
  }
  if (address1) {
    set_has_address1();
    address1_ = address1;
  } else {
    clear_has_address1();
    address1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string address2 = 4;
inline bool CBilling_Address::has_address2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CBilling_Address::set_has_address2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CBilling_Address::clear_has_address2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CBilling_Address::clear_address2() {
  if (address2_ != &::google::protobuf::internal::kEmptyString) {
    address2_->clear();
  }
  clear_has_address2();
}
inline const ::std::string& CBilling_Address::address2() const {
  return *address2_;
}
inline void CBilling_Address::set_address2(const ::std::string& value) {
  set_has_address2();
  if (address2_ == &::google::protobuf::internal::kEmptyString) {
    address2_ = new ::std::string;
  }
  address2_->assign(value);
}
inline void CBilling_Address::set_address2(const char* value) {
  set_has_address2();
  if (address2_ == &::google::protobuf::internal::kEmptyString) {
    address2_ = new ::std::string;
  }
  address2_->assign(value);
}
inline void CBilling_Address::set_address2(const char* value, size_t size) {
  set_has_address2();
  if (address2_ == &::google::protobuf::internal::kEmptyString) {
    address2_ = new ::std::string;
  }
  address2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CBilling_Address::mutable_address2() {
  set_has_address2();
  if (address2_ == &::google::protobuf::internal::kEmptyString) {
    address2_ = new ::std::string;
  }
  return address2_;
}
inline ::std::string* CBilling_Address::release_address2() {
  clear_has_address2();
  if (address2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address2_;
    address2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CBilling_Address::set_allocated_address2(::std::string* address2) {
  if (address2_ != &::google::protobuf::internal::kEmptyString) {
    delete address2_;
  }
  if (address2) {
    set_has_address2();
    address2_ = address2;
  } else {
    clear_has_address2();
    address2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string city = 5;
inline bool CBilling_Address::has_city() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CBilling_Address::set_has_city() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CBilling_Address::clear_has_city() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CBilling_Address::clear_city() {
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    city_->clear();
  }
  clear_has_city();
}
inline const ::std::string& CBilling_Address::city() const {
  return *city_;
}
inline void CBilling_Address::set_city(const ::std::string& value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(value);
}
inline void CBilling_Address::set_city(const char* value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(value);
}
inline void CBilling_Address::set_city(const char* value, size_t size) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CBilling_Address::mutable_city() {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  return city_;
}
inline ::std::string* CBilling_Address::release_city() {
  clear_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = city_;
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CBilling_Address::set_allocated_city(::std::string* city) {
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (city) {
    set_has_city();
    city_ = city;
  } else {
    clear_has_city();
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string us_state = 6;
inline bool CBilling_Address::has_us_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CBilling_Address::set_has_us_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CBilling_Address::clear_has_us_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CBilling_Address::clear_us_state() {
  if (us_state_ != &::google::protobuf::internal::kEmptyString) {
    us_state_->clear();
  }
  clear_has_us_state();
}
inline const ::std::string& CBilling_Address::us_state() const {
  return *us_state_;
}
inline void CBilling_Address::set_us_state(const ::std::string& value) {
  set_has_us_state();
  if (us_state_ == &::google::protobuf::internal::kEmptyString) {
    us_state_ = new ::std::string;
  }
  us_state_->assign(value);
}
inline void CBilling_Address::set_us_state(const char* value) {
  set_has_us_state();
  if (us_state_ == &::google::protobuf::internal::kEmptyString) {
    us_state_ = new ::std::string;
  }
  us_state_->assign(value);
}
inline void CBilling_Address::set_us_state(const char* value, size_t size) {
  set_has_us_state();
  if (us_state_ == &::google::protobuf::internal::kEmptyString) {
    us_state_ = new ::std::string;
  }
  us_state_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CBilling_Address::mutable_us_state() {
  set_has_us_state();
  if (us_state_ == &::google::protobuf::internal::kEmptyString) {
    us_state_ = new ::std::string;
  }
  return us_state_;
}
inline ::std::string* CBilling_Address::release_us_state() {
  clear_has_us_state();
  if (us_state_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = us_state_;
    us_state_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CBilling_Address::set_allocated_us_state(::std::string* us_state) {
  if (us_state_ != &::google::protobuf::internal::kEmptyString) {
    delete us_state_;
  }
  if (us_state) {
    set_has_us_state();
    us_state_ = us_state;
  } else {
    clear_has_us_state();
    us_state_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string country_code = 7;
inline bool CBilling_Address::has_country_code() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CBilling_Address::set_has_country_code() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CBilling_Address::clear_has_country_code() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CBilling_Address::clear_country_code() {
  if (country_code_ != &::google::protobuf::internal::kEmptyString) {
    country_code_->clear();
  }
  clear_has_country_code();
}
inline const ::std::string& CBilling_Address::country_code() const {
  return *country_code_;
}
inline void CBilling_Address::set_country_code(const ::std::string& value) {
  set_has_country_code();
  if (country_code_ == &::google::protobuf::internal::kEmptyString) {
    country_code_ = new ::std::string;
  }
  country_code_->assign(value);
}
inline void CBilling_Address::set_country_code(const char* value) {
  set_has_country_code();
  if (country_code_ == &::google::protobuf::internal::kEmptyString) {
    country_code_ = new ::std::string;
  }
  country_code_->assign(value);
}
inline void CBilling_Address::set_country_code(const char* value, size_t size) {
  set_has_country_code();
  if (country_code_ == &::google::protobuf::internal::kEmptyString) {
    country_code_ = new ::std::string;
  }
  country_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CBilling_Address::mutable_country_code() {
  set_has_country_code();
  if (country_code_ == &::google::protobuf::internal::kEmptyString) {
    country_code_ = new ::std::string;
  }
  return country_code_;
}
inline ::std::string* CBilling_Address::release_country_code() {
  clear_has_country_code();
  if (country_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = country_code_;
    country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CBilling_Address::set_allocated_country_code(::std::string* country_code) {
  if (country_code_ != &::google::protobuf::internal::kEmptyString) {
    delete country_code_;
  }
  if (country_code) {
    set_has_country_code();
    country_code_ = country_code;
  } else {
    clear_has_country_code();
    country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string postcode = 8;
inline bool CBilling_Address::has_postcode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CBilling_Address::set_has_postcode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CBilling_Address::clear_has_postcode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CBilling_Address::clear_postcode() {
  if (postcode_ != &::google::protobuf::internal::kEmptyString) {
    postcode_->clear();
  }
  clear_has_postcode();
}
inline const ::std::string& CBilling_Address::postcode() const {
  return *postcode_;
}
inline void CBilling_Address::set_postcode(const ::std::string& value) {
  set_has_postcode();
  if (postcode_ == &::google::protobuf::internal::kEmptyString) {
    postcode_ = new ::std::string;
  }
  postcode_->assign(value);
}
inline void CBilling_Address::set_postcode(const char* value) {
  set_has_postcode();
  if (postcode_ == &::google::protobuf::internal::kEmptyString) {
    postcode_ = new ::std::string;
  }
  postcode_->assign(value);
}
inline void CBilling_Address::set_postcode(const char* value, size_t size) {
  set_has_postcode();
  if (postcode_ == &::google::protobuf::internal::kEmptyString) {
    postcode_ = new ::std::string;
  }
  postcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CBilling_Address::mutable_postcode() {
  set_has_postcode();
  if (postcode_ == &::google::protobuf::internal::kEmptyString) {
    postcode_ = new ::std::string;
  }
  return postcode_;
}
inline ::std::string* CBilling_Address::release_postcode() {
  clear_has_postcode();
  if (postcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = postcode_;
    postcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CBilling_Address::set_allocated_postcode(::std::string* postcode) {
  if (postcode_ != &::google::protobuf::internal::kEmptyString) {
    delete postcode_;
  }
  if (postcode) {
    set_has_postcode();
    postcode_ = postcode;
  } else {
    clear_has_postcode();
    postcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 zip_plus4 = 9;
inline bool CBilling_Address::has_zip_plus4() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CBilling_Address::set_has_zip_plus4() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CBilling_Address::clear_has_zip_plus4() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CBilling_Address::clear_zip_plus4() {
  zip_plus4_ = 0;
  clear_has_zip_plus4();
}
inline ::google::protobuf::int32 CBilling_Address::zip_plus4() const {
  return zip_plus4_;
}
inline void CBilling_Address::set_zip_plus4(::google::protobuf::int32 value) {
  set_has_zip_plus4();
  zip_plus4_ = value;
}

// optional string phone = 10;
inline bool CBilling_Address::has_phone() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CBilling_Address::set_has_phone() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CBilling_Address::clear_has_phone() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CBilling_Address::clear_phone() {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    phone_->clear();
  }
  clear_has_phone();
}
inline const ::std::string& CBilling_Address::phone() const {
  return *phone_;
}
inline void CBilling_Address::set_phone(const ::std::string& value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void CBilling_Address::set_phone(const char* value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void CBilling_Address::set_phone(const char* value, size_t size) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CBilling_Address::mutable_phone() {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  return phone_;
}
inline ::std::string* CBilling_Address::release_phone() {
  clear_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phone_;
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CBilling_Address::set_allocated_phone(::std::string* phone) {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (phone) {
    set_has_phone();
    phone_ = phone;
  } else {
    clear_has_phone();
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CPackageReservationStatus

// optional uint32 packageid = 1;
inline bool CPackageReservationStatus::has_packageid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPackageReservationStatus::set_has_packageid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CPackageReservationStatus::clear_has_packageid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CPackageReservationStatus::clear_packageid() {
  packageid_ = 0u;
  clear_has_packageid();
}
inline ::google::protobuf::uint32 CPackageReservationStatus::packageid() const {
  return packageid_;
}
inline void CPackageReservationStatus::set_packageid(::google::protobuf::uint32 value) {
  set_has_packageid();
  packageid_ = value;
}

// optional int32 reservation_state = 2;
inline bool CPackageReservationStatus::has_reservation_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPackageReservationStatus::set_has_reservation_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CPackageReservationStatus::clear_has_reservation_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CPackageReservationStatus::clear_reservation_state() {
  reservation_state_ = 0;
  clear_has_reservation_state();
}
inline ::google::protobuf::int32 CPackageReservationStatus::reservation_state() const {
  return reservation_state_;
}
inline void CPackageReservationStatus::set_reservation_state(::google::protobuf::int32 value) {
  set_has_reservation_state();
  reservation_state_ = value;
}

// optional int32 queue_position = 3;
inline bool CPackageReservationStatus::has_queue_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CPackageReservationStatus::set_has_queue_position() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CPackageReservationStatus::clear_has_queue_position() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CPackageReservationStatus::clear_queue_position() {
  queue_position_ = 0;
  clear_has_queue_position();
}
inline ::google::protobuf::int32 CPackageReservationStatus::queue_position() const {
  return queue_position_;
}
inline void CPackageReservationStatus::set_queue_position(::google::protobuf::int32 value) {
  set_has_queue_position();
  queue_position_ = value;
}

// optional int32 total_queue_size = 4;
inline bool CPackageReservationStatus::has_total_queue_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CPackageReservationStatus::set_has_total_queue_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CPackageReservationStatus::clear_has_total_queue_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CPackageReservationStatus::clear_total_queue_size() {
  total_queue_size_ = 0;
  clear_has_total_queue_size();
}
inline ::google::protobuf::int32 CPackageReservationStatus::total_queue_size() const {
  return total_queue_size_;
}
inline void CPackageReservationStatus::set_total_queue_size(::google::protobuf::int32 value) {
  set_has_total_queue_size();
  total_queue_size_ = value;
}

// optional string reservation_country_code = 5;
inline bool CPackageReservationStatus::has_reservation_country_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CPackageReservationStatus::set_has_reservation_country_code() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CPackageReservationStatus::clear_has_reservation_country_code() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CPackageReservationStatus::clear_reservation_country_code() {
  if (reservation_country_code_ != &::google::protobuf::internal::kEmptyString) {
    reservation_country_code_->clear();
  }
  clear_has_reservation_country_code();
}
inline const ::std::string& CPackageReservationStatus::reservation_country_code() const {
  return *reservation_country_code_;
}
inline void CPackageReservationStatus::set_reservation_country_code(const ::std::string& value) {
  set_has_reservation_country_code();
  if (reservation_country_code_ == &::google::protobuf::internal::kEmptyString) {
    reservation_country_code_ = new ::std::string;
  }
  reservation_country_code_->assign(value);
}
inline void CPackageReservationStatus::set_reservation_country_code(const char* value) {
  set_has_reservation_country_code();
  if (reservation_country_code_ == &::google::protobuf::internal::kEmptyString) {
    reservation_country_code_ = new ::std::string;
  }
  reservation_country_code_->assign(value);
}
inline void CPackageReservationStatus::set_reservation_country_code(const char* value, size_t size) {
  set_has_reservation_country_code();
  if (reservation_country_code_ == &::google::protobuf::internal::kEmptyString) {
    reservation_country_code_ = new ::std::string;
  }
  reservation_country_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CPackageReservationStatus::mutable_reservation_country_code() {
  set_has_reservation_country_code();
  if (reservation_country_code_ == &::google::protobuf::internal::kEmptyString) {
    reservation_country_code_ = new ::std::string;
  }
  return reservation_country_code_;
}
inline ::std::string* CPackageReservationStatus::release_reservation_country_code() {
  clear_has_reservation_country_code();
  if (reservation_country_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reservation_country_code_;
    reservation_country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CPackageReservationStatus::set_allocated_reservation_country_code(::std::string* reservation_country_code) {
  if (reservation_country_code_ != &::google::protobuf::internal::kEmptyString) {
    delete reservation_country_code_;
  }
  if (reservation_country_code) {
    set_has_reservation_country_code();
    reservation_country_code_ = reservation_country_code;
  } else {
    clear_has_reservation_country_code();
    reservation_country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool expired = 6;
inline bool CPackageReservationStatus::has_expired() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CPackageReservationStatus::set_has_expired() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CPackageReservationStatus::clear_has_expired() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CPackageReservationStatus::clear_expired() {
  expired_ = false;
  clear_has_expired();
}
inline bool CPackageReservationStatus::expired() const {
  return expired_;
}
inline void CPackageReservationStatus::set_expired(bool value) {
  set_has_expired();
  expired_ = value;
}

// optional uint32 time_expires = 7;
inline bool CPackageReservationStatus::has_time_expires() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CPackageReservationStatus::set_has_time_expires() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CPackageReservationStatus::clear_has_time_expires() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CPackageReservationStatus::clear_time_expires() {
  time_expires_ = 0u;
  clear_has_time_expires();
}
inline ::google::protobuf::uint32 CPackageReservationStatus::time_expires() const {
  return time_expires_;
}
inline void CPackageReservationStatus::set_time_expires(::google::protobuf::uint32 value) {
  set_has_time_expires();
  time_expires_ = value;
}

// optional uint32 time_reserved = 8;
inline bool CPackageReservationStatus::has_time_reserved() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CPackageReservationStatus::set_has_time_reserved() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CPackageReservationStatus::clear_has_time_reserved() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CPackageReservationStatus::clear_time_reserved() {
  time_reserved_ = 0u;
  clear_has_time_reserved();
}
inline ::google::protobuf::uint32 CPackageReservationStatus::time_reserved() const {
  return time_reserved_;
}
inline void CPackageReservationStatus::set_time_reserved(::google::protobuf::uint32 value) {
  set_has_time_reserved();
  time_reserved_ = value;
}

// -------------------------------------------------------------------

// CMsgKeyValuePair

// optional string name = 1;
inline bool CMsgKeyValuePair::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgKeyValuePair::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgKeyValuePair::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgKeyValuePair::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CMsgKeyValuePair::name() const {
  return *name_;
}
inline void CMsgKeyValuePair::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CMsgKeyValuePair::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CMsgKeyValuePair::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgKeyValuePair::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CMsgKeyValuePair::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgKeyValuePair::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string value = 2;
inline bool CMsgKeyValuePair::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgKeyValuePair::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgKeyValuePair::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgKeyValuePair::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& CMsgKeyValuePair::value() const {
  return *value_;
}
inline void CMsgKeyValuePair::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CMsgKeyValuePair::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CMsgKeyValuePair::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgKeyValuePair::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* CMsgKeyValuePair::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgKeyValuePair::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgKeyValueSet

// repeated .CMsgKeyValuePair pairs = 1;
inline int CMsgKeyValueSet::pairs_size() const {
  return pairs_.size();
}
inline void CMsgKeyValueSet::clear_pairs() {
  pairs_.Clear();
}
inline const ::CMsgKeyValuePair& CMsgKeyValueSet::pairs(int index) const {
  return pairs_.Get(index);
}
inline ::CMsgKeyValuePair* CMsgKeyValueSet::mutable_pairs(int index) {
  return pairs_.Mutable(index);
}
inline ::CMsgKeyValuePair* CMsgKeyValueSet::add_pairs() {
  return pairs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgKeyValuePair >&
CMsgKeyValueSet::pairs() const {
  return pairs_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgKeyValuePair >*
CMsgKeyValueSet::mutable_pairs() {
  return &pairs_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EBanContentCheckResult>() {
  return ::EBanContentCheckResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EProtoClanEventType>() {
  return ::EProtoClanEventType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PartnerEventNotificationType>() {
  return ::PartnerEventNotificationType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_steammessages_5fbase_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientserver.proto

#ifndef PROTOBUF_steammessages_5fclientserver_2eproto__INCLUDED
#define PROTOBUF_steammessages_5fclientserver_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
#include "encrypted_app_ticket.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

class CMsgClientRegisterAuthTicketWithCM;
class CMsgClientTicketAuthComplete;
class CMsgClientCMList;
class CMsgClientP2PConnectionInfo;
class CMsgClientP2PConnectionFailInfo;
class CMsgClientNetworkingCertRequest;
class CMsgClientNetworkingCertReply;
class CMsgClientNetworkingMobileCertRequest;
class CMsgClientNetworkingMobileCertReply;
class CMsgClientGetAppOwnershipTicket;
class CMsgClientGetAppOwnershipTicketResponse;
class CMsgClientSessionToken;
class CMsgClientGameConnectTokens;
class CMsgClientGamesPlayed;
class CMsgClientGamesPlayed_GamePlayed;
class CMsgGSApprove;
class CMsgGSDeny;
class CMsgGSKick;
class CMsgClientAuthList;
class CMsgClientAuthListAck;
class CMsgClientLicenseList;
class CMsgClientLicenseList_License;
class CMsgClientIsLimitedAccount;
class CMsgClientRequestedClientStats;
class CMsgClientRequestedClientStats_StatsToSend;
class CMsgClientStat2;
class CMsgClientStat2_StatDetail;
class CMsgClientInviteToGame;
class CMsgClientChatInvite;
class CMsgClientConnectionStats;
class CMsgClientConnectionStats_Stats_Logon;
class CMsgClientConnectionStats_Stats_UDP;
class CMsgClientConnectionStats_Stats_VConn;
class CMsgClientServersAvailable;
class CMsgClientServersAvailable_Server_Types_Available;
class CMsgClientReportOverlayDetourFailure;
class CMsgClientRequestEncryptedAppTicket;
class CMsgClientRequestEncryptedAppTicketResponse;
class CMsgClientWalletInfoUpdate;
class CMsgClientAMGetClanOfficers;
class CMsgClientAMGetClanOfficersResponse;
class CMsgClientAMGetPersonaNameHistory;
class CMsgClientAMGetPersonaNameHistory_IdInstance;
class CMsgClientAMGetPersonaNameHistoryResponse;
class CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance;
class CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance;
class CMsgClientDeregisterWithServer;
class CMsgClientClanState;
class CMsgClientClanState_NameInfo;
class CMsgClientClanState_UserCounts;
class CMsgClientClanState_Event;

// ===================================================================

class CMsgClientRegisterAuthTicketWithCM : public ::google::protobuf::Message {
 public:
  CMsgClientRegisterAuthTicketWithCM();
  virtual ~CMsgClientRegisterAuthTicketWithCM();

  CMsgClientRegisterAuthTicketWithCM(const CMsgClientRegisterAuthTicketWithCM& from);

  inline CMsgClientRegisterAuthTicketWithCM& operator=(const CMsgClientRegisterAuthTicketWithCM& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientRegisterAuthTicketWithCM& default_instance();

  void Swap(CMsgClientRegisterAuthTicketWithCM* other);

  // implements Message ----------------------------------------------

  CMsgClientRegisterAuthTicketWithCM* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientRegisterAuthTicketWithCM& from);
  void MergeFrom(const CMsgClientRegisterAuthTicketWithCM& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 protocol_version = 1;
  inline bool has_protocol_version() const;
  inline void clear_protocol_version();
  static const int kProtocolVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 protocol_version() const;
  inline void set_protocol_version(::google::protobuf::uint32 value);

  // optional bytes ticket = 3;
  inline bool has_ticket() const;
  inline void clear_ticket();
  static const int kTicketFieldNumber = 3;
  inline const ::std::string& ticket() const;
  inline void set_ticket(const ::std::string& value);
  inline void set_ticket(const char* value);
  inline void set_ticket(const void* value, size_t size);
  inline ::std::string* mutable_ticket();
  inline ::std::string* release_ticket();
  inline void set_allocated_ticket(::std::string* ticket);

  // optional uint64 client_instance_id = 4;
  inline bool has_client_instance_id() const;
  inline void clear_client_instance_id();
  static const int kClientInstanceIdFieldNumber = 4;
  inline ::google::protobuf::uint64 client_instance_id() const;
  inline void set_client_instance_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgClientRegisterAuthTicketWithCM)
 private:
  inline void set_has_protocol_version();
  inline void clear_has_protocol_version();
  inline void set_has_ticket();
  inline void clear_has_ticket();
  inline void set_has_client_instance_id();
  inline void clear_has_client_instance_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ticket_;
  ::google::protobuf::uint64 client_instance_id_;
  ::google::protobuf::uint32 protocol_version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientRegisterAuthTicketWithCM* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientTicketAuthComplete : public ::google::protobuf::Message {
 public:
  CMsgClientTicketAuthComplete();
  virtual ~CMsgClientTicketAuthComplete();

  CMsgClientTicketAuthComplete(const CMsgClientTicketAuthComplete& from);

  inline CMsgClientTicketAuthComplete& operator=(const CMsgClientTicketAuthComplete& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientTicketAuthComplete& default_instance();

  void Swap(CMsgClientTicketAuthComplete* other);

  // implements Message ----------------------------------------------

  CMsgClientTicketAuthComplete* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientTicketAuthComplete& from);
  void MergeFrom(const CMsgClientTicketAuthComplete& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steam_id = 1;
  inline bool has_steam_id() const;
  inline void clear_steam_id();
  static const int kSteamIdFieldNumber = 1;
  inline ::google::protobuf::uint64 steam_id() const;
  inline void set_steam_id(::google::protobuf::uint64 value);

  // optional fixed64 game_id = 2;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 2;
  inline ::google::protobuf::uint64 game_id() const;
  inline void set_game_id(::google::protobuf::uint64 value);

  // optional uint32 estate = 3;
  inline bool has_estate() const;
  inline void clear_estate();
  static const int kEstateFieldNumber = 3;
  inline ::google::protobuf::uint32 estate() const;
  inline void set_estate(::google::protobuf::uint32 value);

  // optional uint32 eauth_session_response = 4;
  inline bool has_eauth_session_response() const;
  inline void clear_eauth_session_response();
  static const int kEauthSessionResponseFieldNumber = 4;
  inline ::google::protobuf::uint32 eauth_session_response() const;
  inline void set_eauth_session_response(::google::protobuf::uint32 value);

  // optional bytes DEPRECATED_ticket = 5;
  inline bool has_deprecated_ticket() const;
  inline void clear_deprecated_ticket();
  static const int kDEPRECATEDTicketFieldNumber = 5;
  inline const ::std::string& deprecated_ticket() const;
  inline void set_deprecated_ticket(const ::std::string& value);
  inline void set_deprecated_ticket(const char* value);
  inline void set_deprecated_ticket(const void* value, size_t size);
  inline ::std::string* mutable_deprecated_ticket();
  inline ::std::string* release_deprecated_ticket();
  inline void set_allocated_deprecated_ticket(::std::string* deprecated_ticket);

  // optional uint32 ticket_crc = 6;
  inline bool has_ticket_crc() const;
  inline void clear_ticket_crc();
  static const int kTicketCrcFieldNumber = 6;
  inline ::google::protobuf::uint32 ticket_crc() const;
  inline void set_ticket_crc(::google::protobuf::uint32 value);

  // optional uint32 ticket_sequence = 7;
  inline bool has_ticket_sequence() const;
  inline void clear_ticket_sequence();
  static const int kTicketSequenceFieldNumber = 7;
  inline ::google::protobuf::uint32 ticket_sequence() const;
  inline void set_ticket_sequence(::google::protobuf::uint32 value);

  // optional fixed64 owner_steam_id = 8;
  inline bool has_owner_steam_id() const;
  inline void clear_owner_steam_id();
  static const int kOwnerSteamIdFieldNumber = 8;
  inline ::google::protobuf::uint64 owner_steam_id() const;
  inline void set_owner_steam_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgClientTicketAuthComplete)
 private:
  inline void set_has_steam_id();
  inline void clear_has_steam_id();
  inline void set_has_game_id();
  inline void clear_has_game_id();
  inline void set_has_estate();
  inline void clear_has_estate();
  inline void set_has_eauth_session_response();
  inline void clear_has_eauth_session_response();
  inline void set_has_deprecated_ticket();
  inline void clear_has_deprecated_ticket();
  inline void set_has_ticket_crc();
  inline void clear_has_ticket_crc();
  inline void set_has_ticket_sequence();
  inline void clear_has_ticket_sequence();
  inline void set_has_owner_steam_id();
  inline void clear_has_owner_steam_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 steam_id_;
  ::google::protobuf::uint64 game_id_;
  ::google::protobuf::uint32 estate_;
  ::google::protobuf::uint32 eauth_session_response_;
  ::std::string* deprecated_ticket_;
  ::google::protobuf::uint32 ticket_crc_;
  ::google::protobuf::uint32 ticket_sequence_;
  ::google::protobuf::uint64 owner_steam_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientTicketAuthComplete* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientCMList : public ::google::protobuf::Message {
 public:
  CMsgClientCMList();
  virtual ~CMsgClientCMList();

  CMsgClientCMList(const CMsgClientCMList& from);

  inline CMsgClientCMList& operator=(const CMsgClientCMList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientCMList& default_instance();

  void Swap(CMsgClientCMList* other);

  // implements Message ----------------------------------------------

  CMsgClientCMList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientCMList& from);
  void MergeFrom(const CMsgClientCMList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 cm_addresses = 1;
  inline int cm_addresses_size() const;
  inline void clear_cm_addresses();
  static const int kCmAddressesFieldNumber = 1;
  inline ::google::protobuf::uint32 cm_addresses(int index) const;
  inline void set_cm_addresses(int index, ::google::protobuf::uint32 value);
  inline void add_cm_addresses(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cm_addresses() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cm_addresses();

  // repeated uint32 cm_ports = 2;
  inline int cm_ports_size() const;
  inline void clear_cm_ports();
  static const int kCmPortsFieldNumber = 2;
  inline ::google::protobuf::uint32 cm_ports(int index) const;
  inline void set_cm_ports(int index, ::google::protobuf::uint32 value);
  inline void add_cm_ports(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cm_ports() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cm_ports();

  // repeated string cm_websocket_addresses = 3;
  inline int cm_websocket_addresses_size() const;
  inline void clear_cm_websocket_addresses();
  static const int kCmWebsocketAddressesFieldNumber = 3;
  inline const ::std::string& cm_websocket_addresses(int index) const;
  inline ::std::string* mutable_cm_websocket_addresses(int index);
  inline void set_cm_websocket_addresses(int index, const ::std::string& value);
  inline void set_cm_websocket_addresses(int index, const char* value);
  inline void set_cm_websocket_addresses(int index, const char* value, size_t size);
  inline ::std::string* add_cm_websocket_addresses();
  inline void add_cm_websocket_addresses(const ::std::string& value);
  inline void add_cm_websocket_addresses(const char* value);
  inline void add_cm_websocket_addresses(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& cm_websocket_addresses() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cm_websocket_addresses();

  // optional uint32 percent_default_to_websocket = 4;
  inline bool has_percent_default_to_websocket() const;
  inline void clear_percent_default_to_websocket();
  static const int kPercentDefaultToWebsocketFieldNumber = 4;
  inline ::google::protobuf::uint32 percent_default_to_websocket() const;
  inline void set_percent_default_to_websocket(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientCMList)
 private:
  inline void set_has_percent_default_to_websocket();
  inline void clear_has_percent_default_to_websocket();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cm_addresses_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cm_ports_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cm_websocket_addresses_;
  ::google::protobuf::uint32 percent_default_to_websocket_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientCMList* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientP2PConnectionInfo : public ::google::protobuf::Message {
 public:
  CMsgClientP2PConnectionInfo();
  virtual ~CMsgClientP2PConnectionInfo();

  CMsgClientP2PConnectionInfo(const CMsgClientP2PConnectionInfo& from);

  inline CMsgClientP2PConnectionInfo& operator=(const CMsgClientP2PConnectionInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientP2PConnectionInfo& default_instance();

  void Swap(CMsgClientP2PConnectionInfo* other);

  // implements Message ----------------------------------------------

  CMsgClientP2PConnectionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientP2PConnectionInfo& from);
  void MergeFrom(const CMsgClientP2PConnectionInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steam_id_dest = 1;
  inline bool has_steam_id_dest() const;
  inline void clear_steam_id_dest();
  static const int kSteamIdDestFieldNumber = 1;
  inline ::google::protobuf::uint64 steam_id_dest() const;
  inline void set_steam_id_dest(::google::protobuf::uint64 value);

  // optional fixed64 steam_id_src = 2;
  inline bool has_steam_id_src() const;
  inline void clear_steam_id_src();
  static const int kSteamIdSrcFieldNumber = 2;
  inline ::google::protobuf::uint64 steam_id_src() const;
  inline void set_steam_id_src(::google::protobuf::uint64 value);

  // optional uint32 app_id = 3;
  inline bool has_app_id() const;
  inline void clear_app_id();
  static const int kAppIdFieldNumber = 3;
  inline ::google::protobuf::uint32 app_id() const;
  inline void set_app_id(::google::protobuf::uint32 value);

  // optional bytes candidate = 4;
  inline bool has_candidate() const;
  inline void clear_candidate();
  static const int kCandidateFieldNumber = 4;
  inline const ::std::string& candidate() const;
  inline void set_candidate(const ::std::string& value);
  inline void set_candidate(const char* value);
  inline void set_candidate(const void* value, size_t size);
  inline ::std::string* mutable_candidate();
  inline ::std::string* release_candidate();
  inline void set_allocated_candidate(::std::string* candidate);

  // optional fixed64 legacy_connection_id_src = 5;
  inline bool has_legacy_connection_id_src() const;
  inline void clear_legacy_connection_id_src();
  static const int kLegacyConnectionIdSrcFieldNumber = 5;
  inline ::google::protobuf::uint64 legacy_connection_id_src() const;
  inline void set_legacy_connection_id_src(::google::protobuf::uint64 value);

  // optional bytes rendezvous = 6;
  inline bool has_rendezvous() const;
  inline void clear_rendezvous();
  static const int kRendezvousFieldNumber = 6;
  inline const ::std::string& rendezvous() const;
  inline void set_rendezvous(const ::std::string& value);
  inline void set_rendezvous(const char* value);
  inline void set_rendezvous(const void* value, size_t size);
  inline ::std::string* mutable_rendezvous();
  inline ::std::string* release_rendezvous();
  inline void set_allocated_rendezvous(::std::string* rendezvous);

  // @@protoc_insertion_point(class_scope:CMsgClientP2PConnectionInfo)
 private:
  inline void set_has_steam_id_dest();
  inline void clear_has_steam_id_dest();
  inline void set_has_steam_id_src();
  inline void clear_has_steam_id_src();
  inline void set_has_app_id();
  inline void clear_has_app_id();
  inline void set_has_candidate();
  inline void clear_has_candidate();
  inline void set_has_legacy_connection_id_src();
  inline void clear_has_legacy_connection_id_src();
  inline void set_has_rendezvous();
  inline void clear_has_rendezvous();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 steam_id_dest_;
  ::google::protobuf::uint64 steam_id_src_;
  ::std::string* candidate_;
  ::google::protobuf::uint64 legacy_connection_id_src_;
  ::std::string* rendezvous_;
  ::google::protobuf::uint32 app_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientP2PConnectionInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientP2PConnectionFailInfo : public ::google::protobuf::Message {
 public:
  CMsgClientP2PConnectionFailInfo();
  virtual ~CMsgClientP2PConnectionFailInfo();

  CMsgClientP2PConnectionFailInfo(const CMsgClientP2PConnectionFailInfo& from);

  inline CMsgClientP2PConnectionFailInfo& operator=(const CMsgClientP2PConnectionFailInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientP2PConnectionFailInfo& default_instance();

  void Swap(CMsgClientP2PConnectionFailInfo* other);

  // implements Message ----------------------------------------------

  CMsgClientP2PConnectionFailInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientP2PConnectionFailInfo& from);
  void MergeFrom(const CMsgClientP2PConnectionFailInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steam_id_dest = 1;
  inline bool has_steam_id_dest() const;
  inline void clear_steam_id_dest();
  static const int kSteamIdDestFieldNumber = 1;
  inline ::google::protobuf::uint64 steam_id_dest() const;
  inline void set_steam_id_dest(::google::protobuf::uint64 value);

  // optional fixed64 steam_id_src = 2;
  inline bool has_steam_id_src() const;
  inline void clear_steam_id_src();
  static const int kSteamIdSrcFieldNumber = 2;
  inline ::google::protobuf::uint64 steam_id_src() const;
  inline void set_steam_id_src(::google::protobuf::uint64 value);

  // optional uint32 app_id = 3;
  inline bool has_app_id() const;
  inline void clear_app_id();
  static const int kAppIdFieldNumber = 3;
  inline ::google::protobuf::uint32 app_id() const;
  inline void set_app_id(::google::protobuf::uint32 value);

  // optional uint32 ep2p_session_error = 4;
  inline bool has_ep2p_session_error() const;
  inline void clear_ep2p_session_error();
  static const int kEp2PSessionErrorFieldNumber = 4;
  inline ::google::protobuf::uint32 ep2p_session_error() const;
  inline void set_ep2p_session_error(::google::protobuf::uint32 value);

  // optional fixed64 connection_id_dest = 5;
  inline bool has_connection_id_dest() const;
  inline void clear_connection_id_dest();
  static const int kConnectionIdDestFieldNumber = 5;
  inline ::google::protobuf::uint64 connection_id_dest() const;
  inline void set_connection_id_dest(::google::protobuf::uint64 value);

  // optional uint32 close_reason = 7;
  inline bool has_close_reason() const;
  inline void clear_close_reason();
  static const int kCloseReasonFieldNumber = 7;
  inline ::google::protobuf::uint32 close_reason() const;
  inline void set_close_reason(::google::protobuf::uint32 value);

  // optional string close_message = 8;
  inline bool has_close_message() const;
  inline void clear_close_message();
  static const int kCloseMessageFieldNumber = 8;
  inline const ::std::string& close_message() const;
  inline void set_close_message(const ::std::string& value);
  inline void set_close_message(const char* value);
  inline void set_close_message(const char* value, size_t size);
  inline ::std::string* mutable_close_message();
  inline ::std::string* release_close_message();
  inline void set_allocated_close_message(::std::string* close_message);

  // @@protoc_insertion_point(class_scope:CMsgClientP2PConnectionFailInfo)
 private:
  inline void set_has_steam_id_dest();
  inline void clear_has_steam_id_dest();
  inline void set_has_steam_id_src();
  inline void clear_has_steam_id_src();
  inline void set_has_app_id();
  inline void clear_has_app_id();
  inline void set_has_ep2p_session_error();
  inline void clear_has_ep2p_session_error();
  inline void set_has_connection_id_dest();
  inline void clear_has_connection_id_dest();
  inline void set_has_close_reason();
  inline void clear_has_close_reason();
  inline void set_has_close_message();
  inline void clear_has_close_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 steam_id_dest_;
  ::google::protobuf::uint64 steam_id_src_;
  ::google::protobuf::uint32 app_id_;
  ::google::protobuf::uint32 ep2p_session_error_;
  ::google::protobuf::uint64 connection_id_dest_;
  ::std::string* close_message_;
  ::google::protobuf::uint32 close_reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientP2PConnectionFailInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientNetworkingCertRequest : public ::google::protobuf::Message {
 public:
  CMsgClientNetworkingCertRequest();
  virtual ~CMsgClientNetworkingCertRequest();

  CMsgClientNetworkingCertRequest(const CMsgClientNetworkingCertRequest& from);

  inline CMsgClientNetworkingCertRequest& operator=(const CMsgClientNetworkingCertRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientNetworkingCertRequest& default_instance();

  void Swap(CMsgClientNetworkingCertRequest* other);

  // implements Message ----------------------------------------------

  CMsgClientNetworkingCertRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientNetworkingCertRequest& from);
  void MergeFrom(const CMsgClientNetworkingCertRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes key_data = 2;
  inline bool has_key_data() const;
  inline void clear_key_data();
  static const int kKeyDataFieldNumber = 2;
  inline const ::std::string& key_data() const;
  inline void set_key_data(const ::std::string& value);
  inline void set_key_data(const char* value);
  inline void set_key_data(const void* value, size_t size);
  inline ::std::string* mutable_key_data();
  inline ::std::string* release_key_data();
  inline void set_allocated_key_data(::std::string* key_data);

  // optional uint32 app_id = 3;
  inline bool has_app_id() const;
  inline void clear_app_id();
  static const int kAppIdFieldNumber = 3;
  inline ::google::protobuf::uint32 app_id() const;
  inline void set_app_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientNetworkingCertRequest)
 private:
  inline void set_has_key_data();
  inline void clear_has_key_data();
  inline void set_has_app_id();
  inline void clear_has_app_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_data_;
  ::google::protobuf::uint32 app_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientNetworkingCertRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientNetworkingCertReply : public ::google::protobuf::Message {
 public:
  CMsgClientNetworkingCertReply();
  virtual ~CMsgClientNetworkingCertReply();

  CMsgClientNetworkingCertReply(const CMsgClientNetworkingCertReply& from);

  inline CMsgClientNetworkingCertReply& operator=(const CMsgClientNetworkingCertReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientNetworkingCertReply& default_instance();

  void Swap(CMsgClientNetworkingCertReply* other);

  // implements Message ----------------------------------------------

  CMsgClientNetworkingCertReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientNetworkingCertReply& from);
  void MergeFrom(const CMsgClientNetworkingCertReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes cert = 4;
  inline bool has_cert() const;
  inline void clear_cert();
  static const int kCertFieldNumber = 4;
  inline const ::std::string& cert() const;
  inline void set_cert(const ::std::string& value);
  inline void set_cert(const char* value);
  inline void set_cert(const void* value, size_t size);
  inline ::std::string* mutable_cert();
  inline ::std::string* release_cert();
  inline void set_allocated_cert(::std::string* cert);

  // optional fixed64 ca_key_id = 5;
  inline bool has_ca_key_id() const;
  inline void clear_ca_key_id();
  static const int kCaKeyIdFieldNumber = 5;
  inline ::google::protobuf::uint64 ca_key_id() const;
  inline void set_ca_key_id(::google::protobuf::uint64 value);

  // optional bytes ca_signature = 6;
  inline bool has_ca_signature() const;
  inline void clear_ca_signature();
  static const int kCaSignatureFieldNumber = 6;
  inline const ::std::string& ca_signature() const;
  inline void set_ca_signature(const ::std::string& value);
  inline void set_ca_signature(const char* value);
  inline void set_ca_signature(const void* value, size_t size);
  inline ::std::string* mutable_ca_signature();
  inline ::std::string* release_ca_signature();
  inline void set_allocated_ca_signature(::std::string* ca_signature);

  // @@protoc_insertion_point(class_scope:CMsgClientNetworkingCertReply)
 private:
  inline void set_has_cert();
  inline void clear_has_cert();
  inline void set_has_ca_key_id();
  inline void clear_has_ca_key_id();
  inline void set_has_ca_signature();
  inline void clear_has_ca_signature();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* cert_;
  ::google::protobuf::uint64 ca_key_id_;
  ::std::string* ca_signature_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientNetworkingCertReply* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientNetworkingMobileCertRequest : public ::google::protobuf::Message {
 public:
  CMsgClientNetworkingMobileCertRequest();
  virtual ~CMsgClientNetworkingMobileCertRequest();

  CMsgClientNetworkingMobileCertRequest(const CMsgClientNetworkingMobileCertRequest& from);

  inline CMsgClientNetworkingMobileCertRequest& operator=(const CMsgClientNetworkingMobileCertRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientNetworkingMobileCertRequest& default_instance();

  void Swap(CMsgClientNetworkingMobileCertRequest* other);

  // implements Message ----------------------------------------------

  CMsgClientNetworkingMobileCertRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientNetworkingMobileCertRequest& from);
  void MergeFrom(const CMsgClientNetworkingMobileCertRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 app_id = 1;
  inline bool has_app_id() const;
  inline void clear_app_id();
  static const int kAppIdFieldNumber = 1;
  inline ::google::protobuf::uint32 app_id() const;
  inline void set_app_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientNetworkingMobileCertRequest)
 private:
  inline void set_has_app_id();
  inline void clear_has_app_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 app_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientNetworkingMobileCertRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientNetworkingMobileCertReply : public ::google::protobuf::Message {
 public:
  CMsgClientNetworkingMobileCertReply();
  virtual ~CMsgClientNetworkingMobileCertReply();

  CMsgClientNetworkingMobileCertReply(const CMsgClientNetworkingMobileCertReply& from);

  inline CMsgClientNetworkingMobileCertReply& operator=(const CMsgClientNetworkingMobileCertReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientNetworkingMobileCertReply& default_instance();

  void Swap(CMsgClientNetworkingMobileCertReply* other);

  // implements Message ----------------------------------------------

  CMsgClientNetworkingMobileCertReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientNetworkingMobileCertReply& from);
  void MergeFrom(const CMsgClientNetworkingMobileCertReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string encoded_cert = 1;
  inline bool has_encoded_cert() const;
  inline void clear_encoded_cert();
  static const int kEncodedCertFieldNumber = 1;
  inline const ::std::string& encoded_cert() const;
  inline void set_encoded_cert(const ::std::string& value);
  inline void set_encoded_cert(const char* value);
  inline void set_encoded_cert(const char* value, size_t size);
  inline ::std::string* mutable_encoded_cert();
  inline ::std::string* release_encoded_cert();
  inline void set_allocated_encoded_cert(::std::string* encoded_cert);

  // @@protoc_insertion_point(class_scope:CMsgClientNetworkingMobileCertReply)
 private:
  inline void set_has_encoded_cert();
  inline void clear_has_encoded_cert();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* encoded_cert_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientNetworkingMobileCertReply* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientGetAppOwnershipTicket : public ::google::protobuf::Message {
 public:
  CMsgClientGetAppOwnershipTicket();
  virtual ~CMsgClientGetAppOwnershipTicket();

  CMsgClientGetAppOwnershipTicket(const CMsgClientGetAppOwnershipTicket& from);

  inline CMsgClientGetAppOwnershipTicket& operator=(const CMsgClientGetAppOwnershipTicket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientGetAppOwnershipTicket& default_instance();

  void Swap(CMsgClientGetAppOwnershipTicket* other);

  // implements Message ----------------------------------------------

  CMsgClientGetAppOwnershipTicket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientGetAppOwnershipTicket& from);
  void MergeFrom(const CMsgClientGetAppOwnershipTicket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 app_id = 1;
  inline bool has_app_id() const;
  inline void clear_app_id();
  static const int kAppIdFieldNumber = 1;
  inline ::google::protobuf::uint32 app_id() const;
  inline void set_app_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientGetAppOwnershipTicket)
 private:
  inline void set_has_app_id();
  inline void clear_has_app_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 app_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientGetAppOwnershipTicket* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientGetAppOwnershipTicketResponse : public ::google::protobuf::Message {
 public:
  CMsgClientGetAppOwnershipTicketResponse();
  virtual ~CMsgClientGetAppOwnershipTicketResponse();

  CMsgClientGetAppOwnershipTicketResponse(const CMsgClientGetAppOwnershipTicketResponse& from);

  inline CMsgClientGetAppOwnershipTicketResponse& operator=(const CMsgClientGetAppOwnershipTicketResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientGetAppOwnershipTicketResponse& default_instance();

  void Swap(CMsgClientGetAppOwnershipTicketResponse* other);

  // implements Message ----------------------------------------------

  CMsgClientGetAppOwnershipTicketResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientGetAppOwnershipTicketResponse& from);
  void MergeFrom(const CMsgClientGetAppOwnershipTicketResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 eresult = 1 [default = 2];
  inline bool has_eresult() const;
  inline void clear_eresult();
  static const int kEresultFieldNumber = 1;
  inline ::google::protobuf::uint32 eresult() const;
  inline void set_eresult(::google::protobuf::uint32 value);

  // optional uint32 app_id = 2;
  inline bool has_app_id() const;
  inline void clear_app_id();
  static const int kAppIdFieldNumber = 2;
  inline ::google::protobuf::uint32 app_id() const;
  inline void set_app_id(::google::protobuf::uint32 value);

  // optional bytes ticket = 3;
  inline bool has_ticket() const;
  inline void clear_ticket();
  static const int kTicketFieldNumber = 3;
  inline const ::std::string& ticket() const;
  inline void set_ticket(const ::std::string& value);
  inline void set_ticket(const char* value);
  inline void set_ticket(const void* value, size_t size);
  inline ::std::string* mutable_ticket();
  inline ::std::string* release_ticket();
  inline void set_allocated_ticket(::std::string* ticket);

  // @@protoc_insertion_point(class_scope:CMsgClientGetAppOwnershipTicketResponse)
 private:
  inline void set_has_eresult();
  inline void clear_has_eresult();
  inline void set_has_app_id();
  inline void clear_has_app_id();
  inline void set_has_ticket();
  inline void clear_has_ticket();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 eresult_;
  ::google::protobuf::uint32 app_id_;
  ::std::string* ticket_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientGetAppOwnershipTicketResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientSessionToken : public ::google::protobuf::Message {
 public:
  CMsgClientSessionToken();
  virtual ~CMsgClientSessionToken();

  CMsgClientSessionToken(const CMsgClientSessionToken& from);

  inline CMsgClientSessionToken& operator=(const CMsgClientSessionToken& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientSessionToken& default_instance();

  void Swap(CMsgClientSessionToken* other);

  // implements Message ----------------------------------------------

  CMsgClientSessionToken* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientSessionToken& from);
  void MergeFrom(const CMsgClientSessionToken& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 token = 1;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 1;
  inline ::google::protobuf::uint64 token() const;
  inline void set_token(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgClientSessionToken)
 private:
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 token_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientSessionToken* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientGameConnectTokens : public ::google::protobuf::Message {
 public:
  CMsgClientGameConnectTokens();
  virtual ~CMsgClientGameConnectTokens();

  CMsgClientGameConnectTokens(const CMsgClientGameConnectTokens& from);

  inline CMsgClientGameConnectTokens& operator=(const CMsgClientGameConnectTokens& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientGameConnectTokens& default_instance();

  void Swap(CMsgClientGameConnectTokens* other);

  // implements Message ----------------------------------------------

  CMsgClientGameConnectTokens* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientGameConnectTokens& from);
  void MergeFrom(const CMsgClientGameConnectTokens& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 max_tokens_to_keep = 1 [default = 10];
  inline bool has_max_tokens_to_keep() const;
  inline void clear_max_tokens_to_keep();
  static const int kMaxTokensToKeepFieldNumber = 1;
  inline ::google::protobuf::uint32 max_tokens_to_keep() const;
  inline void set_max_tokens_to_keep(::google::protobuf::uint32 value);

  // repeated bytes tokens = 2;
  inline int tokens_size() const;
  inline void clear_tokens();
  static const int kTokensFieldNumber = 2;
  inline const ::std::string& tokens(int index) const;
  inline ::std::string* mutable_tokens(int index);
  inline void set_tokens(int index, const ::std::string& value);
  inline void set_tokens(int index, const char* value);
  inline void set_tokens(int index, const void* value, size_t size);
  inline ::std::string* add_tokens();
  inline void add_tokens(const ::std::string& value);
  inline void add_tokens(const char* value);
  inline void add_tokens(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& tokens() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tokens();

  // @@protoc_insertion_point(class_scope:CMsgClientGameConnectTokens)
 private:
  inline void set_has_max_tokens_to_keep();
  inline void clear_has_max_tokens_to_keep();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> tokens_;
  ::google::protobuf::uint32 max_tokens_to_keep_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientGameConnectTokens* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientGamesPlayed_GamePlayed : public ::google::protobuf::Message {
 public:
  CMsgClientGamesPlayed_GamePlayed();
  virtual ~CMsgClientGamesPlayed_GamePlayed();

  CMsgClientGamesPlayed_GamePlayed(const CMsgClientGamesPlayed_GamePlayed& from);

  inline CMsgClientGamesPlayed_GamePlayed& operator=(const CMsgClientGamesPlayed_GamePlayed& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientGamesPlayed_GamePlayed& default_instance();

  void Swap(CMsgClientGamesPlayed_GamePlayed* other);

  // implements Message ----------------------------------------------

  CMsgClientGamesPlayed_GamePlayed* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientGamesPlayed_GamePlayed& from);
  void MergeFrom(const CMsgClientGamesPlayed_GamePlayed& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 steam_id_gs = 1;
  inline bool has_steam_id_gs() const;
  inline void clear_steam_id_gs();
  static const int kSteamIdGsFieldNumber = 1;
  inline ::google::protobuf::uint64 steam_id_gs() const;
  inline void set_steam_id_gs(::google::protobuf::uint64 value);

  // optional fixed64 game_id = 2;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 2;
  inline ::google::protobuf::uint64 game_id() const;
  inline void set_game_id(::google::protobuf::uint64 value);

  // optional uint32 deprecated_game_ip_address = 3;
  inline bool has_deprecated_game_ip_address() const;
  inline void clear_deprecated_game_ip_address();
  static const int kDeprecatedGameIpAddressFieldNumber = 3;
  inline ::google::protobuf::uint32 deprecated_game_ip_address() const;
  inline void set_deprecated_game_ip_address(::google::protobuf::uint32 value);

  // optional uint32 game_port = 4;
  inline bool has_game_port() const;
  inline void clear_game_port();
  static const int kGamePortFieldNumber = 4;
  inline ::google::protobuf::uint32 game_port() const;
  inline void set_game_port(::google::protobuf::uint32 value);

  // optional bool is_secure = 5;
  inline bool has_is_secure() const;
  inline void clear_is_secure();
  static const int kIsSecureFieldNumber = 5;
  inline bool is_secure() const;
  inline void set_is_secure(bool value);

  // optional bytes token = 6;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 6;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const void* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional string game_extra_info = 7;
  inline bool has_game_extra_info() const;
  inline void clear_game_extra_info();
  static const int kGameExtraInfoFieldNumber = 7;
  inline const ::std::string& game_extra_info() const;
  inline void set_game_extra_info(const ::std::string& value);
  inline void set_game_extra_info(const char* value);
  inline void set_game_extra_info(const char* value, size_t size);
  inline ::std::string* mutable_game_extra_info();
  inline ::std::string* release_game_extra_info();
  inline void set_allocated_game_extra_info(::std::string* game_extra_info);

  // optional bytes game_data_blob = 8;
  inline bool has_game_data_blob() const;
  inline void clear_game_data_blob();
  static const int kGameDataBlobFieldNumber = 8;
  inline const ::std::string& game_data_blob() const;
  inline void set_game_data_blob(const ::std::string& value);
  inline void set_game_data_blob(const char* value);
  inline void set_game_data_blob(const void* value, size_t size);
  inline ::std::string* mutable_game_data_blob();
  inline ::std::string* release_game_data_blob();
  inline void set_allocated_game_data_blob(::std::string* game_data_blob);

  // optional uint32 process_id = 9;
  inline bool has_process_id() const;
  inline void clear_process_id();
  static const int kProcessIdFieldNumber = 9;
  inline ::google::protobuf::uint32 process_id() const;
  inline void set_process_id(::google::protobuf::uint32 value);

  // optional uint32 streaming_provider_id = 10;
  inline bool has_streaming_provider_id() const;
  inline void clear_streaming_provider_id();
  static const int kStreamingProviderIdFieldNumber = 10;
  inline ::google::protobuf::uint32 streaming_provider_id() const;
  inline void set_streaming_provider_id(::google::protobuf::uint32 value);

  // optional uint32 game_flags = 11;
  inline bool has_game_flags() const;
  inline void clear_game_flags();
  static const int kGameFlagsFieldNumber = 11;
  inline ::google::protobuf::uint32 game_flags() const;
  inline void set_game_flags(::google::protobuf::uint32 value);

  // optional uint32 owner_id = 12;
  inline bool has_owner_id() const;
  inline void clear_owner_id();
  static const int kOwnerIdFieldNumber = 12;
  inline ::google::protobuf::uint32 owner_id() const;
  inline void set_owner_id(::google::protobuf::uint32 value);

  // optional string vr_hmd_vendor = 13;
  inline bool has_vr_hmd_vendor() const;
  inline void clear_vr_hmd_vendor();
  static const int kVrHmdVendorFieldNumber = 13;
  inline const ::std::string& vr_hmd_vendor() const;
  inline void set_vr_hmd_vendor(const ::std::string& value);
  inline void set_vr_hmd_vendor(const char* value);
  inline void set_vr_hmd_vendor(const char* value, size_t size);
  inline ::std::string* mutable_vr_hmd_vendor();
  inline ::std::string* release_vr_hmd_vendor();
  inline void set_allocated_vr_hmd_vendor(::std::string* vr_hmd_vendor);

  // optional string vr_hmd_model = 14;
  inline bool has_vr_hmd_model() const;
  inline void clear_vr_hmd_model();
  static const int kVrHmdModelFieldNumber = 14;
  inline const ::std::string& vr_hmd_model() const;
  inline void set_vr_hmd_model(const ::std::string& value);
  inline void set_vr_hmd_model(const char* value);
  inline void set_vr_hmd_model(const char* value, size_t size);
  inline ::std::string* mutable_vr_hmd_model();
  inline ::std::string* release_vr_hmd_model();
  inline void set_allocated_vr_hmd_model(::std::string* vr_hmd_model);

  // optional uint32 launch_option_type = 15 [default = 0];
  inline bool has_launch_option_type() const;
  inline void clear_launch_option_type();
  static const int kLaunchOptionTypeFieldNumber = 15;
  inline ::google::protobuf::uint32 launch_option_type() const;
  inline void set_launch_option_type(::google::protobuf::uint32 value);

  // optional int32 primary_controller_type = 16 [default = -1];
  inline bool has_primary_controller_type() const;
  inline void clear_primary_controller_type();
  static const int kPrimaryControllerTypeFieldNumber = 16;
  inline ::google::protobuf::int32 primary_controller_type() const;
  inline void set_primary_controller_type(::google::protobuf::int32 value);

  // optional string primary_steam_controller_serial = 17;
  inline bool has_primary_steam_controller_serial() const;
  inline void clear_primary_steam_controller_serial();
  static const int kPrimarySteamControllerSerialFieldNumber = 17;
  inline const ::std::string& primary_steam_controller_serial() const;
  inline void set_primary_steam_controller_serial(const ::std::string& value);
  inline void set_primary_steam_controller_serial(const char* value);
  inline void set_primary_steam_controller_serial(const char* value, size_t size);
  inline ::std::string* mutable_primary_steam_controller_serial();
  inline ::std::string* release_primary_steam_controller_serial();
  inline void set_allocated_primary_steam_controller_serial(::std::string* primary_steam_controller_serial);

  // optional uint32 total_steam_controller_count = 18 [default = 0];
  inline bool has_total_steam_controller_count() const;
  inline void clear_total_steam_controller_count();
  static const int kTotalSteamControllerCountFieldNumber = 18;
  inline ::google::protobuf::uint32 total_steam_controller_count() const;
  inline void set_total_steam_controller_count(::google::protobuf::uint32 value);

  // optional uint32 total_non_steam_controller_count = 19 [default = 0];
  inline bool has_total_non_steam_controller_count() const;
  inline void clear_total_non_steam_controller_count();
  static const int kTotalNonSteamControllerCountFieldNumber = 19;
  inline ::google::protobuf::uint32 total_non_steam_controller_count() const;
  inline void set_total_non_steam_controller_count(::google::protobuf::uint32 value);

  // optional uint64 controller_workshop_file_id = 20 [default = 0];
  inline bool has_controller_workshop_file_id() const;
  inline void clear_controller_workshop_file_id();
  static const int kControllerWorkshopFileIdFieldNumber = 20;
  inline ::google::protobuf::uint64 controller_workshop_file_id() const;
  inline void set_controller_workshop_file_id(::google::protobuf::uint64 value);

  // optional uint32 launch_source = 21 [default = 0];
  inline bool has_launch_source() const;
  inline void clear_launch_source();
  static const int kLaunchSourceFieldNumber = 21;
  inline ::google::protobuf::uint32 launch_source() const;
  inline void set_launch_source(::google::protobuf::uint32 value);

  // optional uint32 vr_hmd_runtime = 22;
  inline bool has_vr_hmd_runtime() const;
  inline void clear_vr_hmd_runtime();
  static const int kVrHmdRuntimeFieldNumber = 22;
  inline ::google::protobuf::uint32 vr_hmd_runtime() const;
  inline void set_vr_hmd_runtime(::google::protobuf::uint32 value);

  // optional .CMsgIPAddress game_ip_address = 23;
  inline bool has_game_ip_address() const;
  inline void clear_game_ip_address();
  static const int kGameIpAddressFieldNumber = 23;
  inline const ::CMsgIPAddress& game_ip_address() const;
  inline ::CMsgIPAddress* mutable_game_ip_address();
  inline ::CMsgIPAddress* release_game_ip_address();
  inline void set_allocated_game_ip_address(::CMsgIPAddress* game_ip_address);

  // optional uint32 controller_connection_type = 24 [default = 0];
  inline bool has_controller_connection_type() const;
  inline void clear_controller_connection_type();
  static const int kControllerConnectionTypeFieldNumber = 24;
  inline ::google::protobuf::uint32 controller_connection_type() const;
  inline void set_controller_connection_type(::google::protobuf::uint32 value);

  // optional int32 game_os_platform = 25;
  inline bool has_game_os_platform() const;
  inline void clear_game_os_platform();
  static const int kGameOsPlatformFieldNumber = 25;
  inline ::google::protobuf::int32 game_os_platform() const;
  inline void set_game_os_platform(::google::protobuf::int32 value);

  // optional uint32 game_build_id = 26;
  inline bool has_game_build_id() const;
  inline void clear_game_build_id();
  static const int kGameBuildIdFieldNumber = 26;
  inline ::google::protobuf::uint32 game_build_id() const;
  inline void set_game_build_id(::google::protobuf::uint32 value);

  // optional uint32 compat_tool_id = 27 [default = 0];
  inline bool has_compat_tool_id() const;
  inline void clear_compat_tool_id();
  static const int kCompatToolIdFieldNumber = 27;
  inline ::google::protobuf::uint32 compat_tool_id() const;
  inline void set_compat_tool_id(::google::protobuf::uint32 value);

  // optional string compat_tool_cmd = 28;
  inline bool has_compat_tool_cmd() const;
  inline void clear_compat_tool_cmd();
  static const int kCompatToolCmdFieldNumber = 28;
  inline const ::std::string& compat_tool_cmd() const;
  inline void set_compat_tool_cmd(const ::std::string& value);
  inline void set_compat_tool_cmd(const char* value);
  inline void set_compat_tool_cmd(const char* value, size_t size);
  inline ::std::string* mutable_compat_tool_cmd();
  inline ::std::string* release_compat_tool_cmd();
  inline void set_allocated_compat_tool_cmd(::std::string* compat_tool_cmd);

  // optional uint32 compat_tool_build_id = 29;
  inline bool has_compat_tool_build_id() const;
  inline void clear_compat_tool_build_id();
  static const int kCompatToolBuildIdFieldNumber = 29;
  inline ::google::protobuf::uint32 compat_tool_build_id() const;
  inline void set_compat_tool_build_id(::google::protobuf::uint32 value);

  // optional string beta_name = 30;
  inline bool has_beta_name() const;
  inline void clear_beta_name();
  static const int kBetaNameFieldNumber = 30;
  inline const ::std::string& beta_name() const;
  inline void set_beta_name(const ::std::string& value);
  inline void set_beta_name(const char* value);
  inline void set_beta_name(const char* value, size_t size);
  inline ::std::string* mutable_beta_name();
  inline ::std::string* release_beta_name();
  inline void set_allocated_beta_name(::std::string* beta_name);

  // optional uint32 dlc_context = 31;
  inline bool has_dlc_context() const;
  inline void clear_dlc_context();
  static const int kDlcContextFieldNumber = 31;
  inline ::google::protobuf::uint32 dlc_context() const;
  inline void set_dlc_context(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientGamesPlayed.GamePlayed)
 private:
  inline void set_has_steam_id_gs();
  inline void clear_has_steam_id_gs();
  inline void set_has_game_id();
  inline void clear_has_game_id();
  inline void set_has_deprecated_game_ip_address();
  inline void clear_has_deprecated_game_ip_address();
  inline void set_has_game_port();
  inline void clear_has_game_port();
  inline void set_has_is_secure();
  inline void clear_has_is_secure();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_game_extra_info();
  inline void clear_has_game_extra_info();
  inline void set_has_game_data_blob();
  inline void clear_has_game_data_blob();
  inline void set_has_process_id();
  inline void clear_has_process_id();
  inline void set_has_streaming_provider_id();
  inline void clear_has_streaming_provider_id();
  inline void set_has_game_flags();
  inline void clear_has_game_flags();
  inline void set_has_owner_id();
  inline void clear_has_owner_id();
  inline void set_has_vr_hmd_vendor();
  inline void clear_has_vr_hmd_vendor();
  inline void set_has_vr_hmd_model();
  inline void clear_has_vr_hmd_model();
  inline void set_has_launch_option_type();
  inline void clear_has_launch_option_type();
  inline void set_has_primary_controller_type();
  inline void clear_has_primary_controller_type();
  inline void set_has_primary_steam_controller_serial();
  inline void clear_has_primary_steam_controller_serial();
  inline void set_has_total_steam_controller_count();
  inline void clear_has_total_steam_controller_count();
  inline void set_has_total_non_steam_controller_count();
  inline void clear_has_total_non_steam_controller_count();
  inline void set_has_controller_workshop_file_id();
  inline void clear_has_controller_workshop_file_id();
  inline void set_has_launch_source();
  inline void clear_has_launch_source();
  inline void set_has_vr_hmd_runtime();
  inline void clear_has_vr_hmd_runtime();
  inline void set_has_game_ip_address();
  inline void clear_has_game_ip_address();
  inline void set_has_controller_connection_type();
  inline void clear_has_controller_connection_type();
  inline void set_has_game_os_platform();
  inline void clear_has_game_os_platform();
  inline void set_has_game_build_id();
  inline void clear_has_game_build_id();
  inline void set_has_compat_tool_id();
  inline void clear_has_compat_tool_id();
  inline void set_has_compat_tool_cmd();
  inline void clear_has_compat_tool_cmd();
  inline void set_has_compat_tool_build_id();
  inline void clear_has_compat_tool_build_id();
  inline void set_has_beta_name();
  inline void clear_has_beta_name();
  inline void set_has_dlc_context();
  inline void clear_has_dlc_context();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 steam_id_gs_;
  ::google::protobuf::uint64 game_id_;
  ::google::protobuf::uint32 deprecated_game_ip_address_;
  ::google::protobuf::uint32 game_port_;
  ::std::string* token_;
  ::std::string* game_extra_info_;
  bool is_secure_;
  ::google::protobuf::uint32 process_id_;
  ::std::string* game_data_blob_;
  ::google::protobuf::uint32 streaming_provider_id_;
  ::google::protobuf::uint32 game_flags_;
  ::std::string* vr_hmd_vendor_;
  ::google::protobuf::uint32 owner_id_;
  ::google::protobuf::uint32 launch_option_type_;
  ::std::string* vr_hmd_model_;
  ::std::string* primary_steam_controller_serial_;
  ::google::protobuf::int32 primary_controller_type_;
  ::google::protobuf::uint32 total_steam_controller_count_;
  ::google::protobuf::uint64 controller_workshop_file_id_;
  ::google::protobuf::uint32 total_non_steam_controller_count_;
  ::google::protobuf::uint32 launch_source_;
  ::google::protobuf::uint32 vr_hmd_runtime_;
  ::google::protobuf::uint32 controller_connection_type_;
  ::CMsgIPAddress* game_ip_address_;
  ::google::protobuf::int32 game_os_platform_;
  ::google::protobuf::uint32 game_build_id_;
  ::google::protobuf::uint32 compat_tool_id_;
  ::google::protobuf::uint32 compat_tool_build_id_;
  ::std::string* compat_tool_cmd_;
  ::std::string* beta_name_;
  ::google::protobuf::uint32 dlc_context_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(31 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientGamesPlayed_GamePlayed* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientGamesPlayed : public ::google::protobuf::Message {
 public:
  CMsgClientGamesPlayed();
  virtual ~CMsgClientGamesPlayed();

  CMsgClientGamesPlayed(const CMsgClientGamesPlayed& from);

  inline CMsgClientGamesPlayed& operator=(const CMsgClientGamesPlayed& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientGamesPlayed& default_instance();

  void Swap(CMsgClientGamesPlayed* other);

  // implements Message ----------------------------------------------

  CMsgClientGamesPlayed* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientGamesPlayed& from);
  void MergeFrom(const CMsgClientGamesPlayed& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgClientGamesPlayed_GamePlayed GamePlayed;

  // accessors -------------------------------------------------------

  // repeated .CMsgClientGamesPlayed.GamePlayed games_played = 1;
  inline int games_played_size() const;
  inline void clear_games_played();
  static const int kGamesPlayedFieldNumber = 1;
  inline const ::CMsgClientGamesPlayed_GamePlayed& games_played(int index) const;
  inline ::CMsgClientGamesPlayed_GamePlayed* mutable_games_played(int index);
  inline ::CMsgClientGamesPlayed_GamePlayed* add_games_played();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgClientGamesPlayed_GamePlayed >&
      games_played() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgClientGamesPlayed_GamePlayed >*
      mutable_games_played();

  // optional uint32 client_os_type = 2;
  inline bool has_client_os_type() const;
  inline void clear_client_os_type();
  static const int kClientOsTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 client_os_type() const;
  inline void set_client_os_type(::google::protobuf::uint32 value);

  // optional uint32 cloud_gaming_platform = 3;
  inline bool has_cloud_gaming_platform() const;
  inline void clear_cloud_gaming_platform();
  static const int kCloudGamingPlatformFieldNumber = 3;
  inline ::google::protobuf::uint32 cloud_gaming_platform() const;
  inline void set_cloud_gaming_platform(::google::protobuf::uint32 value);

  // optional bool recent_reauthentication = 4;
  inline bool has_recent_reauthentication() const;
  inline void clear_recent_reauthentication();
  static const int kRecentReauthenticationFieldNumber = 4;
  inline bool recent_reauthentication() const;
  inline void set_recent_reauthentication(bool value);

  // @@protoc_insertion_point(class_scope:CMsgClientGamesPlayed)
 private:
  inline void set_has_client_os_type();
  inline void clear_has_client_os_type();
  inline void set_has_cloud_gaming_platform();
  inline void clear_has_cloud_gaming_platform();
  inline void set_has_recent_reauthentication();
  inline void clear_has_recent_reauthentication();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CMsgClientGamesPlayed_GamePlayed > games_played_;
  ::google::protobuf::uint32 client_os_type_;
  ::google::protobuf::uint32 cloud_gaming_platform_;
  bool recent_reauthentication_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientGamesPlayed* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGSApprove : public ::google::protobuf::Message {
 public:
  CMsgGSApprove();
  virtual ~CMsgGSApprove();

  CMsgGSApprove(const CMsgGSApprove& from);

  inline CMsgGSApprove& operator=(const CMsgGSApprove& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGSApprove& default_instance();

  void Swap(CMsgGSApprove* other);

  // implements Message ----------------------------------------------

  CMsgGSApprove* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGSApprove& from);
  void MergeFrom(const CMsgGSApprove& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steam_id = 1;
  inline bool has_steam_id() const;
  inline void clear_steam_id();
  static const int kSteamIdFieldNumber = 1;
  inline ::google::protobuf::uint64 steam_id() const;
  inline void set_steam_id(::google::protobuf::uint64 value);

  // optional fixed64 owner_steam_id = 2;
  inline bool has_owner_steam_id() const;
  inline void clear_owner_steam_id();
  static const int kOwnerSteamIdFieldNumber = 2;
  inline ::google::protobuf::uint64 owner_steam_id() const;
  inline void set_owner_steam_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgGSApprove)
 private:
  inline void set_has_steam_id();
  inline void clear_has_steam_id();
  inline void set_has_owner_steam_id();
  inline void clear_has_owner_steam_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 steam_id_;
  ::google::protobuf::uint64 owner_steam_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgGSApprove* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGSDeny : public ::google::protobuf::Message {
 public:
  CMsgGSDeny();
  virtual ~CMsgGSDeny();

  CMsgGSDeny(const CMsgGSDeny& from);

  inline CMsgGSDeny& operator=(const CMsgGSDeny& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGSDeny& default_instance();

  void Swap(CMsgGSDeny* other);

  // implements Message ----------------------------------------------

  CMsgGSDeny* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGSDeny& from);
  void MergeFrom(const CMsgGSDeny& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steam_id = 1;
  inline bool has_steam_id() const;
  inline void clear_steam_id();
  static const int kSteamIdFieldNumber = 1;
  inline ::google::protobuf::uint64 steam_id() const;
  inline void set_steam_id(::google::protobuf::uint64 value);

  // optional int32 edeny_reason = 2;
  inline bool has_edeny_reason() const;
  inline void clear_edeny_reason();
  static const int kEdenyReasonFieldNumber = 2;
  inline ::google::protobuf::int32 edeny_reason() const;
  inline void set_edeny_reason(::google::protobuf::int32 value);

  // optional string deny_string = 3;
  inline bool has_deny_string() const;
  inline void clear_deny_string();
  static const int kDenyStringFieldNumber = 3;
  inline const ::std::string& deny_string() const;
  inline void set_deny_string(const ::std::string& value);
  inline void set_deny_string(const char* value);
  inline void set_deny_string(const char* value, size_t size);
  inline ::std::string* mutable_deny_string();
  inline ::std::string* release_deny_string();
  inline void set_allocated_deny_string(::std::string* deny_string);

  // @@protoc_insertion_point(class_scope:CMsgGSDeny)
 private:
  inline void set_has_steam_id();
  inline void clear_has_steam_id();
  inline void set_has_edeny_reason();
  inline void clear_has_edeny_reason();
  inline void set_has_deny_string();
  inline void clear_has_deny_string();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 steam_id_;
  ::std::string* deny_string_;
  ::google::protobuf::int32 edeny_reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgGSDeny* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGSKick : public ::google::protobuf::Message {
 public:
  CMsgGSKick();
  virtual ~CMsgGSKick();

  CMsgGSKick(const CMsgGSKick& from);

  inline CMsgGSKick& operator=(const CMsgGSKick& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGSKick& default_instance();

  void Swap(CMsgGSKick* other);

  // implements Message ----------------------------------------------

  CMsgGSKick* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGSKick& from);
  void MergeFrom(const CMsgGSKick& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steam_id = 1;
  inline bool has_steam_id() const;
  inline void clear_steam_id();
  static const int kSteamIdFieldNumber = 1;
  inline ::google::protobuf::uint64 steam_id() const;
  inline void set_steam_id(::google::protobuf::uint64 value);

  // optional int32 edeny_reason = 2;
  inline bool has_edeny_reason() const;
  inline void clear_edeny_reason();
  static const int kEdenyReasonFieldNumber = 2;
  inline ::google::protobuf::int32 edeny_reason() const;
  inline void set_edeny_reason(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMsgGSKick)
 private:
  inline void set_has_steam_id();
  inline void clear_has_steam_id();
  inline void set_has_edeny_reason();
  inline void clear_has_edeny_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 steam_id_;
  ::google::protobuf::int32 edeny_reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgGSKick* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientAuthList : public ::google::protobuf::Message {
 public:
  CMsgClientAuthList();
  virtual ~CMsgClientAuthList();

  CMsgClientAuthList(const CMsgClientAuthList& from);

  inline CMsgClientAuthList& operator=(const CMsgClientAuthList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientAuthList& default_instance();

  void Swap(CMsgClientAuthList* other);

  // implements Message ----------------------------------------------

  CMsgClientAuthList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientAuthList& from);
  void MergeFrom(const CMsgClientAuthList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 tokens_left = 1;
  inline bool has_tokens_left() const;
  inline void clear_tokens_left();
  static const int kTokensLeftFieldNumber = 1;
  inline ::google::protobuf::uint32 tokens_left() const;
  inline void set_tokens_left(::google::protobuf::uint32 value);

  // optional uint32 last_request_seq = 2;
  inline bool has_last_request_seq() const;
  inline void clear_last_request_seq();
  static const int kLastRequestSeqFieldNumber = 2;
  inline ::google::protobuf::uint32 last_request_seq() const;
  inline void set_last_request_seq(::google::protobuf::uint32 value);

  // optional uint32 last_request_seq_from_server = 3;
  inline bool has_last_request_seq_from_server() const;
  inline void clear_last_request_seq_from_server();
  static const int kLastRequestSeqFromServerFieldNumber = 3;
  inline ::google::protobuf::uint32 last_request_seq_from_server() const;
  inline void set_last_request_seq_from_server(::google::protobuf::uint32 value);

  // repeated .CMsgAuthTicket tickets = 4;
  inline int tickets_size() const;
  inline void clear_tickets();
  static const int kTicketsFieldNumber = 4;
  inline const ::CMsgAuthTicket& tickets(int index) const;
  inline ::CMsgAuthTicket* mutable_tickets(int index);
  inline ::CMsgAuthTicket* add_tickets();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgAuthTicket >&
      tickets() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgAuthTicket >*
      mutable_tickets();

  // repeated uint32 app_ids = 5;
  inline int app_ids_size() const;
  inline void clear_app_ids();
  static const int kAppIdsFieldNumber = 5;
  inline ::google::protobuf::uint32 app_ids(int index) const;
  inline void set_app_ids(int index, ::google::protobuf::uint32 value);
  inline void add_app_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      app_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_app_ids();

  // optional uint32 message_sequence = 6;
  inline bool has_message_sequence() const;
  inline void clear_message_sequence();
  static const int kMessageSequenceFieldNumber = 6;
  inline ::google::protobuf::uint32 message_sequence() const;
  inline void set_message_sequence(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientAuthList)
 private:
  inline void set_has_tokens_left();
  inline void clear_has_tokens_left();
  inline void set_has_last_request_seq();
  inline void clear_has_last_request_seq();
  inline void set_has_last_request_seq_from_server();
  inline void clear_has_last_request_seq_from_server();
  inline void set_has_message_sequence();
  inline void clear_has_message_sequence();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 tokens_left_;
  ::google::protobuf::uint32 last_request_seq_;
  ::google::protobuf::RepeatedPtrField< ::CMsgAuthTicket > tickets_;
  ::google::protobuf::uint32 last_request_seq_from_server_;
  ::google::protobuf::uint32 message_sequence_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > app_ids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientAuthList* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientAuthListAck : public ::google::protobuf::Message {
 public:
  CMsgClientAuthListAck();
  virtual ~CMsgClientAuthListAck();

  CMsgClientAuthListAck(const CMsgClientAuthListAck& from);

  inline CMsgClientAuthListAck& operator=(const CMsgClientAuthListAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientAuthListAck& default_instance();

  void Swap(CMsgClientAuthListAck* other);

  // implements Message ----------------------------------------------

  CMsgClientAuthListAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientAuthListAck& from);
  void MergeFrom(const CMsgClientAuthListAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 ticket_crc = 1;
  inline int ticket_crc_size() const;
  inline void clear_ticket_crc();
  static const int kTicketCrcFieldNumber = 1;
  inline ::google::protobuf::uint32 ticket_crc(int index) const;
  inline void set_ticket_crc(int index, ::google::protobuf::uint32 value);
  inline void add_ticket_crc(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ticket_crc() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ticket_crc();

  // repeated uint32 app_ids = 2;
  inline int app_ids_size() const;
  inline void clear_app_ids();
  static const int kAppIdsFieldNumber = 2;
  inline ::google::protobuf::uint32 app_ids(int index) const;
  inline void set_app_ids(int index, ::google::protobuf::uint32 value);
  inline void add_app_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      app_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_app_ids();

  // optional uint32 message_sequence = 3;
  inline bool has_message_sequence() const;
  inline void clear_message_sequence();
  static const int kMessageSequenceFieldNumber = 3;
  inline ::google::protobuf::uint32 message_sequence() const;
  inline void set_message_sequence(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientAuthListAck)
 private:
  inline void set_has_message_sequence();
  inline void clear_has_message_sequence();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ticket_crc_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > app_ids_;
  ::google::protobuf::uint32 message_sequence_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientAuthListAck* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientLicenseList_License : public ::google::protobuf::Message {
 public:
  CMsgClientLicenseList_License();
  virtual ~CMsgClientLicenseList_License();

  CMsgClientLicenseList_License(const CMsgClientLicenseList_License& from);

  inline CMsgClientLicenseList_License& operator=(const CMsgClientLicenseList_License& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientLicenseList_License& default_instance();

  void Swap(CMsgClientLicenseList_License* other);

  // implements Message ----------------------------------------------

  CMsgClientLicenseList_License* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientLicenseList_License& from);
  void MergeFrom(const CMsgClientLicenseList_License& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 package_id = 1;
  inline bool has_package_id() const;
  inline void clear_package_id();
  static const int kPackageIdFieldNumber = 1;
  inline ::google::protobuf::uint32 package_id() const;
  inline void set_package_id(::google::protobuf::uint32 value);

  // optional fixed32 time_created = 2;
  inline bool has_time_created() const;
  inline void clear_time_created();
  static const int kTimeCreatedFieldNumber = 2;
  inline ::google::protobuf::uint32 time_created() const;
  inline void set_time_created(::google::protobuf::uint32 value);

  // optional fixed32 time_next_process = 3;
  inline bool has_time_next_process() const;
  inline void clear_time_next_process();
  static const int kTimeNextProcessFieldNumber = 3;
  inline ::google::protobuf::uint32 time_next_process() const;
  inline void set_time_next_process(::google::protobuf::uint32 value);

  // optional int32 minute_limit = 4;
  inline bool has_minute_limit() const;
  inline void clear_minute_limit();
  static const int kMinuteLimitFieldNumber = 4;
  inline ::google::protobuf::int32 minute_limit() const;
  inline void set_minute_limit(::google::protobuf::int32 value);

  // optional int32 minutes_used = 5;
  inline bool has_minutes_used() const;
  inline void clear_minutes_used();
  static const int kMinutesUsedFieldNumber = 5;
  inline ::google::protobuf::int32 minutes_used() const;
  inline void set_minutes_used(::google::protobuf::int32 value);

  // optional uint32 payment_method = 6;
  inline bool has_payment_method() const;
  inline void clear_payment_method();
  static const int kPaymentMethodFieldNumber = 6;
  inline ::google::protobuf::uint32 payment_method() const;
  inline void set_payment_method(::google::protobuf::uint32 value);

  // optional uint32 flags = 7;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 7;
  inline ::google::protobuf::uint32 flags() const;
  inline void set_flags(::google::protobuf::uint32 value);

  // optional string purchase_country_code = 8;
  inline bool has_purchase_country_code() const;
  inline void clear_purchase_country_code();
  static const int kPurchaseCountryCodeFieldNumber = 8;
  inline const ::std::string& purchase_country_code() const;
  inline void set_purchase_country_code(const ::std::string& value);
  inline void set_purchase_country_code(const char* value);
  inline void set_purchase_country_code(const char* value, size_t size);
  inline ::std::string* mutable_purchase_country_code();
  inline ::std::string* release_purchase_country_code();
  inline void set_allocated_purchase_country_code(::std::string* purchase_country_code);

  // optional uint32 license_type = 9;
  inline bool has_license_type() const;
  inline void clear_license_type();
  static const int kLicenseTypeFieldNumber = 9;
  inline ::google::protobuf::uint32 license_type() const;
  inline void set_license_type(::google::protobuf::uint32 value);

  // optional int32 territory_code = 10;
  inline bool has_territory_code() const;
  inline void clear_territory_code();
  static const int kTerritoryCodeFieldNumber = 10;
  inline ::google::protobuf::int32 territory_code() const;
  inline void set_territory_code(::google::protobuf::int32 value);

  // optional int32 change_number = 11;
  inline bool has_change_number() const;
  inline void clear_change_number();
  static const int kChangeNumberFieldNumber = 11;
  inline ::google::protobuf::int32 change_number() const;
  inline void set_change_number(::google::protobuf::int32 value);

  // optional uint32 owner_id = 12;
  inline bool has_owner_id() const;
  inline void clear_owner_id();
  static const int kOwnerIdFieldNumber = 12;
  inline ::google::protobuf::uint32 owner_id() const;
  inline void set_owner_id(::google::protobuf::uint32 value);

  // optional uint32 initial_period = 13;
  inline bool has_initial_period() const;
  inline void clear_initial_period();
  static const int kInitialPeriodFieldNumber = 13;
  inline ::google::protobuf::uint32 initial_period() const;
  inline void set_initial_period(::google::protobuf::uint32 value);

  // optional uint32 initial_time_unit = 14;
  inline bool has_initial_time_unit() const;
  inline void clear_initial_time_unit();
  static const int kInitialTimeUnitFieldNumber = 14;
  inline ::google::protobuf::uint32 initial_time_unit() const;
  inline void set_initial_time_unit(::google::protobuf::uint32 value);

  // optional uint32 renewal_period = 15;
  inline bool has_renewal_period() const;
  inline void clear_renewal_period();
  static const int kRenewalPeriodFieldNumber = 15;
  inline ::google::protobuf::uint32 renewal_period() const;
  inline void set_renewal_period(::google::protobuf::uint32 value);

  // optional uint32 renewal_time_unit = 16;
  inline bool has_renewal_time_unit() const;
  inline void clear_renewal_time_unit();
  static const int kRenewalTimeUnitFieldNumber = 16;
  inline ::google::protobuf::uint32 renewal_time_unit() const;
  inline void set_renewal_time_unit(::google::protobuf::uint32 value);

  // optional uint64 access_token = 17;
  inline bool has_access_token() const;
  inline void clear_access_token();
  static const int kAccessTokenFieldNumber = 17;
  inline ::google::protobuf::uint64 access_token() const;
  inline void set_access_token(::google::protobuf::uint64 value);

  // optional uint32 master_package_id = 18;
  inline bool has_master_package_id() const;
  inline void clear_master_package_id();
  static const int kMasterPackageIdFieldNumber = 18;
  inline ::google::protobuf::uint32 master_package_id() const;
  inline void set_master_package_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientLicenseList.License)
 private:
  inline void set_has_package_id();
  inline void clear_has_package_id();
  inline void set_has_time_created();
  inline void clear_has_time_created();
  inline void set_has_time_next_process();
  inline void clear_has_time_next_process();
  inline void set_has_minute_limit();
  inline void clear_has_minute_limit();
  inline void set_has_minutes_used();
  inline void clear_has_minutes_used();
  inline void set_has_payment_method();
  inline void clear_has_payment_method();
  inline void set_has_flags();
  inline void clear_has_flags();
  inline void set_has_purchase_country_code();
  inline void clear_has_purchase_country_code();
  inline void set_has_license_type();
  inline void clear_has_license_type();
  inline void set_has_territory_code();
  inline void clear_has_territory_code();
  inline void set_has_change_number();
  inline void clear_has_change_number();
  inline void set_has_owner_id();
  inline void clear_has_owner_id();
  inline void set_has_initial_period();
  inline void clear_has_initial_period();
  inline void set_has_initial_time_unit();
  inline void clear_has_initial_time_unit();
  inline void set_has_renewal_period();
  inline void clear_has_renewal_period();
  inline void set_has_renewal_time_unit();
  inline void clear_has_renewal_time_unit();
  inline void set_has_access_token();
  inline void clear_has_access_token();
  inline void set_has_master_package_id();
  inline void clear_has_master_package_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 package_id_;
  ::google::protobuf::uint32 time_created_;
  ::google::protobuf::uint32 time_next_process_;
  ::google::protobuf::int32 minute_limit_;
  ::google::protobuf::int32 minutes_used_;
  ::google::protobuf::uint32 payment_method_;
  ::std::string* purchase_country_code_;
  ::google::protobuf::uint32 flags_;
  ::google::protobuf::uint32 license_type_;
  ::google::protobuf::int32 territory_code_;
  ::google::protobuf::int32 change_number_;
  ::google::protobuf::uint32 owner_id_;
  ::google::protobuf::uint32 initial_period_;
  ::google::protobuf::uint32 initial_time_unit_;
  ::google::protobuf::uint32 renewal_period_;
  ::google::protobuf::uint64 access_token_;
  ::google::protobuf::uint32 renewal_time_unit_;
  ::google::protobuf::uint32 master_package_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientLicenseList_License* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientLicenseList : public ::google::protobuf::Message {
 public:
  CMsgClientLicenseList();
  virtual ~CMsgClientLicenseList();

  CMsgClientLicenseList(const CMsgClientLicenseList& from);

  inline CMsgClientLicenseList& operator=(const CMsgClientLicenseList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientLicenseList& default_instance();

  void Swap(CMsgClientLicenseList* other);

  // implements Message ----------------------------------------------

  CMsgClientLicenseList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientLicenseList& from);
  void MergeFrom(const CMsgClientLicenseList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgClientLicenseList_License License;

  // accessors -------------------------------------------------------

  // optional int32 eresult = 1 [default = 2];
  inline bool has_eresult() const;
  inline void clear_eresult();
  static const int kEresultFieldNumber = 1;
  inline ::google::protobuf::int32 eresult() const;
  inline void set_eresult(::google::protobuf::int32 value);

  // repeated .CMsgClientLicenseList.License licenses = 2;
  inline int licenses_size() const;
  inline void clear_licenses();
  static const int kLicensesFieldNumber = 2;
  inline const ::CMsgClientLicenseList_License& licenses(int index) const;
  inline ::CMsgClientLicenseList_License* mutable_licenses(int index);
  inline ::CMsgClientLicenseList_License* add_licenses();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgClientLicenseList_License >&
      licenses() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgClientLicenseList_License >*
      mutable_licenses();

  // @@protoc_insertion_point(class_scope:CMsgClientLicenseList)
 private:
  inline void set_has_eresult();
  inline void clear_has_eresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CMsgClientLicenseList_License > licenses_;
  ::google::protobuf::int32 eresult_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientLicenseList* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientIsLimitedAccount : public ::google::protobuf::Message {
 public:
  CMsgClientIsLimitedAccount();
  virtual ~CMsgClientIsLimitedAccount();

  CMsgClientIsLimitedAccount(const CMsgClientIsLimitedAccount& from);

  inline CMsgClientIsLimitedAccount& operator=(const CMsgClientIsLimitedAccount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientIsLimitedAccount& default_instance();

  void Swap(CMsgClientIsLimitedAccount* other);

  // implements Message ----------------------------------------------

  CMsgClientIsLimitedAccount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientIsLimitedAccount& from);
  void MergeFrom(const CMsgClientIsLimitedAccount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool bis_limited_account = 1;
  inline bool has_bis_limited_account() const;
  inline void clear_bis_limited_account();
  static const int kBisLimitedAccountFieldNumber = 1;
  inline bool bis_limited_account() const;
  inline void set_bis_limited_account(bool value);

  // optional bool bis_community_banned = 2;
  inline bool has_bis_community_banned() const;
  inline void clear_bis_community_banned();
  static const int kBisCommunityBannedFieldNumber = 2;
  inline bool bis_community_banned() const;
  inline void set_bis_community_banned(bool value);

  // optional bool bis_locked_account = 3;
  inline bool has_bis_locked_account() const;
  inline void clear_bis_locked_account();
  static const int kBisLockedAccountFieldNumber = 3;
  inline bool bis_locked_account() const;
  inline void set_bis_locked_account(bool value);

  // optional bool bis_limited_account_allowed_to_invite_friends = 4;
  inline bool has_bis_limited_account_allowed_to_invite_friends() const;
  inline void clear_bis_limited_account_allowed_to_invite_friends();
  static const int kBisLimitedAccountAllowedToInviteFriendsFieldNumber = 4;
  inline bool bis_limited_account_allowed_to_invite_friends() const;
  inline void set_bis_limited_account_allowed_to_invite_friends(bool value);

  // @@protoc_insertion_point(class_scope:CMsgClientIsLimitedAccount)
 private:
  inline void set_has_bis_limited_account();
  inline void clear_has_bis_limited_account();
  inline void set_has_bis_community_banned();
  inline void clear_has_bis_community_banned();
  inline void set_has_bis_locked_account();
  inline void clear_has_bis_locked_account();
  inline void set_has_bis_limited_account_allowed_to_invite_friends();
  inline void clear_has_bis_limited_account_allowed_to_invite_friends();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool bis_limited_account_;
  bool bis_community_banned_;
  bool bis_locked_account_;
  bool bis_limited_account_allowed_to_invite_friends_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientIsLimitedAccount* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientRequestedClientStats_StatsToSend : public ::google::protobuf::Message {
 public:
  CMsgClientRequestedClientStats_StatsToSend();
  virtual ~CMsgClientRequestedClientStats_StatsToSend();

  CMsgClientRequestedClientStats_StatsToSend(const CMsgClientRequestedClientStats_StatsToSend& from);

  inline CMsgClientRequestedClientStats_StatsToSend& operator=(const CMsgClientRequestedClientStats_StatsToSend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientRequestedClientStats_StatsToSend& default_instance();

  void Swap(CMsgClientRequestedClientStats_StatsToSend* other);

  // implements Message ----------------------------------------------

  CMsgClientRequestedClientStats_StatsToSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientRequestedClientStats_StatsToSend& from);
  void MergeFrom(const CMsgClientRequestedClientStats_StatsToSend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 client_stat = 1;
  inline bool has_client_stat() const;
  inline void clear_client_stat();
  static const int kClientStatFieldNumber = 1;
  inline ::google::protobuf::uint32 client_stat() const;
  inline void set_client_stat(::google::protobuf::uint32 value);

  // optional uint32 stat_aggregate_method = 2;
  inline bool has_stat_aggregate_method() const;
  inline void clear_stat_aggregate_method();
  static const int kStatAggregateMethodFieldNumber = 2;
  inline ::google::protobuf::uint32 stat_aggregate_method() const;
  inline void set_stat_aggregate_method(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientRequestedClientStats.StatsToSend)
 private:
  inline void set_has_client_stat();
  inline void clear_has_client_stat();
  inline void set_has_stat_aggregate_method();
  inline void clear_has_stat_aggregate_method();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 client_stat_;
  ::google::protobuf::uint32 stat_aggregate_method_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientRequestedClientStats_StatsToSend* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientRequestedClientStats : public ::google::protobuf::Message {
 public:
  CMsgClientRequestedClientStats();
  virtual ~CMsgClientRequestedClientStats();

  CMsgClientRequestedClientStats(const CMsgClientRequestedClientStats& from);

  inline CMsgClientRequestedClientStats& operator=(const CMsgClientRequestedClientStats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientRequestedClientStats& default_instance();

  void Swap(CMsgClientRequestedClientStats* other);

  // implements Message ----------------------------------------------

  CMsgClientRequestedClientStats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientRequestedClientStats& from);
  void MergeFrom(const CMsgClientRequestedClientStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgClientRequestedClientStats_StatsToSend StatsToSend;

  // accessors -------------------------------------------------------

  // repeated .CMsgClientRequestedClientStats.StatsToSend stats_to_send = 1;
  inline int stats_to_send_size() const;
  inline void clear_stats_to_send();
  static const int kStatsToSendFieldNumber = 1;
  inline const ::CMsgClientRequestedClientStats_StatsToSend& stats_to_send(int index) const;
  inline ::CMsgClientRequestedClientStats_StatsToSend* mutable_stats_to_send(int index);
  inline ::CMsgClientRequestedClientStats_StatsToSend* add_stats_to_send();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgClientRequestedClientStats_StatsToSend >&
      stats_to_send() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgClientRequestedClientStats_StatsToSend >*
      mutable_stats_to_send();

  // @@protoc_insertion_point(class_scope:CMsgClientRequestedClientStats)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CMsgClientRequestedClientStats_StatsToSend > stats_to_send_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientRequestedClientStats* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientStat2_StatDetail : public ::google::protobuf::Message {
 public:
  CMsgClientStat2_StatDetail();
  virtual ~CMsgClientStat2_StatDetail();

  CMsgClientStat2_StatDetail(const CMsgClientStat2_StatDetail& from);

  inline CMsgClientStat2_StatDetail& operator=(const CMsgClientStat2_StatDetail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientStat2_StatDetail& default_instance();

  void Swap(CMsgClientStat2_StatDetail* other);

  // implements Message ----------------------------------------------

  CMsgClientStat2_StatDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientStat2_StatDetail& from);
  void MergeFrom(const CMsgClientStat2_StatDetail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 client_stat = 1;
  inline bool has_client_stat() const;
  inline void clear_client_stat();
  static const int kClientStatFieldNumber = 1;
  inline ::google::protobuf::uint32 client_stat() const;
  inline void set_client_stat(::google::protobuf::uint32 value);

  // optional int64 ll_value = 2;
  inline bool has_ll_value() const;
  inline void clear_ll_value();
  static const int kLlValueFieldNumber = 2;
  inline ::google::protobuf::int64 ll_value() const;
  inline void set_ll_value(::google::protobuf::int64 value);

  // optional uint32 time_of_day = 3;
  inline bool has_time_of_day() const;
  inline void clear_time_of_day();
  static const int kTimeOfDayFieldNumber = 3;
  inline ::google::protobuf::uint32 time_of_day() const;
  inline void set_time_of_day(::google::protobuf::uint32 value);

  // optional uint32 cell_id = 4;
  inline bool has_cell_id() const;
  inline void clear_cell_id();
  static const int kCellIdFieldNumber = 4;
  inline ::google::protobuf::uint32 cell_id() const;
  inline void set_cell_id(::google::protobuf::uint32 value);

  // optional uint32 depot_id = 5;
  inline bool has_depot_id() const;
  inline void clear_depot_id();
  static const int kDepotIdFieldNumber = 5;
  inline ::google::protobuf::uint32 depot_id() const;
  inline void set_depot_id(::google::protobuf::uint32 value);

  // optional uint32 app_id = 6;
  inline bool has_app_id() const;
  inline void clear_app_id();
  static const int kAppIdFieldNumber = 6;
  inline ::google::protobuf::uint32 app_id() const;
  inline void set_app_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientStat2.StatDetail)
 private:
  inline void set_has_client_stat();
  inline void clear_has_client_stat();
  inline void set_has_ll_value();
  inline void clear_has_ll_value();
  inline void set_has_time_of_day();
  inline void clear_has_time_of_day();
  inline void set_has_cell_id();
  inline void clear_has_cell_id();
  inline void set_has_depot_id();
  inline void clear_has_depot_id();
  inline void set_has_app_id();
  inline void clear_has_app_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 ll_value_;
  ::google::protobuf::uint32 client_stat_;
  ::google::protobuf::uint32 time_of_day_;
  ::google::protobuf::uint32 cell_id_;
  ::google::protobuf::uint32 depot_id_;
  ::google::protobuf::uint32 app_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientStat2_StatDetail* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientStat2 : public ::google::protobuf::Message {
 public:
  CMsgClientStat2();
  virtual ~CMsgClientStat2();

  CMsgClientStat2(const CMsgClientStat2& from);

  inline CMsgClientStat2& operator=(const CMsgClientStat2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientStat2& default_instance();

  void Swap(CMsgClientStat2* other);

  // implements Message ----------------------------------------------

  CMsgClientStat2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientStat2& from);
  void MergeFrom(const CMsgClientStat2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgClientStat2_StatDetail StatDetail;

  // accessors -------------------------------------------------------

  // repeated .CMsgClientStat2.StatDetail stat_detail = 1;
  inline int stat_detail_size() const;
  inline void clear_stat_detail();
  static const int kStatDetailFieldNumber = 1;
  inline const ::CMsgClientStat2_StatDetail& stat_detail(int index) const;
  inline ::CMsgClientStat2_StatDetail* mutable_stat_detail(int index);
  inline ::CMsgClientStat2_StatDetail* add_stat_detail();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgClientStat2_StatDetail >&
      stat_detail() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgClientStat2_StatDetail >*
      mutable_stat_detail();

  // @@protoc_insertion_point(class_scope:CMsgClientStat2)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CMsgClientStat2_StatDetail > stat_detail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientStat2* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientInviteToGame : public ::google::protobuf::Message {
 public:
  CMsgClientInviteToGame();
  virtual ~CMsgClientInviteToGame();

  CMsgClientInviteToGame(const CMsgClientInviteToGame& from);

  inline CMsgClientInviteToGame& operator=(const CMsgClientInviteToGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientInviteToGame& default_instance();

  void Swap(CMsgClientInviteToGame* other);

  // implements Message ----------------------------------------------

  CMsgClientInviteToGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientInviteToGame& from);
  void MergeFrom(const CMsgClientInviteToGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steam_id_dest = 1;
  inline bool has_steam_id_dest() const;
  inline void clear_steam_id_dest();
  static const int kSteamIdDestFieldNumber = 1;
  inline ::google::protobuf::uint64 steam_id_dest() const;
  inline void set_steam_id_dest(::google::protobuf::uint64 value);

  // optional fixed64 steam_id_src = 2;
  inline bool has_steam_id_src() const;
  inline void clear_steam_id_src();
  static const int kSteamIdSrcFieldNumber = 2;
  inline ::google::protobuf::uint64 steam_id_src() const;
  inline void set_steam_id_src(::google::protobuf::uint64 value);

  // optional string connect_string = 3;
  inline bool has_connect_string() const;
  inline void clear_connect_string();
  static const int kConnectStringFieldNumber = 3;
  inline const ::std::string& connect_string() const;
  inline void set_connect_string(const ::std::string& value);
  inline void set_connect_string(const char* value);
  inline void set_connect_string(const char* value, size_t size);
  inline ::std::string* mutable_connect_string();
  inline ::std::string* release_connect_string();
  inline void set_allocated_connect_string(::std::string* connect_string);

  // optional string remote_play = 4;
  inline bool has_remote_play() const;
  inline void clear_remote_play();
  static const int kRemotePlayFieldNumber = 4;
  inline const ::std::string& remote_play() const;
  inline void set_remote_play(const ::std::string& value);
  inline void set_remote_play(const char* value);
  inline void set_remote_play(const char* value, size_t size);
  inline ::std::string* mutable_remote_play();
  inline ::std::string* release_remote_play();
  inline void set_allocated_remote_play(::std::string* remote_play);

  // @@protoc_insertion_point(class_scope:CMsgClientInviteToGame)
 private:
  inline void set_has_steam_id_dest();
  inline void clear_has_steam_id_dest();
  inline void set_has_steam_id_src();
  inline void clear_has_steam_id_src();
  inline void set_has_connect_string();
  inline void clear_has_connect_string();
  inline void set_has_remote_play();
  inline void clear_has_remote_play();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 steam_id_dest_;
  ::google::protobuf::uint64 steam_id_src_;
  ::std::string* connect_string_;
  ::std::string* remote_play_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientInviteToGame* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientChatInvite : public ::google::protobuf::Message {
 public:
  CMsgClientChatInvite();
  virtual ~CMsgClientChatInvite();

  CMsgClientChatInvite(const CMsgClientChatInvite& from);

  inline CMsgClientChatInvite& operator=(const CMsgClientChatInvite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientChatInvite& default_instance();

  void Swap(CMsgClientChatInvite* other);

  // implements Message ----------------------------------------------

  CMsgClientChatInvite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientChatInvite& from);
  void MergeFrom(const CMsgClientChatInvite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steam_id_invited = 1;
  inline bool has_steam_id_invited() const;
  inline void clear_steam_id_invited();
  static const int kSteamIdInvitedFieldNumber = 1;
  inline ::google::protobuf::uint64 steam_id_invited() const;
  inline void set_steam_id_invited(::google::protobuf::uint64 value);

  // optional fixed64 steam_id_chat = 2;
  inline bool has_steam_id_chat() const;
  inline void clear_steam_id_chat();
  static const int kSteamIdChatFieldNumber = 2;
  inline ::google::protobuf::uint64 steam_id_chat() const;
  inline void set_steam_id_chat(::google::protobuf::uint64 value);

  // optional fixed64 steam_id_patron = 3;
  inline bool has_steam_id_patron() const;
  inline void clear_steam_id_patron();
  static const int kSteamIdPatronFieldNumber = 3;
  inline ::google::protobuf::uint64 steam_id_patron() const;
  inline void set_steam_id_patron(::google::protobuf::uint64 value);

  // optional int32 chatroom_type = 4;
  inline bool has_chatroom_type() const;
  inline void clear_chatroom_type();
  static const int kChatroomTypeFieldNumber = 4;
  inline ::google::protobuf::int32 chatroom_type() const;
  inline void set_chatroom_type(::google::protobuf::int32 value);

  // optional fixed64 steam_id_friend_chat = 5;
  inline bool has_steam_id_friend_chat() const;
  inline void clear_steam_id_friend_chat();
  static const int kSteamIdFriendChatFieldNumber = 5;
  inline ::google::protobuf::uint64 steam_id_friend_chat() const;
  inline void set_steam_id_friend_chat(::google::protobuf::uint64 value);

  // optional string chat_name = 6;
  inline bool has_chat_name() const;
  inline void clear_chat_name();
  static const int kChatNameFieldNumber = 6;
  inline const ::std::string& chat_name() const;
  inline void set_chat_name(const ::std::string& value);
  inline void set_chat_name(const char* value);
  inline void set_chat_name(const char* value, size_t size);
  inline ::std::string* mutable_chat_name();
  inline ::std::string* release_chat_name();
  inline void set_allocated_chat_name(::std::string* chat_name);

  // optional fixed64 game_id = 7;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 7;
  inline ::google::protobuf::uint64 game_id() const;
  inline void set_game_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgClientChatInvite)
 private:
  inline void set_has_steam_id_invited();
  inline void clear_has_steam_id_invited();
  inline void set_has_steam_id_chat();
  inline void clear_has_steam_id_chat();
  inline void set_has_steam_id_patron();
  inline void clear_has_steam_id_patron();
  inline void set_has_chatroom_type();
  inline void clear_has_chatroom_type();
  inline void set_has_steam_id_friend_chat();
  inline void clear_has_steam_id_friend_chat();
  inline void set_has_chat_name();
  inline void clear_has_chat_name();
  inline void set_has_game_id();
  inline void clear_has_game_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 steam_id_invited_;
  ::google::protobuf::uint64 steam_id_chat_;
  ::google::protobuf::uint64 steam_id_patron_;
  ::google::protobuf::uint64 steam_id_friend_chat_;
  ::std::string* chat_name_;
  ::google::protobuf::uint64 game_id_;
  ::google::protobuf::int32 chatroom_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientChatInvite* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientConnectionStats_Stats_Logon : public ::google::protobuf::Message {
 public:
  CMsgClientConnectionStats_Stats_Logon();
  virtual ~CMsgClientConnectionStats_Stats_Logon();

  CMsgClientConnectionStats_Stats_Logon(const CMsgClientConnectionStats_Stats_Logon& from);

  inline CMsgClientConnectionStats_Stats_Logon& operator=(const CMsgClientConnectionStats_Stats_Logon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientConnectionStats_Stats_Logon& default_instance();

  void Swap(CMsgClientConnectionStats_Stats_Logon* other);

  // implements Message ----------------------------------------------

  CMsgClientConnectionStats_Stats_Logon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientConnectionStats_Stats_Logon& from);
  void MergeFrom(const CMsgClientConnectionStats_Stats_Logon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 connect_attempts = 1;
  inline bool has_connect_attempts() const;
  inline void clear_connect_attempts();
  static const int kConnectAttemptsFieldNumber = 1;
  inline ::google::protobuf::int32 connect_attempts() const;
  inline void set_connect_attempts(::google::protobuf::int32 value);

  // optional int32 connect_successes = 2;
  inline bool has_connect_successes() const;
  inline void clear_connect_successes();
  static const int kConnectSuccessesFieldNumber = 2;
  inline ::google::protobuf::int32 connect_successes() const;
  inline void set_connect_successes(::google::protobuf::int32 value);

  // optional int32 connect_failures = 3;
  inline bool has_connect_failures() const;
  inline void clear_connect_failures();
  static const int kConnectFailuresFieldNumber = 3;
  inline ::google::protobuf::int32 connect_failures() const;
  inline void set_connect_failures(::google::protobuf::int32 value);

  // optional int32 connections_dropped = 4;
  inline bool has_connections_dropped() const;
  inline void clear_connections_dropped();
  static const int kConnectionsDroppedFieldNumber = 4;
  inline ::google::protobuf::int32 connections_dropped() const;
  inline void set_connections_dropped(::google::protobuf::int32 value);

  // optional uint32 seconds_running = 5;
  inline bool has_seconds_running() const;
  inline void clear_seconds_running();
  static const int kSecondsRunningFieldNumber = 5;
  inline ::google::protobuf::uint32 seconds_running() const;
  inline void set_seconds_running(::google::protobuf::uint32 value);

  // optional uint32 msec_tologonthistime = 6;
  inline bool has_msec_tologonthistime() const;
  inline void clear_msec_tologonthistime();
  static const int kMsecTologonthistimeFieldNumber = 6;
  inline ::google::protobuf::uint32 msec_tologonthistime() const;
  inline void set_msec_tologonthistime(::google::protobuf::uint32 value);

  // optional uint32 count_bad_cms = 7;
  inline bool has_count_bad_cms() const;
  inline void clear_count_bad_cms();
  static const int kCountBadCmsFieldNumber = 7;
  inline ::google::protobuf::uint32 count_bad_cms() const;
  inline void set_count_bad_cms(::google::protobuf::uint32 value);

  // optional bool no_udp_connectivity = 8;
  inline bool has_no_udp_connectivity() const;
  inline void clear_no_udp_connectivity();
  static const int kNoUdpConnectivityFieldNumber = 8;
  inline bool no_udp_connectivity() const;
  inline void set_no_udp_connectivity(bool value);

  // optional bool no_tcp_connectivity = 9;
  inline bool has_no_tcp_connectivity() const;
  inline void clear_no_tcp_connectivity();
  static const int kNoTcpConnectivityFieldNumber = 9;
  inline bool no_tcp_connectivity() const;
  inline void set_no_tcp_connectivity(bool value);

  // optional bool no_websocket_443_connectivity = 10;
  inline bool has_no_websocket_443_connectivity() const;
  inline void clear_no_websocket_443_connectivity();
  static const int kNoWebsocket443ConnectivityFieldNumber = 10;
  inline bool no_websocket_443_connectivity() const;
  inline void set_no_websocket_443_connectivity(bool value);

  // optional bool no_websocket_non_443_connectivity = 11;
  inline bool has_no_websocket_non_443_connectivity() const;
  inline void clear_no_websocket_non_443_connectivity();
  static const int kNoWebsocketNon443ConnectivityFieldNumber = 11;
  inline bool no_websocket_non_443_connectivity() const;
  inline void set_no_websocket_non_443_connectivity(bool value);

  // @@protoc_insertion_point(class_scope:CMsgClientConnectionStats.Stats_Logon)
 private:
  inline void set_has_connect_attempts();
  inline void clear_has_connect_attempts();
  inline void set_has_connect_successes();
  inline void clear_has_connect_successes();
  inline void set_has_connect_failures();
  inline void clear_has_connect_failures();
  inline void set_has_connections_dropped();
  inline void clear_has_connections_dropped();
  inline void set_has_seconds_running();
  inline void clear_has_seconds_running();
  inline void set_has_msec_tologonthistime();
  inline void clear_has_msec_tologonthistime();
  inline void set_has_count_bad_cms();
  inline void clear_has_count_bad_cms();
  inline void set_has_no_udp_connectivity();
  inline void clear_has_no_udp_connectivity();
  inline void set_has_no_tcp_connectivity();
  inline void clear_has_no_tcp_connectivity();
  inline void set_has_no_websocket_443_connectivity();
  inline void clear_has_no_websocket_443_connectivity();
  inline void set_has_no_websocket_non_443_connectivity();
  inline void clear_has_no_websocket_non_443_connectivity();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 connect_attempts_;
  ::google::protobuf::int32 connect_successes_;
  ::google::protobuf::int32 connect_failures_;
  ::google::protobuf::int32 connections_dropped_;
  ::google::protobuf::uint32 seconds_running_;
  ::google::protobuf::uint32 msec_tologonthistime_;
  ::google::protobuf::uint32 count_bad_cms_;
  bool no_udp_connectivity_;
  bool no_tcp_connectivity_;
  bool no_websocket_443_connectivity_;
  bool no_websocket_non_443_connectivity_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientConnectionStats_Stats_Logon* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientConnectionStats_Stats_UDP : public ::google::protobuf::Message {
 public:
  CMsgClientConnectionStats_Stats_UDP();
  virtual ~CMsgClientConnectionStats_Stats_UDP();

  CMsgClientConnectionStats_Stats_UDP(const CMsgClientConnectionStats_Stats_UDP& from);

  inline CMsgClientConnectionStats_Stats_UDP& operator=(const CMsgClientConnectionStats_Stats_UDP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientConnectionStats_Stats_UDP& default_instance();

  void Swap(CMsgClientConnectionStats_Stats_UDP* other);

  // implements Message ----------------------------------------------

  CMsgClientConnectionStats_Stats_UDP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientConnectionStats_Stats_UDP& from);
  void MergeFrom(const CMsgClientConnectionStats_Stats_UDP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 pkts_sent = 1;
  inline bool has_pkts_sent() const;
  inline void clear_pkts_sent();
  static const int kPktsSentFieldNumber = 1;
  inline ::google::protobuf::uint64 pkts_sent() const;
  inline void set_pkts_sent(::google::protobuf::uint64 value);

  // optional uint64 bytes_sent = 2;
  inline bool has_bytes_sent() const;
  inline void clear_bytes_sent();
  static const int kBytesSentFieldNumber = 2;
  inline ::google::protobuf::uint64 bytes_sent() const;
  inline void set_bytes_sent(::google::protobuf::uint64 value);

  // optional uint64 pkts_recv = 3;
  inline bool has_pkts_recv() const;
  inline void clear_pkts_recv();
  static const int kPktsRecvFieldNumber = 3;
  inline ::google::protobuf::uint64 pkts_recv() const;
  inline void set_pkts_recv(::google::protobuf::uint64 value);

  // optional uint64 pkts_processed = 4;
  inline bool has_pkts_processed() const;
  inline void clear_pkts_processed();
  static const int kPktsProcessedFieldNumber = 4;
  inline ::google::protobuf::uint64 pkts_processed() const;
  inline void set_pkts_processed(::google::protobuf::uint64 value);

  // optional uint64 bytes_recv = 5;
  inline bool has_bytes_recv() const;
  inline void clear_bytes_recv();
  static const int kBytesRecvFieldNumber = 5;
  inline ::google::protobuf::uint64 bytes_recv() const;
  inline void set_bytes_recv(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgClientConnectionStats.Stats_UDP)
 private:
  inline void set_has_pkts_sent();
  inline void clear_has_pkts_sent();
  inline void set_has_bytes_sent();
  inline void clear_has_bytes_sent();
  inline void set_has_pkts_recv();
  inline void clear_has_pkts_recv();
  inline void set_has_pkts_processed();
  inline void clear_has_pkts_processed();
  inline void set_has_bytes_recv();
  inline void clear_has_bytes_recv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 pkts_sent_;
  ::google::protobuf::uint64 bytes_sent_;
  ::google::protobuf::uint64 pkts_recv_;
  ::google::protobuf::uint64 pkts_processed_;
  ::google::protobuf::uint64 bytes_recv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientConnectionStats_Stats_UDP* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientConnectionStats_Stats_VConn : public ::google::protobuf::Message {
 public:
  CMsgClientConnectionStats_Stats_VConn();
  virtual ~CMsgClientConnectionStats_Stats_VConn();

  CMsgClientConnectionStats_Stats_VConn(const CMsgClientConnectionStats_Stats_VConn& from);

  inline CMsgClientConnectionStats_Stats_VConn& operator=(const CMsgClientConnectionStats_Stats_VConn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientConnectionStats_Stats_VConn& default_instance();

  void Swap(CMsgClientConnectionStats_Stats_VConn* other);

  // implements Message ----------------------------------------------

  CMsgClientConnectionStats_Stats_VConn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientConnectionStats_Stats_VConn& from);
  void MergeFrom(const CMsgClientConnectionStats_Stats_VConn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 connections_udp = 1;
  inline bool has_connections_udp() const;
  inline void clear_connections_udp();
  static const int kConnectionsUdpFieldNumber = 1;
  inline ::google::protobuf::uint32 connections_udp() const;
  inline void set_connections_udp(::google::protobuf::uint32 value);

  // optional uint32 connections_tcp = 2;
  inline bool has_connections_tcp() const;
  inline void clear_connections_tcp();
  static const int kConnectionsTcpFieldNumber = 2;
  inline ::google::protobuf::uint32 connections_tcp() const;
  inline void set_connections_tcp(::google::protobuf::uint32 value);

  // optional .CMsgClientConnectionStats.Stats_UDP stats_udp = 3;
  inline bool has_stats_udp() const;
  inline void clear_stats_udp();
  static const int kStatsUdpFieldNumber = 3;
  inline const ::CMsgClientConnectionStats_Stats_UDP& stats_udp() const;
  inline ::CMsgClientConnectionStats_Stats_UDP* mutable_stats_udp();
  inline ::CMsgClientConnectionStats_Stats_UDP* release_stats_udp();
  inline void set_allocated_stats_udp(::CMsgClientConnectionStats_Stats_UDP* stats_udp);

  // optional uint64 pkts_abandoned = 4;
  inline bool has_pkts_abandoned() const;
  inline void clear_pkts_abandoned();
  static const int kPktsAbandonedFieldNumber = 4;
  inline ::google::protobuf::uint64 pkts_abandoned() const;
  inline void set_pkts_abandoned(::google::protobuf::uint64 value);

  // optional uint64 conn_req_received = 5;
  inline bool has_conn_req_received() const;
  inline void clear_conn_req_received();
  static const int kConnReqReceivedFieldNumber = 5;
  inline ::google::protobuf::uint64 conn_req_received() const;
  inline void set_conn_req_received(::google::protobuf::uint64 value);

  // optional uint64 pkts_resent = 6;
  inline bool has_pkts_resent() const;
  inline void clear_pkts_resent();
  static const int kPktsResentFieldNumber = 6;
  inline ::google::protobuf::uint64 pkts_resent() const;
  inline void set_pkts_resent(::google::protobuf::uint64 value);

  // optional uint64 msgs_sent = 7;
  inline bool has_msgs_sent() const;
  inline void clear_msgs_sent();
  static const int kMsgsSentFieldNumber = 7;
  inline ::google::protobuf::uint64 msgs_sent() const;
  inline void set_msgs_sent(::google::protobuf::uint64 value);

  // optional uint64 msgs_sent_failed = 8;
  inline bool has_msgs_sent_failed() const;
  inline void clear_msgs_sent_failed();
  static const int kMsgsSentFailedFieldNumber = 8;
  inline ::google::protobuf::uint64 msgs_sent_failed() const;
  inline void set_msgs_sent_failed(::google::protobuf::uint64 value);

  // optional uint64 msgs_recv = 9;
  inline bool has_msgs_recv() const;
  inline void clear_msgs_recv();
  static const int kMsgsRecvFieldNumber = 9;
  inline ::google::protobuf::uint64 msgs_recv() const;
  inline void set_msgs_recv(::google::protobuf::uint64 value);

  // optional uint64 datagrams_sent = 10;
  inline bool has_datagrams_sent() const;
  inline void clear_datagrams_sent();
  static const int kDatagramsSentFieldNumber = 10;
  inline ::google::protobuf::uint64 datagrams_sent() const;
  inline void set_datagrams_sent(::google::protobuf::uint64 value);

  // optional uint64 datagrams_recv = 11;
  inline bool has_datagrams_recv() const;
  inline void clear_datagrams_recv();
  static const int kDatagramsRecvFieldNumber = 11;
  inline ::google::protobuf::uint64 datagrams_recv() const;
  inline void set_datagrams_recv(::google::protobuf::uint64 value);

  // optional uint64 bad_pkts_recv = 12;
  inline bool has_bad_pkts_recv() const;
  inline void clear_bad_pkts_recv();
  static const int kBadPktsRecvFieldNumber = 12;
  inline ::google::protobuf::uint64 bad_pkts_recv() const;
  inline void set_bad_pkts_recv(::google::protobuf::uint64 value);

  // optional uint64 unknown_conn_pkts_recv = 13;
  inline bool has_unknown_conn_pkts_recv() const;
  inline void clear_unknown_conn_pkts_recv();
  static const int kUnknownConnPktsRecvFieldNumber = 13;
  inline ::google::protobuf::uint64 unknown_conn_pkts_recv() const;
  inline void set_unknown_conn_pkts_recv(::google::protobuf::uint64 value);

  // optional uint64 missed_pkts_recv = 14;
  inline bool has_missed_pkts_recv() const;
  inline void clear_missed_pkts_recv();
  static const int kMissedPktsRecvFieldNumber = 14;
  inline ::google::protobuf::uint64 missed_pkts_recv() const;
  inline void set_missed_pkts_recv(::google::protobuf::uint64 value);

  // optional uint64 dup_pkts_recv = 15;
  inline bool has_dup_pkts_recv() const;
  inline void clear_dup_pkts_recv();
  static const int kDupPktsRecvFieldNumber = 15;
  inline ::google::protobuf::uint64 dup_pkts_recv() const;
  inline void set_dup_pkts_recv(::google::protobuf::uint64 value);

  // optional uint64 failed_connect_challenges = 16;
  inline bool has_failed_connect_challenges() const;
  inline void clear_failed_connect_challenges();
  static const int kFailedConnectChallengesFieldNumber = 16;
  inline ::google::protobuf::uint64 failed_connect_challenges() const;
  inline void set_failed_connect_challenges(::google::protobuf::uint64 value);

  // optional uint32 micro_sec_avg_latency = 17;
  inline bool has_micro_sec_avg_latency() const;
  inline void clear_micro_sec_avg_latency();
  static const int kMicroSecAvgLatencyFieldNumber = 17;
  inline ::google::protobuf::uint32 micro_sec_avg_latency() const;
  inline void set_micro_sec_avg_latency(::google::protobuf::uint32 value);

  // optional uint32 micro_sec_min_latency = 18;
  inline bool has_micro_sec_min_latency() const;
  inline void clear_micro_sec_min_latency();
  static const int kMicroSecMinLatencyFieldNumber = 18;
  inline ::google::protobuf::uint32 micro_sec_min_latency() const;
  inline void set_micro_sec_min_latency(::google::protobuf::uint32 value);

  // optional uint32 micro_sec_max_latency = 19;
  inline bool has_micro_sec_max_latency() const;
  inline void clear_micro_sec_max_latency();
  static const int kMicroSecMaxLatencyFieldNumber = 19;
  inline ::google::protobuf::uint32 micro_sec_max_latency() const;
  inline void set_micro_sec_max_latency(::google::protobuf::uint32 value);

  // optional uint32 mem_pool_msg_in_use = 20;
  inline bool has_mem_pool_msg_in_use() const;
  inline void clear_mem_pool_msg_in_use();
  static const int kMemPoolMsgInUseFieldNumber = 20;
  inline ::google::protobuf::uint32 mem_pool_msg_in_use() const;
  inline void set_mem_pool_msg_in_use(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientConnectionStats.Stats_VConn)
 private:
  inline void set_has_connections_udp();
  inline void clear_has_connections_udp();
  inline void set_has_connections_tcp();
  inline void clear_has_connections_tcp();
  inline void set_has_stats_udp();
  inline void clear_has_stats_udp();
  inline void set_has_pkts_abandoned();
  inline void clear_has_pkts_abandoned();
  inline void set_has_conn_req_received();
  inline void clear_has_conn_req_received();
  inline void set_has_pkts_resent();
  inline void clear_has_pkts_resent();
  inline void set_has_msgs_sent();
  inline void clear_has_msgs_sent();
  inline void set_has_msgs_sent_failed();
  inline void clear_has_msgs_sent_failed();
  inline void set_has_msgs_recv();
  inline void clear_has_msgs_recv();
  inline void set_has_datagrams_sent();
  inline void clear_has_datagrams_sent();
  inline void set_has_datagrams_recv();
  inline void clear_has_datagrams_recv();
  inline void set_has_bad_pkts_recv();
  inline void clear_has_bad_pkts_recv();
  inline void set_has_unknown_conn_pkts_recv();
  inline void clear_has_unknown_conn_pkts_recv();
  inline void set_has_missed_pkts_recv();
  inline void clear_has_missed_pkts_recv();
  inline void set_has_dup_pkts_recv();
  inline void clear_has_dup_pkts_recv();
  inline void set_has_failed_connect_challenges();
  inline void clear_has_failed_connect_challenges();
  inline void set_has_micro_sec_avg_latency();
  inline void clear_has_micro_sec_avg_latency();
  inline void set_has_micro_sec_min_latency();
  inline void clear_has_micro_sec_min_latency();
  inline void set_has_micro_sec_max_latency();
  inline void clear_has_micro_sec_max_latency();
  inline void set_has_mem_pool_msg_in_use();
  inline void clear_has_mem_pool_msg_in_use();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 connections_udp_;
  ::google::protobuf::uint32 connections_tcp_;
  ::CMsgClientConnectionStats_Stats_UDP* stats_udp_;
  ::google::protobuf::uint64 pkts_abandoned_;
  ::google::protobuf::uint64 conn_req_received_;
  ::google::protobuf::uint64 pkts_resent_;
  ::google::protobuf::uint64 msgs_sent_;
  ::google::protobuf::uint64 msgs_sent_failed_;
  ::google::protobuf::uint64 msgs_recv_;
  ::google::protobuf::uint64 datagrams_sent_;
  ::google::protobuf::uint64 datagrams_recv_;
  ::google::protobuf::uint64 bad_pkts_recv_;
  ::google::protobuf::uint64 unknown_conn_pkts_recv_;
  ::google::protobuf::uint64 missed_pkts_recv_;
  ::google::protobuf::uint64 dup_pkts_recv_;
  ::google::protobuf::uint64 failed_connect_challenges_;
  ::google::protobuf::uint32 micro_sec_avg_latency_;
  ::google::protobuf::uint32 micro_sec_min_latency_;
  ::google::protobuf::uint32 micro_sec_max_latency_;
  ::google::protobuf::uint32 mem_pool_msg_in_use_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientConnectionStats_Stats_VConn* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientConnectionStats : public ::google::protobuf::Message {
 public:
  CMsgClientConnectionStats();
  virtual ~CMsgClientConnectionStats();

  CMsgClientConnectionStats(const CMsgClientConnectionStats& from);

  inline CMsgClientConnectionStats& operator=(const CMsgClientConnectionStats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientConnectionStats& default_instance();

  void Swap(CMsgClientConnectionStats* other);

  // implements Message ----------------------------------------------

  CMsgClientConnectionStats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientConnectionStats& from);
  void MergeFrom(const CMsgClientConnectionStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgClientConnectionStats_Stats_Logon Stats_Logon;
  typedef CMsgClientConnectionStats_Stats_UDP Stats_UDP;
  typedef CMsgClientConnectionStats_Stats_VConn Stats_VConn;

  // accessors -------------------------------------------------------

  // optional .CMsgClientConnectionStats.Stats_Logon stats_logon = 1;
  inline bool has_stats_logon() const;
  inline void clear_stats_logon();
  static const int kStatsLogonFieldNumber = 1;
  inline const ::CMsgClientConnectionStats_Stats_Logon& stats_logon() const;
  inline ::CMsgClientConnectionStats_Stats_Logon* mutable_stats_logon();
  inline ::CMsgClientConnectionStats_Stats_Logon* release_stats_logon();
  inline void set_allocated_stats_logon(::CMsgClientConnectionStats_Stats_Logon* stats_logon);

  // optional .CMsgClientConnectionStats.Stats_VConn stats_vconn = 2;
  inline bool has_stats_vconn() const;
  inline void clear_stats_vconn();
  static const int kStatsVconnFieldNumber = 2;
  inline const ::CMsgClientConnectionStats_Stats_VConn& stats_vconn() const;
  inline ::CMsgClientConnectionStats_Stats_VConn* mutable_stats_vconn();
  inline ::CMsgClientConnectionStats_Stats_VConn* release_stats_vconn();
  inline void set_allocated_stats_vconn(::CMsgClientConnectionStats_Stats_VConn* stats_vconn);

  // @@protoc_insertion_point(class_scope:CMsgClientConnectionStats)
 private:
  inline void set_has_stats_logon();
  inline void clear_has_stats_logon();
  inline void set_has_stats_vconn();
  inline void clear_has_stats_vconn();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CMsgClientConnectionStats_Stats_Logon* stats_logon_;
  ::CMsgClientConnectionStats_Stats_VConn* stats_vconn_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientConnectionStats* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientServersAvailable_Server_Types_Available : public ::google::protobuf::Message {
 public:
  CMsgClientServersAvailable_Server_Types_Available();
  virtual ~CMsgClientServersAvailable_Server_Types_Available();

  CMsgClientServersAvailable_Server_Types_Available(const CMsgClientServersAvailable_Server_Types_Available& from);

  inline CMsgClientServersAvailable_Server_Types_Available& operator=(const CMsgClientServersAvailable_Server_Types_Available& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientServersAvailable_Server_Types_Available& default_instance();

  void Swap(CMsgClientServersAvailable_Server_Types_Available* other);

  // implements Message ----------------------------------------------

  CMsgClientServersAvailable_Server_Types_Available* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientServersAvailable_Server_Types_Available& from);
  void MergeFrom(const CMsgClientServersAvailable_Server_Types_Available& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 server = 1;
  inline bool has_server() const;
  inline void clear_server();
  static const int kServerFieldNumber = 1;
  inline ::google::protobuf::uint32 server() const;
  inline void set_server(::google::protobuf::uint32 value);

  // optional bool changed = 2;
  inline bool has_changed() const;
  inline void clear_changed();
  static const int kChangedFieldNumber = 2;
  inline bool changed() const;
  inline void set_changed(bool value);

  // @@protoc_insertion_point(class_scope:CMsgClientServersAvailable.Server_Types_Available)
 private:
  inline void set_has_server();
  inline void clear_has_server();
  inline void set_has_changed();
  inline void clear_has_changed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 server_;
  bool changed_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientServersAvailable_Server_Types_Available* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientServersAvailable : public ::google::protobuf::Message {
 public:
  CMsgClientServersAvailable();
  virtual ~CMsgClientServersAvailable();

  CMsgClientServersAvailable(const CMsgClientServersAvailable& from);

  inline CMsgClientServersAvailable& operator=(const CMsgClientServersAvailable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientServersAvailable& default_instance();

  void Swap(CMsgClientServersAvailable* other);

  // implements Message ----------------------------------------------

  CMsgClientServersAvailable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientServersAvailable& from);
  void MergeFrom(const CMsgClientServersAvailable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgClientServersAvailable_Server_Types_Available Server_Types_Available;

  // accessors -------------------------------------------------------

  // repeated .CMsgClientServersAvailable.Server_Types_Available server_types_available = 1;
  inline int server_types_available_size() const;
  inline void clear_server_types_available();
  static const int kServerTypesAvailableFieldNumber = 1;
  inline const ::CMsgClientServersAvailable_Server_Types_Available& server_types_available(int index) const;
  inline ::CMsgClientServersAvailable_Server_Types_Available* mutable_server_types_available(int index);
  inline ::CMsgClientServersAvailable_Server_Types_Available* add_server_types_available();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgClientServersAvailable_Server_Types_Available >&
      server_types_available() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgClientServersAvailable_Server_Types_Available >*
      mutable_server_types_available();

  // optional uint32 server_type_for_auth_services = 2;
  inline bool has_server_type_for_auth_services() const;
  inline void clear_server_type_for_auth_services();
  static const int kServerTypeForAuthServicesFieldNumber = 2;
  inline ::google::protobuf::uint32 server_type_for_auth_services() const;
  inline void set_server_type_for_auth_services(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientServersAvailable)
 private:
  inline void set_has_server_type_for_auth_services();
  inline void clear_has_server_type_for_auth_services();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CMsgClientServersAvailable_Server_Types_Available > server_types_available_;
  ::google::protobuf::uint32 server_type_for_auth_services_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientServersAvailable* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientReportOverlayDetourFailure : public ::google::protobuf::Message {
 public:
  CMsgClientReportOverlayDetourFailure();
  virtual ~CMsgClientReportOverlayDetourFailure();

  CMsgClientReportOverlayDetourFailure(const CMsgClientReportOverlayDetourFailure& from);

  inline CMsgClientReportOverlayDetourFailure& operator=(const CMsgClientReportOverlayDetourFailure& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientReportOverlayDetourFailure& default_instance();

  void Swap(CMsgClientReportOverlayDetourFailure* other);

  // implements Message ----------------------------------------------

  CMsgClientReportOverlayDetourFailure* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientReportOverlayDetourFailure& from);
  void MergeFrom(const CMsgClientReportOverlayDetourFailure& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string failure_strings = 1;
  inline int failure_strings_size() const;
  inline void clear_failure_strings();
  static const int kFailureStringsFieldNumber = 1;
  inline const ::std::string& failure_strings(int index) const;
  inline ::std::string* mutable_failure_strings(int index);
  inline void set_failure_strings(int index, const ::std::string& value);
  inline void set_failure_strings(int index, const char* value);
  inline void set_failure_strings(int index, const char* value, size_t size);
  inline ::std::string* add_failure_strings();
  inline void add_failure_strings(const ::std::string& value);
  inline void add_failure_strings(const char* value);
  inline void add_failure_strings(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& failure_strings() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_failure_strings();

  // @@protoc_insertion_point(class_scope:CMsgClientReportOverlayDetourFailure)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> failure_strings_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientReportOverlayDetourFailure* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientRequestEncryptedAppTicket : public ::google::protobuf::Message {
 public:
  CMsgClientRequestEncryptedAppTicket();
  virtual ~CMsgClientRequestEncryptedAppTicket();

  CMsgClientRequestEncryptedAppTicket(const CMsgClientRequestEncryptedAppTicket& from);

  inline CMsgClientRequestEncryptedAppTicket& operator=(const CMsgClientRequestEncryptedAppTicket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientRequestEncryptedAppTicket& default_instance();

  void Swap(CMsgClientRequestEncryptedAppTicket* other);

  // implements Message ----------------------------------------------

  CMsgClientRequestEncryptedAppTicket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientRequestEncryptedAppTicket& from);
  void MergeFrom(const CMsgClientRequestEncryptedAppTicket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 app_id = 1;
  inline bool has_app_id() const;
  inline void clear_app_id();
  static const int kAppIdFieldNumber = 1;
  inline ::google::protobuf::uint32 app_id() const;
  inline void set_app_id(::google::protobuf::uint32 value);

  // optional bytes userdata = 2;
  inline bool has_userdata() const;
  inline void clear_userdata();
  static const int kUserdataFieldNumber = 2;
  inline const ::std::string& userdata() const;
  inline void set_userdata(const ::std::string& value);
  inline void set_userdata(const char* value);
  inline void set_userdata(const void* value, size_t size);
  inline ::std::string* mutable_userdata();
  inline ::std::string* release_userdata();
  inline void set_allocated_userdata(::std::string* userdata);

  // @@protoc_insertion_point(class_scope:CMsgClientRequestEncryptedAppTicket)
 private:
  inline void set_has_app_id();
  inline void clear_has_app_id();
  inline void set_has_userdata();
  inline void clear_has_userdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* userdata_;
  ::google::protobuf::uint32 app_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientRequestEncryptedAppTicket* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientRequestEncryptedAppTicketResponse : public ::google::protobuf::Message {
 public:
  CMsgClientRequestEncryptedAppTicketResponse();
  virtual ~CMsgClientRequestEncryptedAppTicketResponse();

  CMsgClientRequestEncryptedAppTicketResponse(const CMsgClientRequestEncryptedAppTicketResponse& from);

  inline CMsgClientRequestEncryptedAppTicketResponse& operator=(const CMsgClientRequestEncryptedAppTicketResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientRequestEncryptedAppTicketResponse& default_instance();

  void Swap(CMsgClientRequestEncryptedAppTicketResponse* other);

  // implements Message ----------------------------------------------

  CMsgClientRequestEncryptedAppTicketResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientRequestEncryptedAppTicketResponse& from);
  void MergeFrom(const CMsgClientRequestEncryptedAppTicketResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 app_id = 1;
  inline bool has_app_id() const;
  inline void clear_app_id();
  static const int kAppIdFieldNumber = 1;
  inline ::google::protobuf::uint32 app_id() const;
  inline void set_app_id(::google::protobuf::uint32 value);

  // optional int32 eresult = 2 [default = 2];
  inline bool has_eresult() const;
  inline void clear_eresult();
  static const int kEresultFieldNumber = 2;
  inline ::google::protobuf::int32 eresult() const;
  inline void set_eresult(::google::protobuf::int32 value);

  // optional .EncryptedAppTicket encrypted_app_ticket = 3;
  inline bool has_encrypted_app_ticket() const;
  inline void clear_encrypted_app_ticket();
  static const int kEncryptedAppTicketFieldNumber = 3;
  inline const ::EncryptedAppTicket& encrypted_app_ticket() const;
  inline ::EncryptedAppTicket* mutable_encrypted_app_ticket();
  inline ::EncryptedAppTicket* release_encrypted_app_ticket();
  inline void set_allocated_encrypted_app_ticket(::EncryptedAppTicket* encrypted_app_ticket);

  // @@protoc_insertion_point(class_scope:CMsgClientRequestEncryptedAppTicketResponse)
 private:
  inline void set_has_app_id();
  inline void clear_has_app_id();
  inline void set_has_eresult();
  inline void clear_has_eresult();
  inline void set_has_encrypted_app_ticket();
  inline void clear_has_encrypted_app_ticket();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 app_id_;
  ::google::protobuf::int32 eresult_;
  ::EncryptedAppTicket* encrypted_app_ticket_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientRequestEncryptedAppTicketResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientWalletInfoUpdate : public ::google::protobuf::Message {
 public:
  CMsgClientWalletInfoUpdate();
  virtual ~CMsgClientWalletInfoUpdate();

  CMsgClientWalletInfoUpdate(const CMsgClientWalletInfoUpdate& from);

  inline CMsgClientWalletInfoUpdate& operator=(const CMsgClientWalletInfoUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientWalletInfoUpdate& default_instance();

  void Swap(CMsgClientWalletInfoUpdate* other);

  // implements Message ----------------------------------------------

  CMsgClientWalletInfoUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientWalletInfoUpdate& from);
  void MergeFrom(const CMsgClientWalletInfoUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool has_wallet = 1;
  inline bool has_has_wallet() const;
  inline void clear_has_wallet();
  static const int kHasWalletFieldNumber = 1;
  inline bool has_wallet() const;
  inline void set_has_wallet(bool value);

  // optional int32 balance = 2;
  inline bool has_balance() const;
  inline void clear_balance();
  static const int kBalanceFieldNumber = 2;
  inline ::google::protobuf::int32 balance() const;
  inline void set_balance(::google::protobuf::int32 value);

  // optional int32 currency = 3;
  inline bool has_currency() const;
  inline void clear_currency();
  static const int kCurrencyFieldNumber = 3;
  inline ::google::protobuf::int32 currency() const;
  inline void set_currency(::google::protobuf::int32 value);

  // optional int32 balance_delayed = 4;
  inline bool has_balance_delayed() const;
  inline void clear_balance_delayed();
  static const int kBalanceDelayedFieldNumber = 4;
  inline ::google::protobuf::int32 balance_delayed() const;
  inline void set_balance_delayed(::google::protobuf::int32 value);

  // optional int64 balance64 = 5;
  inline bool has_balance64() const;
  inline void clear_balance64();
  static const int kBalance64FieldNumber = 5;
  inline ::google::protobuf::int64 balance64() const;
  inline void set_balance64(::google::protobuf::int64 value);

  // optional int64 balance64_delayed = 6;
  inline bool has_balance64_delayed() const;
  inline void clear_balance64_delayed();
  static const int kBalance64DelayedFieldNumber = 6;
  inline ::google::protobuf::int64 balance64_delayed() const;
  inline void set_balance64_delayed(::google::protobuf::int64 value);

  // optional int32 realm = 7;
  inline bool has_realm() const;
  inline void clear_realm();
  static const int kRealmFieldNumber = 7;
  inline ::google::protobuf::int32 realm() const;
  inline void set_realm(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientWalletInfoUpdate)
 private:
  inline void set_has_has_wallet();
  inline void clear_has_has_wallet();
  inline void set_has_balance();
  inline void clear_has_balance();
  inline void set_has_currency();
  inline void clear_has_currency();
  inline void set_has_balance_delayed();
  inline void clear_has_balance_delayed();
  inline void set_has_balance64();
  inline void clear_has_balance64();
  inline void set_has_balance64_delayed();
  inline void clear_has_balance64_delayed();
  inline void set_has_realm();
  inline void clear_has_realm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool has_wallet_;
  ::google::protobuf::int32 balance_;
  ::google::protobuf::int32 currency_;
  ::google::protobuf::int32 balance_delayed_;
  ::google::protobuf::int64 balance64_;
  ::google::protobuf::int64 balance64_delayed_;
  ::google::protobuf::int32 realm_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientWalletInfoUpdate* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientAMGetClanOfficers : public ::google::protobuf::Message {
 public:
  CMsgClientAMGetClanOfficers();
  virtual ~CMsgClientAMGetClanOfficers();

  CMsgClientAMGetClanOfficers(const CMsgClientAMGetClanOfficers& from);

  inline CMsgClientAMGetClanOfficers& operator=(const CMsgClientAMGetClanOfficers& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientAMGetClanOfficers& default_instance();

  void Swap(CMsgClientAMGetClanOfficers* other);

  // implements Message ----------------------------------------------

  CMsgClientAMGetClanOfficers* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientAMGetClanOfficers& from);
  void MergeFrom(const CMsgClientAMGetClanOfficers& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steamid_clan = 1;
  inline bool has_steamid_clan() const;
  inline void clear_steamid_clan();
  static const int kSteamidClanFieldNumber = 1;
  inline ::google::protobuf::uint64 steamid_clan() const;
  inline void set_steamid_clan(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgClientAMGetClanOfficers)
 private:
  inline void set_has_steamid_clan();
  inline void clear_has_steamid_clan();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 steamid_clan_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientAMGetClanOfficers* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientAMGetClanOfficersResponse : public ::google::protobuf::Message {
 public:
  CMsgClientAMGetClanOfficersResponse();
  virtual ~CMsgClientAMGetClanOfficersResponse();

  CMsgClientAMGetClanOfficersResponse(const CMsgClientAMGetClanOfficersResponse& from);

  inline CMsgClientAMGetClanOfficersResponse& operator=(const CMsgClientAMGetClanOfficersResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientAMGetClanOfficersResponse& default_instance();

  void Swap(CMsgClientAMGetClanOfficersResponse* other);

  // implements Message ----------------------------------------------

  CMsgClientAMGetClanOfficersResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientAMGetClanOfficersResponse& from);
  void MergeFrom(const CMsgClientAMGetClanOfficersResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 eresult = 1 [default = 2];
  inline bool has_eresult() const;
  inline void clear_eresult();
  static const int kEresultFieldNumber = 1;
  inline ::google::protobuf::int32 eresult() const;
  inline void set_eresult(::google::protobuf::int32 value);

  // optional fixed64 steamid_clan = 2;
  inline bool has_steamid_clan() const;
  inline void clear_steamid_clan();
  static const int kSteamidClanFieldNumber = 2;
  inline ::google::protobuf::uint64 steamid_clan() const;
  inline void set_steamid_clan(::google::protobuf::uint64 value);

  // optional int32 officer_count = 3;
  inline bool has_officer_count() const;
  inline void clear_officer_count();
  static const int kOfficerCountFieldNumber = 3;
  inline ::google::protobuf::int32 officer_count() const;
  inline void set_officer_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientAMGetClanOfficersResponse)
 private:
  inline void set_has_eresult();
  inline void clear_has_eresult();
  inline void set_has_steamid_clan();
  inline void clear_has_steamid_clan();
  inline void set_has_officer_count();
  inline void clear_has_officer_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 steamid_clan_;
  ::google::protobuf::int32 eresult_;
  ::google::protobuf::int32 officer_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientAMGetClanOfficersResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientAMGetPersonaNameHistory_IdInstance : public ::google::protobuf::Message {
 public:
  CMsgClientAMGetPersonaNameHistory_IdInstance();
  virtual ~CMsgClientAMGetPersonaNameHistory_IdInstance();

  CMsgClientAMGetPersonaNameHistory_IdInstance(const CMsgClientAMGetPersonaNameHistory_IdInstance& from);

  inline CMsgClientAMGetPersonaNameHistory_IdInstance& operator=(const CMsgClientAMGetPersonaNameHistory_IdInstance& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientAMGetPersonaNameHistory_IdInstance& default_instance();

  void Swap(CMsgClientAMGetPersonaNameHistory_IdInstance* other);

  // implements Message ----------------------------------------------

  CMsgClientAMGetPersonaNameHistory_IdInstance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientAMGetPersonaNameHistory_IdInstance& from);
  void MergeFrom(const CMsgClientAMGetPersonaNameHistory_IdInstance& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steamid = 1;
  inline bool has_steamid() const;
  inline void clear_steamid();
  static const int kSteamidFieldNumber = 1;
  inline ::google::protobuf::uint64 steamid() const;
  inline void set_steamid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgClientAMGetPersonaNameHistory.IdInstance)
 private:
  inline void set_has_steamid();
  inline void clear_has_steamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 steamid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientAMGetPersonaNameHistory_IdInstance* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientAMGetPersonaNameHistory : public ::google::protobuf::Message {
 public:
  CMsgClientAMGetPersonaNameHistory();
  virtual ~CMsgClientAMGetPersonaNameHistory();

  CMsgClientAMGetPersonaNameHistory(const CMsgClientAMGetPersonaNameHistory& from);

  inline CMsgClientAMGetPersonaNameHistory& operator=(const CMsgClientAMGetPersonaNameHistory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientAMGetPersonaNameHistory& default_instance();

  void Swap(CMsgClientAMGetPersonaNameHistory* other);

  // implements Message ----------------------------------------------

  CMsgClientAMGetPersonaNameHistory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientAMGetPersonaNameHistory& from);
  void MergeFrom(const CMsgClientAMGetPersonaNameHistory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgClientAMGetPersonaNameHistory_IdInstance IdInstance;

  // accessors -------------------------------------------------------

  // optional int32 id_count = 1;
  inline bool has_id_count() const;
  inline void clear_id_count();
  static const int kIdCountFieldNumber = 1;
  inline ::google::protobuf::int32 id_count() const;
  inline void set_id_count(::google::protobuf::int32 value);

  // repeated .CMsgClientAMGetPersonaNameHistory.IdInstance Ids = 2;
  inline int ids_size() const;
  inline void clear_ids();
  static const int kIdsFieldNumber = 2;
  inline const ::CMsgClientAMGetPersonaNameHistory_IdInstance& ids(int index) const;
  inline ::CMsgClientAMGetPersonaNameHistory_IdInstance* mutable_ids(int index);
  inline ::CMsgClientAMGetPersonaNameHistory_IdInstance* add_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgClientAMGetPersonaNameHistory_IdInstance >&
      ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgClientAMGetPersonaNameHistory_IdInstance >*
      mutable_ids();

  // @@protoc_insertion_point(class_scope:CMsgClientAMGetPersonaNameHistory)
 private:
  inline void set_has_id_count();
  inline void clear_has_id_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CMsgClientAMGetPersonaNameHistory_IdInstance > ids_;
  ::google::protobuf::int32 id_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientAMGetPersonaNameHistory* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance : public ::google::protobuf::Message {
 public:
  CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance();
  virtual ~CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance();

  CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance& from);

  inline CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance& operator=(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance& default_instance();

  void Swap(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* other);

  // implements Message ----------------------------------------------

  CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance& from);
  void MergeFrom(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 name_since = 1;
  inline bool has_name_since() const;
  inline void clear_name_since();
  static const int kNameSinceFieldNumber = 1;
  inline ::google::protobuf::uint32 name_since() const;
  inline void set_name_since(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance)
 private:
  inline void set_has_name_since();
  inline void clear_has_name_since();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 name_since_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance : public ::google::protobuf::Message {
 public:
  CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance();
  virtual ~CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance();

  CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance& from);

  inline CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance& operator=(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance& default_instance();

  void Swap(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* other);

  // implements Message ----------------------------------------------

  CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance& from);
  void MergeFrom(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance NameInstance;

  // accessors -------------------------------------------------------

  // optional int32 eresult = 1 [default = 2];
  inline bool has_eresult() const;
  inline void clear_eresult();
  static const int kEresultFieldNumber = 1;
  inline ::google::protobuf::int32 eresult() const;
  inline void set_eresult(::google::protobuf::int32 value);

  // optional fixed64 steamid = 2;
  inline bool has_steamid() const;
  inline void clear_steamid();
  static const int kSteamidFieldNumber = 2;
  inline ::google::protobuf::uint64 steamid() const;
  inline void set_steamid(::google::protobuf::uint64 value);

  // repeated .CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance names = 3;
  inline int names_size() const;
  inline void clear_names();
  static const int kNamesFieldNumber = 3;
  inline const ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance& names(int index) const;
  inline ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* mutable_names(int index);
  inline ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* add_names();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance >&
      names() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance >*
      mutable_names();

  // @@protoc_insertion_point(class_scope:CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance)
 private:
  inline void set_has_eresult();
  inline void clear_has_eresult();
  inline void set_has_steamid();
  inline void clear_has_steamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 steamid_;
  ::google::protobuf::RepeatedPtrField< ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance > names_;
  ::google::protobuf::int32 eresult_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientAMGetPersonaNameHistoryResponse : public ::google::protobuf::Message {
 public:
  CMsgClientAMGetPersonaNameHistoryResponse();
  virtual ~CMsgClientAMGetPersonaNameHistoryResponse();

  CMsgClientAMGetPersonaNameHistoryResponse(const CMsgClientAMGetPersonaNameHistoryResponse& from);

  inline CMsgClientAMGetPersonaNameHistoryResponse& operator=(const CMsgClientAMGetPersonaNameHistoryResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientAMGetPersonaNameHistoryResponse& default_instance();

  void Swap(CMsgClientAMGetPersonaNameHistoryResponse* other);

  // implements Message ----------------------------------------------

  CMsgClientAMGetPersonaNameHistoryResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientAMGetPersonaNameHistoryResponse& from);
  void MergeFrom(const CMsgClientAMGetPersonaNameHistoryResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance NameTableInstance;

  // accessors -------------------------------------------------------

  // repeated .CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance responses = 2;
  inline int responses_size() const;
  inline void clear_responses();
  static const int kResponsesFieldNumber = 2;
  inline const ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance& responses(int index) const;
  inline ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* mutable_responses(int index);
  inline ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* add_responses();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance >&
      responses() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance >*
      mutable_responses();

  // @@protoc_insertion_point(class_scope:CMsgClientAMGetPersonaNameHistoryResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance > responses_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientAMGetPersonaNameHistoryResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientDeregisterWithServer : public ::google::protobuf::Message {
 public:
  CMsgClientDeregisterWithServer();
  virtual ~CMsgClientDeregisterWithServer();

  CMsgClientDeregisterWithServer(const CMsgClientDeregisterWithServer& from);

  inline CMsgClientDeregisterWithServer& operator=(const CMsgClientDeregisterWithServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientDeregisterWithServer& default_instance();

  void Swap(CMsgClientDeregisterWithServer* other);

  // implements Message ----------------------------------------------

  CMsgClientDeregisterWithServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientDeregisterWithServer& from);
  void MergeFrom(const CMsgClientDeregisterWithServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 eservertype = 1;
  inline bool has_eservertype() const;
  inline void clear_eservertype();
  static const int kEservertypeFieldNumber = 1;
  inline ::google::protobuf::uint32 eservertype() const;
  inline void set_eservertype(::google::protobuf::uint32 value);

  // optional uint32 app_id = 2;
  inline bool has_app_id() const;
  inline void clear_app_id();
  static const int kAppIdFieldNumber = 2;
  inline ::google::protobuf::uint32 app_id() const;
  inline void set_app_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientDeregisterWithServer)
 private:
  inline void set_has_eservertype();
  inline void clear_has_eservertype();
  inline void set_has_app_id();
  inline void clear_has_app_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 eservertype_;
  ::google::protobuf::uint32 app_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientDeregisterWithServer* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientClanState_NameInfo : public ::google::protobuf::Message {
 public:
  CMsgClientClanState_NameInfo();
  virtual ~CMsgClientClanState_NameInfo();

  CMsgClientClanState_NameInfo(const CMsgClientClanState_NameInfo& from);

  inline CMsgClientClanState_NameInfo& operator=(const CMsgClientClanState_NameInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientClanState_NameInfo& default_instance();

  void Swap(CMsgClientClanState_NameInfo* other);

  // implements Message ----------------------------------------------

  CMsgClientClanState_NameInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientClanState_NameInfo& from);
  void MergeFrom(const CMsgClientClanState_NameInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string clan_name = 1;
  inline bool has_clan_name() const;
  inline void clear_clan_name();
  static const int kClanNameFieldNumber = 1;
  inline const ::std::string& clan_name() const;
  inline void set_clan_name(const ::std::string& value);
  inline void set_clan_name(const char* value);
  inline void set_clan_name(const char* value, size_t size);
  inline ::std::string* mutable_clan_name();
  inline ::std::string* release_clan_name();
  inline void set_allocated_clan_name(::std::string* clan_name);

  // optional bytes sha_avatar = 2;
  inline bool has_sha_avatar() const;
  inline void clear_sha_avatar();
  static const int kShaAvatarFieldNumber = 2;
  inline const ::std::string& sha_avatar() const;
  inline void set_sha_avatar(const ::std::string& value);
  inline void set_sha_avatar(const char* value);
  inline void set_sha_avatar(const void* value, size_t size);
  inline ::std::string* mutable_sha_avatar();
  inline ::std::string* release_sha_avatar();
  inline void set_allocated_sha_avatar(::std::string* sha_avatar);

  // @@protoc_insertion_point(class_scope:CMsgClientClanState.NameInfo)
 private:
  inline void set_has_clan_name();
  inline void clear_has_clan_name();
  inline void set_has_sha_avatar();
  inline void clear_has_sha_avatar();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* clan_name_;
  ::std::string* sha_avatar_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientClanState_NameInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientClanState_UserCounts : public ::google::protobuf::Message {
 public:
  CMsgClientClanState_UserCounts();
  virtual ~CMsgClientClanState_UserCounts();

  CMsgClientClanState_UserCounts(const CMsgClientClanState_UserCounts& from);

  inline CMsgClientClanState_UserCounts& operator=(const CMsgClientClanState_UserCounts& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientClanState_UserCounts& default_instance();

  void Swap(CMsgClientClanState_UserCounts* other);

  // implements Message ----------------------------------------------

  CMsgClientClanState_UserCounts* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientClanState_UserCounts& from);
  void MergeFrom(const CMsgClientClanState_UserCounts& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 members = 1;
  inline bool has_members() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 1;
  inline ::google::protobuf::uint32 members() const;
  inline void set_members(::google::protobuf::uint32 value);

  // optional uint32 online = 2;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 2;
  inline ::google::protobuf::uint32 online() const;
  inline void set_online(::google::protobuf::uint32 value);

  // optional uint32 chatting = 3;
  inline bool has_chatting() const;
  inline void clear_chatting();
  static const int kChattingFieldNumber = 3;
  inline ::google::protobuf::uint32 chatting() const;
  inline void set_chatting(::google::protobuf::uint32 value);

  // optional uint32 in_game = 4;
  inline bool has_in_game() const;
  inline void clear_in_game();
  static const int kInGameFieldNumber = 4;
  inline ::google::protobuf::uint32 in_game() const;
  inline void set_in_game(::google::protobuf::uint32 value);

  // optional uint32 chat_room_members = 5;
  inline bool has_chat_room_members() const;
  inline void clear_chat_room_members();
  static const int kChatRoomMembersFieldNumber = 5;
  inline ::google::protobuf::uint32 chat_room_members() const;
  inline void set_chat_room_members(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientClanState.UserCounts)
 private:
  inline void set_has_members();
  inline void clear_has_members();
  inline void set_has_online();
  inline void clear_has_online();
  inline void set_has_chatting();
  inline void clear_has_chatting();
  inline void set_has_in_game();
  inline void clear_has_in_game();
  inline void set_has_chat_room_members();
  inline void clear_has_chat_room_members();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 members_;
  ::google::protobuf::uint32 online_;
  ::google::protobuf::uint32 chatting_;
  ::google::protobuf::uint32 in_game_;
  ::google::protobuf::uint32 chat_room_members_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientClanState_UserCounts* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientClanState_Event : public ::google::protobuf::Message {
 public:
  CMsgClientClanState_Event();
  virtual ~CMsgClientClanState_Event();

  CMsgClientClanState_Event(const CMsgClientClanState_Event& from);

  inline CMsgClientClanState_Event& operator=(const CMsgClientClanState_Event& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientClanState_Event& default_instance();

  void Swap(CMsgClientClanState_Event* other);

  // implements Message ----------------------------------------------

  CMsgClientClanState_Event* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientClanState_Event& from);
  void MergeFrom(const CMsgClientClanState_Event& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 gid = 1;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 1;
  inline ::google::protobuf::uint64 gid() const;
  inline void set_gid(::google::protobuf::uint64 value);

  // optional uint32 event_time = 2;
  inline bool has_event_time() const;
  inline void clear_event_time();
  static const int kEventTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 event_time() const;
  inline void set_event_time(::google::protobuf::uint32 value);

  // optional string headline = 3;
  inline bool has_headline() const;
  inline void clear_headline();
  static const int kHeadlineFieldNumber = 3;
  inline const ::std::string& headline() const;
  inline void set_headline(const ::std::string& value);
  inline void set_headline(const char* value);
  inline void set_headline(const char* value, size_t size);
  inline ::std::string* mutable_headline();
  inline ::std::string* release_headline();
  inline void set_allocated_headline(::std::string* headline);

  // optional fixed64 game_id = 4;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 4;
  inline ::google::protobuf::uint64 game_id() const;
  inline void set_game_id(::google::protobuf::uint64 value);

  // optional bool just_posted = 5;
  inline bool has_just_posted() const;
  inline void clear_just_posted();
  static const int kJustPostedFieldNumber = 5;
  inline bool just_posted() const;
  inline void set_just_posted(bool value);

  // @@protoc_insertion_point(class_scope:CMsgClientClanState.Event)
 private:
  inline void set_has_gid();
  inline void clear_has_gid();
  inline void set_has_event_time();
  inline void clear_has_event_time();
  inline void set_has_headline();
  inline void clear_has_headline();
  inline void set_has_game_id();
  inline void clear_has_game_id();
  inline void set_has_just_posted();
  inline void clear_has_just_posted();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 gid_;
  ::std::string* headline_;
  ::google::protobuf::uint32 event_time_;
  bool just_posted_;
  ::google::protobuf::uint64 game_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientClanState_Event* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientClanState : public ::google::protobuf::Message {
 public:
  CMsgClientClanState();
  virtual ~CMsgClientClanState();

  CMsgClientClanState(const CMsgClientClanState& from);

  inline CMsgClientClanState& operator=(const CMsgClientClanState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientClanState& default_instance();

  void Swap(CMsgClientClanState* other);

  // implements Message ----------------------------------------------

  CMsgClientClanState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientClanState& from);
  void MergeFrom(const CMsgClientClanState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgClientClanState_NameInfo NameInfo;
  typedef CMsgClientClanState_UserCounts UserCounts;
  typedef CMsgClientClanState_Event Event;

  // accessors -------------------------------------------------------

  // optional fixed64 steamid_clan = 1;
  inline bool has_steamid_clan() const;
  inline void clear_steamid_clan();
  static const int kSteamidClanFieldNumber = 1;
  inline ::google::protobuf::uint64 steamid_clan() const;
  inline void set_steamid_clan(::google::protobuf::uint64 value);

  // optional uint32 clan_account_flags = 3;
  inline bool has_clan_account_flags() const;
  inline void clear_clan_account_flags();
  static const int kClanAccountFlagsFieldNumber = 3;
  inline ::google::protobuf::uint32 clan_account_flags() const;
  inline void set_clan_account_flags(::google::protobuf::uint32 value);

  // optional .CMsgClientClanState.NameInfo name_info = 4;
  inline bool has_name_info() const;
  inline void clear_name_info();
  static const int kNameInfoFieldNumber = 4;
  inline const ::CMsgClientClanState_NameInfo& name_info() const;
  inline ::CMsgClientClanState_NameInfo* mutable_name_info();
  inline ::CMsgClientClanState_NameInfo* release_name_info();
  inline void set_allocated_name_info(::CMsgClientClanState_NameInfo* name_info);

  // optional .CMsgClientClanState.UserCounts user_counts = 5;
  inline bool has_user_counts() const;
  inline void clear_user_counts();
  static const int kUserCountsFieldNumber = 5;
  inline const ::CMsgClientClanState_UserCounts& user_counts() const;
  inline ::CMsgClientClanState_UserCounts* mutable_user_counts();
  inline ::CMsgClientClanState_UserCounts* release_user_counts();
  inline void set_allocated_user_counts(::CMsgClientClanState_UserCounts* user_counts);

  // repeated .CMsgClientClanState.Event events = 6;
  inline int events_size() const;
  inline void clear_events();
  static const int kEventsFieldNumber = 6;
  inline const ::CMsgClientClanState_Event& events(int index) const;
  inline ::CMsgClientClanState_Event* mutable_events(int index);
  inline ::CMsgClientClanState_Event* add_events();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgClientClanState_Event >&
      events() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgClientClanState_Event >*
      mutable_events();

  // repeated .CMsgClientClanState.Event announcements = 7;
  inline int announcements_size() const;
  inline void clear_announcements();
  static const int kAnnouncementsFieldNumber = 7;
  inline const ::CMsgClientClanState_Event& announcements(int index) const;
  inline ::CMsgClientClanState_Event* mutable_announcements(int index);
  inline ::CMsgClientClanState_Event* add_announcements();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgClientClanState_Event >&
      announcements() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgClientClanState_Event >*
      mutable_announcements();

  // optional bool chat_room_private = 8;
  inline bool has_chat_room_private() const;
  inline void clear_chat_room_private();
  static const int kChatRoomPrivateFieldNumber = 8;
  inline bool chat_room_private() const;
  inline void set_chat_room_private(bool value);

  // @@protoc_insertion_point(class_scope:CMsgClientClanState)
 private:
  inline void set_has_steamid_clan();
  inline void clear_has_steamid_clan();
  inline void set_has_clan_account_flags();
  inline void clear_has_clan_account_flags();
  inline void set_has_name_info();
  inline void clear_has_name_info();
  inline void set_has_user_counts();
  inline void clear_has_user_counts();
  inline void set_has_chat_room_private();
  inline void clear_has_chat_room_private();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 steamid_clan_;
  ::CMsgClientClanState_NameInfo* name_info_;
  ::CMsgClientClanState_UserCounts* user_counts_;
  ::google::protobuf::uint32 clan_account_flags_;
  bool chat_room_private_;
  ::google::protobuf::RepeatedPtrField< ::CMsgClientClanState_Event > events_;
  ::google::protobuf::RepeatedPtrField< ::CMsgClientClanState_Event > announcements_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientClanState* default_instance_;
};
// ===================================================================


// ===================================================================

// CMsgClientRegisterAuthTicketWithCM

// optional uint32 protocol_version = 1;
inline bool CMsgClientRegisterAuthTicketWithCM::has_protocol_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientRegisterAuthTicketWithCM::set_has_protocol_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientRegisterAuthTicketWithCM::clear_has_protocol_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientRegisterAuthTicketWithCM::clear_protocol_version() {
  protocol_version_ = 0u;
  clear_has_protocol_version();
}
inline ::google::protobuf::uint32 CMsgClientRegisterAuthTicketWithCM::protocol_version() const {
  return protocol_version_;
}
inline void CMsgClientRegisterAuthTicketWithCM::set_protocol_version(::google::protobuf::uint32 value) {
  set_has_protocol_version();
  protocol_version_ = value;
}

// optional bytes ticket = 3;
inline bool CMsgClientRegisterAuthTicketWithCM::has_ticket() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientRegisterAuthTicketWithCM::set_has_ticket() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientRegisterAuthTicketWithCM::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientRegisterAuthTicketWithCM::clear_ticket() {
  if (ticket_ != &::google::protobuf::internal::kEmptyString) {
    ticket_->clear();
  }
  clear_has_ticket();
}
inline const ::std::string& CMsgClientRegisterAuthTicketWithCM::ticket() const {
  return *ticket_;
}
inline void CMsgClientRegisterAuthTicketWithCM::set_ticket(const ::std::string& value) {
  set_has_ticket();
  if (ticket_ == &::google::protobuf::internal::kEmptyString) {
    ticket_ = new ::std::string;
  }
  ticket_->assign(value);
}
inline void CMsgClientRegisterAuthTicketWithCM::set_ticket(const char* value) {
  set_has_ticket();
  if (ticket_ == &::google::protobuf::internal::kEmptyString) {
    ticket_ = new ::std::string;
  }
  ticket_->assign(value);
}
inline void CMsgClientRegisterAuthTicketWithCM::set_ticket(const void* value, size_t size) {
  set_has_ticket();
  if (ticket_ == &::google::protobuf::internal::kEmptyString) {
    ticket_ = new ::std::string;
  }
  ticket_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientRegisterAuthTicketWithCM::mutable_ticket() {
  set_has_ticket();
  if (ticket_ == &::google::protobuf::internal::kEmptyString) {
    ticket_ = new ::std::string;
  }
  return ticket_;
}
inline ::std::string* CMsgClientRegisterAuthTicketWithCM::release_ticket() {
  clear_has_ticket();
  if (ticket_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ticket_;
    ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientRegisterAuthTicketWithCM::set_allocated_ticket(::std::string* ticket) {
  if (ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete ticket_;
  }
  if (ticket) {
    set_has_ticket();
    ticket_ = ticket;
  } else {
    clear_has_ticket();
    ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 client_instance_id = 4;
inline bool CMsgClientRegisterAuthTicketWithCM::has_client_instance_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientRegisterAuthTicketWithCM::set_has_client_instance_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientRegisterAuthTicketWithCM::clear_has_client_instance_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientRegisterAuthTicketWithCM::clear_client_instance_id() {
  client_instance_id_ = GOOGLE_ULONGLONG(0);
  clear_has_client_instance_id();
}
inline ::google::protobuf::uint64 CMsgClientRegisterAuthTicketWithCM::client_instance_id() const {
  return client_instance_id_;
}
inline void CMsgClientRegisterAuthTicketWithCM::set_client_instance_id(::google::protobuf::uint64 value) {
  set_has_client_instance_id();
  client_instance_id_ = value;
}

// -------------------------------------------------------------------

// CMsgClientTicketAuthComplete

// optional fixed64 steam_id = 1;
inline bool CMsgClientTicketAuthComplete::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientTicketAuthComplete::set_has_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientTicketAuthComplete::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientTicketAuthComplete::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
inline ::google::protobuf::uint64 CMsgClientTicketAuthComplete::steam_id() const {
  return steam_id_;
}
inline void CMsgClientTicketAuthComplete::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
}

// optional fixed64 game_id = 2;
inline bool CMsgClientTicketAuthComplete::has_game_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientTicketAuthComplete::set_has_game_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientTicketAuthComplete::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientTicketAuthComplete::clear_game_id() {
  game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_game_id();
}
inline ::google::protobuf::uint64 CMsgClientTicketAuthComplete::game_id() const {
  return game_id_;
}
inline void CMsgClientTicketAuthComplete::set_game_id(::google::protobuf::uint64 value) {
  set_has_game_id();
  game_id_ = value;
}

// optional uint32 estate = 3;
inline bool CMsgClientTicketAuthComplete::has_estate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientTicketAuthComplete::set_has_estate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientTicketAuthComplete::clear_has_estate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientTicketAuthComplete::clear_estate() {
  estate_ = 0u;
  clear_has_estate();
}
inline ::google::protobuf::uint32 CMsgClientTicketAuthComplete::estate() const {
  return estate_;
}
inline void CMsgClientTicketAuthComplete::set_estate(::google::protobuf::uint32 value) {
  set_has_estate();
  estate_ = value;
}

// optional uint32 eauth_session_response = 4;
inline bool CMsgClientTicketAuthComplete::has_eauth_session_response() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgClientTicketAuthComplete::set_has_eauth_session_response() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgClientTicketAuthComplete::clear_has_eauth_session_response() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgClientTicketAuthComplete::clear_eauth_session_response() {
  eauth_session_response_ = 0u;
  clear_has_eauth_session_response();
}
inline ::google::protobuf::uint32 CMsgClientTicketAuthComplete::eauth_session_response() const {
  return eauth_session_response_;
}
inline void CMsgClientTicketAuthComplete::set_eauth_session_response(::google::protobuf::uint32 value) {
  set_has_eauth_session_response();
  eauth_session_response_ = value;
}

// optional bytes DEPRECATED_ticket = 5;
inline bool CMsgClientTicketAuthComplete::has_deprecated_ticket() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgClientTicketAuthComplete::set_has_deprecated_ticket() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgClientTicketAuthComplete::clear_has_deprecated_ticket() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgClientTicketAuthComplete::clear_deprecated_ticket() {
  if (deprecated_ticket_ != &::google::protobuf::internal::kEmptyString) {
    deprecated_ticket_->clear();
  }
  clear_has_deprecated_ticket();
}
inline const ::std::string& CMsgClientTicketAuthComplete::deprecated_ticket() const {
  return *deprecated_ticket_;
}
inline void CMsgClientTicketAuthComplete::set_deprecated_ticket(const ::std::string& value) {
  set_has_deprecated_ticket();
  if (deprecated_ticket_ == &::google::protobuf::internal::kEmptyString) {
    deprecated_ticket_ = new ::std::string;
  }
  deprecated_ticket_->assign(value);
}
inline void CMsgClientTicketAuthComplete::set_deprecated_ticket(const char* value) {
  set_has_deprecated_ticket();
  if (deprecated_ticket_ == &::google::protobuf::internal::kEmptyString) {
    deprecated_ticket_ = new ::std::string;
  }
  deprecated_ticket_->assign(value);
}
inline void CMsgClientTicketAuthComplete::set_deprecated_ticket(const void* value, size_t size) {
  set_has_deprecated_ticket();
  if (deprecated_ticket_ == &::google::protobuf::internal::kEmptyString) {
    deprecated_ticket_ = new ::std::string;
  }
  deprecated_ticket_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientTicketAuthComplete::mutable_deprecated_ticket() {
  set_has_deprecated_ticket();
  if (deprecated_ticket_ == &::google::protobuf::internal::kEmptyString) {
    deprecated_ticket_ = new ::std::string;
  }
  return deprecated_ticket_;
}
inline ::std::string* CMsgClientTicketAuthComplete::release_deprecated_ticket() {
  clear_has_deprecated_ticket();
  if (deprecated_ticket_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deprecated_ticket_;
    deprecated_ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientTicketAuthComplete::set_allocated_deprecated_ticket(::std::string* deprecated_ticket) {
  if (deprecated_ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete deprecated_ticket_;
  }
  if (deprecated_ticket) {
    set_has_deprecated_ticket();
    deprecated_ticket_ = deprecated_ticket;
  } else {
    clear_has_deprecated_ticket();
    deprecated_ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 ticket_crc = 6;
inline bool CMsgClientTicketAuthComplete::has_ticket_crc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgClientTicketAuthComplete::set_has_ticket_crc() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgClientTicketAuthComplete::clear_has_ticket_crc() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgClientTicketAuthComplete::clear_ticket_crc() {
  ticket_crc_ = 0u;
  clear_has_ticket_crc();
}
inline ::google::protobuf::uint32 CMsgClientTicketAuthComplete::ticket_crc() const {
  return ticket_crc_;
}
inline void CMsgClientTicketAuthComplete::set_ticket_crc(::google::protobuf::uint32 value) {
  set_has_ticket_crc();
  ticket_crc_ = value;
}

// optional uint32 ticket_sequence = 7;
inline bool CMsgClientTicketAuthComplete::has_ticket_sequence() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgClientTicketAuthComplete::set_has_ticket_sequence() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgClientTicketAuthComplete::clear_has_ticket_sequence() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgClientTicketAuthComplete::clear_ticket_sequence() {
  ticket_sequence_ = 0u;
  clear_has_ticket_sequence();
}
inline ::google::protobuf::uint32 CMsgClientTicketAuthComplete::ticket_sequence() const {
  return ticket_sequence_;
}
inline void CMsgClientTicketAuthComplete::set_ticket_sequence(::google::protobuf::uint32 value) {
  set_has_ticket_sequence();
  ticket_sequence_ = value;
}

// optional fixed64 owner_steam_id = 8;
inline bool CMsgClientTicketAuthComplete::has_owner_steam_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgClientTicketAuthComplete::set_has_owner_steam_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgClientTicketAuthComplete::clear_has_owner_steam_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgClientTicketAuthComplete::clear_owner_steam_id() {
  owner_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_owner_steam_id();
}
inline ::google::protobuf::uint64 CMsgClientTicketAuthComplete::owner_steam_id() const {
  return owner_steam_id_;
}
inline void CMsgClientTicketAuthComplete::set_owner_steam_id(::google::protobuf::uint64 value) {
  set_has_owner_steam_id();
  owner_steam_id_ = value;
}

// -------------------------------------------------------------------

// CMsgClientCMList

// repeated uint32 cm_addresses = 1;
inline int CMsgClientCMList::cm_addresses_size() const {
  return cm_addresses_.size();
}
inline void CMsgClientCMList::clear_cm_addresses() {
  cm_addresses_.Clear();
}
inline ::google::protobuf::uint32 CMsgClientCMList::cm_addresses(int index) const {
  return cm_addresses_.Get(index);
}
inline void CMsgClientCMList::set_cm_addresses(int index, ::google::protobuf::uint32 value) {
  cm_addresses_.Set(index, value);
}
inline void CMsgClientCMList::add_cm_addresses(::google::protobuf::uint32 value) {
  cm_addresses_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgClientCMList::cm_addresses() const {
  return cm_addresses_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgClientCMList::mutable_cm_addresses() {
  return &cm_addresses_;
}

// repeated uint32 cm_ports = 2;
inline int CMsgClientCMList::cm_ports_size() const {
  return cm_ports_.size();
}
inline void CMsgClientCMList::clear_cm_ports() {
  cm_ports_.Clear();
}
inline ::google::protobuf::uint32 CMsgClientCMList::cm_ports(int index) const {
  return cm_ports_.Get(index);
}
inline void CMsgClientCMList::set_cm_ports(int index, ::google::protobuf::uint32 value) {
  cm_ports_.Set(index, value);
}
inline void CMsgClientCMList::add_cm_ports(::google::protobuf::uint32 value) {
  cm_ports_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgClientCMList::cm_ports() const {
  return cm_ports_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgClientCMList::mutable_cm_ports() {
  return &cm_ports_;
}

// repeated string cm_websocket_addresses = 3;
inline int CMsgClientCMList::cm_websocket_addresses_size() const {
  return cm_websocket_addresses_.size();
}
inline void CMsgClientCMList::clear_cm_websocket_addresses() {
  cm_websocket_addresses_.Clear();
}
inline const ::std::string& CMsgClientCMList::cm_websocket_addresses(int index) const {
  return cm_websocket_addresses_.Get(index);
}
inline ::std::string* CMsgClientCMList::mutable_cm_websocket_addresses(int index) {
  return cm_websocket_addresses_.Mutable(index);
}
inline void CMsgClientCMList::set_cm_websocket_addresses(int index, const ::std::string& value) {
  cm_websocket_addresses_.Mutable(index)->assign(value);
}
inline void CMsgClientCMList::set_cm_websocket_addresses(int index, const char* value) {
  cm_websocket_addresses_.Mutable(index)->assign(value);
}
inline void CMsgClientCMList::set_cm_websocket_addresses(int index, const char* value, size_t size) {
  cm_websocket_addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientCMList::add_cm_websocket_addresses() {
  return cm_websocket_addresses_.Add();
}
inline void CMsgClientCMList::add_cm_websocket_addresses(const ::std::string& value) {
  cm_websocket_addresses_.Add()->assign(value);
}
inline void CMsgClientCMList::add_cm_websocket_addresses(const char* value) {
  cm_websocket_addresses_.Add()->assign(value);
}
inline void CMsgClientCMList::add_cm_websocket_addresses(const char* value, size_t size) {
  cm_websocket_addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CMsgClientCMList::cm_websocket_addresses() const {
  return cm_websocket_addresses_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CMsgClientCMList::mutable_cm_websocket_addresses() {
  return &cm_websocket_addresses_;
}

// optional uint32 percent_default_to_websocket = 4;
inline bool CMsgClientCMList::has_percent_default_to_websocket() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgClientCMList::set_has_percent_default_to_websocket() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgClientCMList::clear_has_percent_default_to_websocket() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgClientCMList::clear_percent_default_to_websocket() {
  percent_default_to_websocket_ = 0u;
  clear_has_percent_default_to_websocket();
}
inline ::google::protobuf::uint32 CMsgClientCMList::percent_default_to_websocket() const {
  return percent_default_to_websocket_;
}
inline void CMsgClientCMList::set_percent_default_to_websocket(::google::protobuf::uint32 value) {
  set_has_percent_default_to_websocket();
  percent_default_to_websocket_ = value;
}

// -------------------------------------------------------------------

// CMsgClientP2PConnectionInfo

// optional fixed64 steam_id_dest = 1;
inline bool CMsgClientP2PConnectionInfo::has_steam_id_dest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientP2PConnectionInfo::set_has_steam_id_dest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientP2PConnectionInfo::clear_has_steam_id_dest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientP2PConnectionInfo::clear_steam_id_dest() {
  steam_id_dest_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_dest();
}
inline ::google::protobuf::uint64 CMsgClientP2PConnectionInfo::steam_id_dest() const {
  return steam_id_dest_;
}
inline void CMsgClientP2PConnectionInfo::set_steam_id_dest(::google::protobuf::uint64 value) {
  set_has_steam_id_dest();
  steam_id_dest_ = value;
}

// optional fixed64 steam_id_src = 2;
inline bool CMsgClientP2PConnectionInfo::has_steam_id_src() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientP2PConnectionInfo::set_has_steam_id_src() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientP2PConnectionInfo::clear_has_steam_id_src() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientP2PConnectionInfo::clear_steam_id_src() {
  steam_id_src_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_src();
}
inline ::google::protobuf::uint64 CMsgClientP2PConnectionInfo::steam_id_src() const {
  return steam_id_src_;
}
inline void CMsgClientP2PConnectionInfo::set_steam_id_src(::google::protobuf::uint64 value) {
  set_has_steam_id_src();
  steam_id_src_ = value;
}

// optional uint32 app_id = 3;
inline bool CMsgClientP2PConnectionInfo::has_app_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientP2PConnectionInfo::set_has_app_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientP2PConnectionInfo::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientP2PConnectionInfo::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
inline ::google::protobuf::uint32 CMsgClientP2PConnectionInfo::app_id() const {
  return app_id_;
}
inline void CMsgClientP2PConnectionInfo::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
}

// optional bytes candidate = 4;
inline bool CMsgClientP2PConnectionInfo::has_candidate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgClientP2PConnectionInfo::set_has_candidate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgClientP2PConnectionInfo::clear_has_candidate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgClientP2PConnectionInfo::clear_candidate() {
  if (candidate_ != &::google::protobuf::internal::kEmptyString) {
    candidate_->clear();
  }
  clear_has_candidate();
}
inline const ::std::string& CMsgClientP2PConnectionInfo::candidate() const {
  return *candidate_;
}
inline void CMsgClientP2PConnectionInfo::set_candidate(const ::std::string& value) {
  set_has_candidate();
  if (candidate_ == &::google::protobuf::internal::kEmptyString) {
    candidate_ = new ::std::string;
  }
  candidate_->assign(value);
}
inline void CMsgClientP2PConnectionInfo::set_candidate(const char* value) {
  set_has_candidate();
  if (candidate_ == &::google::protobuf::internal::kEmptyString) {
    candidate_ = new ::std::string;
  }
  candidate_->assign(value);
}
inline void CMsgClientP2PConnectionInfo::set_candidate(const void* value, size_t size) {
  set_has_candidate();
  if (candidate_ == &::google::protobuf::internal::kEmptyString) {
    candidate_ = new ::std::string;
  }
  candidate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientP2PConnectionInfo::mutable_candidate() {
  set_has_candidate();
  if (candidate_ == &::google::protobuf::internal::kEmptyString) {
    candidate_ = new ::std::string;
  }
  return candidate_;
}
inline ::std::string* CMsgClientP2PConnectionInfo::release_candidate() {
  clear_has_candidate();
  if (candidate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = candidate_;
    candidate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientP2PConnectionInfo::set_allocated_candidate(::std::string* candidate) {
  if (candidate_ != &::google::protobuf::internal::kEmptyString) {
    delete candidate_;
  }
  if (candidate) {
    set_has_candidate();
    candidate_ = candidate;
  } else {
    clear_has_candidate();
    candidate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional fixed64 legacy_connection_id_src = 5;
inline bool CMsgClientP2PConnectionInfo::has_legacy_connection_id_src() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgClientP2PConnectionInfo::set_has_legacy_connection_id_src() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgClientP2PConnectionInfo::clear_has_legacy_connection_id_src() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgClientP2PConnectionInfo::clear_legacy_connection_id_src() {
  legacy_connection_id_src_ = GOOGLE_ULONGLONG(0);
  clear_has_legacy_connection_id_src();
}
inline ::google::protobuf::uint64 CMsgClientP2PConnectionInfo::legacy_connection_id_src() const {
  return legacy_connection_id_src_;
}
inline void CMsgClientP2PConnectionInfo::set_legacy_connection_id_src(::google::protobuf::uint64 value) {
  set_has_legacy_connection_id_src();
  legacy_connection_id_src_ = value;
}

// optional bytes rendezvous = 6;
inline bool CMsgClientP2PConnectionInfo::has_rendezvous() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgClientP2PConnectionInfo::set_has_rendezvous() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgClientP2PConnectionInfo::clear_has_rendezvous() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgClientP2PConnectionInfo::clear_rendezvous() {
  if (rendezvous_ != &::google::protobuf::internal::kEmptyString) {
    rendezvous_->clear();
  }
  clear_has_rendezvous();
}
inline const ::std::string& CMsgClientP2PConnectionInfo::rendezvous() const {
  return *rendezvous_;
}
inline void CMsgClientP2PConnectionInfo::set_rendezvous(const ::std::string& value) {
  set_has_rendezvous();
  if (rendezvous_ == &::google::protobuf::internal::kEmptyString) {
    rendezvous_ = new ::std::string;
  }
  rendezvous_->assign(value);
}
inline void CMsgClientP2PConnectionInfo::set_rendezvous(const char* value) {
  set_has_rendezvous();
  if (rendezvous_ == &::google::protobuf::internal::kEmptyString) {
    rendezvous_ = new ::std::string;
  }
  rendezvous_->assign(value);
}
inline void CMsgClientP2PConnectionInfo::set_rendezvous(const void* value, size_t size) {
  set_has_rendezvous();
  if (rendezvous_ == &::google::protobuf::internal::kEmptyString) {
    rendezvous_ = new ::std::string;
  }
  rendezvous_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientP2PConnectionInfo::mutable_rendezvous() {
  set_has_rendezvous();
  if (rendezvous_ == &::google::protobuf::internal::kEmptyString) {
    rendezvous_ = new ::std::string;
  }
  return rendezvous_;
}
inline ::std::string* CMsgClientP2PConnectionInfo::release_rendezvous() {
  clear_has_rendezvous();
  if (rendezvous_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rendezvous_;
    rendezvous_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientP2PConnectionInfo::set_allocated_rendezvous(::std::string* rendezvous) {
  if (rendezvous_ != &::google::protobuf::internal::kEmptyString) {
    delete rendezvous_;
  }
  if (rendezvous) {
    set_has_rendezvous();
    rendezvous_ = rendezvous;
  } else {
    clear_has_rendezvous();
    rendezvous_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgClientP2PConnectionFailInfo

// optional fixed64 steam_id_dest = 1;
inline bool CMsgClientP2PConnectionFailInfo::has_steam_id_dest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientP2PConnectionFailInfo::set_has_steam_id_dest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientP2PConnectionFailInfo::clear_has_steam_id_dest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientP2PConnectionFailInfo::clear_steam_id_dest() {
  steam_id_dest_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_dest();
}
inline ::google::protobuf::uint64 CMsgClientP2PConnectionFailInfo::steam_id_dest() const {
  return steam_id_dest_;
}
inline void CMsgClientP2PConnectionFailInfo::set_steam_id_dest(::google::protobuf::uint64 value) {
  set_has_steam_id_dest();
  steam_id_dest_ = value;
}

// optional fixed64 steam_id_src = 2;
inline bool CMsgClientP2PConnectionFailInfo::has_steam_id_src() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientP2PConnectionFailInfo::set_has_steam_id_src() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientP2PConnectionFailInfo::clear_has_steam_id_src() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientP2PConnectionFailInfo::clear_steam_id_src() {
  steam_id_src_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_src();
}
inline ::google::protobuf::uint64 CMsgClientP2PConnectionFailInfo::steam_id_src() const {
  return steam_id_src_;
}
inline void CMsgClientP2PConnectionFailInfo::set_steam_id_src(::google::protobuf::uint64 value) {
  set_has_steam_id_src();
  steam_id_src_ = value;
}

// optional uint32 app_id = 3;
inline bool CMsgClientP2PConnectionFailInfo::has_app_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientP2PConnectionFailInfo::set_has_app_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientP2PConnectionFailInfo::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientP2PConnectionFailInfo::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
inline ::google::protobuf::uint32 CMsgClientP2PConnectionFailInfo::app_id() const {
  return app_id_;
}
inline void CMsgClientP2PConnectionFailInfo::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
}

// optional uint32 ep2p_session_error = 4;
inline bool CMsgClientP2PConnectionFailInfo::has_ep2p_session_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgClientP2PConnectionFailInfo::set_has_ep2p_session_error() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgClientP2PConnectionFailInfo::clear_has_ep2p_session_error() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgClientP2PConnectionFailInfo::clear_ep2p_session_error() {
  ep2p_session_error_ = 0u;
  clear_has_ep2p_session_error();
}
inline ::google::protobuf::uint32 CMsgClientP2PConnectionFailInfo::ep2p_session_error() const {
  return ep2p_session_error_;
}
inline void CMsgClientP2PConnectionFailInfo::set_ep2p_session_error(::google::protobuf::uint32 value) {
  set_has_ep2p_session_error();
  ep2p_session_error_ = value;
}

// optional fixed64 connection_id_dest = 5;
inline bool CMsgClientP2PConnectionFailInfo::has_connection_id_dest() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgClientP2PConnectionFailInfo::set_has_connection_id_dest() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgClientP2PConnectionFailInfo::clear_has_connection_id_dest() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgClientP2PConnectionFailInfo::clear_connection_id_dest() {
  connection_id_dest_ = GOOGLE_ULONGLONG(0);
  clear_has_connection_id_dest();
}
inline ::google::protobuf::uint64 CMsgClientP2PConnectionFailInfo::connection_id_dest() const {
  return connection_id_dest_;
}
inline void CMsgClientP2PConnectionFailInfo::set_connection_id_dest(::google::protobuf::uint64 value) {
  set_has_connection_id_dest();
  connection_id_dest_ = value;
}

// optional uint32 close_reason = 7;
inline bool CMsgClientP2PConnectionFailInfo::has_close_reason() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgClientP2PConnectionFailInfo::set_has_close_reason() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgClientP2PConnectionFailInfo::clear_has_close_reason() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgClientP2PConnectionFailInfo::clear_close_reason() {
  close_reason_ = 0u;
  clear_has_close_reason();
}
inline ::google::protobuf::uint32 CMsgClientP2PConnectionFailInfo::close_reason() const {
  return close_reason_;
}
inline void CMsgClientP2PConnectionFailInfo::set_close_reason(::google::protobuf::uint32 value) {
  set_has_close_reason();
  close_reason_ = value;
}

// optional string close_message = 8;
inline bool CMsgClientP2PConnectionFailInfo::has_close_message() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgClientP2PConnectionFailInfo::set_has_close_message() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgClientP2PConnectionFailInfo::clear_has_close_message() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgClientP2PConnectionFailInfo::clear_close_message() {
  if (close_message_ != &::google::protobuf::internal::kEmptyString) {
    close_message_->clear();
  }
  clear_has_close_message();
}
inline const ::std::string& CMsgClientP2PConnectionFailInfo::close_message() const {
  return *close_message_;
}
inline void CMsgClientP2PConnectionFailInfo::set_close_message(const ::std::string& value) {
  set_has_close_message();
  if (close_message_ == &::google::protobuf::internal::kEmptyString) {
    close_message_ = new ::std::string;
  }
  close_message_->assign(value);
}
inline void CMsgClientP2PConnectionFailInfo::set_close_message(const char* value) {
  set_has_close_message();
  if (close_message_ == &::google::protobuf::internal::kEmptyString) {
    close_message_ = new ::std::string;
  }
  close_message_->assign(value);
}
inline void CMsgClientP2PConnectionFailInfo::set_close_message(const char* value, size_t size) {
  set_has_close_message();
  if (close_message_ == &::google::protobuf::internal::kEmptyString) {
    close_message_ = new ::std::string;
  }
  close_message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientP2PConnectionFailInfo::mutable_close_message() {
  set_has_close_message();
  if (close_message_ == &::google::protobuf::internal::kEmptyString) {
    close_message_ = new ::std::string;
  }
  return close_message_;
}
inline ::std::string* CMsgClientP2PConnectionFailInfo::release_close_message() {
  clear_has_close_message();
  if (close_message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = close_message_;
    close_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientP2PConnectionFailInfo::set_allocated_close_message(::std::string* close_message) {
  if (close_message_ != &::google::protobuf::internal::kEmptyString) {
    delete close_message_;
  }
  if (close_message) {
    set_has_close_message();
    close_message_ = close_message;
  } else {
    clear_has_close_message();
    close_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgClientNetworkingCertRequest

// optional bytes key_data = 2;
inline bool CMsgClientNetworkingCertRequest::has_key_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientNetworkingCertRequest::set_has_key_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientNetworkingCertRequest::clear_has_key_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientNetworkingCertRequest::clear_key_data() {
  if (key_data_ != &::google::protobuf::internal::kEmptyString) {
    key_data_->clear();
  }
  clear_has_key_data();
}
inline const ::std::string& CMsgClientNetworkingCertRequest::key_data() const {
  return *key_data_;
}
inline void CMsgClientNetworkingCertRequest::set_key_data(const ::std::string& value) {
  set_has_key_data();
  if (key_data_ == &::google::protobuf::internal::kEmptyString) {
    key_data_ = new ::std::string;
  }
  key_data_->assign(value);
}
inline void CMsgClientNetworkingCertRequest::set_key_data(const char* value) {
  set_has_key_data();
  if (key_data_ == &::google::protobuf::internal::kEmptyString) {
    key_data_ = new ::std::string;
  }
  key_data_->assign(value);
}
inline void CMsgClientNetworkingCertRequest::set_key_data(const void* value, size_t size) {
  set_has_key_data();
  if (key_data_ == &::google::protobuf::internal::kEmptyString) {
    key_data_ = new ::std::string;
  }
  key_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientNetworkingCertRequest::mutable_key_data() {
  set_has_key_data();
  if (key_data_ == &::google::protobuf::internal::kEmptyString) {
    key_data_ = new ::std::string;
  }
  return key_data_;
}
inline ::std::string* CMsgClientNetworkingCertRequest::release_key_data() {
  clear_has_key_data();
  if (key_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_data_;
    key_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientNetworkingCertRequest::set_allocated_key_data(::std::string* key_data) {
  if (key_data_ != &::google::protobuf::internal::kEmptyString) {
    delete key_data_;
  }
  if (key_data) {
    set_has_key_data();
    key_data_ = key_data;
  } else {
    clear_has_key_data();
    key_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 app_id = 3;
inline bool CMsgClientNetworkingCertRequest::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientNetworkingCertRequest::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientNetworkingCertRequest::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientNetworkingCertRequest::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
inline ::google::protobuf::uint32 CMsgClientNetworkingCertRequest::app_id() const {
  return app_id_;
}
inline void CMsgClientNetworkingCertRequest::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
}

// -------------------------------------------------------------------

// CMsgClientNetworkingCertReply

// optional bytes cert = 4;
inline bool CMsgClientNetworkingCertReply::has_cert() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientNetworkingCertReply::set_has_cert() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientNetworkingCertReply::clear_has_cert() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientNetworkingCertReply::clear_cert() {
  if (cert_ != &::google::protobuf::internal::kEmptyString) {
    cert_->clear();
  }
  clear_has_cert();
}
inline const ::std::string& CMsgClientNetworkingCertReply::cert() const {
  return *cert_;
}
inline void CMsgClientNetworkingCertReply::set_cert(const ::std::string& value) {
  set_has_cert();
  if (cert_ == &::google::protobuf::internal::kEmptyString) {
    cert_ = new ::std::string;
  }
  cert_->assign(value);
}
inline void CMsgClientNetworkingCertReply::set_cert(const char* value) {
  set_has_cert();
  if (cert_ == &::google::protobuf::internal::kEmptyString) {
    cert_ = new ::std::string;
  }
  cert_->assign(value);
}
inline void CMsgClientNetworkingCertReply::set_cert(const void* value, size_t size) {
  set_has_cert();
  if (cert_ == &::google::protobuf::internal::kEmptyString) {
    cert_ = new ::std::string;
  }
  cert_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientNetworkingCertReply::mutable_cert() {
  set_has_cert();
  if (cert_ == &::google::protobuf::internal::kEmptyString) {
    cert_ = new ::std::string;
  }
  return cert_;
}
inline ::std::string* CMsgClientNetworkingCertReply::release_cert() {
  clear_has_cert();
  if (cert_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cert_;
    cert_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientNetworkingCertReply::set_allocated_cert(::std::string* cert) {
  if (cert_ != &::google::protobuf::internal::kEmptyString) {
    delete cert_;
  }
  if (cert) {
    set_has_cert();
    cert_ = cert;
  } else {
    clear_has_cert();
    cert_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional fixed64 ca_key_id = 5;
inline bool CMsgClientNetworkingCertReply::has_ca_key_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientNetworkingCertReply::set_has_ca_key_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientNetworkingCertReply::clear_has_ca_key_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientNetworkingCertReply::clear_ca_key_id() {
  ca_key_id_ = GOOGLE_ULONGLONG(0);
  clear_has_ca_key_id();
}
inline ::google::protobuf::uint64 CMsgClientNetworkingCertReply::ca_key_id() const {
  return ca_key_id_;
}
inline void CMsgClientNetworkingCertReply::set_ca_key_id(::google::protobuf::uint64 value) {
  set_has_ca_key_id();
  ca_key_id_ = value;
}

// optional bytes ca_signature = 6;
inline bool CMsgClientNetworkingCertReply::has_ca_signature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientNetworkingCertReply::set_has_ca_signature() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientNetworkingCertReply::clear_has_ca_signature() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientNetworkingCertReply::clear_ca_signature() {
  if (ca_signature_ != &::google::protobuf::internal::kEmptyString) {
    ca_signature_->clear();
  }
  clear_has_ca_signature();
}
inline const ::std::string& CMsgClientNetworkingCertReply::ca_signature() const {
  return *ca_signature_;
}
inline void CMsgClientNetworkingCertReply::set_ca_signature(const ::std::string& value) {
  set_has_ca_signature();
  if (ca_signature_ == &::google::protobuf::internal::kEmptyString) {
    ca_signature_ = new ::std::string;
  }
  ca_signature_->assign(value);
}
inline void CMsgClientNetworkingCertReply::set_ca_signature(const char* value) {
  set_has_ca_signature();
  if (ca_signature_ == &::google::protobuf::internal::kEmptyString) {
    ca_signature_ = new ::std::string;
  }
  ca_signature_->assign(value);
}
inline void CMsgClientNetworkingCertReply::set_ca_signature(const void* value, size_t size) {
  set_has_ca_signature();
  if (ca_signature_ == &::google::protobuf::internal::kEmptyString) {
    ca_signature_ = new ::std::string;
  }
  ca_signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientNetworkingCertReply::mutable_ca_signature() {
  set_has_ca_signature();
  if (ca_signature_ == &::google::protobuf::internal::kEmptyString) {
    ca_signature_ = new ::std::string;
  }
  return ca_signature_;
}
inline ::std::string* CMsgClientNetworkingCertReply::release_ca_signature() {
  clear_has_ca_signature();
  if (ca_signature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ca_signature_;
    ca_signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientNetworkingCertReply::set_allocated_ca_signature(::std::string* ca_signature) {
  if (ca_signature_ != &::google::protobuf::internal::kEmptyString) {
    delete ca_signature_;
  }
  if (ca_signature) {
    set_has_ca_signature();
    ca_signature_ = ca_signature;
  } else {
    clear_has_ca_signature();
    ca_signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgClientNetworkingMobileCertRequest

// optional uint32 app_id = 1;
inline bool CMsgClientNetworkingMobileCertRequest::has_app_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientNetworkingMobileCertRequest::set_has_app_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientNetworkingMobileCertRequest::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientNetworkingMobileCertRequest::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
inline ::google::protobuf::uint32 CMsgClientNetworkingMobileCertRequest::app_id() const {
  return app_id_;
}
inline void CMsgClientNetworkingMobileCertRequest::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
}

// -------------------------------------------------------------------

// CMsgClientNetworkingMobileCertReply

// optional string encoded_cert = 1;
inline bool CMsgClientNetworkingMobileCertReply::has_encoded_cert() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientNetworkingMobileCertReply::set_has_encoded_cert() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientNetworkingMobileCertReply::clear_has_encoded_cert() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientNetworkingMobileCertReply::clear_encoded_cert() {
  if (encoded_cert_ != &::google::protobuf::internal::kEmptyString) {
    encoded_cert_->clear();
  }
  clear_has_encoded_cert();
}
inline const ::std::string& CMsgClientNetworkingMobileCertReply::encoded_cert() const {
  return *encoded_cert_;
}
inline void CMsgClientNetworkingMobileCertReply::set_encoded_cert(const ::std::string& value) {
  set_has_encoded_cert();
  if (encoded_cert_ == &::google::protobuf::internal::kEmptyString) {
    encoded_cert_ = new ::std::string;
  }
  encoded_cert_->assign(value);
}
inline void CMsgClientNetworkingMobileCertReply::set_encoded_cert(const char* value) {
  set_has_encoded_cert();
  if (encoded_cert_ == &::google::protobuf::internal::kEmptyString) {
    encoded_cert_ = new ::std::string;
  }
  encoded_cert_->assign(value);
}
inline void CMsgClientNetworkingMobileCertReply::set_encoded_cert(const char* value, size_t size) {
  set_has_encoded_cert();
  if (encoded_cert_ == &::google::protobuf::internal::kEmptyString) {
    encoded_cert_ = new ::std::string;
  }
  encoded_cert_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientNetworkingMobileCertReply::mutable_encoded_cert() {
  set_has_encoded_cert();
  if (encoded_cert_ == &::google::protobuf::internal::kEmptyString) {
    encoded_cert_ = new ::std::string;
  }
  return encoded_cert_;
}
inline ::std::string* CMsgClientNetworkingMobileCertReply::release_encoded_cert() {
  clear_has_encoded_cert();
  if (encoded_cert_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = encoded_cert_;
    encoded_cert_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientNetworkingMobileCertReply::set_allocated_encoded_cert(::std::string* encoded_cert) {
  if (encoded_cert_ != &::google::protobuf::internal::kEmptyString) {
    delete encoded_cert_;
  }
  if (encoded_cert) {
    set_has_encoded_cert();
    encoded_cert_ = encoded_cert;
  } else {
    clear_has_encoded_cert();
    encoded_cert_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgClientGetAppOwnershipTicket

// optional uint32 app_id = 1;
inline bool CMsgClientGetAppOwnershipTicket::has_app_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientGetAppOwnershipTicket::set_has_app_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientGetAppOwnershipTicket::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientGetAppOwnershipTicket::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
inline ::google::protobuf::uint32 CMsgClientGetAppOwnershipTicket::app_id() const {
  return app_id_;
}
inline void CMsgClientGetAppOwnershipTicket::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
}

// -------------------------------------------------------------------

// CMsgClientGetAppOwnershipTicketResponse

// optional uint32 eresult = 1 [default = 2];
inline bool CMsgClientGetAppOwnershipTicketResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientGetAppOwnershipTicketResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientGetAppOwnershipTicketResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientGetAppOwnershipTicketResponse::clear_eresult() {
  eresult_ = 2u;
  clear_has_eresult();
}
inline ::google::protobuf::uint32 CMsgClientGetAppOwnershipTicketResponse::eresult() const {
  return eresult_;
}
inline void CMsgClientGetAppOwnershipTicketResponse::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
}

// optional uint32 app_id = 2;
inline bool CMsgClientGetAppOwnershipTicketResponse::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientGetAppOwnershipTicketResponse::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientGetAppOwnershipTicketResponse::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientGetAppOwnershipTicketResponse::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
inline ::google::protobuf::uint32 CMsgClientGetAppOwnershipTicketResponse::app_id() const {
  return app_id_;
}
inline void CMsgClientGetAppOwnershipTicketResponse::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
}

// optional bytes ticket = 3;
inline bool CMsgClientGetAppOwnershipTicketResponse::has_ticket() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientGetAppOwnershipTicketResponse::set_has_ticket() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientGetAppOwnershipTicketResponse::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientGetAppOwnershipTicketResponse::clear_ticket() {
  if (ticket_ != &::google::protobuf::internal::kEmptyString) {
    ticket_->clear();
  }
  clear_has_ticket();
}
inline const ::std::string& CMsgClientGetAppOwnershipTicketResponse::ticket() const {
  return *ticket_;
}
inline void CMsgClientGetAppOwnershipTicketResponse::set_ticket(const ::std::string& value) {
  set_has_ticket();
  if (ticket_ == &::google::protobuf::internal::kEmptyString) {
    ticket_ = new ::std::string;
  }
  ticket_->assign(value);
}
inline void CMsgClientGetAppOwnershipTicketResponse::set_ticket(const char* value) {
  set_has_ticket();
  if (ticket_ == &::google::protobuf::internal::kEmptyString) {
    ticket_ = new ::std::string;
  }
  ticket_->assign(value);
}
inline void CMsgClientGetAppOwnershipTicketResponse::set_ticket(const void* value, size_t size) {
  set_has_ticket();
  if (ticket_ == &::google::protobuf::internal::kEmptyString) {
    ticket_ = new ::std::string;
  }
  ticket_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientGetAppOwnershipTicketResponse::mutable_ticket() {
  set_has_ticket();
  if (ticket_ == &::google::protobuf::internal::kEmptyString) {
    ticket_ = new ::std::string;
  }
  return ticket_;
}
inline ::std::string* CMsgClientGetAppOwnershipTicketResponse::release_ticket() {
  clear_has_ticket();
  if (ticket_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ticket_;
    ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientGetAppOwnershipTicketResponse::set_allocated_ticket(::std::string* ticket) {
  if (ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete ticket_;
  }
  if (ticket) {
    set_has_ticket();
    ticket_ = ticket;
  } else {
    clear_has_ticket();
    ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgClientSessionToken

// optional uint64 token = 1;
inline bool CMsgClientSessionToken::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientSessionToken::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientSessionToken::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientSessionToken::clear_token() {
  token_ = GOOGLE_ULONGLONG(0);
  clear_has_token();
}
inline ::google::protobuf::uint64 CMsgClientSessionToken::token() const {
  return token_;
}
inline void CMsgClientSessionToken::set_token(::google::protobuf::uint64 value) {
  set_has_token();
  token_ = value;
}

// -------------------------------------------------------------------

// CMsgClientGameConnectTokens

// optional uint32 max_tokens_to_keep = 1 [default = 10];
inline bool CMsgClientGameConnectTokens::has_max_tokens_to_keep() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientGameConnectTokens::set_has_max_tokens_to_keep() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientGameConnectTokens::clear_has_max_tokens_to_keep() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientGameConnectTokens::clear_max_tokens_to_keep() {
  max_tokens_to_keep_ = 10u;
  clear_has_max_tokens_to_keep();
}
inline ::google::protobuf::uint32 CMsgClientGameConnectTokens::max_tokens_to_keep() const {
  return max_tokens_to_keep_;
}
inline void CMsgClientGameConnectTokens::set_max_tokens_to_keep(::google::protobuf::uint32 value) {
  set_has_max_tokens_to_keep();
  max_tokens_to_keep_ = value;
}

// repeated bytes tokens = 2;
inline int CMsgClientGameConnectTokens::tokens_size() const {
  return tokens_.size();
}
inline void CMsgClientGameConnectTokens::clear_tokens() {
  tokens_.Clear();
}
inline const ::std::string& CMsgClientGameConnectTokens::tokens(int index) const {
  return tokens_.Get(index);
}
inline ::std::string* CMsgClientGameConnectTokens::mutable_tokens(int index) {
  return tokens_.Mutable(index);
}
inline void CMsgClientGameConnectTokens::set_tokens(int index, const ::std::string& value) {
  tokens_.Mutable(index)->assign(value);
}
inline void CMsgClientGameConnectTokens::set_tokens(int index, const char* value) {
  tokens_.Mutable(index)->assign(value);
}
inline void CMsgClientGameConnectTokens::set_tokens(int index, const void* value, size_t size) {
  tokens_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientGameConnectTokens::add_tokens() {
  return tokens_.Add();
}
inline void CMsgClientGameConnectTokens::add_tokens(const ::std::string& value) {
  tokens_.Add()->assign(value);
}
inline void CMsgClientGameConnectTokens::add_tokens(const char* value) {
  tokens_.Add()->assign(value);
}
inline void CMsgClientGameConnectTokens::add_tokens(const void* value, size_t size) {
  tokens_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CMsgClientGameConnectTokens::tokens() const {
  return tokens_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CMsgClientGameConnectTokens::mutable_tokens() {
  return &tokens_;
}

// -------------------------------------------------------------------

// CMsgClientGamesPlayed_GamePlayed

// optional uint64 steam_id_gs = 1;
inline bool CMsgClientGamesPlayed_GamePlayed::has_steam_id_gs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_has_steam_id_gs() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_has_steam_id_gs() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_steam_id_gs() {
  steam_id_gs_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_gs();
}
inline ::google::protobuf::uint64 CMsgClientGamesPlayed_GamePlayed::steam_id_gs() const {
  return steam_id_gs_;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_steam_id_gs(::google::protobuf::uint64 value) {
  set_has_steam_id_gs();
  steam_id_gs_ = value;
}

// optional fixed64 game_id = 2;
inline bool CMsgClientGamesPlayed_GamePlayed::has_game_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_has_game_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_game_id() {
  game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_game_id();
}
inline ::google::protobuf::uint64 CMsgClientGamesPlayed_GamePlayed::game_id() const {
  return game_id_;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_game_id(::google::protobuf::uint64 value) {
  set_has_game_id();
  game_id_ = value;
}

// optional uint32 deprecated_game_ip_address = 3;
inline bool CMsgClientGamesPlayed_GamePlayed::has_deprecated_game_ip_address() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_has_deprecated_game_ip_address() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_has_deprecated_game_ip_address() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_deprecated_game_ip_address() {
  deprecated_game_ip_address_ = 0u;
  clear_has_deprecated_game_ip_address();
}
inline ::google::protobuf::uint32 CMsgClientGamesPlayed_GamePlayed::deprecated_game_ip_address() const {
  return deprecated_game_ip_address_;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_deprecated_game_ip_address(::google::protobuf::uint32 value) {
  set_has_deprecated_game_ip_address();
  deprecated_game_ip_address_ = value;
}

// optional uint32 game_port = 4;
inline bool CMsgClientGamesPlayed_GamePlayed::has_game_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_has_game_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_has_game_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_game_port() {
  game_port_ = 0u;
  clear_has_game_port();
}
inline ::google::protobuf::uint32 CMsgClientGamesPlayed_GamePlayed::game_port() const {
  return game_port_;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_game_port(::google::protobuf::uint32 value) {
  set_has_game_port();
  game_port_ = value;
}

// optional bool is_secure = 5;
inline bool CMsgClientGamesPlayed_GamePlayed::has_is_secure() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_has_is_secure() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_has_is_secure() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_is_secure() {
  is_secure_ = false;
  clear_has_is_secure();
}
inline bool CMsgClientGamesPlayed_GamePlayed::is_secure() const {
  return is_secure_;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_is_secure(bool value) {
  set_has_is_secure();
  is_secure_ = value;
}

// optional bytes token = 6;
inline bool CMsgClientGamesPlayed_GamePlayed::has_token() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_has_token() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_has_token() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& CMsgClientGamesPlayed_GamePlayed::token() const {
  return *token_;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void CMsgClientGamesPlayed_GamePlayed::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void CMsgClientGamesPlayed_GamePlayed::set_token(const void* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientGamesPlayed_GamePlayed::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* CMsgClientGamesPlayed_GamePlayed::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientGamesPlayed_GamePlayed::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string game_extra_info = 7;
inline bool CMsgClientGamesPlayed_GamePlayed::has_game_extra_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_has_game_extra_info() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_has_game_extra_info() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_game_extra_info() {
  if (game_extra_info_ != &::google::protobuf::internal::kEmptyString) {
    game_extra_info_->clear();
  }
  clear_has_game_extra_info();
}
inline const ::std::string& CMsgClientGamesPlayed_GamePlayed::game_extra_info() const {
  return *game_extra_info_;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_game_extra_info(const ::std::string& value) {
  set_has_game_extra_info();
  if (game_extra_info_ == &::google::protobuf::internal::kEmptyString) {
    game_extra_info_ = new ::std::string;
  }
  game_extra_info_->assign(value);
}
inline void CMsgClientGamesPlayed_GamePlayed::set_game_extra_info(const char* value) {
  set_has_game_extra_info();
  if (game_extra_info_ == &::google::protobuf::internal::kEmptyString) {
    game_extra_info_ = new ::std::string;
  }
  game_extra_info_->assign(value);
}
inline void CMsgClientGamesPlayed_GamePlayed::set_game_extra_info(const char* value, size_t size) {
  set_has_game_extra_info();
  if (game_extra_info_ == &::google::protobuf::internal::kEmptyString) {
    game_extra_info_ = new ::std::string;
  }
  game_extra_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientGamesPlayed_GamePlayed::mutable_game_extra_info() {
  set_has_game_extra_info();
  if (game_extra_info_ == &::google::protobuf::internal::kEmptyString) {
    game_extra_info_ = new ::std::string;
  }
  return game_extra_info_;
}
inline ::std::string* CMsgClientGamesPlayed_GamePlayed::release_game_extra_info() {
  clear_has_game_extra_info();
  if (game_extra_info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = game_extra_info_;
    game_extra_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientGamesPlayed_GamePlayed::set_allocated_game_extra_info(::std::string* game_extra_info) {
  if (game_extra_info_ != &::google::protobuf::internal::kEmptyString) {
    delete game_extra_info_;
  }
  if (game_extra_info) {
    set_has_game_extra_info();
    game_extra_info_ = game_extra_info;
  } else {
    clear_has_game_extra_info();
    game_extra_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes game_data_blob = 8;
inline bool CMsgClientGamesPlayed_GamePlayed::has_game_data_blob() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_has_game_data_blob() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_has_game_data_blob() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_game_data_blob() {
  if (game_data_blob_ != &::google::protobuf::internal::kEmptyString) {
    game_data_blob_->clear();
  }
  clear_has_game_data_blob();
}
inline const ::std::string& CMsgClientGamesPlayed_GamePlayed::game_data_blob() const {
  return *game_data_blob_;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_game_data_blob(const ::std::string& value) {
  set_has_game_data_blob();
  if (game_data_blob_ == &::google::protobuf::internal::kEmptyString) {
    game_data_blob_ = new ::std::string;
  }
  game_data_blob_->assign(value);
}
inline void CMsgClientGamesPlayed_GamePlayed::set_game_data_blob(const char* value) {
  set_has_game_data_blob();
  if (game_data_blob_ == &::google::protobuf::internal::kEmptyString) {
    game_data_blob_ = new ::std::string;
  }
  game_data_blob_->assign(value);
}
inline void CMsgClientGamesPlayed_GamePlayed::set_game_data_blob(const void* value, size_t size) {
  set_has_game_data_blob();
  if (game_data_blob_ == &::google::protobuf::internal::kEmptyString) {
    game_data_blob_ = new ::std::string;
  }
  game_data_blob_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientGamesPlayed_GamePlayed::mutable_game_data_blob() {
  set_has_game_data_blob();
  if (game_data_blob_ == &::google::protobuf::internal::kEmptyString) {
    game_data_blob_ = new ::std::string;
  }
  return game_data_blob_;
}
inline ::std::string* CMsgClientGamesPlayed_GamePlayed::release_game_data_blob() {
  clear_has_game_data_blob();
  if (game_data_blob_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = game_data_blob_;
    game_data_blob_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientGamesPlayed_GamePlayed::set_allocated_game_data_blob(::std::string* game_data_blob) {
  if (game_data_blob_ != &::google::protobuf::internal::kEmptyString) {
    delete game_data_blob_;
  }
  if (game_data_blob) {
    set_has_game_data_blob();
    game_data_blob_ = game_data_blob;
  } else {
    clear_has_game_data_blob();
    game_data_blob_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 process_id = 9;
inline bool CMsgClientGamesPlayed_GamePlayed::has_process_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_has_process_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_has_process_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_process_id() {
  process_id_ = 0u;
  clear_has_process_id();
}
inline ::google::protobuf::uint32 CMsgClientGamesPlayed_GamePlayed::process_id() const {
  return process_id_;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_process_id(::google::protobuf::uint32 value) {
  set_has_process_id();
  process_id_ = value;
}

// optional uint32 streaming_provider_id = 10;
inline bool CMsgClientGamesPlayed_GamePlayed::has_streaming_provider_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_has_streaming_provider_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_has_streaming_provider_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_streaming_provider_id() {
  streaming_provider_id_ = 0u;
  clear_has_streaming_provider_id();
}
inline ::google::protobuf::uint32 CMsgClientGamesPlayed_GamePlayed::streaming_provider_id() const {
  return streaming_provider_id_;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_streaming_provider_id(::google::protobuf::uint32 value) {
  set_has_streaming_provider_id();
  streaming_provider_id_ = value;
}

// optional uint32 game_flags = 11;
inline bool CMsgClientGamesPlayed_GamePlayed::has_game_flags() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_has_game_flags() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_has_game_flags() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_game_flags() {
  game_flags_ = 0u;
  clear_has_game_flags();
}
inline ::google::protobuf::uint32 CMsgClientGamesPlayed_GamePlayed::game_flags() const {
  return game_flags_;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_game_flags(::google::protobuf::uint32 value) {
  set_has_game_flags();
  game_flags_ = value;
}

// optional uint32 owner_id = 12;
inline bool CMsgClientGamesPlayed_GamePlayed::has_owner_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_has_owner_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_has_owner_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_owner_id() {
  owner_id_ = 0u;
  clear_has_owner_id();
}
inline ::google::protobuf::uint32 CMsgClientGamesPlayed_GamePlayed::owner_id() const {
  return owner_id_;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_owner_id(::google::protobuf::uint32 value) {
  set_has_owner_id();
  owner_id_ = value;
}

// optional string vr_hmd_vendor = 13;
inline bool CMsgClientGamesPlayed_GamePlayed::has_vr_hmd_vendor() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_has_vr_hmd_vendor() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_has_vr_hmd_vendor() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_vr_hmd_vendor() {
  if (vr_hmd_vendor_ != &::google::protobuf::internal::kEmptyString) {
    vr_hmd_vendor_->clear();
  }
  clear_has_vr_hmd_vendor();
}
inline const ::std::string& CMsgClientGamesPlayed_GamePlayed::vr_hmd_vendor() const {
  return *vr_hmd_vendor_;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_vr_hmd_vendor(const ::std::string& value) {
  set_has_vr_hmd_vendor();
  if (vr_hmd_vendor_ == &::google::protobuf::internal::kEmptyString) {
    vr_hmd_vendor_ = new ::std::string;
  }
  vr_hmd_vendor_->assign(value);
}
inline void CMsgClientGamesPlayed_GamePlayed::set_vr_hmd_vendor(const char* value) {
  set_has_vr_hmd_vendor();
  if (vr_hmd_vendor_ == &::google::protobuf::internal::kEmptyString) {
    vr_hmd_vendor_ = new ::std::string;
  }
  vr_hmd_vendor_->assign(value);
}
inline void CMsgClientGamesPlayed_GamePlayed::set_vr_hmd_vendor(const char* value, size_t size) {
  set_has_vr_hmd_vendor();
  if (vr_hmd_vendor_ == &::google::protobuf::internal::kEmptyString) {
    vr_hmd_vendor_ = new ::std::string;
  }
  vr_hmd_vendor_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientGamesPlayed_GamePlayed::mutable_vr_hmd_vendor() {
  set_has_vr_hmd_vendor();
  if (vr_hmd_vendor_ == &::google::protobuf::internal::kEmptyString) {
    vr_hmd_vendor_ = new ::std::string;
  }
  return vr_hmd_vendor_;
}
inline ::std::string* CMsgClientGamesPlayed_GamePlayed::release_vr_hmd_vendor() {
  clear_has_vr_hmd_vendor();
  if (vr_hmd_vendor_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = vr_hmd_vendor_;
    vr_hmd_vendor_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientGamesPlayed_GamePlayed::set_allocated_vr_hmd_vendor(::std::string* vr_hmd_vendor) {
  if (vr_hmd_vendor_ != &::google::protobuf::internal::kEmptyString) {
    delete vr_hmd_vendor_;
  }
  if (vr_hmd_vendor) {
    set_has_vr_hmd_vendor();
    vr_hmd_vendor_ = vr_hmd_vendor;
  } else {
    clear_has_vr_hmd_vendor();
    vr_hmd_vendor_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string vr_hmd_model = 14;
inline bool CMsgClientGamesPlayed_GamePlayed::has_vr_hmd_model() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_has_vr_hmd_model() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_has_vr_hmd_model() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_vr_hmd_model() {
  if (vr_hmd_model_ != &::google::protobuf::internal::kEmptyString) {
    vr_hmd_model_->clear();
  }
  clear_has_vr_hmd_model();
}
inline const ::std::string& CMsgClientGamesPlayed_GamePlayed::vr_hmd_model() const {
  return *vr_hmd_model_;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_vr_hmd_model(const ::std::string& value) {
  set_has_vr_hmd_model();
  if (vr_hmd_model_ == &::google::protobuf::internal::kEmptyString) {
    vr_hmd_model_ = new ::std::string;
  }
  vr_hmd_model_->assign(value);
}
inline void CMsgClientGamesPlayed_GamePlayed::set_vr_hmd_model(const char* value) {
  set_has_vr_hmd_model();
  if (vr_hmd_model_ == &::google::protobuf::internal::kEmptyString) {
    vr_hmd_model_ = new ::std::string;
  }
  vr_hmd_model_->assign(value);
}
inline void CMsgClientGamesPlayed_GamePlayed::set_vr_hmd_model(const char* value, size_t size) {
  set_has_vr_hmd_model();
  if (vr_hmd_model_ == &::google::protobuf::internal::kEmptyString) {
    vr_hmd_model_ = new ::std::string;
  }
  vr_hmd_model_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientGamesPlayed_GamePlayed::mutable_vr_hmd_model() {
  set_has_vr_hmd_model();
  if (vr_hmd_model_ == &::google::protobuf::internal::kEmptyString) {
    vr_hmd_model_ = new ::std::string;
  }
  return vr_hmd_model_;
}
inline ::std::string* CMsgClientGamesPlayed_GamePlayed::release_vr_hmd_model() {
  clear_has_vr_hmd_model();
  if (vr_hmd_model_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = vr_hmd_model_;
    vr_hmd_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientGamesPlayed_GamePlayed::set_allocated_vr_hmd_model(::std::string* vr_hmd_model) {
  if (vr_hmd_model_ != &::google::protobuf::internal::kEmptyString) {
    delete vr_hmd_model_;
  }
  if (vr_hmd_model) {
    set_has_vr_hmd_model();
    vr_hmd_model_ = vr_hmd_model;
  } else {
    clear_has_vr_hmd_model();
    vr_hmd_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 launch_option_type = 15 [default = 0];
inline bool CMsgClientGamesPlayed_GamePlayed::has_launch_option_type() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_has_launch_option_type() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_has_launch_option_type() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_launch_option_type() {
  launch_option_type_ = 0u;
  clear_has_launch_option_type();
}
inline ::google::protobuf::uint32 CMsgClientGamesPlayed_GamePlayed::launch_option_type() const {
  return launch_option_type_;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_launch_option_type(::google::protobuf::uint32 value) {
  set_has_launch_option_type();
  launch_option_type_ = value;
}

// optional int32 primary_controller_type = 16 [default = -1];
inline bool CMsgClientGamesPlayed_GamePlayed::has_primary_controller_type() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_has_primary_controller_type() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_has_primary_controller_type() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_primary_controller_type() {
  primary_controller_type_ = -1;
  clear_has_primary_controller_type();
}
inline ::google::protobuf::int32 CMsgClientGamesPlayed_GamePlayed::primary_controller_type() const {
  return primary_controller_type_;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_primary_controller_type(::google::protobuf::int32 value) {
  set_has_primary_controller_type();
  primary_controller_type_ = value;
}

// optional string primary_steam_controller_serial = 17;
inline bool CMsgClientGamesPlayed_GamePlayed::has_primary_steam_controller_serial() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_has_primary_steam_controller_serial() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_has_primary_steam_controller_serial() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_primary_steam_controller_serial() {
  if (primary_steam_controller_serial_ != &::google::protobuf::internal::kEmptyString) {
    primary_steam_controller_serial_->clear();
  }
  clear_has_primary_steam_controller_serial();
}
inline const ::std::string& CMsgClientGamesPlayed_GamePlayed::primary_steam_controller_serial() const {
  return *primary_steam_controller_serial_;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_primary_steam_controller_serial(const ::std::string& value) {
  set_has_primary_steam_controller_serial();
  if (primary_steam_controller_serial_ == &::google::protobuf::internal::kEmptyString) {
    primary_steam_controller_serial_ = new ::std::string;
  }
  primary_steam_controller_serial_->assign(value);
}
inline void CMsgClientGamesPlayed_GamePlayed::set_primary_steam_controller_serial(const char* value) {
  set_has_primary_steam_controller_serial();
  if (primary_steam_controller_serial_ == &::google::protobuf::internal::kEmptyString) {
    primary_steam_controller_serial_ = new ::std::string;
  }
  primary_steam_controller_serial_->assign(value);
}
inline void CMsgClientGamesPlayed_GamePlayed::set_primary_steam_controller_serial(const char* value, size_t size) {
  set_has_primary_steam_controller_serial();
  if (primary_steam_controller_serial_ == &::google::protobuf::internal::kEmptyString) {
    primary_steam_controller_serial_ = new ::std::string;
  }
  primary_steam_controller_serial_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientGamesPlayed_GamePlayed::mutable_primary_steam_controller_serial() {
  set_has_primary_steam_controller_serial();
  if (primary_steam_controller_serial_ == &::google::protobuf::internal::kEmptyString) {
    primary_steam_controller_serial_ = new ::std::string;
  }
  return primary_steam_controller_serial_;
}
inline ::std::string* CMsgClientGamesPlayed_GamePlayed::release_primary_steam_controller_serial() {
  clear_has_primary_steam_controller_serial();
  if (primary_steam_controller_serial_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = primary_steam_controller_serial_;
    primary_steam_controller_serial_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientGamesPlayed_GamePlayed::set_allocated_primary_steam_controller_serial(::std::string* primary_steam_controller_serial) {
  if (primary_steam_controller_serial_ != &::google::protobuf::internal::kEmptyString) {
    delete primary_steam_controller_serial_;
  }
  if (primary_steam_controller_serial) {
    set_has_primary_steam_controller_serial();
    primary_steam_controller_serial_ = primary_steam_controller_serial;
  } else {
    clear_has_primary_steam_controller_serial();
    primary_steam_controller_serial_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 total_steam_controller_count = 18 [default = 0];
inline bool CMsgClientGamesPlayed_GamePlayed::has_total_steam_controller_count() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_has_total_steam_controller_count() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_has_total_steam_controller_count() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_total_steam_controller_count() {
  total_steam_controller_count_ = 0u;
  clear_has_total_steam_controller_count();
}
inline ::google::protobuf::uint32 CMsgClientGamesPlayed_GamePlayed::total_steam_controller_count() const {
  return total_steam_controller_count_;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_total_steam_controller_count(::google::protobuf::uint32 value) {
  set_has_total_steam_controller_count();
  total_steam_controller_count_ = value;
}

// optional uint32 total_non_steam_controller_count = 19 [default = 0];
inline bool CMsgClientGamesPlayed_GamePlayed::has_total_non_steam_controller_count() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_has_total_non_steam_controller_count() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_has_total_non_steam_controller_count() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_total_non_steam_controller_count() {
  total_non_steam_controller_count_ = 0u;
  clear_has_total_non_steam_controller_count();
}
inline ::google::protobuf::uint32 CMsgClientGamesPlayed_GamePlayed::total_non_steam_controller_count() const {
  return total_non_steam_controller_count_;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_total_non_steam_controller_count(::google::protobuf::uint32 value) {
  set_has_total_non_steam_controller_count();
  total_non_steam_controller_count_ = value;
}

// optional uint64 controller_workshop_file_id = 20 [default = 0];
inline bool CMsgClientGamesPlayed_GamePlayed::has_controller_workshop_file_id() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_has_controller_workshop_file_id() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_has_controller_workshop_file_id() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_controller_workshop_file_id() {
  controller_workshop_file_id_ = GOOGLE_ULONGLONG(0);
  clear_has_controller_workshop_file_id();
}
inline ::google::protobuf::uint64 CMsgClientGamesPlayed_GamePlayed::controller_workshop_file_id() const {
  return controller_workshop_file_id_;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_controller_workshop_file_id(::google::protobuf::uint64 value) {
  set_has_controller_workshop_file_id();
  controller_workshop_file_id_ = value;
}

// optional uint32 launch_source = 21 [default = 0];
inline bool CMsgClientGamesPlayed_GamePlayed::has_launch_source() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_has_launch_source() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_has_launch_source() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_launch_source() {
  launch_source_ = 0u;
  clear_has_launch_source();
}
inline ::google::protobuf::uint32 CMsgClientGamesPlayed_GamePlayed::launch_source() const {
  return launch_source_;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_launch_source(::google::protobuf::uint32 value) {
  set_has_launch_source();
  launch_source_ = value;
}

// optional uint32 vr_hmd_runtime = 22;
inline bool CMsgClientGamesPlayed_GamePlayed::has_vr_hmd_runtime() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_has_vr_hmd_runtime() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_has_vr_hmd_runtime() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_vr_hmd_runtime() {
  vr_hmd_runtime_ = 0u;
  clear_has_vr_hmd_runtime();
}
inline ::google::protobuf::uint32 CMsgClientGamesPlayed_GamePlayed::vr_hmd_runtime() const {
  return vr_hmd_runtime_;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_vr_hmd_runtime(::google::protobuf::uint32 value) {
  set_has_vr_hmd_runtime();
  vr_hmd_runtime_ = value;
}

// optional .CMsgIPAddress game_ip_address = 23;
inline bool CMsgClientGamesPlayed_GamePlayed::has_game_ip_address() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_has_game_ip_address() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_has_game_ip_address() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_game_ip_address() {
  if (game_ip_address_ != NULL) game_ip_address_->::CMsgIPAddress::Clear();
  clear_has_game_ip_address();
}
inline const ::CMsgIPAddress& CMsgClientGamesPlayed_GamePlayed::game_ip_address() const {
  return game_ip_address_ != NULL ? *game_ip_address_ : *default_instance_->game_ip_address_;
}
inline ::CMsgIPAddress* CMsgClientGamesPlayed_GamePlayed::mutable_game_ip_address() {
  set_has_game_ip_address();
  if (game_ip_address_ == NULL) game_ip_address_ = new ::CMsgIPAddress;
  return game_ip_address_;
}
inline ::CMsgIPAddress* CMsgClientGamesPlayed_GamePlayed::release_game_ip_address() {
  clear_has_game_ip_address();
  ::CMsgIPAddress* temp = game_ip_address_;
  game_ip_address_ = NULL;
  return temp;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_allocated_game_ip_address(::CMsgIPAddress* game_ip_address) {
  delete game_ip_address_;
  game_ip_address_ = game_ip_address;
  if (game_ip_address) {
    set_has_game_ip_address();
  } else {
    clear_has_game_ip_address();
  }
}

// optional uint32 controller_connection_type = 24 [default = 0];
inline bool CMsgClientGamesPlayed_GamePlayed::has_controller_connection_type() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_has_controller_connection_type() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_has_controller_connection_type() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_controller_connection_type() {
  controller_connection_type_ = 0u;
  clear_has_controller_connection_type();
}
inline ::google::protobuf::uint32 CMsgClientGamesPlayed_GamePlayed::controller_connection_type() const {
  return controller_connection_type_;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_controller_connection_type(::google::protobuf::uint32 value) {
  set_has_controller_connection_type();
  controller_connection_type_ = value;
}

// optional int32 game_os_platform = 25;
inline bool CMsgClientGamesPlayed_GamePlayed::has_game_os_platform() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_has_game_os_platform() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_has_game_os_platform() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_game_os_platform() {
  game_os_platform_ = 0;
  clear_has_game_os_platform();
}
inline ::google::protobuf::int32 CMsgClientGamesPlayed_GamePlayed::game_os_platform() const {
  return game_os_platform_;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_game_os_platform(::google::protobuf::int32 value) {
  set_has_game_os_platform();
  game_os_platform_ = value;
}

// optional uint32 game_build_id = 26;
inline bool CMsgClientGamesPlayed_GamePlayed::has_game_build_id() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_has_game_build_id() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_has_game_build_id() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_game_build_id() {
  game_build_id_ = 0u;
  clear_has_game_build_id();
}
inline ::google::protobuf::uint32 CMsgClientGamesPlayed_GamePlayed::game_build_id() const {
  return game_build_id_;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_game_build_id(::google::protobuf::uint32 value) {
  set_has_game_build_id();
  game_build_id_ = value;
}

// optional uint32 compat_tool_id = 27 [default = 0];
inline bool CMsgClientGamesPlayed_GamePlayed::has_compat_tool_id() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_has_compat_tool_id() {
  _has_bits_[0] |= 0x04000000u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_has_compat_tool_id() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_compat_tool_id() {
  compat_tool_id_ = 0u;
  clear_has_compat_tool_id();
}
inline ::google::protobuf::uint32 CMsgClientGamesPlayed_GamePlayed::compat_tool_id() const {
  return compat_tool_id_;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_compat_tool_id(::google::protobuf::uint32 value) {
  set_has_compat_tool_id();
  compat_tool_id_ = value;
}

// optional string compat_tool_cmd = 28;
inline bool CMsgClientGamesPlayed_GamePlayed::has_compat_tool_cmd() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_has_compat_tool_cmd() {
  _has_bits_[0] |= 0x08000000u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_has_compat_tool_cmd() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_compat_tool_cmd() {
  if (compat_tool_cmd_ != &::google::protobuf::internal::kEmptyString) {
    compat_tool_cmd_->clear();
  }
  clear_has_compat_tool_cmd();
}
inline const ::std::string& CMsgClientGamesPlayed_GamePlayed::compat_tool_cmd() const {
  return *compat_tool_cmd_;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_compat_tool_cmd(const ::std::string& value) {
  set_has_compat_tool_cmd();
  if (compat_tool_cmd_ == &::google::protobuf::internal::kEmptyString) {
    compat_tool_cmd_ = new ::std::string;
  }
  compat_tool_cmd_->assign(value);
}
inline void CMsgClientGamesPlayed_GamePlayed::set_compat_tool_cmd(const char* value) {
  set_has_compat_tool_cmd();
  if (compat_tool_cmd_ == &::google::protobuf::internal::kEmptyString) {
    compat_tool_cmd_ = new ::std::string;
  }
  compat_tool_cmd_->assign(value);
}
inline void CMsgClientGamesPlayed_GamePlayed::set_compat_tool_cmd(const char* value, size_t size) {
  set_has_compat_tool_cmd();
  if (compat_tool_cmd_ == &::google::protobuf::internal::kEmptyString) {
    compat_tool_cmd_ = new ::std::string;
  }
  compat_tool_cmd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientGamesPlayed_GamePlayed::mutable_compat_tool_cmd() {
  set_has_compat_tool_cmd();
  if (compat_tool_cmd_ == &::google::protobuf::internal::kEmptyString) {
    compat_tool_cmd_ = new ::std::string;
  }
  return compat_tool_cmd_;
}
inline ::std::string* CMsgClientGamesPlayed_GamePlayed::release_compat_tool_cmd() {
  clear_has_compat_tool_cmd();
  if (compat_tool_cmd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = compat_tool_cmd_;
    compat_tool_cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientGamesPlayed_GamePlayed::set_allocated_compat_tool_cmd(::std::string* compat_tool_cmd) {
  if (compat_tool_cmd_ != &::google::protobuf::internal::kEmptyString) {
    delete compat_tool_cmd_;
  }
  if (compat_tool_cmd) {
    set_has_compat_tool_cmd();
    compat_tool_cmd_ = compat_tool_cmd;
  } else {
    clear_has_compat_tool_cmd();
    compat_tool_cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 compat_tool_build_id = 29;
inline bool CMsgClientGamesPlayed_GamePlayed::has_compat_tool_build_id() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_has_compat_tool_build_id() {
  _has_bits_[0] |= 0x10000000u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_has_compat_tool_build_id() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_compat_tool_build_id() {
  compat_tool_build_id_ = 0u;
  clear_has_compat_tool_build_id();
}
inline ::google::protobuf::uint32 CMsgClientGamesPlayed_GamePlayed::compat_tool_build_id() const {
  return compat_tool_build_id_;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_compat_tool_build_id(::google::protobuf::uint32 value) {
  set_has_compat_tool_build_id();
  compat_tool_build_id_ = value;
}

// optional string beta_name = 30;
inline bool CMsgClientGamesPlayed_GamePlayed::has_beta_name() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_has_beta_name() {
  _has_bits_[0] |= 0x20000000u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_has_beta_name() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_beta_name() {
  if (beta_name_ != &::google::protobuf::internal::kEmptyString) {
    beta_name_->clear();
  }
  clear_has_beta_name();
}
inline const ::std::string& CMsgClientGamesPlayed_GamePlayed::beta_name() const {
  return *beta_name_;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_beta_name(const ::std::string& value) {
  set_has_beta_name();
  if (beta_name_ == &::google::protobuf::internal::kEmptyString) {
    beta_name_ = new ::std::string;
  }
  beta_name_->assign(value);
}
inline void CMsgClientGamesPlayed_GamePlayed::set_beta_name(const char* value) {
  set_has_beta_name();
  if (beta_name_ == &::google::protobuf::internal::kEmptyString) {
    beta_name_ = new ::std::string;
  }
  beta_name_->assign(value);
}
inline void CMsgClientGamesPlayed_GamePlayed::set_beta_name(const char* value, size_t size) {
  set_has_beta_name();
  if (beta_name_ == &::google::protobuf::internal::kEmptyString) {
    beta_name_ = new ::std::string;
  }
  beta_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientGamesPlayed_GamePlayed::mutable_beta_name() {
  set_has_beta_name();
  if (beta_name_ == &::google::protobuf::internal::kEmptyString) {
    beta_name_ = new ::std::string;
  }
  return beta_name_;
}
inline ::std::string* CMsgClientGamesPlayed_GamePlayed::release_beta_name() {
  clear_has_beta_name();
  if (beta_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = beta_name_;
    beta_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientGamesPlayed_GamePlayed::set_allocated_beta_name(::std::string* beta_name) {
  if (beta_name_ != &::google::protobuf::internal::kEmptyString) {
    delete beta_name_;
  }
  if (beta_name) {
    set_has_beta_name();
    beta_name_ = beta_name;
  } else {
    clear_has_beta_name();
    beta_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 dlc_context = 31;
inline bool CMsgClientGamesPlayed_GamePlayed::has_dlc_context() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_has_dlc_context() {
  _has_bits_[0] |= 0x40000000u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_has_dlc_context() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void CMsgClientGamesPlayed_GamePlayed::clear_dlc_context() {
  dlc_context_ = 0u;
  clear_has_dlc_context();
}
inline ::google::protobuf::uint32 CMsgClientGamesPlayed_GamePlayed::dlc_context() const {
  return dlc_context_;
}
inline void CMsgClientGamesPlayed_GamePlayed::set_dlc_context(::google::protobuf::uint32 value) {
  set_has_dlc_context();
  dlc_context_ = value;
}

// -------------------------------------------------------------------

// CMsgClientGamesPlayed

// repeated .CMsgClientGamesPlayed.GamePlayed games_played = 1;
inline int CMsgClientGamesPlayed::games_played_size() const {
  return games_played_.size();
}
inline void CMsgClientGamesPlayed::clear_games_played() {
  games_played_.Clear();
}
inline const ::CMsgClientGamesPlayed_GamePlayed& CMsgClientGamesPlayed::games_played(int index) const {
  return games_played_.Get(index);
}
inline ::CMsgClientGamesPlayed_GamePlayed* CMsgClientGamesPlayed::mutable_games_played(int index) {
  return games_played_.Mutable(index);
}
inline ::CMsgClientGamesPlayed_GamePlayed* CMsgClientGamesPlayed::add_games_played() {
  return games_played_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgClientGamesPlayed_GamePlayed >&
CMsgClientGamesPlayed::games_played() const {
  return games_played_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgClientGamesPlayed_GamePlayed >*
CMsgClientGamesPlayed::mutable_games_played() {
  return &games_played_;
}

// optional uint32 client_os_type = 2;
inline bool CMsgClientGamesPlayed::has_client_os_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientGamesPlayed::set_has_client_os_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientGamesPlayed::clear_has_client_os_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientGamesPlayed::clear_client_os_type() {
  client_os_type_ = 0u;
  clear_has_client_os_type();
}
inline ::google::protobuf::uint32 CMsgClientGamesPlayed::client_os_type() const {
  return client_os_type_;
}
inline void CMsgClientGamesPlayed::set_client_os_type(::google::protobuf::uint32 value) {
  set_has_client_os_type();
  client_os_type_ = value;
}

// optional uint32 cloud_gaming_platform = 3;
inline bool CMsgClientGamesPlayed::has_cloud_gaming_platform() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientGamesPlayed::set_has_cloud_gaming_platform() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientGamesPlayed::clear_has_cloud_gaming_platform() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientGamesPlayed::clear_cloud_gaming_platform() {
  cloud_gaming_platform_ = 0u;
  clear_has_cloud_gaming_platform();
}
inline ::google::protobuf::uint32 CMsgClientGamesPlayed::cloud_gaming_platform() const {
  return cloud_gaming_platform_;
}
inline void CMsgClientGamesPlayed::set_cloud_gaming_platform(::google::protobuf::uint32 value) {
  set_has_cloud_gaming_platform();
  cloud_gaming_platform_ = value;
}

// optional bool recent_reauthentication = 4;
inline bool CMsgClientGamesPlayed::has_recent_reauthentication() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgClientGamesPlayed::set_has_recent_reauthentication() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgClientGamesPlayed::clear_has_recent_reauthentication() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgClientGamesPlayed::clear_recent_reauthentication() {
  recent_reauthentication_ = false;
  clear_has_recent_reauthentication();
}
inline bool CMsgClientGamesPlayed::recent_reauthentication() const {
  return recent_reauthentication_;
}
inline void CMsgClientGamesPlayed::set_recent_reauthentication(bool value) {
  set_has_recent_reauthentication();
  recent_reauthentication_ = value;
}

// -------------------------------------------------------------------

// CMsgGSApprove

// optional fixed64 steam_id = 1;
inline bool CMsgGSApprove::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGSApprove::set_has_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGSApprove::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGSApprove::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
inline ::google::protobuf::uint64 CMsgGSApprove::steam_id() const {
  return steam_id_;
}
inline void CMsgGSApprove::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
}

// optional fixed64 owner_steam_id = 2;
inline bool CMsgGSApprove::has_owner_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGSApprove::set_has_owner_steam_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGSApprove::clear_has_owner_steam_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGSApprove::clear_owner_steam_id() {
  owner_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_owner_steam_id();
}
inline ::google::protobuf::uint64 CMsgGSApprove::owner_steam_id() const {
  return owner_steam_id_;
}
inline void CMsgGSApprove::set_owner_steam_id(::google::protobuf::uint64 value) {
  set_has_owner_steam_id();
  owner_steam_id_ = value;
}

// -------------------------------------------------------------------

// CMsgGSDeny

// optional fixed64 steam_id = 1;
inline bool CMsgGSDeny::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGSDeny::set_has_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGSDeny::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGSDeny::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
inline ::google::protobuf::uint64 CMsgGSDeny::steam_id() const {
  return steam_id_;
}
inline void CMsgGSDeny::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
}

// optional int32 edeny_reason = 2;
inline bool CMsgGSDeny::has_edeny_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGSDeny::set_has_edeny_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGSDeny::clear_has_edeny_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGSDeny::clear_edeny_reason() {
  edeny_reason_ = 0;
  clear_has_edeny_reason();
}
inline ::google::protobuf::int32 CMsgGSDeny::edeny_reason() const {
  return edeny_reason_;
}
inline void CMsgGSDeny::set_edeny_reason(::google::protobuf::int32 value) {
  set_has_edeny_reason();
  edeny_reason_ = value;
}

// optional string deny_string = 3;
inline bool CMsgGSDeny::has_deny_string() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGSDeny::set_has_deny_string() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGSDeny::clear_has_deny_string() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGSDeny::clear_deny_string() {
  if (deny_string_ != &::google::protobuf::internal::kEmptyString) {
    deny_string_->clear();
  }
  clear_has_deny_string();
}
inline const ::std::string& CMsgGSDeny::deny_string() const {
  return *deny_string_;
}
inline void CMsgGSDeny::set_deny_string(const ::std::string& value) {
  set_has_deny_string();
  if (deny_string_ == &::google::protobuf::internal::kEmptyString) {
    deny_string_ = new ::std::string;
  }
  deny_string_->assign(value);
}
inline void CMsgGSDeny::set_deny_string(const char* value) {
  set_has_deny_string();
  if (deny_string_ == &::google::protobuf::internal::kEmptyString) {
    deny_string_ = new ::std::string;
  }
  deny_string_->assign(value);
}
inline void CMsgGSDeny::set_deny_string(const char* value, size_t size) {
  set_has_deny_string();
  if (deny_string_ == &::google::protobuf::internal::kEmptyString) {
    deny_string_ = new ::std::string;
  }
  deny_string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgGSDeny::mutable_deny_string() {
  set_has_deny_string();
  if (deny_string_ == &::google::protobuf::internal::kEmptyString) {
    deny_string_ = new ::std::string;
  }
  return deny_string_;
}
inline ::std::string* CMsgGSDeny::release_deny_string() {
  clear_has_deny_string();
  if (deny_string_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deny_string_;
    deny_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgGSDeny::set_allocated_deny_string(::std::string* deny_string) {
  if (deny_string_ != &::google::protobuf::internal::kEmptyString) {
    delete deny_string_;
  }
  if (deny_string) {
    set_has_deny_string();
    deny_string_ = deny_string;
  } else {
    clear_has_deny_string();
    deny_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgGSKick

// optional fixed64 steam_id = 1;
inline bool CMsgGSKick::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGSKick::set_has_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGSKick::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGSKick::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
inline ::google::protobuf::uint64 CMsgGSKick::steam_id() const {
  return steam_id_;
}
inline void CMsgGSKick::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
}

// optional int32 edeny_reason = 2;
inline bool CMsgGSKick::has_edeny_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGSKick::set_has_edeny_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGSKick::clear_has_edeny_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGSKick::clear_edeny_reason() {
  edeny_reason_ = 0;
  clear_has_edeny_reason();
}
inline ::google::protobuf::int32 CMsgGSKick::edeny_reason() const {
  return edeny_reason_;
}
inline void CMsgGSKick::set_edeny_reason(::google::protobuf::int32 value) {
  set_has_edeny_reason();
  edeny_reason_ = value;
}

// -------------------------------------------------------------------

// CMsgClientAuthList

// optional uint32 tokens_left = 1;
inline bool CMsgClientAuthList::has_tokens_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientAuthList::set_has_tokens_left() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientAuthList::clear_has_tokens_left() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientAuthList::clear_tokens_left() {
  tokens_left_ = 0u;
  clear_has_tokens_left();
}
inline ::google::protobuf::uint32 CMsgClientAuthList::tokens_left() const {
  return tokens_left_;
}
inline void CMsgClientAuthList::set_tokens_left(::google::protobuf::uint32 value) {
  set_has_tokens_left();
  tokens_left_ = value;
}

// optional uint32 last_request_seq = 2;
inline bool CMsgClientAuthList::has_last_request_seq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientAuthList::set_has_last_request_seq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientAuthList::clear_has_last_request_seq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientAuthList::clear_last_request_seq() {
  last_request_seq_ = 0u;
  clear_has_last_request_seq();
}
inline ::google::protobuf::uint32 CMsgClientAuthList::last_request_seq() const {
  return last_request_seq_;
}
inline void CMsgClientAuthList::set_last_request_seq(::google::protobuf::uint32 value) {
  set_has_last_request_seq();
  last_request_seq_ = value;
}

// optional uint32 last_request_seq_from_server = 3;
inline bool CMsgClientAuthList::has_last_request_seq_from_server() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientAuthList::set_has_last_request_seq_from_server() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientAuthList::clear_has_last_request_seq_from_server() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientAuthList::clear_last_request_seq_from_server() {
  last_request_seq_from_server_ = 0u;
  clear_has_last_request_seq_from_server();
}
inline ::google::protobuf::uint32 CMsgClientAuthList::last_request_seq_from_server() const {
  return last_request_seq_from_server_;
}
inline void CMsgClientAuthList::set_last_request_seq_from_server(::google::protobuf::uint32 value) {
  set_has_last_request_seq_from_server();
  last_request_seq_from_server_ = value;
}

// repeated .CMsgAuthTicket tickets = 4;
inline int CMsgClientAuthList::tickets_size() const {
  return tickets_.size();
}
inline void CMsgClientAuthList::clear_tickets() {
  tickets_.Clear();
}
inline const ::CMsgAuthTicket& CMsgClientAuthList::tickets(int index) const {
  return tickets_.Get(index);
}
inline ::CMsgAuthTicket* CMsgClientAuthList::mutable_tickets(int index) {
  return tickets_.Mutable(index);
}
inline ::CMsgAuthTicket* CMsgClientAuthList::add_tickets() {
  return tickets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgAuthTicket >&
CMsgClientAuthList::tickets() const {
  return tickets_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgAuthTicket >*
CMsgClientAuthList::mutable_tickets() {
  return &tickets_;
}

// repeated uint32 app_ids = 5;
inline int CMsgClientAuthList::app_ids_size() const {
  return app_ids_.size();
}
inline void CMsgClientAuthList::clear_app_ids() {
  app_ids_.Clear();
}
inline ::google::protobuf::uint32 CMsgClientAuthList::app_ids(int index) const {
  return app_ids_.Get(index);
}
inline void CMsgClientAuthList::set_app_ids(int index, ::google::protobuf::uint32 value) {
  app_ids_.Set(index, value);
}
inline void CMsgClientAuthList::add_app_ids(::google::protobuf::uint32 value) {
  app_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgClientAuthList::app_ids() const {
  return app_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgClientAuthList::mutable_app_ids() {
  return &app_ids_;
}

// optional uint32 message_sequence = 6;
inline bool CMsgClientAuthList::has_message_sequence() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgClientAuthList::set_has_message_sequence() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgClientAuthList::clear_has_message_sequence() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgClientAuthList::clear_message_sequence() {
  message_sequence_ = 0u;
  clear_has_message_sequence();
}
inline ::google::protobuf::uint32 CMsgClientAuthList::message_sequence() const {
  return message_sequence_;
}
inline void CMsgClientAuthList::set_message_sequence(::google::protobuf::uint32 value) {
  set_has_message_sequence();
  message_sequence_ = value;
}

// -------------------------------------------------------------------

// CMsgClientAuthListAck

// repeated uint32 ticket_crc = 1;
inline int CMsgClientAuthListAck::ticket_crc_size() const {
  return ticket_crc_.size();
}
inline void CMsgClientAuthListAck::clear_ticket_crc() {
  ticket_crc_.Clear();
}
inline ::google::protobuf::uint32 CMsgClientAuthListAck::ticket_crc(int index) const {
  return ticket_crc_.Get(index);
}
inline void CMsgClientAuthListAck::set_ticket_crc(int index, ::google::protobuf::uint32 value) {
  ticket_crc_.Set(index, value);
}
inline void CMsgClientAuthListAck::add_ticket_crc(::google::protobuf::uint32 value) {
  ticket_crc_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgClientAuthListAck::ticket_crc() const {
  return ticket_crc_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgClientAuthListAck::mutable_ticket_crc() {
  return &ticket_crc_;
}

// repeated uint32 app_ids = 2;
inline int CMsgClientAuthListAck::app_ids_size() const {
  return app_ids_.size();
}
inline void CMsgClientAuthListAck::clear_app_ids() {
  app_ids_.Clear();
}
inline ::google::protobuf::uint32 CMsgClientAuthListAck::app_ids(int index) const {
  return app_ids_.Get(index);
}
inline void CMsgClientAuthListAck::set_app_ids(int index, ::google::protobuf::uint32 value) {
  app_ids_.Set(index, value);
}
inline void CMsgClientAuthListAck::add_app_ids(::google::protobuf::uint32 value) {
  app_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgClientAuthListAck::app_ids() const {
  return app_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgClientAuthListAck::mutable_app_ids() {
  return &app_ids_;
}

// optional uint32 message_sequence = 3;
inline bool CMsgClientAuthListAck::has_message_sequence() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientAuthListAck::set_has_message_sequence() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientAuthListAck::clear_has_message_sequence() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientAuthListAck::clear_message_sequence() {
  message_sequence_ = 0u;
  clear_has_message_sequence();
}
inline ::google::protobuf::uint32 CMsgClientAuthListAck::message_sequence() const {
  return message_sequence_;
}
inline void CMsgClientAuthListAck::set_message_sequence(::google::protobuf::uint32 value) {
  set_has_message_sequence();
  message_sequence_ = value;
}

// -------------------------------------------------------------------

// CMsgClientLicenseList_License

// optional uint32 package_id = 1;
inline bool CMsgClientLicenseList_License::has_package_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientLicenseList_License::set_has_package_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientLicenseList_License::clear_has_package_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientLicenseList_License::clear_package_id() {
  package_id_ = 0u;
  clear_has_package_id();
}
inline ::google::protobuf::uint32 CMsgClientLicenseList_License::package_id() const {
  return package_id_;
}
inline void CMsgClientLicenseList_License::set_package_id(::google::protobuf::uint32 value) {
  set_has_package_id();
  package_id_ = value;
}

// optional fixed32 time_created = 2;
inline bool CMsgClientLicenseList_License::has_time_created() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientLicenseList_License::set_has_time_created() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientLicenseList_License::clear_has_time_created() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientLicenseList_License::clear_time_created() {
  time_created_ = 0u;
  clear_has_time_created();
}
inline ::google::protobuf::uint32 CMsgClientLicenseList_License::time_created() const {
  return time_created_;
}
inline void CMsgClientLicenseList_License::set_time_created(::google::protobuf::uint32 value) {
  set_has_time_created();
  time_created_ = value;
}

// optional fixed32 time_next_process = 3;
inline bool CMsgClientLicenseList_License::has_time_next_process() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientLicenseList_License::set_has_time_next_process() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientLicenseList_License::clear_has_time_next_process() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientLicenseList_License::clear_time_next_process() {
  time_next_process_ = 0u;
  clear_has_time_next_process();
}
inline ::google::protobuf::uint32 CMsgClientLicenseList_License::time_next_process() const {
  return time_next_process_;
}
inline void CMsgClientLicenseList_License::set_time_next_process(::google::protobuf::uint32 value) {
  set_has_time_next_process();
  time_next_process_ = value;
}

// optional int32 minute_limit = 4;
inline bool CMsgClientLicenseList_License::has_minute_limit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgClientLicenseList_License::set_has_minute_limit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgClientLicenseList_License::clear_has_minute_limit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgClientLicenseList_License::clear_minute_limit() {
  minute_limit_ = 0;
  clear_has_minute_limit();
}
inline ::google::protobuf::int32 CMsgClientLicenseList_License::minute_limit() const {
  return minute_limit_;
}
inline void CMsgClientLicenseList_License::set_minute_limit(::google::protobuf::int32 value) {
  set_has_minute_limit();
  minute_limit_ = value;
}

// optional int32 minutes_used = 5;
inline bool CMsgClientLicenseList_License::has_minutes_used() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgClientLicenseList_License::set_has_minutes_used() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgClientLicenseList_License::clear_has_minutes_used() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgClientLicenseList_License::clear_minutes_used() {
  minutes_used_ = 0;
  clear_has_minutes_used();
}
inline ::google::protobuf::int32 CMsgClientLicenseList_License::minutes_used() const {
  return minutes_used_;
}
inline void CMsgClientLicenseList_License::set_minutes_used(::google::protobuf::int32 value) {
  set_has_minutes_used();
  minutes_used_ = value;
}

// optional uint32 payment_method = 6;
inline bool CMsgClientLicenseList_License::has_payment_method() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgClientLicenseList_License::set_has_payment_method() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgClientLicenseList_License::clear_has_payment_method() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgClientLicenseList_License::clear_payment_method() {
  payment_method_ = 0u;
  clear_has_payment_method();
}
inline ::google::protobuf::uint32 CMsgClientLicenseList_License::payment_method() const {
  return payment_method_;
}
inline void CMsgClientLicenseList_License::set_payment_method(::google::protobuf::uint32 value) {
  set_has_payment_method();
  payment_method_ = value;
}

// optional uint32 flags = 7;
inline bool CMsgClientLicenseList_License::has_flags() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgClientLicenseList_License::set_has_flags() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgClientLicenseList_License::clear_has_flags() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgClientLicenseList_License::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 CMsgClientLicenseList_License::flags() const {
  return flags_;
}
inline void CMsgClientLicenseList_License::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
}

// optional string purchase_country_code = 8;
inline bool CMsgClientLicenseList_License::has_purchase_country_code() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgClientLicenseList_License::set_has_purchase_country_code() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgClientLicenseList_License::clear_has_purchase_country_code() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgClientLicenseList_License::clear_purchase_country_code() {
  if (purchase_country_code_ != &::google::protobuf::internal::kEmptyString) {
    purchase_country_code_->clear();
  }
  clear_has_purchase_country_code();
}
inline const ::std::string& CMsgClientLicenseList_License::purchase_country_code() const {
  return *purchase_country_code_;
}
inline void CMsgClientLicenseList_License::set_purchase_country_code(const ::std::string& value) {
  set_has_purchase_country_code();
  if (purchase_country_code_ == &::google::protobuf::internal::kEmptyString) {
    purchase_country_code_ = new ::std::string;
  }
  purchase_country_code_->assign(value);
}
inline void CMsgClientLicenseList_License::set_purchase_country_code(const char* value) {
  set_has_purchase_country_code();
  if (purchase_country_code_ == &::google::protobuf::internal::kEmptyString) {
    purchase_country_code_ = new ::std::string;
  }
  purchase_country_code_->assign(value);
}
inline void CMsgClientLicenseList_License::set_purchase_country_code(const char* value, size_t size) {
  set_has_purchase_country_code();
  if (purchase_country_code_ == &::google::protobuf::internal::kEmptyString) {
    purchase_country_code_ = new ::std::string;
  }
  purchase_country_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientLicenseList_License::mutable_purchase_country_code() {
  set_has_purchase_country_code();
  if (purchase_country_code_ == &::google::protobuf::internal::kEmptyString) {
    purchase_country_code_ = new ::std::string;
  }
  return purchase_country_code_;
}
inline ::std::string* CMsgClientLicenseList_License::release_purchase_country_code() {
  clear_has_purchase_country_code();
  if (purchase_country_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = purchase_country_code_;
    purchase_country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientLicenseList_License::set_allocated_purchase_country_code(::std::string* purchase_country_code) {
  if (purchase_country_code_ != &::google::protobuf::internal::kEmptyString) {
    delete purchase_country_code_;
  }
  if (purchase_country_code) {
    set_has_purchase_country_code();
    purchase_country_code_ = purchase_country_code;
  } else {
    clear_has_purchase_country_code();
    purchase_country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 license_type = 9;
inline bool CMsgClientLicenseList_License::has_license_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgClientLicenseList_License::set_has_license_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgClientLicenseList_License::clear_has_license_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgClientLicenseList_License::clear_license_type() {
  license_type_ = 0u;
  clear_has_license_type();
}
inline ::google::protobuf::uint32 CMsgClientLicenseList_License::license_type() const {
  return license_type_;
}
inline void CMsgClientLicenseList_License::set_license_type(::google::protobuf::uint32 value) {
  set_has_license_type();
  license_type_ = value;
}

// optional int32 territory_code = 10;
inline bool CMsgClientLicenseList_License::has_territory_code() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgClientLicenseList_License::set_has_territory_code() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgClientLicenseList_License::clear_has_territory_code() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgClientLicenseList_License::clear_territory_code() {
  territory_code_ = 0;
  clear_has_territory_code();
}
inline ::google::protobuf::int32 CMsgClientLicenseList_License::territory_code() const {
  return territory_code_;
}
inline void CMsgClientLicenseList_License::set_territory_code(::google::protobuf::int32 value) {
  set_has_territory_code();
  territory_code_ = value;
}

// optional int32 change_number = 11;
inline bool CMsgClientLicenseList_License::has_change_number() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgClientLicenseList_License::set_has_change_number() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgClientLicenseList_License::clear_has_change_number() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgClientLicenseList_License::clear_change_number() {
  change_number_ = 0;
  clear_has_change_number();
}
inline ::google::protobuf::int32 CMsgClientLicenseList_License::change_number() const {
  return change_number_;
}
inline void CMsgClientLicenseList_License::set_change_number(::google::protobuf::int32 value) {
  set_has_change_number();
  change_number_ = value;
}

// optional uint32 owner_id = 12;
inline bool CMsgClientLicenseList_License::has_owner_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgClientLicenseList_License::set_has_owner_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgClientLicenseList_License::clear_has_owner_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgClientLicenseList_License::clear_owner_id() {
  owner_id_ = 0u;
  clear_has_owner_id();
}
inline ::google::protobuf::uint32 CMsgClientLicenseList_License::owner_id() const {
  return owner_id_;
}
inline void CMsgClientLicenseList_License::set_owner_id(::google::protobuf::uint32 value) {
  set_has_owner_id();
  owner_id_ = value;
}

// optional uint32 initial_period = 13;
inline bool CMsgClientLicenseList_License::has_initial_period() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgClientLicenseList_License::set_has_initial_period() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgClientLicenseList_License::clear_has_initial_period() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgClientLicenseList_License::clear_initial_period() {
  initial_period_ = 0u;
  clear_has_initial_period();
}
inline ::google::protobuf::uint32 CMsgClientLicenseList_License::initial_period() const {
  return initial_period_;
}
inline void CMsgClientLicenseList_License::set_initial_period(::google::protobuf::uint32 value) {
  set_has_initial_period();
  initial_period_ = value;
}

// optional uint32 initial_time_unit = 14;
inline bool CMsgClientLicenseList_License::has_initial_time_unit() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgClientLicenseList_License::set_has_initial_time_unit() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgClientLicenseList_License::clear_has_initial_time_unit() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgClientLicenseList_License::clear_initial_time_unit() {
  initial_time_unit_ = 0u;
  clear_has_initial_time_unit();
}
inline ::google::protobuf::uint32 CMsgClientLicenseList_License::initial_time_unit() const {
  return initial_time_unit_;
}
inline void CMsgClientLicenseList_License::set_initial_time_unit(::google::protobuf::uint32 value) {
  set_has_initial_time_unit();
  initial_time_unit_ = value;
}

// optional uint32 renewal_period = 15;
inline bool CMsgClientLicenseList_License::has_renewal_period() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgClientLicenseList_License::set_has_renewal_period() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgClientLicenseList_License::clear_has_renewal_period() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgClientLicenseList_License::clear_renewal_period() {
  renewal_period_ = 0u;
  clear_has_renewal_period();
}
inline ::google::protobuf::uint32 CMsgClientLicenseList_License::renewal_period() const {
  return renewal_period_;
}
inline void CMsgClientLicenseList_License::set_renewal_period(::google::protobuf::uint32 value) {
  set_has_renewal_period();
  renewal_period_ = value;
}

// optional uint32 renewal_time_unit = 16;
inline bool CMsgClientLicenseList_License::has_renewal_time_unit() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgClientLicenseList_License::set_has_renewal_time_unit() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgClientLicenseList_License::clear_has_renewal_time_unit() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgClientLicenseList_License::clear_renewal_time_unit() {
  renewal_time_unit_ = 0u;
  clear_has_renewal_time_unit();
}
inline ::google::protobuf::uint32 CMsgClientLicenseList_License::renewal_time_unit() const {
  return renewal_time_unit_;
}
inline void CMsgClientLicenseList_License::set_renewal_time_unit(::google::protobuf::uint32 value) {
  set_has_renewal_time_unit();
  renewal_time_unit_ = value;
}

// optional uint64 access_token = 17;
inline bool CMsgClientLicenseList_License::has_access_token() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgClientLicenseList_License::set_has_access_token() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMsgClientLicenseList_License::clear_has_access_token() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMsgClientLicenseList_License::clear_access_token() {
  access_token_ = GOOGLE_ULONGLONG(0);
  clear_has_access_token();
}
inline ::google::protobuf::uint64 CMsgClientLicenseList_License::access_token() const {
  return access_token_;
}
inline void CMsgClientLicenseList_License::set_access_token(::google::protobuf::uint64 value) {
  set_has_access_token();
  access_token_ = value;
}

// optional uint32 master_package_id = 18;
inline bool CMsgClientLicenseList_License::has_master_package_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgClientLicenseList_License::set_has_master_package_id() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMsgClientLicenseList_License::clear_has_master_package_id() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMsgClientLicenseList_License::clear_master_package_id() {
  master_package_id_ = 0u;
  clear_has_master_package_id();
}
inline ::google::protobuf::uint32 CMsgClientLicenseList_License::master_package_id() const {
  return master_package_id_;
}
inline void CMsgClientLicenseList_License::set_master_package_id(::google::protobuf::uint32 value) {
  set_has_master_package_id();
  master_package_id_ = value;
}

// -------------------------------------------------------------------

// CMsgClientLicenseList

// optional int32 eresult = 1 [default = 2];
inline bool CMsgClientLicenseList::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientLicenseList::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientLicenseList::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientLicenseList::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
inline ::google::protobuf::int32 CMsgClientLicenseList::eresult() const {
  return eresult_;
}
inline void CMsgClientLicenseList::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
}

// repeated .CMsgClientLicenseList.License licenses = 2;
inline int CMsgClientLicenseList::licenses_size() const {
  return licenses_.size();
}
inline void CMsgClientLicenseList::clear_licenses() {
  licenses_.Clear();
}
inline const ::CMsgClientLicenseList_License& CMsgClientLicenseList::licenses(int index) const {
  return licenses_.Get(index);
}
inline ::CMsgClientLicenseList_License* CMsgClientLicenseList::mutable_licenses(int index) {
  return licenses_.Mutable(index);
}
inline ::CMsgClientLicenseList_License* CMsgClientLicenseList::add_licenses() {
  return licenses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgClientLicenseList_License >&
CMsgClientLicenseList::licenses() const {
  return licenses_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgClientLicenseList_License >*
CMsgClientLicenseList::mutable_licenses() {
  return &licenses_;
}

// -------------------------------------------------------------------

// CMsgClientIsLimitedAccount

// optional bool bis_limited_account = 1;
inline bool CMsgClientIsLimitedAccount::has_bis_limited_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientIsLimitedAccount::set_has_bis_limited_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientIsLimitedAccount::clear_has_bis_limited_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientIsLimitedAccount::clear_bis_limited_account() {
  bis_limited_account_ = false;
  clear_has_bis_limited_account();
}
inline bool CMsgClientIsLimitedAccount::bis_limited_account() const {
  return bis_limited_account_;
}
inline void CMsgClientIsLimitedAccount::set_bis_limited_account(bool value) {
  set_has_bis_limited_account();
  bis_limited_account_ = value;
}

// optional bool bis_community_banned = 2;
inline bool CMsgClientIsLimitedAccount::has_bis_community_banned() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientIsLimitedAccount::set_has_bis_community_banned() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientIsLimitedAccount::clear_has_bis_community_banned() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientIsLimitedAccount::clear_bis_community_banned() {
  bis_community_banned_ = false;
  clear_has_bis_community_banned();
}
inline bool CMsgClientIsLimitedAccount::bis_community_banned() const {
  return bis_community_banned_;
}
inline void CMsgClientIsLimitedAccount::set_bis_community_banned(bool value) {
  set_has_bis_community_banned();
  bis_community_banned_ = value;
}

// optional bool bis_locked_account = 3;
inline bool CMsgClientIsLimitedAccount::has_bis_locked_account() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientIsLimitedAccount::set_has_bis_locked_account() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientIsLimitedAccount::clear_has_bis_locked_account() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientIsLimitedAccount::clear_bis_locked_account() {
  bis_locked_account_ = false;
  clear_has_bis_locked_account();
}
inline bool CMsgClientIsLimitedAccount::bis_locked_account() const {
  return bis_locked_account_;
}
inline void CMsgClientIsLimitedAccount::set_bis_locked_account(bool value) {
  set_has_bis_locked_account();
  bis_locked_account_ = value;
}

// optional bool bis_limited_account_allowed_to_invite_friends = 4;
inline bool CMsgClientIsLimitedAccount::has_bis_limited_account_allowed_to_invite_friends() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgClientIsLimitedAccount::set_has_bis_limited_account_allowed_to_invite_friends() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgClientIsLimitedAccount::clear_has_bis_limited_account_allowed_to_invite_friends() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgClientIsLimitedAccount::clear_bis_limited_account_allowed_to_invite_friends() {
  bis_limited_account_allowed_to_invite_friends_ = false;
  clear_has_bis_limited_account_allowed_to_invite_friends();
}
inline bool CMsgClientIsLimitedAccount::bis_limited_account_allowed_to_invite_friends() const {
  return bis_limited_account_allowed_to_invite_friends_;
}
inline void CMsgClientIsLimitedAccount::set_bis_limited_account_allowed_to_invite_friends(bool value) {
  set_has_bis_limited_account_allowed_to_invite_friends();
  bis_limited_account_allowed_to_invite_friends_ = value;
}

// -------------------------------------------------------------------

// CMsgClientRequestedClientStats_StatsToSend

// optional uint32 client_stat = 1;
inline bool CMsgClientRequestedClientStats_StatsToSend::has_client_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientRequestedClientStats_StatsToSend::set_has_client_stat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientRequestedClientStats_StatsToSend::clear_has_client_stat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientRequestedClientStats_StatsToSend::clear_client_stat() {
  client_stat_ = 0u;
  clear_has_client_stat();
}
inline ::google::protobuf::uint32 CMsgClientRequestedClientStats_StatsToSend::client_stat() const {
  return client_stat_;
}
inline void CMsgClientRequestedClientStats_StatsToSend::set_client_stat(::google::protobuf::uint32 value) {
  set_has_client_stat();
  client_stat_ = value;
}

// optional uint32 stat_aggregate_method = 2;
inline bool CMsgClientRequestedClientStats_StatsToSend::has_stat_aggregate_method() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientRequestedClientStats_StatsToSend::set_has_stat_aggregate_method() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientRequestedClientStats_StatsToSend::clear_has_stat_aggregate_method() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientRequestedClientStats_StatsToSend::clear_stat_aggregate_method() {
  stat_aggregate_method_ = 0u;
  clear_has_stat_aggregate_method();
}
inline ::google::protobuf::uint32 CMsgClientRequestedClientStats_StatsToSend::stat_aggregate_method() const {
  return stat_aggregate_method_;
}
inline void CMsgClientRequestedClientStats_StatsToSend::set_stat_aggregate_method(::google::protobuf::uint32 value) {
  set_has_stat_aggregate_method();
  stat_aggregate_method_ = value;
}

// -------------------------------------------------------------------

// CMsgClientRequestedClientStats

// repeated .CMsgClientRequestedClientStats.StatsToSend stats_to_send = 1;
inline int CMsgClientRequestedClientStats::stats_to_send_size() const {
  return stats_to_send_.size();
}
inline void CMsgClientRequestedClientStats::clear_stats_to_send() {
  stats_to_send_.Clear();
}
inline const ::CMsgClientRequestedClientStats_StatsToSend& CMsgClientRequestedClientStats::stats_to_send(int index) const {
  return stats_to_send_.Get(index);
}
inline ::CMsgClientRequestedClientStats_StatsToSend* CMsgClientRequestedClientStats::mutable_stats_to_send(int index) {
  return stats_to_send_.Mutable(index);
}
inline ::CMsgClientRequestedClientStats_StatsToSend* CMsgClientRequestedClientStats::add_stats_to_send() {
  return stats_to_send_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgClientRequestedClientStats_StatsToSend >&
CMsgClientRequestedClientStats::stats_to_send() const {
  return stats_to_send_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgClientRequestedClientStats_StatsToSend >*
CMsgClientRequestedClientStats::mutable_stats_to_send() {
  return &stats_to_send_;
}

// -------------------------------------------------------------------

// CMsgClientStat2_StatDetail

// optional uint32 client_stat = 1;
inline bool CMsgClientStat2_StatDetail::has_client_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientStat2_StatDetail::set_has_client_stat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientStat2_StatDetail::clear_has_client_stat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientStat2_StatDetail::clear_client_stat() {
  client_stat_ = 0u;
  clear_has_client_stat();
}
inline ::google::protobuf::uint32 CMsgClientStat2_StatDetail::client_stat() const {
  return client_stat_;
}
inline void CMsgClientStat2_StatDetail::set_client_stat(::google::protobuf::uint32 value) {
  set_has_client_stat();
  client_stat_ = value;
}

// optional int64 ll_value = 2;
inline bool CMsgClientStat2_StatDetail::has_ll_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientStat2_StatDetail::set_has_ll_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientStat2_StatDetail::clear_has_ll_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientStat2_StatDetail::clear_ll_value() {
  ll_value_ = GOOGLE_LONGLONG(0);
  clear_has_ll_value();
}
inline ::google::protobuf::int64 CMsgClientStat2_StatDetail::ll_value() const {
  return ll_value_;
}
inline void CMsgClientStat2_StatDetail::set_ll_value(::google::protobuf::int64 value) {
  set_has_ll_value();
  ll_value_ = value;
}

// optional uint32 time_of_day = 3;
inline bool CMsgClientStat2_StatDetail::has_time_of_day() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientStat2_StatDetail::set_has_time_of_day() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientStat2_StatDetail::clear_has_time_of_day() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientStat2_StatDetail::clear_time_of_day() {
  time_of_day_ = 0u;
  clear_has_time_of_day();
}
inline ::google::protobuf::uint32 CMsgClientStat2_StatDetail::time_of_day() const {
  return time_of_day_;
}
inline void CMsgClientStat2_StatDetail::set_time_of_day(::google::protobuf::uint32 value) {
  set_has_time_of_day();
  time_of_day_ = value;
}

// optional uint32 cell_id = 4;
inline bool CMsgClientStat2_StatDetail::has_cell_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgClientStat2_StatDetail::set_has_cell_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgClientStat2_StatDetail::clear_has_cell_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgClientStat2_StatDetail::clear_cell_id() {
  cell_id_ = 0u;
  clear_has_cell_id();
}
inline ::google::protobuf::uint32 CMsgClientStat2_StatDetail::cell_id() const {
  return cell_id_;
}
inline void CMsgClientStat2_StatDetail::set_cell_id(::google::protobuf::uint32 value) {
  set_has_cell_id();
  cell_id_ = value;
}

// optional uint32 depot_id = 5;
inline bool CMsgClientStat2_StatDetail::has_depot_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgClientStat2_StatDetail::set_has_depot_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgClientStat2_StatDetail::clear_has_depot_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgClientStat2_StatDetail::clear_depot_id() {
  depot_id_ = 0u;
  clear_has_depot_id();
}
inline ::google::protobuf::uint32 CMsgClientStat2_StatDetail::depot_id() const {
  return depot_id_;
}
inline void CMsgClientStat2_StatDetail::set_depot_id(::google::protobuf::uint32 value) {
  set_has_depot_id();
  depot_id_ = value;
}

// optional uint32 app_id = 6;
inline bool CMsgClientStat2_StatDetail::has_app_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgClientStat2_StatDetail::set_has_app_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgClientStat2_StatDetail::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgClientStat2_StatDetail::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
inline ::google::protobuf::uint32 CMsgClientStat2_StatDetail::app_id() const {
  return app_id_;
}
inline void CMsgClientStat2_StatDetail::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
}

// -------------------------------------------------------------------

// CMsgClientStat2

// repeated .CMsgClientStat2.StatDetail stat_detail = 1;
inline int CMsgClientStat2::stat_detail_size() const {
  return stat_detail_.size();
}
inline void CMsgClientStat2::clear_stat_detail() {
  stat_detail_.Clear();
}
inline const ::CMsgClientStat2_StatDetail& CMsgClientStat2::stat_detail(int index) const {
  return stat_detail_.Get(index);
}
inline ::CMsgClientStat2_StatDetail* CMsgClientStat2::mutable_stat_detail(int index) {
  return stat_detail_.Mutable(index);
}
inline ::CMsgClientStat2_StatDetail* CMsgClientStat2::add_stat_detail() {
  return stat_detail_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgClientStat2_StatDetail >&
CMsgClientStat2::stat_detail() const {
  return stat_detail_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgClientStat2_StatDetail >*
CMsgClientStat2::mutable_stat_detail() {
  return &stat_detail_;
}

// -------------------------------------------------------------------

// CMsgClientInviteToGame

// optional fixed64 steam_id_dest = 1;
inline bool CMsgClientInviteToGame::has_steam_id_dest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientInviteToGame::set_has_steam_id_dest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientInviteToGame::clear_has_steam_id_dest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientInviteToGame::clear_steam_id_dest() {
  steam_id_dest_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_dest();
}
inline ::google::protobuf::uint64 CMsgClientInviteToGame::steam_id_dest() const {
  return steam_id_dest_;
}
inline void CMsgClientInviteToGame::set_steam_id_dest(::google::protobuf::uint64 value) {
  set_has_steam_id_dest();
  steam_id_dest_ = value;
}

// optional fixed64 steam_id_src = 2;
inline bool CMsgClientInviteToGame::has_steam_id_src() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientInviteToGame::set_has_steam_id_src() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientInviteToGame::clear_has_steam_id_src() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientInviteToGame::clear_steam_id_src() {
  steam_id_src_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_src();
}
inline ::google::protobuf::uint64 CMsgClientInviteToGame::steam_id_src() const {
  return steam_id_src_;
}
inline void CMsgClientInviteToGame::set_steam_id_src(::google::protobuf::uint64 value) {
  set_has_steam_id_src();
  steam_id_src_ = value;
}

// optional string connect_string = 3;
inline bool CMsgClientInviteToGame::has_connect_string() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientInviteToGame::set_has_connect_string() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientInviteToGame::clear_has_connect_string() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientInviteToGame::clear_connect_string() {
  if (connect_string_ != &::google::protobuf::internal::kEmptyString) {
    connect_string_->clear();
  }
  clear_has_connect_string();
}
inline const ::std::string& CMsgClientInviteToGame::connect_string() const {
  return *connect_string_;
}
inline void CMsgClientInviteToGame::set_connect_string(const ::std::string& value) {
  set_has_connect_string();
  if (connect_string_ == &::google::protobuf::internal::kEmptyString) {
    connect_string_ = new ::std::string;
  }
  connect_string_->assign(value);
}
inline void CMsgClientInviteToGame::set_connect_string(const char* value) {
  set_has_connect_string();
  if (connect_string_ == &::google::protobuf::internal::kEmptyString) {
    connect_string_ = new ::std::string;
  }
  connect_string_->assign(value);
}
inline void CMsgClientInviteToGame::set_connect_string(const char* value, size_t size) {
  set_has_connect_string();
  if (connect_string_ == &::google::protobuf::internal::kEmptyString) {
    connect_string_ = new ::std::string;
  }
  connect_string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientInviteToGame::mutable_connect_string() {
  set_has_connect_string();
  if (connect_string_ == &::google::protobuf::internal::kEmptyString) {
    connect_string_ = new ::std::string;
  }
  return connect_string_;
}
inline ::std::string* CMsgClientInviteToGame::release_connect_string() {
  clear_has_connect_string();
  if (connect_string_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = connect_string_;
    connect_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientInviteToGame::set_allocated_connect_string(::std::string* connect_string) {
  if (connect_string_ != &::google::protobuf::internal::kEmptyString) {
    delete connect_string_;
  }
  if (connect_string) {
    set_has_connect_string();
    connect_string_ = connect_string;
  } else {
    clear_has_connect_string();
    connect_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string remote_play = 4;
inline bool CMsgClientInviteToGame::has_remote_play() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgClientInviteToGame::set_has_remote_play() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgClientInviteToGame::clear_has_remote_play() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgClientInviteToGame::clear_remote_play() {
  if (remote_play_ != &::google::protobuf::internal::kEmptyString) {
    remote_play_->clear();
  }
  clear_has_remote_play();
}
inline const ::std::string& CMsgClientInviteToGame::remote_play() const {
  return *remote_play_;
}
inline void CMsgClientInviteToGame::set_remote_play(const ::std::string& value) {
  set_has_remote_play();
  if (remote_play_ == &::google::protobuf::internal::kEmptyString) {
    remote_play_ = new ::std::string;
  }
  remote_play_->assign(value);
}
inline void CMsgClientInviteToGame::set_remote_play(const char* value) {
  set_has_remote_play();
  if (remote_play_ == &::google::protobuf::internal::kEmptyString) {
    remote_play_ = new ::std::string;
  }
  remote_play_->assign(value);
}
inline void CMsgClientInviteToGame::set_remote_play(const char* value, size_t size) {
  set_has_remote_play();
  if (remote_play_ == &::google::protobuf::internal::kEmptyString) {
    remote_play_ = new ::std::string;
  }
  remote_play_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientInviteToGame::mutable_remote_play() {
  set_has_remote_play();
  if (remote_play_ == &::google::protobuf::internal::kEmptyString) {
    remote_play_ = new ::std::string;
  }
  return remote_play_;
}
inline ::std::string* CMsgClientInviteToGame::release_remote_play() {
  clear_has_remote_play();
  if (remote_play_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = remote_play_;
    remote_play_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientInviteToGame::set_allocated_remote_play(::std::string* remote_play) {
  if (remote_play_ != &::google::protobuf::internal::kEmptyString) {
    delete remote_play_;
  }
  if (remote_play) {
    set_has_remote_play();
    remote_play_ = remote_play;
  } else {
    clear_has_remote_play();
    remote_play_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgClientChatInvite

// optional fixed64 steam_id_invited = 1;
inline bool CMsgClientChatInvite::has_steam_id_invited() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientChatInvite::set_has_steam_id_invited() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientChatInvite::clear_has_steam_id_invited() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientChatInvite::clear_steam_id_invited() {
  steam_id_invited_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_invited();
}
inline ::google::protobuf::uint64 CMsgClientChatInvite::steam_id_invited() const {
  return steam_id_invited_;
}
inline void CMsgClientChatInvite::set_steam_id_invited(::google::protobuf::uint64 value) {
  set_has_steam_id_invited();
  steam_id_invited_ = value;
}

// optional fixed64 steam_id_chat = 2;
inline bool CMsgClientChatInvite::has_steam_id_chat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientChatInvite::set_has_steam_id_chat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientChatInvite::clear_has_steam_id_chat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientChatInvite::clear_steam_id_chat() {
  steam_id_chat_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_chat();
}
inline ::google::protobuf::uint64 CMsgClientChatInvite::steam_id_chat() const {
  return steam_id_chat_;
}
inline void CMsgClientChatInvite::set_steam_id_chat(::google::protobuf::uint64 value) {
  set_has_steam_id_chat();
  steam_id_chat_ = value;
}

// optional fixed64 steam_id_patron = 3;
inline bool CMsgClientChatInvite::has_steam_id_patron() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientChatInvite::set_has_steam_id_patron() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientChatInvite::clear_has_steam_id_patron() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientChatInvite::clear_steam_id_patron() {
  steam_id_patron_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_patron();
}
inline ::google::protobuf::uint64 CMsgClientChatInvite::steam_id_patron() const {
  return steam_id_patron_;
}
inline void CMsgClientChatInvite::set_steam_id_patron(::google::protobuf::uint64 value) {
  set_has_steam_id_patron();
  steam_id_patron_ = value;
}

// optional int32 chatroom_type = 4;
inline bool CMsgClientChatInvite::has_chatroom_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgClientChatInvite::set_has_chatroom_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgClientChatInvite::clear_has_chatroom_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgClientChatInvite::clear_chatroom_type() {
  chatroom_type_ = 0;
  clear_has_chatroom_type();
}
inline ::google::protobuf::int32 CMsgClientChatInvite::chatroom_type() const {
  return chatroom_type_;
}
inline void CMsgClientChatInvite::set_chatroom_type(::google::protobuf::int32 value) {
  set_has_chatroom_type();
  chatroom_type_ = value;
}

// optional fixed64 steam_id_friend_chat = 5;
inline bool CMsgClientChatInvite::has_steam_id_friend_chat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgClientChatInvite::set_has_steam_id_friend_chat() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgClientChatInvite::clear_has_steam_id_friend_chat() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgClientChatInvite::clear_steam_id_friend_chat() {
  steam_id_friend_chat_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_friend_chat();
}
inline ::google::protobuf::uint64 CMsgClientChatInvite::steam_id_friend_chat() const {
  return steam_id_friend_chat_;
}
inline void CMsgClientChatInvite::set_steam_id_friend_chat(::google::protobuf::uint64 value) {
  set_has_steam_id_friend_chat();
  steam_id_friend_chat_ = value;
}

// optional string chat_name = 6;
inline bool CMsgClientChatInvite::has_chat_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgClientChatInvite::set_has_chat_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgClientChatInvite::clear_has_chat_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgClientChatInvite::clear_chat_name() {
  if (chat_name_ != &::google::protobuf::internal::kEmptyString) {
    chat_name_->clear();
  }
  clear_has_chat_name();
}
inline const ::std::string& CMsgClientChatInvite::chat_name() const {
  return *chat_name_;
}
inline void CMsgClientChatInvite::set_chat_name(const ::std::string& value) {
  set_has_chat_name();
  if (chat_name_ == &::google::protobuf::internal::kEmptyString) {
    chat_name_ = new ::std::string;
  }
  chat_name_->assign(value);
}
inline void CMsgClientChatInvite::set_chat_name(const char* value) {
  set_has_chat_name();
  if (chat_name_ == &::google::protobuf::internal::kEmptyString) {
    chat_name_ = new ::std::string;
  }
  chat_name_->assign(value);
}
inline void CMsgClientChatInvite::set_chat_name(const char* value, size_t size) {
  set_has_chat_name();
  if (chat_name_ == &::google::protobuf::internal::kEmptyString) {
    chat_name_ = new ::std::string;
  }
  chat_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientChatInvite::mutable_chat_name() {
  set_has_chat_name();
  if (chat_name_ == &::google::protobuf::internal::kEmptyString) {
    chat_name_ = new ::std::string;
  }
  return chat_name_;
}
inline ::std::string* CMsgClientChatInvite::release_chat_name() {
  clear_has_chat_name();
  if (chat_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = chat_name_;
    chat_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientChatInvite::set_allocated_chat_name(::std::string* chat_name) {
  if (chat_name_ != &::google::protobuf::internal::kEmptyString) {
    delete chat_name_;
  }
  if (chat_name) {
    set_has_chat_name();
    chat_name_ = chat_name;
  } else {
    clear_has_chat_name();
    chat_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional fixed64 game_id = 7;
inline bool CMsgClientChatInvite::has_game_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgClientChatInvite::set_has_game_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgClientChatInvite::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgClientChatInvite::clear_game_id() {
  game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_game_id();
}
inline ::google::protobuf::uint64 CMsgClientChatInvite::game_id() const {
  return game_id_;
}
inline void CMsgClientChatInvite::set_game_id(::google::protobuf::uint64 value) {
  set_has_game_id();
  game_id_ = value;
}

// -------------------------------------------------------------------

// CMsgClientConnectionStats_Stats_Logon

// optional int32 connect_attempts = 1;
inline bool CMsgClientConnectionStats_Stats_Logon::has_connect_attempts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientConnectionStats_Stats_Logon::set_has_connect_attempts() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientConnectionStats_Stats_Logon::clear_has_connect_attempts() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientConnectionStats_Stats_Logon::clear_connect_attempts() {
  connect_attempts_ = 0;
  clear_has_connect_attempts();
}
inline ::google::protobuf::int32 CMsgClientConnectionStats_Stats_Logon::connect_attempts() const {
  return connect_attempts_;
}
inline void CMsgClientConnectionStats_Stats_Logon::set_connect_attempts(::google::protobuf::int32 value) {
  set_has_connect_attempts();
  connect_attempts_ = value;
}

// optional int32 connect_successes = 2;
inline bool CMsgClientConnectionStats_Stats_Logon::has_connect_successes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientConnectionStats_Stats_Logon::set_has_connect_successes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientConnectionStats_Stats_Logon::clear_has_connect_successes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientConnectionStats_Stats_Logon::clear_connect_successes() {
  connect_successes_ = 0;
  clear_has_connect_successes();
}
inline ::google::protobuf::int32 CMsgClientConnectionStats_Stats_Logon::connect_successes() const {
  return connect_successes_;
}
inline void CMsgClientConnectionStats_Stats_Logon::set_connect_successes(::google::protobuf::int32 value) {
  set_has_connect_successes();
  connect_successes_ = value;
}

// optional int32 connect_failures = 3;
inline bool CMsgClientConnectionStats_Stats_Logon::has_connect_failures() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientConnectionStats_Stats_Logon::set_has_connect_failures() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientConnectionStats_Stats_Logon::clear_has_connect_failures() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientConnectionStats_Stats_Logon::clear_connect_failures() {
  connect_failures_ = 0;
  clear_has_connect_failures();
}
inline ::google::protobuf::int32 CMsgClientConnectionStats_Stats_Logon::connect_failures() const {
  return connect_failures_;
}
inline void CMsgClientConnectionStats_Stats_Logon::set_connect_failures(::google::protobuf::int32 value) {
  set_has_connect_failures();
  connect_failures_ = value;
}

// optional int32 connections_dropped = 4;
inline bool CMsgClientConnectionStats_Stats_Logon::has_connections_dropped() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgClientConnectionStats_Stats_Logon::set_has_connections_dropped() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgClientConnectionStats_Stats_Logon::clear_has_connections_dropped() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgClientConnectionStats_Stats_Logon::clear_connections_dropped() {
  connections_dropped_ = 0;
  clear_has_connections_dropped();
}
inline ::google::protobuf::int32 CMsgClientConnectionStats_Stats_Logon::connections_dropped() const {
  return connections_dropped_;
}
inline void CMsgClientConnectionStats_Stats_Logon::set_connections_dropped(::google::protobuf::int32 value) {
  set_has_connections_dropped();
  connections_dropped_ = value;
}

// optional uint32 seconds_running = 5;
inline bool CMsgClientConnectionStats_Stats_Logon::has_seconds_running() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgClientConnectionStats_Stats_Logon::set_has_seconds_running() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgClientConnectionStats_Stats_Logon::clear_has_seconds_running() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgClientConnectionStats_Stats_Logon::clear_seconds_running() {
  seconds_running_ = 0u;
  clear_has_seconds_running();
}
inline ::google::protobuf::uint32 CMsgClientConnectionStats_Stats_Logon::seconds_running() const {
  return seconds_running_;
}
inline void CMsgClientConnectionStats_Stats_Logon::set_seconds_running(::google::protobuf::uint32 value) {
  set_has_seconds_running();
  seconds_running_ = value;
}

// optional uint32 msec_tologonthistime = 6;
inline bool CMsgClientConnectionStats_Stats_Logon::has_msec_tologonthistime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgClientConnectionStats_Stats_Logon::set_has_msec_tologonthistime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgClientConnectionStats_Stats_Logon::clear_has_msec_tologonthistime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgClientConnectionStats_Stats_Logon::clear_msec_tologonthistime() {
  msec_tologonthistime_ = 0u;
  clear_has_msec_tologonthistime();
}
inline ::google::protobuf::uint32 CMsgClientConnectionStats_Stats_Logon::msec_tologonthistime() const {
  return msec_tologonthistime_;
}
inline void CMsgClientConnectionStats_Stats_Logon::set_msec_tologonthistime(::google::protobuf::uint32 value) {
  set_has_msec_tologonthistime();
  msec_tologonthistime_ = value;
}

// optional uint32 count_bad_cms = 7;
inline bool CMsgClientConnectionStats_Stats_Logon::has_count_bad_cms() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgClientConnectionStats_Stats_Logon::set_has_count_bad_cms() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgClientConnectionStats_Stats_Logon::clear_has_count_bad_cms() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgClientConnectionStats_Stats_Logon::clear_count_bad_cms() {
  count_bad_cms_ = 0u;
  clear_has_count_bad_cms();
}
inline ::google::protobuf::uint32 CMsgClientConnectionStats_Stats_Logon::count_bad_cms() const {
  return count_bad_cms_;
}
inline void CMsgClientConnectionStats_Stats_Logon::set_count_bad_cms(::google::protobuf::uint32 value) {
  set_has_count_bad_cms();
  count_bad_cms_ = value;
}

// optional bool no_udp_connectivity = 8;
inline bool CMsgClientConnectionStats_Stats_Logon::has_no_udp_connectivity() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgClientConnectionStats_Stats_Logon::set_has_no_udp_connectivity() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgClientConnectionStats_Stats_Logon::clear_has_no_udp_connectivity() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgClientConnectionStats_Stats_Logon::clear_no_udp_connectivity() {
  no_udp_connectivity_ = false;
  clear_has_no_udp_connectivity();
}
inline bool CMsgClientConnectionStats_Stats_Logon::no_udp_connectivity() const {
  return no_udp_connectivity_;
}
inline void CMsgClientConnectionStats_Stats_Logon::set_no_udp_connectivity(bool value) {
  set_has_no_udp_connectivity();
  no_udp_connectivity_ = value;
}

// optional bool no_tcp_connectivity = 9;
inline bool CMsgClientConnectionStats_Stats_Logon::has_no_tcp_connectivity() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgClientConnectionStats_Stats_Logon::set_has_no_tcp_connectivity() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgClientConnectionStats_Stats_Logon::clear_has_no_tcp_connectivity() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgClientConnectionStats_Stats_Logon::clear_no_tcp_connectivity() {
  no_tcp_connectivity_ = false;
  clear_has_no_tcp_connectivity();
}
inline bool CMsgClientConnectionStats_Stats_Logon::no_tcp_connectivity() const {
  return no_tcp_connectivity_;
}
inline void CMsgClientConnectionStats_Stats_Logon::set_no_tcp_connectivity(bool value) {
  set_has_no_tcp_connectivity();
  no_tcp_connectivity_ = value;
}

// optional bool no_websocket_443_connectivity = 10;
inline bool CMsgClientConnectionStats_Stats_Logon::has_no_websocket_443_connectivity() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgClientConnectionStats_Stats_Logon::set_has_no_websocket_443_connectivity() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgClientConnectionStats_Stats_Logon::clear_has_no_websocket_443_connectivity() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgClientConnectionStats_Stats_Logon::clear_no_websocket_443_connectivity() {
  no_websocket_443_connectivity_ = false;
  clear_has_no_websocket_443_connectivity();
}
inline bool CMsgClientConnectionStats_Stats_Logon::no_websocket_443_connectivity() const {
  return no_websocket_443_connectivity_;
}
inline void CMsgClientConnectionStats_Stats_Logon::set_no_websocket_443_connectivity(bool value) {
  set_has_no_websocket_443_connectivity();
  no_websocket_443_connectivity_ = value;
}

// optional bool no_websocket_non_443_connectivity = 11;
inline bool CMsgClientConnectionStats_Stats_Logon::has_no_websocket_non_443_connectivity() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgClientConnectionStats_Stats_Logon::set_has_no_websocket_non_443_connectivity() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgClientConnectionStats_Stats_Logon::clear_has_no_websocket_non_443_connectivity() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgClientConnectionStats_Stats_Logon::clear_no_websocket_non_443_connectivity() {
  no_websocket_non_443_connectivity_ = false;
  clear_has_no_websocket_non_443_connectivity();
}
inline bool CMsgClientConnectionStats_Stats_Logon::no_websocket_non_443_connectivity() const {
  return no_websocket_non_443_connectivity_;
}
inline void CMsgClientConnectionStats_Stats_Logon::set_no_websocket_non_443_connectivity(bool value) {
  set_has_no_websocket_non_443_connectivity();
  no_websocket_non_443_connectivity_ = value;
}

// -------------------------------------------------------------------

// CMsgClientConnectionStats_Stats_UDP

// optional uint64 pkts_sent = 1;
inline bool CMsgClientConnectionStats_Stats_UDP::has_pkts_sent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientConnectionStats_Stats_UDP::set_has_pkts_sent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientConnectionStats_Stats_UDP::clear_has_pkts_sent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientConnectionStats_Stats_UDP::clear_pkts_sent() {
  pkts_sent_ = GOOGLE_ULONGLONG(0);
  clear_has_pkts_sent();
}
inline ::google::protobuf::uint64 CMsgClientConnectionStats_Stats_UDP::pkts_sent() const {
  return pkts_sent_;
}
inline void CMsgClientConnectionStats_Stats_UDP::set_pkts_sent(::google::protobuf::uint64 value) {
  set_has_pkts_sent();
  pkts_sent_ = value;
}

// optional uint64 bytes_sent = 2;
inline bool CMsgClientConnectionStats_Stats_UDP::has_bytes_sent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientConnectionStats_Stats_UDP::set_has_bytes_sent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientConnectionStats_Stats_UDP::clear_has_bytes_sent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientConnectionStats_Stats_UDP::clear_bytes_sent() {
  bytes_sent_ = GOOGLE_ULONGLONG(0);
  clear_has_bytes_sent();
}
inline ::google::protobuf::uint64 CMsgClientConnectionStats_Stats_UDP::bytes_sent() const {
  return bytes_sent_;
}
inline void CMsgClientConnectionStats_Stats_UDP::set_bytes_sent(::google::protobuf::uint64 value) {
  set_has_bytes_sent();
  bytes_sent_ = value;
}

// optional uint64 pkts_recv = 3;
inline bool CMsgClientConnectionStats_Stats_UDP::has_pkts_recv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientConnectionStats_Stats_UDP::set_has_pkts_recv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientConnectionStats_Stats_UDP::clear_has_pkts_recv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientConnectionStats_Stats_UDP::clear_pkts_recv() {
  pkts_recv_ = GOOGLE_ULONGLONG(0);
  clear_has_pkts_recv();
}
inline ::google::protobuf::uint64 CMsgClientConnectionStats_Stats_UDP::pkts_recv() const {
  return pkts_recv_;
}
inline void CMsgClientConnectionStats_Stats_UDP::set_pkts_recv(::google::protobuf::uint64 value) {
  set_has_pkts_recv();
  pkts_recv_ = value;
}

// optional uint64 pkts_processed = 4;
inline bool CMsgClientConnectionStats_Stats_UDP::has_pkts_processed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgClientConnectionStats_Stats_UDP::set_has_pkts_processed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgClientConnectionStats_Stats_UDP::clear_has_pkts_processed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgClientConnectionStats_Stats_UDP::clear_pkts_processed() {
  pkts_processed_ = GOOGLE_ULONGLONG(0);
  clear_has_pkts_processed();
}
inline ::google::protobuf::uint64 CMsgClientConnectionStats_Stats_UDP::pkts_processed() const {
  return pkts_processed_;
}
inline void CMsgClientConnectionStats_Stats_UDP::set_pkts_processed(::google::protobuf::uint64 value) {
  set_has_pkts_processed();
  pkts_processed_ = value;
}

// optional uint64 bytes_recv = 5;
inline bool CMsgClientConnectionStats_Stats_UDP::has_bytes_recv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgClientConnectionStats_Stats_UDP::set_has_bytes_recv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgClientConnectionStats_Stats_UDP::clear_has_bytes_recv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgClientConnectionStats_Stats_UDP::clear_bytes_recv() {
  bytes_recv_ = GOOGLE_ULONGLONG(0);
  clear_has_bytes_recv();
}
inline ::google::protobuf::uint64 CMsgClientConnectionStats_Stats_UDP::bytes_recv() const {
  return bytes_recv_;
}
inline void CMsgClientConnectionStats_Stats_UDP::set_bytes_recv(::google::protobuf::uint64 value) {
  set_has_bytes_recv();
  bytes_recv_ = value;
}

// -------------------------------------------------------------------

// CMsgClientConnectionStats_Stats_VConn

// optional uint32 connections_udp = 1;
inline bool CMsgClientConnectionStats_Stats_VConn::has_connections_udp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_has_connections_udp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_has_connections_udp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_connections_udp() {
  connections_udp_ = 0u;
  clear_has_connections_udp();
}
inline ::google::protobuf::uint32 CMsgClientConnectionStats_Stats_VConn::connections_udp() const {
  return connections_udp_;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_connections_udp(::google::protobuf::uint32 value) {
  set_has_connections_udp();
  connections_udp_ = value;
}

// optional uint32 connections_tcp = 2;
inline bool CMsgClientConnectionStats_Stats_VConn::has_connections_tcp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_has_connections_tcp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_has_connections_tcp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_connections_tcp() {
  connections_tcp_ = 0u;
  clear_has_connections_tcp();
}
inline ::google::protobuf::uint32 CMsgClientConnectionStats_Stats_VConn::connections_tcp() const {
  return connections_tcp_;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_connections_tcp(::google::protobuf::uint32 value) {
  set_has_connections_tcp();
  connections_tcp_ = value;
}

// optional .CMsgClientConnectionStats.Stats_UDP stats_udp = 3;
inline bool CMsgClientConnectionStats_Stats_VConn::has_stats_udp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_has_stats_udp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_has_stats_udp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_stats_udp() {
  if (stats_udp_ != NULL) stats_udp_->::CMsgClientConnectionStats_Stats_UDP::Clear();
  clear_has_stats_udp();
}
inline const ::CMsgClientConnectionStats_Stats_UDP& CMsgClientConnectionStats_Stats_VConn::stats_udp() const {
  return stats_udp_ != NULL ? *stats_udp_ : *default_instance_->stats_udp_;
}
inline ::CMsgClientConnectionStats_Stats_UDP* CMsgClientConnectionStats_Stats_VConn::mutable_stats_udp() {
  set_has_stats_udp();
  if (stats_udp_ == NULL) stats_udp_ = new ::CMsgClientConnectionStats_Stats_UDP;
  return stats_udp_;
}
inline ::CMsgClientConnectionStats_Stats_UDP* CMsgClientConnectionStats_Stats_VConn::release_stats_udp() {
  clear_has_stats_udp();
  ::CMsgClientConnectionStats_Stats_UDP* temp = stats_udp_;
  stats_udp_ = NULL;
  return temp;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_allocated_stats_udp(::CMsgClientConnectionStats_Stats_UDP* stats_udp) {
  delete stats_udp_;
  stats_udp_ = stats_udp;
  if (stats_udp) {
    set_has_stats_udp();
  } else {
    clear_has_stats_udp();
  }
}

// optional uint64 pkts_abandoned = 4;
inline bool CMsgClientConnectionStats_Stats_VConn::has_pkts_abandoned() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_has_pkts_abandoned() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_has_pkts_abandoned() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_pkts_abandoned() {
  pkts_abandoned_ = GOOGLE_ULONGLONG(0);
  clear_has_pkts_abandoned();
}
inline ::google::protobuf::uint64 CMsgClientConnectionStats_Stats_VConn::pkts_abandoned() const {
  return pkts_abandoned_;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_pkts_abandoned(::google::protobuf::uint64 value) {
  set_has_pkts_abandoned();
  pkts_abandoned_ = value;
}

// optional uint64 conn_req_received = 5;
inline bool CMsgClientConnectionStats_Stats_VConn::has_conn_req_received() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_has_conn_req_received() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_has_conn_req_received() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_conn_req_received() {
  conn_req_received_ = GOOGLE_ULONGLONG(0);
  clear_has_conn_req_received();
}
inline ::google::protobuf::uint64 CMsgClientConnectionStats_Stats_VConn::conn_req_received() const {
  return conn_req_received_;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_conn_req_received(::google::protobuf::uint64 value) {
  set_has_conn_req_received();
  conn_req_received_ = value;
}

// optional uint64 pkts_resent = 6;
inline bool CMsgClientConnectionStats_Stats_VConn::has_pkts_resent() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_has_pkts_resent() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_has_pkts_resent() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_pkts_resent() {
  pkts_resent_ = GOOGLE_ULONGLONG(0);
  clear_has_pkts_resent();
}
inline ::google::protobuf::uint64 CMsgClientConnectionStats_Stats_VConn::pkts_resent() const {
  return pkts_resent_;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_pkts_resent(::google::protobuf::uint64 value) {
  set_has_pkts_resent();
  pkts_resent_ = value;
}

// optional uint64 msgs_sent = 7;
inline bool CMsgClientConnectionStats_Stats_VConn::has_msgs_sent() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_has_msgs_sent() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_has_msgs_sent() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_msgs_sent() {
  msgs_sent_ = GOOGLE_ULONGLONG(0);
  clear_has_msgs_sent();
}
inline ::google::protobuf::uint64 CMsgClientConnectionStats_Stats_VConn::msgs_sent() const {
  return msgs_sent_;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_msgs_sent(::google::protobuf::uint64 value) {
  set_has_msgs_sent();
  msgs_sent_ = value;
}

// optional uint64 msgs_sent_failed = 8;
inline bool CMsgClientConnectionStats_Stats_VConn::has_msgs_sent_failed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_has_msgs_sent_failed() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_has_msgs_sent_failed() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_msgs_sent_failed() {
  msgs_sent_failed_ = GOOGLE_ULONGLONG(0);
  clear_has_msgs_sent_failed();
}
inline ::google::protobuf::uint64 CMsgClientConnectionStats_Stats_VConn::msgs_sent_failed() const {
  return msgs_sent_failed_;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_msgs_sent_failed(::google::protobuf::uint64 value) {
  set_has_msgs_sent_failed();
  msgs_sent_failed_ = value;
}

// optional uint64 msgs_recv = 9;
inline bool CMsgClientConnectionStats_Stats_VConn::has_msgs_recv() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_has_msgs_recv() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_has_msgs_recv() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_msgs_recv() {
  msgs_recv_ = GOOGLE_ULONGLONG(0);
  clear_has_msgs_recv();
}
inline ::google::protobuf::uint64 CMsgClientConnectionStats_Stats_VConn::msgs_recv() const {
  return msgs_recv_;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_msgs_recv(::google::protobuf::uint64 value) {
  set_has_msgs_recv();
  msgs_recv_ = value;
}

// optional uint64 datagrams_sent = 10;
inline bool CMsgClientConnectionStats_Stats_VConn::has_datagrams_sent() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_has_datagrams_sent() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_has_datagrams_sent() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_datagrams_sent() {
  datagrams_sent_ = GOOGLE_ULONGLONG(0);
  clear_has_datagrams_sent();
}
inline ::google::protobuf::uint64 CMsgClientConnectionStats_Stats_VConn::datagrams_sent() const {
  return datagrams_sent_;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_datagrams_sent(::google::protobuf::uint64 value) {
  set_has_datagrams_sent();
  datagrams_sent_ = value;
}

// optional uint64 datagrams_recv = 11;
inline bool CMsgClientConnectionStats_Stats_VConn::has_datagrams_recv() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_has_datagrams_recv() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_has_datagrams_recv() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_datagrams_recv() {
  datagrams_recv_ = GOOGLE_ULONGLONG(0);
  clear_has_datagrams_recv();
}
inline ::google::protobuf::uint64 CMsgClientConnectionStats_Stats_VConn::datagrams_recv() const {
  return datagrams_recv_;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_datagrams_recv(::google::protobuf::uint64 value) {
  set_has_datagrams_recv();
  datagrams_recv_ = value;
}

// optional uint64 bad_pkts_recv = 12;
inline bool CMsgClientConnectionStats_Stats_VConn::has_bad_pkts_recv() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_has_bad_pkts_recv() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_has_bad_pkts_recv() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_bad_pkts_recv() {
  bad_pkts_recv_ = GOOGLE_ULONGLONG(0);
  clear_has_bad_pkts_recv();
}
inline ::google::protobuf::uint64 CMsgClientConnectionStats_Stats_VConn::bad_pkts_recv() const {
  return bad_pkts_recv_;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_bad_pkts_recv(::google::protobuf::uint64 value) {
  set_has_bad_pkts_recv();
  bad_pkts_recv_ = value;
}

// optional uint64 unknown_conn_pkts_recv = 13;
inline bool CMsgClientConnectionStats_Stats_VConn::has_unknown_conn_pkts_recv() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_has_unknown_conn_pkts_recv() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_has_unknown_conn_pkts_recv() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_unknown_conn_pkts_recv() {
  unknown_conn_pkts_recv_ = GOOGLE_ULONGLONG(0);
  clear_has_unknown_conn_pkts_recv();
}
inline ::google::protobuf::uint64 CMsgClientConnectionStats_Stats_VConn::unknown_conn_pkts_recv() const {
  return unknown_conn_pkts_recv_;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_unknown_conn_pkts_recv(::google::protobuf::uint64 value) {
  set_has_unknown_conn_pkts_recv();
  unknown_conn_pkts_recv_ = value;
}

// optional uint64 missed_pkts_recv = 14;
inline bool CMsgClientConnectionStats_Stats_VConn::has_missed_pkts_recv() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_has_missed_pkts_recv() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_has_missed_pkts_recv() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_missed_pkts_recv() {
  missed_pkts_recv_ = GOOGLE_ULONGLONG(0);
  clear_has_missed_pkts_recv();
}
inline ::google::protobuf::uint64 CMsgClientConnectionStats_Stats_VConn::missed_pkts_recv() const {
  return missed_pkts_recv_;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_missed_pkts_recv(::google::protobuf::uint64 value) {
  set_has_missed_pkts_recv();
  missed_pkts_recv_ = value;
}

// optional uint64 dup_pkts_recv = 15;
inline bool CMsgClientConnectionStats_Stats_VConn::has_dup_pkts_recv() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_has_dup_pkts_recv() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_has_dup_pkts_recv() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_dup_pkts_recv() {
  dup_pkts_recv_ = GOOGLE_ULONGLONG(0);
  clear_has_dup_pkts_recv();
}
inline ::google::protobuf::uint64 CMsgClientConnectionStats_Stats_VConn::dup_pkts_recv() const {
  return dup_pkts_recv_;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_dup_pkts_recv(::google::protobuf::uint64 value) {
  set_has_dup_pkts_recv();
  dup_pkts_recv_ = value;
}

// optional uint64 failed_connect_challenges = 16;
inline bool CMsgClientConnectionStats_Stats_VConn::has_failed_connect_challenges() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_has_failed_connect_challenges() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_has_failed_connect_challenges() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_failed_connect_challenges() {
  failed_connect_challenges_ = GOOGLE_ULONGLONG(0);
  clear_has_failed_connect_challenges();
}
inline ::google::protobuf::uint64 CMsgClientConnectionStats_Stats_VConn::failed_connect_challenges() const {
  return failed_connect_challenges_;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_failed_connect_challenges(::google::protobuf::uint64 value) {
  set_has_failed_connect_challenges();
  failed_connect_challenges_ = value;
}

// optional uint32 micro_sec_avg_latency = 17;
inline bool CMsgClientConnectionStats_Stats_VConn::has_micro_sec_avg_latency() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_has_micro_sec_avg_latency() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_has_micro_sec_avg_latency() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_micro_sec_avg_latency() {
  micro_sec_avg_latency_ = 0u;
  clear_has_micro_sec_avg_latency();
}
inline ::google::protobuf::uint32 CMsgClientConnectionStats_Stats_VConn::micro_sec_avg_latency() const {
  return micro_sec_avg_latency_;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_micro_sec_avg_latency(::google::protobuf::uint32 value) {
  set_has_micro_sec_avg_latency();
  micro_sec_avg_latency_ = value;
}

// optional uint32 micro_sec_min_latency = 18;
inline bool CMsgClientConnectionStats_Stats_VConn::has_micro_sec_min_latency() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_has_micro_sec_min_latency() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_has_micro_sec_min_latency() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_micro_sec_min_latency() {
  micro_sec_min_latency_ = 0u;
  clear_has_micro_sec_min_latency();
}
inline ::google::protobuf::uint32 CMsgClientConnectionStats_Stats_VConn::micro_sec_min_latency() const {
  return micro_sec_min_latency_;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_micro_sec_min_latency(::google::protobuf::uint32 value) {
  set_has_micro_sec_min_latency();
  micro_sec_min_latency_ = value;
}

// optional uint32 micro_sec_max_latency = 19;
inline bool CMsgClientConnectionStats_Stats_VConn::has_micro_sec_max_latency() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_has_micro_sec_max_latency() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_has_micro_sec_max_latency() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_micro_sec_max_latency() {
  micro_sec_max_latency_ = 0u;
  clear_has_micro_sec_max_latency();
}
inline ::google::protobuf::uint32 CMsgClientConnectionStats_Stats_VConn::micro_sec_max_latency() const {
  return micro_sec_max_latency_;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_micro_sec_max_latency(::google::protobuf::uint32 value) {
  set_has_micro_sec_max_latency();
  micro_sec_max_latency_ = value;
}

// optional uint32 mem_pool_msg_in_use = 20;
inline bool CMsgClientConnectionStats_Stats_VConn::has_mem_pool_msg_in_use() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_has_mem_pool_msg_in_use() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_has_mem_pool_msg_in_use() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CMsgClientConnectionStats_Stats_VConn::clear_mem_pool_msg_in_use() {
  mem_pool_msg_in_use_ = 0u;
  clear_has_mem_pool_msg_in_use();
}
inline ::google::protobuf::uint32 CMsgClientConnectionStats_Stats_VConn::mem_pool_msg_in_use() const {
  return mem_pool_msg_in_use_;
}
inline void CMsgClientConnectionStats_Stats_VConn::set_mem_pool_msg_in_use(::google::protobuf::uint32 value) {
  set_has_mem_pool_msg_in_use();
  mem_pool_msg_in_use_ = value;
}

// -------------------------------------------------------------------

// CMsgClientConnectionStats

// optional .CMsgClientConnectionStats.Stats_Logon stats_logon = 1;
inline bool CMsgClientConnectionStats::has_stats_logon() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientConnectionStats::set_has_stats_logon() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientConnectionStats::clear_has_stats_logon() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientConnectionStats::clear_stats_logon() {
  if (stats_logon_ != NULL) stats_logon_->::CMsgClientConnectionStats_Stats_Logon::Clear();
  clear_has_stats_logon();
}
inline const ::CMsgClientConnectionStats_Stats_Logon& CMsgClientConnectionStats::stats_logon() const {
  return stats_logon_ != NULL ? *stats_logon_ : *default_instance_->stats_logon_;
}
inline ::CMsgClientConnectionStats_Stats_Logon* CMsgClientConnectionStats::mutable_stats_logon() {
  set_has_stats_logon();
  if (stats_logon_ == NULL) stats_logon_ = new ::CMsgClientConnectionStats_Stats_Logon;
  return stats_logon_;
}
inline ::CMsgClientConnectionStats_Stats_Logon* CMsgClientConnectionStats::release_stats_logon() {
  clear_has_stats_logon();
  ::CMsgClientConnectionStats_Stats_Logon* temp = stats_logon_;
  stats_logon_ = NULL;
  return temp;
}
inline void CMsgClientConnectionStats::set_allocated_stats_logon(::CMsgClientConnectionStats_Stats_Logon* stats_logon) {
  delete stats_logon_;
  stats_logon_ = stats_logon;
  if (stats_logon) {
    set_has_stats_logon();
  } else {
    clear_has_stats_logon();
  }
}

// optional .CMsgClientConnectionStats.Stats_VConn stats_vconn = 2;
inline bool CMsgClientConnectionStats::has_stats_vconn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientConnectionStats::set_has_stats_vconn() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientConnectionStats::clear_has_stats_vconn() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientConnectionStats::clear_stats_vconn() {
  if (stats_vconn_ != NULL) stats_vconn_->::CMsgClientConnectionStats_Stats_VConn::Clear();
  clear_has_stats_vconn();
}
inline const ::CMsgClientConnectionStats_Stats_VConn& CMsgClientConnectionStats::stats_vconn() const {
  return stats_vconn_ != NULL ? *stats_vconn_ : *default_instance_->stats_vconn_;
}
inline ::CMsgClientConnectionStats_Stats_VConn* CMsgClientConnectionStats::mutable_stats_vconn() {
  set_has_stats_vconn();
  if (stats_vconn_ == NULL) stats_vconn_ = new ::CMsgClientConnectionStats_Stats_VConn;
  return stats_vconn_;
}
inline ::CMsgClientConnectionStats_Stats_VConn* CMsgClientConnectionStats::release_stats_vconn() {
  clear_has_stats_vconn();
  ::CMsgClientConnectionStats_Stats_VConn* temp = stats_vconn_;
  stats_vconn_ = NULL;
  return temp;
}
inline void CMsgClientConnectionStats::set_allocated_stats_vconn(::CMsgClientConnectionStats_Stats_VConn* stats_vconn) {
  delete stats_vconn_;
  stats_vconn_ = stats_vconn;
  if (stats_vconn) {
    set_has_stats_vconn();
  } else {
    clear_has_stats_vconn();
  }
}

// -------------------------------------------------------------------

// CMsgClientServersAvailable_Server_Types_Available

// optional uint32 server = 1;
inline bool CMsgClientServersAvailable_Server_Types_Available::has_server() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientServersAvailable_Server_Types_Available::set_has_server() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientServersAvailable_Server_Types_Available::clear_has_server() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientServersAvailable_Server_Types_Available::clear_server() {
  server_ = 0u;
  clear_has_server();
}
inline ::google::protobuf::uint32 CMsgClientServersAvailable_Server_Types_Available::server() const {
  return server_;
}
inline void CMsgClientServersAvailable_Server_Types_Available::set_server(::google::protobuf::uint32 value) {
  set_has_server();
  server_ = value;
}

// optional bool changed = 2;
inline bool CMsgClientServersAvailable_Server_Types_Available::has_changed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientServersAvailable_Server_Types_Available::set_has_changed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientServersAvailable_Server_Types_Available::clear_has_changed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientServersAvailable_Server_Types_Available::clear_changed() {
  changed_ = false;
  clear_has_changed();
}
inline bool CMsgClientServersAvailable_Server_Types_Available::changed() const {
  return changed_;
}
inline void CMsgClientServersAvailable_Server_Types_Available::set_changed(bool value) {
  set_has_changed();
  changed_ = value;
}

// -------------------------------------------------------------------

// CMsgClientServersAvailable

// repeated .CMsgClientServersAvailable.Server_Types_Available server_types_available = 1;
inline int CMsgClientServersAvailable::server_types_available_size() const {
  return server_types_available_.size();
}
inline void CMsgClientServersAvailable::clear_server_types_available() {
  server_types_available_.Clear();
}
inline const ::CMsgClientServersAvailable_Server_Types_Available& CMsgClientServersAvailable::server_types_available(int index) const {
  return server_types_available_.Get(index);
}
inline ::CMsgClientServersAvailable_Server_Types_Available* CMsgClientServersAvailable::mutable_server_types_available(int index) {
  return server_types_available_.Mutable(index);
}
inline ::CMsgClientServersAvailable_Server_Types_Available* CMsgClientServersAvailable::add_server_types_available() {
  return server_types_available_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgClientServersAvailable_Server_Types_Available >&
CMsgClientServersAvailable::server_types_available() const {
  return server_types_available_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgClientServersAvailable_Server_Types_Available >*
CMsgClientServersAvailable::mutable_server_types_available() {
  return &server_types_available_;
}

// optional uint32 server_type_for_auth_services = 2;
inline bool CMsgClientServersAvailable::has_server_type_for_auth_services() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientServersAvailable::set_has_server_type_for_auth_services() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientServersAvailable::clear_has_server_type_for_auth_services() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientServersAvailable::clear_server_type_for_auth_services() {
  server_type_for_auth_services_ = 0u;
  clear_has_server_type_for_auth_services();
}
inline ::google::protobuf::uint32 CMsgClientServersAvailable::server_type_for_auth_services() const {
  return server_type_for_auth_services_;
}
inline void CMsgClientServersAvailable::set_server_type_for_auth_services(::google::protobuf::uint32 value) {
  set_has_server_type_for_auth_services();
  server_type_for_auth_services_ = value;
}

// -------------------------------------------------------------------

// CMsgClientReportOverlayDetourFailure

// repeated string failure_strings = 1;
inline int CMsgClientReportOverlayDetourFailure::failure_strings_size() const {
  return failure_strings_.size();
}
inline void CMsgClientReportOverlayDetourFailure::clear_failure_strings() {
  failure_strings_.Clear();
}
inline const ::std::string& CMsgClientReportOverlayDetourFailure::failure_strings(int index) const {
  return failure_strings_.Get(index);
}
inline ::std::string* CMsgClientReportOverlayDetourFailure::mutable_failure_strings(int index) {
  return failure_strings_.Mutable(index);
}
inline void CMsgClientReportOverlayDetourFailure::set_failure_strings(int index, const ::std::string& value) {
  failure_strings_.Mutable(index)->assign(value);
}
inline void CMsgClientReportOverlayDetourFailure::set_failure_strings(int index, const char* value) {
  failure_strings_.Mutable(index)->assign(value);
}
inline void CMsgClientReportOverlayDetourFailure::set_failure_strings(int index, const char* value, size_t size) {
  failure_strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientReportOverlayDetourFailure::add_failure_strings() {
  return failure_strings_.Add();
}
inline void CMsgClientReportOverlayDetourFailure::add_failure_strings(const ::std::string& value) {
  failure_strings_.Add()->assign(value);
}
inline void CMsgClientReportOverlayDetourFailure::add_failure_strings(const char* value) {
  failure_strings_.Add()->assign(value);
}
inline void CMsgClientReportOverlayDetourFailure::add_failure_strings(const char* value, size_t size) {
  failure_strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CMsgClientReportOverlayDetourFailure::failure_strings() const {
  return failure_strings_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CMsgClientReportOverlayDetourFailure::mutable_failure_strings() {
  return &failure_strings_;
}

// -------------------------------------------------------------------

// CMsgClientRequestEncryptedAppTicket

// optional uint32 app_id = 1;
inline bool CMsgClientRequestEncryptedAppTicket::has_app_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientRequestEncryptedAppTicket::set_has_app_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientRequestEncryptedAppTicket::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientRequestEncryptedAppTicket::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
inline ::google::protobuf::uint32 CMsgClientRequestEncryptedAppTicket::app_id() const {
  return app_id_;
}
inline void CMsgClientRequestEncryptedAppTicket::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
}

// optional bytes userdata = 2;
inline bool CMsgClientRequestEncryptedAppTicket::has_userdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientRequestEncryptedAppTicket::set_has_userdata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientRequestEncryptedAppTicket::clear_has_userdata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientRequestEncryptedAppTicket::clear_userdata() {
  if (userdata_ != &::google::protobuf::internal::kEmptyString) {
    userdata_->clear();
  }
  clear_has_userdata();
}
inline const ::std::string& CMsgClientRequestEncryptedAppTicket::userdata() const {
  return *userdata_;
}
inline void CMsgClientRequestEncryptedAppTicket::set_userdata(const ::std::string& value) {
  set_has_userdata();
  if (userdata_ == &::google::protobuf::internal::kEmptyString) {
    userdata_ = new ::std::string;
  }
  userdata_->assign(value);
}
inline void CMsgClientRequestEncryptedAppTicket::set_userdata(const char* value) {
  set_has_userdata();
  if (userdata_ == &::google::protobuf::internal::kEmptyString) {
    userdata_ = new ::std::string;
  }
  userdata_->assign(value);
}
inline void CMsgClientRequestEncryptedAppTicket::set_userdata(const void* value, size_t size) {
  set_has_userdata();
  if (userdata_ == &::google::protobuf::internal::kEmptyString) {
    userdata_ = new ::std::string;
  }
  userdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientRequestEncryptedAppTicket::mutable_userdata() {
  set_has_userdata();
  if (userdata_ == &::google::protobuf::internal::kEmptyString) {
    userdata_ = new ::std::string;
  }
  return userdata_;
}
inline ::std::string* CMsgClientRequestEncryptedAppTicket::release_userdata() {
  clear_has_userdata();
  if (userdata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userdata_;
    userdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientRequestEncryptedAppTicket::set_allocated_userdata(::std::string* userdata) {
  if (userdata_ != &::google::protobuf::internal::kEmptyString) {
    delete userdata_;
  }
  if (userdata) {
    set_has_userdata();
    userdata_ = userdata;
  } else {
    clear_has_userdata();
    userdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgClientRequestEncryptedAppTicketResponse

// optional uint32 app_id = 1;
inline bool CMsgClientRequestEncryptedAppTicketResponse::has_app_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientRequestEncryptedAppTicketResponse::set_has_app_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientRequestEncryptedAppTicketResponse::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientRequestEncryptedAppTicketResponse::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
inline ::google::protobuf::uint32 CMsgClientRequestEncryptedAppTicketResponse::app_id() const {
  return app_id_;
}
inline void CMsgClientRequestEncryptedAppTicketResponse::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
}

// optional int32 eresult = 2 [default = 2];
inline bool CMsgClientRequestEncryptedAppTicketResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientRequestEncryptedAppTicketResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientRequestEncryptedAppTicketResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientRequestEncryptedAppTicketResponse::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
inline ::google::protobuf::int32 CMsgClientRequestEncryptedAppTicketResponse::eresult() const {
  return eresult_;
}
inline void CMsgClientRequestEncryptedAppTicketResponse::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
}

// optional .EncryptedAppTicket encrypted_app_ticket = 3;
inline bool CMsgClientRequestEncryptedAppTicketResponse::has_encrypted_app_ticket() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientRequestEncryptedAppTicketResponse::set_has_encrypted_app_ticket() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientRequestEncryptedAppTicketResponse::clear_has_encrypted_app_ticket() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientRequestEncryptedAppTicketResponse::clear_encrypted_app_ticket() {
  if (encrypted_app_ticket_ != NULL) encrypted_app_ticket_->::EncryptedAppTicket::Clear();
  clear_has_encrypted_app_ticket();
}
inline const ::EncryptedAppTicket& CMsgClientRequestEncryptedAppTicketResponse::encrypted_app_ticket() const {
  return encrypted_app_ticket_ != NULL ? *encrypted_app_ticket_ : *default_instance_->encrypted_app_ticket_;
}
inline ::EncryptedAppTicket* CMsgClientRequestEncryptedAppTicketResponse::mutable_encrypted_app_ticket() {
  set_has_encrypted_app_ticket();
  if (encrypted_app_ticket_ == NULL) encrypted_app_ticket_ = new ::EncryptedAppTicket;
  return encrypted_app_ticket_;
}
inline ::EncryptedAppTicket* CMsgClientRequestEncryptedAppTicketResponse::release_encrypted_app_ticket() {
  clear_has_encrypted_app_ticket();
  ::EncryptedAppTicket* temp = encrypted_app_ticket_;
  encrypted_app_ticket_ = NULL;
  return temp;
}
inline void CMsgClientRequestEncryptedAppTicketResponse::set_allocated_encrypted_app_ticket(::EncryptedAppTicket* encrypted_app_ticket) {
  delete encrypted_app_ticket_;
  encrypted_app_ticket_ = encrypted_app_ticket;
  if (encrypted_app_ticket) {
    set_has_encrypted_app_ticket();
  } else {
    clear_has_encrypted_app_ticket();
  }
}

// -------------------------------------------------------------------

// CMsgClientWalletInfoUpdate

// optional bool has_wallet = 1;
inline bool CMsgClientWalletInfoUpdate::has_has_wallet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientWalletInfoUpdate::set_has_has_wallet() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientWalletInfoUpdate::clear_has_has_wallet() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientWalletInfoUpdate::clear_has_wallet() {
  has_wallet_ = false;
  clear_has_has_wallet();
}
inline bool CMsgClientWalletInfoUpdate::has_wallet() const {
  return has_wallet_;
}
inline void CMsgClientWalletInfoUpdate::set_has_wallet(bool value) {
  set_has_has_wallet();
  has_wallet_ = value;
}

// optional int32 balance = 2;
inline bool CMsgClientWalletInfoUpdate::has_balance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientWalletInfoUpdate::set_has_balance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientWalletInfoUpdate::clear_has_balance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientWalletInfoUpdate::clear_balance() {
  balance_ = 0;
  clear_has_balance();
}
inline ::google::protobuf::int32 CMsgClientWalletInfoUpdate::balance() const {
  return balance_;
}
inline void CMsgClientWalletInfoUpdate::set_balance(::google::protobuf::int32 value) {
  set_has_balance();
  balance_ = value;
}

// optional int32 currency = 3;
inline bool CMsgClientWalletInfoUpdate::has_currency() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientWalletInfoUpdate::set_has_currency() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientWalletInfoUpdate::clear_has_currency() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientWalletInfoUpdate::clear_currency() {
  currency_ = 0;
  clear_has_currency();
}
inline ::google::protobuf::int32 CMsgClientWalletInfoUpdate::currency() const {
  return currency_;
}
inline void CMsgClientWalletInfoUpdate::set_currency(::google::protobuf::int32 value) {
  set_has_currency();
  currency_ = value;
}

// optional int32 balance_delayed = 4;
inline bool CMsgClientWalletInfoUpdate::has_balance_delayed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgClientWalletInfoUpdate::set_has_balance_delayed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgClientWalletInfoUpdate::clear_has_balance_delayed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgClientWalletInfoUpdate::clear_balance_delayed() {
  balance_delayed_ = 0;
  clear_has_balance_delayed();
}
inline ::google::protobuf::int32 CMsgClientWalletInfoUpdate::balance_delayed() const {
  return balance_delayed_;
}
inline void CMsgClientWalletInfoUpdate::set_balance_delayed(::google::protobuf::int32 value) {
  set_has_balance_delayed();
  balance_delayed_ = value;
}

// optional int64 balance64 = 5;
inline bool CMsgClientWalletInfoUpdate::has_balance64() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgClientWalletInfoUpdate::set_has_balance64() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgClientWalletInfoUpdate::clear_has_balance64() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgClientWalletInfoUpdate::clear_balance64() {
  balance64_ = GOOGLE_LONGLONG(0);
  clear_has_balance64();
}
inline ::google::protobuf::int64 CMsgClientWalletInfoUpdate::balance64() const {
  return balance64_;
}
inline void CMsgClientWalletInfoUpdate::set_balance64(::google::protobuf::int64 value) {
  set_has_balance64();
  balance64_ = value;
}

// optional int64 balance64_delayed = 6;
inline bool CMsgClientWalletInfoUpdate::has_balance64_delayed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgClientWalletInfoUpdate::set_has_balance64_delayed() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgClientWalletInfoUpdate::clear_has_balance64_delayed() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgClientWalletInfoUpdate::clear_balance64_delayed() {
  balance64_delayed_ = GOOGLE_LONGLONG(0);
  clear_has_balance64_delayed();
}
inline ::google::protobuf::int64 CMsgClientWalletInfoUpdate::balance64_delayed() const {
  return balance64_delayed_;
}
inline void CMsgClientWalletInfoUpdate::set_balance64_delayed(::google::protobuf::int64 value) {
  set_has_balance64_delayed();
  balance64_delayed_ = value;
}

// optional int32 realm = 7;
inline bool CMsgClientWalletInfoUpdate::has_realm() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgClientWalletInfoUpdate::set_has_realm() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgClientWalletInfoUpdate::clear_has_realm() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgClientWalletInfoUpdate::clear_realm() {
  realm_ = 0;
  clear_has_realm();
}
inline ::google::protobuf::int32 CMsgClientWalletInfoUpdate::realm() const {
  return realm_;
}
inline void CMsgClientWalletInfoUpdate::set_realm(::google::protobuf::int32 value) {
  set_has_realm();
  realm_ = value;
}

// -------------------------------------------------------------------

// CMsgClientAMGetClanOfficers

// optional fixed64 steamid_clan = 1;
inline bool CMsgClientAMGetClanOfficers::has_steamid_clan() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientAMGetClanOfficers::set_has_steamid_clan() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientAMGetClanOfficers::clear_has_steamid_clan() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientAMGetClanOfficers::clear_steamid_clan() {
  steamid_clan_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid_clan();
}
inline ::google::protobuf::uint64 CMsgClientAMGetClanOfficers::steamid_clan() const {
  return steamid_clan_;
}
inline void CMsgClientAMGetClanOfficers::set_steamid_clan(::google::protobuf::uint64 value) {
  set_has_steamid_clan();
  steamid_clan_ = value;
}

// -------------------------------------------------------------------

// CMsgClientAMGetClanOfficersResponse

// optional int32 eresult = 1 [default = 2];
inline bool CMsgClientAMGetClanOfficersResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientAMGetClanOfficersResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientAMGetClanOfficersResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientAMGetClanOfficersResponse::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
inline ::google::protobuf::int32 CMsgClientAMGetClanOfficersResponse::eresult() const {
  return eresult_;
}
inline void CMsgClientAMGetClanOfficersResponse::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
}

// optional fixed64 steamid_clan = 2;
inline bool CMsgClientAMGetClanOfficersResponse::has_steamid_clan() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientAMGetClanOfficersResponse::set_has_steamid_clan() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientAMGetClanOfficersResponse::clear_has_steamid_clan() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientAMGetClanOfficersResponse::clear_steamid_clan() {
  steamid_clan_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid_clan();
}
inline ::google::protobuf::uint64 CMsgClientAMGetClanOfficersResponse::steamid_clan() const {
  return steamid_clan_;
}
inline void CMsgClientAMGetClanOfficersResponse::set_steamid_clan(::google::protobuf::uint64 value) {
  set_has_steamid_clan();
  steamid_clan_ = value;
}

// optional int32 officer_count = 3;
inline bool CMsgClientAMGetClanOfficersResponse::has_officer_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientAMGetClanOfficersResponse::set_has_officer_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientAMGetClanOfficersResponse::clear_has_officer_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientAMGetClanOfficersResponse::clear_officer_count() {
  officer_count_ = 0;
  clear_has_officer_count();
}
inline ::google::protobuf::int32 CMsgClientAMGetClanOfficersResponse::officer_count() const {
  return officer_count_;
}
inline void CMsgClientAMGetClanOfficersResponse::set_officer_count(::google::protobuf::int32 value) {
  set_has_officer_count();
  officer_count_ = value;
}

// -------------------------------------------------------------------

// CMsgClientAMGetPersonaNameHistory_IdInstance

// optional fixed64 steamid = 1;
inline bool CMsgClientAMGetPersonaNameHistory_IdInstance::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientAMGetPersonaNameHistory_IdInstance::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientAMGetPersonaNameHistory_IdInstance::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientAMGetPersonaNameHistory_IdInstance::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
inline ::google::protobuf::uint64 CMsgClientAMGetPersonaNameHistory_IdInstance::steamid() const {
  return steamid_;
}
inline void CMsgClientAMGetPersonaNameHistory_IdInstance::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
}

// -------------------------------------------------------------------

// CMsgClientAMGetPersonaNameHistory

// optional int32 id_count = 1;
inline bool CMsgClientAMGetPersonaNameHistory::has_id_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientAMGetPersonaNameHistory::set_has_id_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientAMGetPersonaNameHistory::clear_has_id_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientAMGetPersonaNameHistory::clear_id_count() {
  id_count_ = 0;
  clear_has_id_count();
}
inline ::google::protobuf::int32 CMsgClientAMGetPersonaNameHistory::id_count() const {
  return id_count_;
}
inline void CMsgClientAMGetPersonaNameHistory::set_id_count(::google::protobuf::int32 value) {
  set_has_id_count();
  id_count_ = value;
}

// repeated .CMsgClientAMGetPersonaNameHistory.IdInstance Ids = 2;
inline int CMsgClientAMGetPersonaNameHistory::ids_size() const {
  return ids_.size();
}
inline void CMsgClientAMGetPersonaNameHistory::clear_ids() {
  ids_.Clear();
}
inline const ::CMsgClientAMGetPersonaNameHistory_IdInstance& CMsgClientAMGetPersonaNameHistory::ids(int index) const {
  return ids_.Get(index);
}
inline ::CMsgClientAMGetPersonaNameHistory_IdInstance* CMsgClientAMGetPersonaNameHistory::mutable_ids(int index) {
  return ids_.Mutable(index);
}
inline ::CMsgClientAMGetPersonaNameHistory_IdInstance* CMsgClientAMGetPersonaNameHistory::add_ids() {
  return ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgClientAMGetPersonaNameHistory_IdInstance >&
CMsgClientAMGetPersonaNameHistory::ids() const {
  return ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgClientAMGetPersonaNameHistory_IdInstance >*
CMsgClientAMGetPersonaNameHistory::mutable_ids() {
  return &ids_;
}

// -------------------------------------------------------------------

// CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance

// optional fixed32 name_since = 1;
inline bool CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::has_name_since() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::set_has_name_since() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::clear_has_name_since() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::clear_name_since() {
  name_since_ = 0u;
  clear_has_name_since();
}
inline ::google::protobuf::uint32 CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::name_since() const {
  return name_since_;
}
inline void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::set_name_since(::google::protobuf::uint32 value) {
  set_has_name_since();
  name_since_ = value;
}

// optional string name = 2;
inline bool CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::name() const {
  return *name_;
}
inline void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance

// optional int32 eresult = 1 [default = 2];
inline bool CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
inline ::google::protobuf::int32 CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::eresult() const {
  return eresult_;
}
inline void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
}

// optional fixed64 steamid = 2;
inline bool CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::has_steamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::set_has_steamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
inline ::google::protobuf::uint64 CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::steamid() const {
  return steamid_;
}
inline void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
}

// repeated .CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance names = 3;
inline int CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::names_size() const {
  return names_.size();
}
inline void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::clear_names() {
  names_.Clear();
}
inline const ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance& CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::names(int index) const {
  return names_.Get(index);
}
inline ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::mutable_names(int index) {
  return names_.Mutable(index);
}
inline ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::add_names() {
  return names_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance >&
CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::names() const {
  return names_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance >*
CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::mutable_names() {
  return &names_;
}

// -------------------------------------------------------------------

// CMsgClientAMGetPersonaNameHistoryResponse

// repeated .CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance responses = 2;
inline int CMsgClientAMGetPersonaNameHistoryResponse::responses_size() const {
  return responses_.size();
}
inline void CMsgClientAMGetPersonaNameHistoryResponse::clear_responses() {
  responses_.Clear();
}
inline const ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance& CMsgClientAMGetPersonaNameHistoryResponse::responses(int index) const {
  return responses_.Get(index);
}
inline ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* CMsgClientAMGetPersonaNameHistoryResponse::mutable_responses(int index) {
  return responses_.Mutable(index);
}
inline ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* CMsgClientAMGetPersonaNameHistoryResponse::add_responses() {
  return responses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance >&
CMsgClientAMGetPersonaNameHistoryResponse::responses() const {
  return responses_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance >*
CMsgClientAMGetPersonaNameHistoryResponse::mutable_responses() {
  return &responses_;
}

// -------------------------------------------------------------------

// CMsgClientDeregisterWithServer

// optional uint32 eservertype = 1;
inline bool CMsgClientDeregisterWithServer::has_eservertype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientDeregisterWithServer::set_has_eservertype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientDeregisterWithServer::clear_has_eservertype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientDeregisterWithServer::clear_eservertype() {
  eservertype_ = 0u;
  clear_has_eservertype();
}
inline ::google::protobuf::uint32 CMsgClientDeregisterWithServer::eservertype() const {
  return eservertype_;
}
inline void CMsgClientDeregisterWithServer::set_eservertype(::google::protobuf::uint32 value) {
  set_has_eservertype();
  eservertype_ = value;
}

// optional uint32 app_id = 2;
inline bool CMsgClientDeregisterWithServer::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientDeregisterWithServer::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientDeregisterWithServer::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientDeregisterWithServer::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
inline ::google::protobuf::uint32 CMsgClientDeregisterWithServer::app_id() const {
  return app_id_;
}
inline void CMsgClientDeregisterWithServer::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
}

// -------------------------------------------------------------------

// CMsgClientClanState_NameInfo

// optional string clan_name = 1;
inline bool CMsgClientClanState_NameInfo::has_clan_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientClanState_NameInfo::set_has_clan_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientClanState_NameInfo::clear_has_clan_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientClanState_NameInfo::clear_clan_name() {
  if (clan_name_ != &::google::protobuf::internal::kEmptyString) {
    clan_name_->clear();
  }
  clear_has_clan_name();
}
inline const ::std::string& CMsgClientClanState_NameInfo::clan_name() const {
  return *clan_name_;
}
inline void CMsgClientClanState_NameInfo::set_clan_name(const ::std::string& value) {
  set_has_clan_name();
  if (clan_name_ == &::google::protobuf::internal::kEmptyString) {
    clan_name_ = new ::std::string;
  }
  clan_name_->assign(value);
}
inline void CMsgClientClanState_NameInfo::set_clan_name(const char* value) {
  set_has_clan_name();
  if (clan_name_ == &::google::protobuf::internal::kEmptyString) {
    clan_name_ = new ::std::string;
  }
  clan_name_->assign(value);
}
inline void CMsgClientClanState_NameInfo::set_clan_name(const char* value, size_t size) {
  set_has_clan_name();
  if (clan_name_ == &::google::protobuf::internal::kEmptyString) {
    clan_name_ = new ::std::string;
  }
  clan_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientClanState_NameInfo::mutable_clan_name() {
  set_has_clan_name();
  if (clan_name_ == &::google::protobuf::internal::kEmptyString) {
    clan_name_ = new ::std::string;
  }
  return clan_name_;
}
inline ::std::string* CMsgClientClanState_NameInfo::release_clan_name() {
  clear_has_clan_name();
  if (clan_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clan_name_;
    clan_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientClanState_NameInfo::set_allocated_clan_name(::std::string* clan_name) {
  if (clan_name_ != &::google::protobuf::internal::kEmptyString) {
    delete clan_name_;
  }
  if (clan_name) {
    set_has_clan_name();
    clan_name_ = clan_name;
  } else {
    clear_has_clan_name();
    clan_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes sha_avatar = 2;
inline bool CMsgClientClanState_NameInfo::has_sha_avatar() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientClanState_NameInfo::set_has_sha_avatar() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientClanState_NameInfo::clear_has_sha_avatar() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientClanState_NameInfo::clear_sha_avatar() {
  if (sha_avatar_ != &::google::protobuf::internal::kEmptyString) {
    sha_avatar_->clear();
  }
  clear_has_sha_avatar();
}
inline const ::std::string& CMsgClientClanState_NameInfo::sha_avatar() const {
  return *sha_avatar_;
}
inline void CMsgClientClanState_NameInfo::set_sha_avatar(const ::std::string& value) {
  set_has_sha_avatar();
  if (sha_avatar_ == &::google::protobuf::internal::kEmptyString) {
    sha_avatar_ = new ::std::string;
  }
  sha_avatar_->assign(value);
}
inline void CMsgClientClanState_NameInfo::set_sha_avatar(const char* value) {
  set_has_sha_avatar();
  if (sha_avatar_ == &::google::protobuf::internal::kEmptyString) {
    sha_avatar_ = new ::std::string;
  }
  sha_avatar_->assign(value);
}
inline void CMsgClientClanState_NameInfo::set_sha_avatar(const void* value, size_t size) {
  set_has_sha_avatar();
  if (sha_avatar_ == &::google::protobuf::internal::kEmptyString) {
    sha_avatar_ = new ::std::string;
  }
  sha_avatar_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientClanState_NameInfo::mutable_sha_avatar() {
  set_has_sha_avatar();
  if (sha_avatar_ == &::google::protobuf::internal::kEmptyString) {
    sha_avatar_ = new ::std::string;
  }
  return sha_avatar_;
}
inline ::std::string* CMsgClientClanState_NameInfo::release_sha_avatar() {
  clear_has_sha_avatar();
  if (sha_avatar_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sha_avatar_;
    sha_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientClanState_NameInfo::set_allocated_sha_avatar(::std::string* sha_avatar) {
  if (sha_avatar_ != &::google::protobuf::internal::kEmptyString) {
    delete sha_avatar_;
  }
  if (sha_avatar) {
    set_has_sha_avatar();
    sha_avatar_ = sha_avatar;
  } else {
    clear_has_sha_avatar();
    sha_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgClientClanState_UserCounts

// optional uint32 members = 1;
inline bool CMsgClientClanState_UserCounts::has_members() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientClanState_UserCounts::set_has_members() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientClanState_UserCounts::clear_has_members() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientClanState_UserCounts::clear_members() {
  members_ = 0u;
  clear_has_members();
}
inline ::google::protobuf::uint32 CMsgClientClanState_UserCounts::members() const {
  return members_;
}
inline void CMsgClientClanState_UserCounts::set_members(::google::protobuf::uint32 value) {
  set_has_members();
  members_ = value;
}

// optional uint32 online = 2;
inline bool CMsgClientClanState_UserCounts::has_online() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientClanState_UserCounts::set_has_online() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientClanState_UserCounts::clear_has_online() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientClanState_UserCounts::clear_online() {
  online_ = 0u;
  clear_has_online();
}
inline ::google::protobuf::uint32 CMsgClientClanState_UserCounts::online() const {
  return online_;
}
inline void CMsgClientClanState_UserCounts::set_online(::google::protobuf::uint32 value) {
  set_has_online();
  online_ = value;
}

// optional uint32 chatting = 3;
inline bool CMsgClientClanState_UserCounts::has_chatting() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientClanState_UserCounts::set_has_chatting() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientClanState_UserCounts::clear_has_chatting() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientClanState_UserCounts::clear_chatting() {
  chatting_ = 0u;
  clear_has_chatting();
}
inline ::google::protobuf::uint32 CMsgClientClanState_UserCounts::chatting() const {
  return chatting_;
}
inline void CMsgClientClanState_UserCounts::set_chatting(::google::protobuf::uint32 value) {
  set_has_chatting();
  chatting_ = value;
}

// optional uint32 in_game = 4;
inline bool CMsgClientClanState_UserCounts::has_in_game() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgClientClanState_UserCounts::set_has_in_game() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgClientClanState_UserCounts::clear_has_in_game() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgClientClanState_UserCounts::clear_in_game() {
  in_game_ = 0u;
  clear_has_in_game();
}
inline ::google::protobuf::uint32 CMsgClientClanState_UserCounts::in_game() const {
  return in_game_;
}
inline void CMsgClientClanState_UserCounts::set_in_game(::google::protobuf::uint32 value) {
  set_has_in_game();
  in_game_ = value;
}

// optional uint32 chat_room_members = 5;
inline bool CMsgClientClanState_UserCounts::has_chat_room_members() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgClientClanState_UserCounts::set_has_chat_room_members() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgClientClanState_UserCounts::clear_has_chat_room_members() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgClientClanState_UserCounts::clear_chat_room_members() {
  chat_room_members_ = 0u;
  clear_has_chat_room_members();
}
inline ::google::protobuf::uint32 CMsgClientClanState_UserCounts::chat_room_members() const {
  return chat_room_members_;
}
inline void CMsgClientClanState_UserCounts::set_chat_room_members(::google::protobuf::uint32 value) {
  set_has_chat_room_members();
  chat_room_members_ = value;
}

// -------------------------------------------------------------------

// CMsgClientClanState_Event

// optional fixed64 gid = 1;
inline bool CMsgClientClanState_Event::has_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientClanState_Event::set_has_gid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientClanState_Event::clear_has_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientClanState_Event::clear_gid() {
  gid_ = GOOGLE_ULONGLONG(0);
  clear_has_gid();
}
inline ::google::protobuf::uint64 CMsgClientClanState_Event::gid() const {
  return gid_;
}
inline void CMsgClientClanState_Event::set_gid(::google::protobuf::uint64 value) {
  set_has_gid();
  gid_ = value;
}

// optional uint32 event_time = 2;
inline bool CMsgClientClanState_Event::has_event_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientClanState_Event::set_has_event_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientClanState_Event::clear_has_event_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientClanState_Event::clear_event_time() {
  event_time_ = 0u;
  clear_has_event_time();
}
inline ::google::protobuf::uint32 CMsgClientClanState_Event::event_time() const {
  return event_time_;
}
inline void CMsgClientClanState_Event::set_event_time(::google::protobuf::uint32 value) {
  set_has_event_time();
  event_time_ = value;
}

// optional string headline = 3;
inline bool CMsgClientClanState_Event::has_headline() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientClanState_Event::set_has_headline() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientClanState_Event::clear_has_headline() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientClanState_Event::clear_headline() {
  if (headline_ != &::google::protobuf::internal::kEmptyString) {
    headline_->clear();
  }
  clear_has_headline();
}
inline const ::std::string& CMsgClientClanState_Event::headline() const {
  return *headline_;
}
inline void CMsgClientClanState_Event::set_headline(const ::std::string& value) {
  set_has_headline();
  if (headline_ == &::google::protobuf::internal::kEmptyString) {
    headline_ = new ::std::string;
  }
  headline_->assign(value);
}
inline void CMsgClientClanState_Event::set_headline(const char* value) {
  set_has_headline();
  if (headline_ == &::google::protobuf::internal::kEmptyString) {
    headline_ = new ::std::string;
  }
  headline_->assign(value);
}
inline void CMsgClientClanState_Event::set_headline(const char* value, size_t size) {
  set_has_headline();
  if (headline_ == &::google::protobuf::internal::kEmptyString) {
    headline_ = new ::std::string;
  }
  headline_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientClanState_Event::mutable_headline() {
  set_has_headline();
  if (headline_ == &::google::protobuf::internal::kEmptyString) {
    headline_ = new ::std::string;
  }
  return headline_;
}
inline ::std::string* CMsgClientClanState_Event::release_headline() {
  clear_has_headline();
  if (headline_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = headline_;
    headline_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientClanState_Event::set_allocated_headline(::std::string* headline) {
  if (headline_ != &::google::protobuf::internal::kEmptyString) {
    delete headline_;
  }
  if (headline) {
    set_has_headline();
    headline_ = headline;
  } else {
    clear_has_headline();
    headline_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional fixed64 game_id = 4;
inline bool CMsgClientClanState_Event::has_game_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgClientClanState_Event::set_has_game_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgClientClanState_Event::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgClientClanState_Event::clear_game_id() {
  game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_game_id();
}
inline ::google::protobuf::uint64 CMsgClientClanState_Event::game_id() const {
  return game_id_;
}
inline void CMsgClientClanState_Event::set_game_id(::google::protobuf::uint64 value) {
  set_has_game_id();
  game_id_ = value;
}

// optional bool just_posted = 5;
inline bool CMsgClientClanState_Event::has_just_posted() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgClientClanState_Event::set_has_just_posted() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgClientClanState_Event::clear_has_just_posted() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgClientClanState_Event::clear_just_posted() {
  just_posted_ = false;
  clear_has_just_posted();
}
inline bool CMsgClientClanState_Event::just_posted() const {
  return just_posted_;
}
inline void CMsgClientClanState_Event::set_just_posted(bool value) {
  set_has_just_posted();
  just_posted_ = value;
}

// -------------------------------------------------------------------

// CMsgClientClanState

// optional fixed64 steamid_clan = 1;
inline bool CMsgClientClanState::has_steamid_clan() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientClanState::set_has_steamid_clan() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientClanState::clear_has_steamid_clan() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientClanState::clear_steamid_clan() {
  steamid_clan_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid_clan();
}
inline ::google::protobuf::uint64 CMsgClientClanState::steamid_clan() const {
  return steamid_clan_;
}
inline void CMsgClientClanState::set_steamid_clan(::google::protobuf::uint64 value) {
  set_has_steamid_clan();
  steamid_clan_ = value;
}

// optional uint32 clan_account_flags = 3;
inline bool CMsgClientClanState::has_clan_account_flags() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientClanState::set_has_clan_account_flags() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientClanState::clear_has_clan_account_flags() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientClanState::clear_clan_account_flags() {
  clan_account_flags_ = 0u;
  clear_has_clan_account_flags();
}
inline ::google::protobuf::uint32 CMsgClientClanState::clan_account_flags() const {
  return clan_account_flags_;
}
inline void CMsgClientClanState::set_clan_account_flags(::google::protobuf::uint32 value) {
  set_has_clan_account_flags();
  clan_account_flags_ = value;
}

// optional .CMsgClientClanState.NameInfo name_info = 4;
inline bool CMsgClientClanState::has_name_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientClanState::set_has_name_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientClanState::clear_has_name_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientClanState::clear_name_info() {
  if (name_info_ != NULL) name_info_->::CMsgClientClanState_NameInfo::Clear();
  clear_has_name_info();
}
inline const ::CMsgClientClanState_NameInfo& CMsgClientClanState::name_info() const {
  return name_info_ != NULL ? *name_info_ : *default_instance_->name_info_;
}
inline ::CMsgClientClanState_NameInfo* CMsgClientClanState::mutable_name_info() {
  set_has_name_info();
  if (name_info_ == NULL) name_info_ = new ::CMsgClientClanState_NameInfo;
  return name_info_;
}
inline ::CMsgClientClanState_NameInfo* CMsgClientClanState::release_name_info() {
  clear_has_name_info();
  ::CMsgClientClanState_NameInfo* temp = name_info_;
  name_info_ = NULL;
  return temp;
}
inline void CMsgClientClanState::set_allocated_name_info(::CMsgClientClanState_NameInfo* name_info) {
  delete name_info_;
  name_info_ = name_info;
  if (name_info) {
    set_has_name_info();
  } else {
    clear_has_name_info();
  }
}

// optional .CMsgClientClanState.UserCounts user_counts = 5;
inline bool CMsgClientClanState::has_user_counts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgClientClanState::set_has_user_counts() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgClientClanState::clear_has_user_counts() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgClientClanState::clear_user_counts() {
  if (user_counts_ != NULL) user_counts_->::CMsgClientClanState_UserCounts::Clear();
  clear_has_user_counts();
}
inline const ::CMsgClientClanState_UserCounts& CMsgClientClanState::user_counts() const {
  return user_counts_ != NULL ? *user_counts_ : *default_instance_->user_counts_;
}
inline ::CMsgClientClanState_UserCounts* CMsgClientClanState::mutable_user_counts() {
  set_has_user_counts();
  if (user_counts_ == NULL) user_counts_ = new ::CMsgClientClanState_UserCounts;
  return user_counts_;
}
inline ::CMsgClientClanState_UserCounts* CMsgClientClanState::release_user_counts() {
  clear_has_user_counts();
  ::CMsgClientClanState_UserCounts* temp = user_counts_;
  user_counts_ = NULL;
  return temp;
}
inline void CMsgClientClanState::set_allocated_user_counts(::CMsgClientClanState_UserCounts* user_counts) {
  delete user_counts_;
  user_counts_ = user_counts;
  if (user_counts) {
    set_has_user_counts();
  } else {
    clear_has_user_counts();
  }
}

// repeated .CMsgClientClanState.Event events = 6;
inline int CMsgClientClanState::events_size() const {
  return events_.size();
}
inline void CMsgClientClanState::clear_events() {
  events_.Clear();
}
inline const ::CMsgClientClanState_Event& CMsgClientClanState::events(int index) const {
  return events_.Get(index);
}
inline ::CMsgClientClanState_Event* CMsgClientClanState::mutable_events(int index) {
  return events_.Mutable(index);
}
inline ::CMsgClientClanState_Event* CMsgClientClanState::add_events() {
  return events_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgClientClanState_Event >&
CMsgClientClanState::events() const {
  return events_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgClientClanState_Event >*
CMsgClientClanState::mutable_events() {
  return &events_;
}

// repeated .CMsgClientClanState.Event announcements = 7;
inline int CMsgClientClanState::announcements_size() const {
  return announcements_.size();
}
inline void CMsgClientClanState::clear_announcements() {
  announcements_.Clear();
}
inline const ::CMsgClientClanState_Event& CMsgClientClanState::announcements(int index) const {
  return announcements_.Get(index);
}
inline ::CMsgClientClanState_Event* CMsgClientClanState::mutable_announcements(int index) {
  return announcements_.Mutable(index);
}
inline ::CMsgClientClanState_Event* CMsgClientClanState::add_announcements() {
  return announcements_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgClientClanState_Event >&
CMsgClientClanState::announcements() const {
  return announcements_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgClientClanState_Event >*
CMsgClientClanState::mutable_announcements() {
  return &announcements_;
}

// optional bool chat_room_private = 8;
inline bool CMsgClientClanState::has_chat_room_private() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgClientClanState::set_has_chat_room_private() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgClientClanState::clear_has_chat_room_private() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgClientClanState::clear_chat_room_private() {
  chat_room_private_ = false;
  clear_has_chat_room_private();
}
inline bool CMsgClientClanState::chat_room_private() const {
  return chat_room_private_;
}
inline void CMsgClientClanState::set_chat_room_private(bool value) {
  set_has_chat_room_private();
  chat_room_private_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_steammessages_5fclientserver_2eproto__INCLUDED

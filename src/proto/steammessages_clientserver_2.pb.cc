// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientserver_2.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_clientserver_2.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgClientUpdateUserGameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientUpdateUserGameInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientRichPresenceUpload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientRichPresenceUpload_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientRichPresenceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientRichPresenceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientRichPresenceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientRichPresenceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientRichPresenceInfo_RichPresence_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientRichPresenceInfo_RichPresence_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientCheckFileSignature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientCheckFileSignature_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientCheckFileSignatureResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientCheckFileSignatureResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientReadMachineAuth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientReadMachineAuth_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientReadMachineAuthResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientReadMachineAuthResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientUpdateMachineAuth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientUpdateMachineAuth_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientUpdateMachineAuthResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientUpdateMachineAuthResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientRequestMachineAuth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientRequestMachineAuth_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientRequestMachineAuthResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientRequestMachineAuthResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientRegisterKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientRegisterKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientPurchaseResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientPurchaseResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientActivateOEMLicense_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientActivateOEMLicense_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientRegisterOEMMachine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientRegisterOEMMachine_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientRegisterOEMMachineResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientRegisterOEMMachineResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientPurchaseWithMachineID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientPurchaseWithMachineID_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTrading_InitiateTradeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTrading_InitiateTradeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTrading_InitiateTradeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTrading_InitiateTradeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTrading_CancelTradeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTrading_CancelTradeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgTrading_StartSession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgTrading_StartSession_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientGetCDNAuthToken_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientGetCDNAuthToken_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientGetDepotDecryptionKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientGetDepotDecryptionKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientGetDepotDecryptionKeyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientGetDepotDecryptionKeyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientCheckAppBetaPassword_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientCheckAppBetaPassword_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientCheckAppBetaPasswordResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientCheckAppBetaPasswordResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientCheckAppBetaPasswordResponse_BetaPassword_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientCheckAppBetaPasswordResponse_BetaPassword_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientUpdateAppJobReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientUpdateAppJobReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientDPContentStatsReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientDPContentStatsReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientGetCDNAuthTokenResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientGetCDNAuthTokenResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDownloadRateStatistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDownloadRateStatistics_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDownloadRateStatistics_StatsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDownloadRateStatistics_StatsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientRequestAccountData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientRequestAccountData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientRequestAccountDataResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientRequestAccountDataResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientUGSGetGlobalStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientUGSGetGlobalStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientUGSGetGlobalStatsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientUGSGetGlobalStatsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientUGSGetGlobalStatsResponse_Day_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientUGSGetGlobalStatsResponse_Day_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientUGSGetGlobalStatsResponse_Day_Stat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientUGSGetGlobalStatsResponse_Day_Stat_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientRedeemGuestPass_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientRedeemGuestPass_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientRedeemGuestPassResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientRedeemGuestPassResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientGetClanActivityCounts_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientGetClanActivityCounts_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientGetClanActivityCountsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientGetClanActivityCountsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientOGSReportString_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientOGSReportString_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientOGSReportBug_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientOGSReportBug_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientSentLogs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientSentLogs_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGCClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGCClient_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientRequestFreeLicense_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientRequestFreeLicense_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientRequestFreeLicenseResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientRequestFreeLicenseResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDRMDownloadRequestWithCrashData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDRMDownloadRequestWithCrashData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDRMDownloadResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDRMDownloadResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDRMFinalResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDRMFinalResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientDPCheckSpecialSurvey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientDPCheckSpecialSurvey_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientDPCheckSpecialSurveyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientDPCheckSpecialSurveyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientDPSendSpecialSurveyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientDPSendSpecialSurveyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientDPSendSpecialSurveyResponseReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientDPSendSpecialSurveyResponseReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientRequestForgottenPasswordEmail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientRequestForgottenPasswordEmail_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientRequestForgottenPasswordEmailResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientRequestForgottenPasswordEmailResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientItemAnnouncements_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientItemAnnouncements_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientItemAnnouncements_UnseenItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientItemAnnouncements_UnseenItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientRequestItemAnnouncements_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientRequestItemAnnouncements_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientUserNotifications_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientUserNotifications_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientUserNotifications_Notification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientUserNotifications_Notification_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientCommentNotifications_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientCommentNotifications_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientRequestCommentNotifications_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientRequestCommentNotifications_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientOfflineMessageNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientOfflineMessageNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientRequestOfflineMessageCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientRequestOfflineMessageCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientChatGetFriendMessageHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientChatGetFriendMessageHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientChatGetFriendMessageHistoryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientChatGetFriendMessageHistoryResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientChatGetFriendMessageHistoryForOfflineMessages_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientChatGetFriendMessageHistoryForOfflineMessages_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientFSGetFriendsSteamLevels_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientFSGetFriendsSteamLevels_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientFSGetFriendsSteamLevelsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientFSGetFriendsSteamLevelsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientFSGetFriendsSteamLevelsResponse_Friend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientFSGetFriendsSteamLevelsResponse_Friend_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientEmailAddrInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientEmailAddrInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgCREItemVoteSummary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgCREItemVoteSummary_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgCREItemVoteSummary_PublishedFileId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgCREItemVoteSummary_PublishedFileId_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgCREItemVoteSummaryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgCREItemVoteSummaryResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgCREItemVoteSummaryResponse_ItemVoteSummary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgCREItemVoteSummaryResponse_ItemVoteSummary_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgCREUpdateUserPublishedItemVote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgCREUpdateUserPublishedItemVote_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgCREUpdateUserPublishedItemVoteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgCREUpdateUserPublishedItemVoteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgCREGetUserPublishedItemVoteDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgCREGetUserPublishedItemVoteDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgCREGetUserPublishedItemVoteDetailsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgCREGetUserPublishedItemVoteDetailsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgFSGetFollowerCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgFSGetFollowerCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgFSGetFollowerCountResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgFSGetFollowerCountResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgFSGetIsFollowing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgFSGetIsFollowing_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgFSGetIsFollowingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgFSGetIsFollowingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgFSEnumerateFollowingList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgFSEnumerateFollowingList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgFSEnumerateFollowingListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgFSEnumerateFollowingListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDPGetNumberOfCurrentPlayers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDPGetNumberOfCurrentPlayers_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgDPGetNumberOfCurrentPlayersResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgDPGetNumberOfCurrentPlayersResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientFriendUserStatusPublished_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientFriendUserStatusPublished_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientServiceMethodLegacy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientServiceMethodLegacy_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientServiceMethodLegacyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientServiceMethodLegacyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientUIMode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientUIMode_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientVanityURLChangedNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientVanityURLChangedNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientAuthorizeLocalDeviceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientAuthorizeLocalDeviceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientAuthorizeLocalDevice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientAuthorizeLocalDevice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientAuthorizeLocalDeviceNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientAuthorizeLocalDeviceNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientDeauthorizeDeviceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientDeauthorizeDeviceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientDeauthorizeDevice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientDeauthorizeDevice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientUseLocalDeviceAuthorizations_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientUseLocalDeviceAuthorizations_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientUseLocalDeviceAuthorizations_DeviceToken_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientUseLocalDeviceAuthorizations_DeviceToken_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientGetAuthorizedDevices_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientGetAuthorizedDevices_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientGetAuthorizedDevicesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientGetAuthorizedDevicesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientSharedLibraryLockStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientSharedLibraryLockStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientSharedLibraryLockStatus_LockedLibrary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientSharedLibraryLockStatus_LockedLibrary_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientSharedLibraryStopPlaying_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientSharedLibraryStopPlaying_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientSharedLibraryStopPlaying_StopApp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientSharedLibraryStopPlaying_StopApp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientServiceCall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientServiceCall_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientServiceModule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientServiceModule_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientServiceCallResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientServiceCallResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgAMUnlockStreaming_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgAMUnlockStreaming_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgAMUnlockStreamingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgAMUnlockStreamingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgAMUnlockHEVC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgAMUnlockHEVC_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgAMUnlockHEVCResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgAMUnlockHEVCResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientPlayingSessionState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientPlayingSessionState_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientKickPlayingSession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientKickPlayingSession_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientVoiceCallPreAuthorize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientVoiceCallPreAuthorize_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientVoiceCallPreAuthorizeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientVoiceCallPreAuthorizeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgBadgeCraftedNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgBadgeCraftedNotification_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_steammessages_5fclientserver_5f2_2eproto() {
  protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "steammessages_clientserver_2.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgClientUpdateUserGameInfo_descriptor_ = file->message_type(0);
  static const int CMsgClientUpdateUserGameInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateUserGameInfo, steamid_idgs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateUserGameInfo, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateUserGameInfo, game_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateUserGameInfo, game_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateUserGameInfo, token_),
  };
  CMsgClientUpdateUserGameInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientUpdateUserGameInfo_descriptor_,
      CMsgClientUpdateUserGameInfo::default_instance_,
      CMsgClientUpdateUserGameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateUserGameInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateUserGameInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientUpdateUserGameInfo));
  CMsgClientRichPresenceUpload_descriptor_ = file->message_type(1);
  static const int CMsgClientRichPresenceUpload_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRichPresenceUpload, rich_presence_kv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRichPresenceUpload, steamid_broadcast_),
  };
  CMsgClientRichPresenceUpload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientRichPresenceUpload_descriptor_,
      CMsgClientRichPresenceUpload::default_instance_,
      CMsgClientRichPresenceUpload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRichPresenceUpload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRichPresenceUpload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientRichPresenceUpload));
  CMsgClientRichPresenceRequest_descriptor_ = file->message_type(2);
  static const int CMsgClientRichPresenceRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRichPresenceRequest, steamid_request_),
  };
  CMsgClientRichPresenceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientRichPresenceRequest_descriptor_,
      CMsgClientRichPresenceRequest::default_instance_,
      CMsgClientRichPresenceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRichPresenceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRichPresenceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientRichPresenceRequest));
  CMsgClientRichPresenceInfo_descriptor_ = file->message_type(3);
  static const int CMsgClientRichPresenceInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRichPresenceInfo, rich_presence_),
  };
  CMsgClientRichPresenceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientRichPresenceInfo_descriptor_,
      CMsgClientRichPresenceInfo::default_instance_,
      CMsgClientRichPresenceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRichPresenceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRichPresenceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientRichPresenceInfo));
  CMsgClientRichPresenceInfo_RichPresence_descriptor_ = CMsgClientRichPresenceInfo_descriptor_->nested_type(0);
  static const int CMsgClientRichPresenceInfo_RichPresence_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRichPresenceInfo_RichPresence, steamid_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRichPresenceInfo_RichPresence, rich_presence_kv_),
  };
  CMsgClientRichPresenceInfo_RichPresence_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientRichPresenceInfo_RichPresence_descriptor_,
      CMsgClientRichPresenceInfo_RichPresence::default_instance_,
      CMsgClientRichPresenceInfo_RichPresence_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRichPresenceInfo_RichPresence, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRichPresenceInfo_RichPresence, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientRichPresenceInfo_RichPresence));
  CMsgClientCheckFileSignature_descriptor_ = file->message_type(4);
  static const int CMsgClientCheckFileSignature_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCheckFileSignature, app_id_),
  };
  CMsgClientCheckFileSignature_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientCheckFileSignature_descriptor_,
      CMsgClientCheckFileSignature::default_instance_,
      CMsgClientCheckFileSignature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCheckFileSignature, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCheckFileSignature, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientCheckFileSignature));
  CMsgClientCheckFileSignatureResponse_descriptor_ = file->message_type(5);
  static const int CMsgClientCheckFileSignatureResponse_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCheckFileSignatureResponse, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCheckFileSignatureResponse, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCheckFileSignatureResponse, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCheckFileSignatureResponse, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCheckFileSignatureResponse, esignatureresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCheckFileSignatureResponse, sha_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCheckFileSignatureResponse, signatureheader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCheckFileSignatureResponse, filesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCheckFileSignatureResponse, getlasterror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCheckFileSignatureResponse, evalvesignaturecheckdetail_),
  };
  CMsgClientCheckFileSignatureResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientCheckFileSignatureResponse_descriptor_,
      CMsgClientCheckFileSignatureResponse::default_instance_,
      CMsgClientCheckFileSignatureResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCheckFileSignatureResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCheckFileSignatureResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientCheckFileSignatureResponse));
  CMsgClientReadMachineAuth_descriptor_ = file->message_type(6);
  static const int CMsgClientReadMachineAuth_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientReadMachineAuth, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientReadMachineAuth, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientReadMachineAuth, cubtoread_),
  };
  CMsgClientReadMachineAuth_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientReadMachineAuth_descriptor_,
      CMsgClientReadMachineAuth::default_instance_,
      CMsgClientReadMachineAuth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientReadMachineAuth, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientReadMachineAuth, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientReadMachineAuth));
  CMsgClientReadMachineAuthResponse_descriptor_ = file->message_type(7);
  static const int CMsgClientReadMachineAuthResponse_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientReadMachineAuthResponse, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientReadMachineAuthResponse, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientReadMachineAuthResponse, filesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientReadMachineAuthResponse, sha_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientReadMachineAuthResponse, getlasterror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientReadMachineAuthResponse, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientReadMachineAuthResponse, cubread_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientReadMachineAuthResponse, bytes_read_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientReadMachineAuthResponse, filename_sentry_),
  };
  CMsgClientReadMachineAuthResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientReadMachineAuthResponse_descriptor_,
      CMsgClientReadMachineAuthResponse::default_instance_,
      CMsgClientReadMachineAuthResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientReadMachineAuthResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientReadMachineAuthResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientReadMachineAuthResponse));
  CMsgClientUpdateMachineAuth_descriptor_ = file->message_type(8);
  static const int CMsgClientUpdateMachineAuth_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateMachineAuth, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateMachineAuth, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateMachineAuth, cubtowrite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateMachineAuth, bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateMachineAuth, otp_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateMachineAuth, otp_identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateMachineAuth, otp_sharedsecret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateMachineAuth, otp_timedrift_),
  };
  CMsgClientUpdateMachineAuth_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientUpdateMachineAuth_descriptor_,
      CMsgClientUpdateMachineAuth::default_instance_,
      CMsgClientUpdateMachineAuth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateMachineAuth, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateMachineAuth, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientUpdateMachineAuth));
  CMsgClientUpdateMachineAuthResponse_descriptor_ = file->message_type(9);
  static const int CMsgClientUpdateMachineAuthResponse_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateMachineAuthResponse, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateMachineAuthResponse, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateMachineAuthResponse, filesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateMachineAuthResponse, sha_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateMachineAuthResponse, getlasterror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateMachineAuthResponse, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateMachineAuthResponse, cubwrote_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateMachineAuthResponse, otp_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateMachineAuthResponse, otp_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateMachineAuthResponse, otp_identifier_),
  };
  CMsgClientUpdateMachineAuthResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientUpdateMachineAuthResponse_descriptor_,
      CMsgClientUpdateMachineAuthResponse::default_instance_,
      CMsgClientUpdateMachineAuthResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateMachineAuthResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateMachineAuthResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientUpdateMachineAuthResponse));
  CMsgClientRequestMachineAuth_descriptor_ = file->message_type(10);
  static const int CMsgClientRequestMachineAuth_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestMachineAuth, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestMachineAuth, eresult_sentryfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestMachineAuth, filesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestMachineAuth, sha_sentryfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestMachineAuth, lock_account_action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestMachineAuth, otp_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestMachineAuth, otp_identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestMachineAuth, otp_sharedsecret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestMachineAuth, otp_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestMachineAuth, machine_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestMachineAuth, machine_name_userchosen_),
  };
  CMsgClientRequestMachineAuth_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientRequestMachineAuth_descriptor_,
      CMsgClientRequestMachineAuth::default_instance_,
      CMsgClientRequestMachineAuth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestMachineAuth, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestMachineAuth, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientRequestMachineAuth));
  CMsgClientRequestMachineAuthResponse_descriptor_ = file->message_type(11);
  static const int CMsgClientRequestMachineAuthResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestMachineAuthResponse, eresult_),
  };
  CMsgClientRequestMachineAuthResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientRequestMachineAuthResponse_descriptor_,
      CMsgClientRequestMachineAuthResponse::default_instance_,
      CMsgClientRequestMachineAuthResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestMachineAuthResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestMachineAuthResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientRequestMachineAuthResponse));
  CMsgClientRegisterKey_descriptor_ = file->message_type(12);
  static const int CMsgClientRegisterKey_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRegisterKey, key_),
  };
  CMsgClientRegisterKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientRegisterKey_descriptor_,
      CMsgClientRegisterKey::default_instance_,
      CMsgClientRegisterKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRegisterKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRegisterKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientRegisterKey));
  CMsgClientPurchaseResponse_descriptor_ = file->message_type(13);
  static const int CMsgClientPurchaseResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPurchaseResponse, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPurchaseResponse, purchase_result_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPurchaseResponse, purchase_receipt_info_),
  };
  CMsgClientPurchaseResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientPurchaseResponse_descriptor_,
      CMsgClientPurchaseResponse::default_instance_,
      CMsgClientPurchaseResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPurchaseResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPurchaseResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientPurchaseResponse));
  CMsgClientActivateOEMLicense_descriptor_ = file->message_type(14);
  static const int CMsgClientActivateOEMLicense_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientActivateOEMLicense, bios_manufacturer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientActivateOEMLicense, bios_serialnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientActivateOEMLicense, license_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientActivateOEMLicense, mainboard_manufacturer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientActivateOEMLicense, mainboard_product_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientActivateOEMLicense, mainboard_serialnumber_),
  };
  CMsgClientActivateOEMLicense_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientActivateOEMLicense_descriptor_,
      CMsgClientActivateOEMLicense::default_instance_,
      CMsgClientActivateOEMLicense_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientActivateOEMLicense, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientActivateOEMLicense, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientActivateOEMLicense));
  CMsgClientRegisterOEMMachine_descriptor_ = file->message_type(15);
  static const int CMsgClientRegisterOEMMachine_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRegisterOEMMachine, oem_register_file_),
  };
  CMsgClientRegisterOEMMachine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientRegisterOEMMachine_descriptor_,
      CMsgClientRegisterOEMMachine::default_instance_,
      CMsgClientRegisterOEMMachine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRegisterOEMMachine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRegisterOEMMachine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientRegisterOEMMachine));
  CMsgClientRegisterOEMMachineResponse_descriptor_ = file->message_type(16);
  static const int CMsgClientRegisterOEMMachineResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRegisterOEMMachineResponse, eresult_),
  };
  CMsgClientRegisterOEMMachineResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientRegisterOEMMachineResponse_descriptor_,
      CMsgClientRegisterOEMMachineResponse::default_instance_,
      CMsgClientRegisterOEMMachineResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRegisterOEMMachineResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRegisterOEMMachineResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientRegisterOEMMachineResponse));
  CMsgClientPurchaseWithMachineID_descriptor_ = file->message_type(17);
  static const int CMsgClientPurchaseWithMachineID_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPurchaseWithMachineID, package_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPurchaseWithMachineID, machine_info_),
  };
  CMsgClientPurchaseWithMachineID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientPurchaseWithMachineID_descriptor_,
      CMsgClientPurchaseWithMachineID::default_instance_,
      CMsgClientPurchaseWithMachineID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPurchaseWithMachineID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPurchaseWithMachineID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientPurchaseWithMachineID));
  CMsgTrading_InitiateTradeRequest_descriptor_ = file->message_type(18);
  static const int CMsgTrading_InitiateTradeRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTrading_InitiateTradeRequest, trade_request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTrading_InitiateTradeRequest, other_steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTrading_InitiateTradeRequest, other_name_),
  };
  CMsgTrading_InitiateTradeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTrading_InitiateTradeRequest_descriptor_,
      CMsgTrading_InitiateTradeRequest::default_instance_,
      CMsgTrading_InitiateTradeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTrading_InitiateTradeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTrading_InitiateTradeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTrading_InitiateTradeRequest));
  CMsgTrading_InitiateTradeResponse_descriptor_ = file->message_type(19);
  static const int CMsgTrading_InitiateTradeResponse_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTrading_InitiateTradeResponse, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTrading_InitiateTradeResponse, trade_request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTrading_InitiateTradeResponse, other_steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTrading_InitiateTradeResponse, steamguard_required_days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTrading_InitiateTradeResponse, new_device_cooldown_days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTrading_InitiateTradeResponse, default_password_reset_probation_days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTrading_InitiateTradeResponse, password_reset_probation_days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTrading_InitiateTradeResponse, default_email_change_probation_days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTrading_InitiateTradeResponse, email_change_probation_days_),
  };
  CMsgTrading_InitiateTradeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTrading_InitiateTradeResponse_descriptor_,
      CMsgTrading_InitiateTradeResponse::default_instance_,
      CMsgTrading_InitiateTradeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTrading_InitiateTradeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTrading_InitiateTradeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTrading_InitiateTradeResponse));
  CMsgTrading_CancelTradeRequest_descriptor_ = file->message_type(20);
  static const int CMsgTrading_CancelTradeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTrading_CancelTradeRequest, other_steamid_),
  };
  CMsgTrading_CancelTradeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTrading_CancelTradeRequest_descriptor_,
      CMsgTrading_CancelTradeRequest::default_instance_,
      CMsgTrading_CancelTradeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTrading_CancelTradeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTrading_CancelTradeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTrading_CancelTradeRequest));
  CMsgTrading_StartSession_descriptor_ = file->message_type(21);
  static const int CMsgTrading_StartSession_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTrading_StartSession, other_steamid_),
  };
  CMsgTrading_StartSession_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgTrading_StartSession_descriptor_,
      CMsgTrading_StartSession::default_instance_,
      CMsgTrading_StartSession_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTrading_StartSession, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTrading_StartSession, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgTrading_StartSession));
  CMsgClientGetCDNAuthToken_descriptor_ = file->message_type(22);
  static const int CMsgClientGetCDNAuthToken_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetCDNAuthToken, depot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetCDNAuthToken, host_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetCDNAuthToken, app_id_),
  };
  CMsgClientGetCDNAuthToken_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientGetCDNAuthToken_descriptor_,
      CMsgClientGetCDNAuthToken::default_instance_,
      CMsgClientGetCDNAuthToken_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetCDNAuthToken, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetCDNAuthToken, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientGetCDNAuthToken));
  CMsgClientGetDepotDecryptionKey_descriptor_ = file->message_type(23);
  static const int CMsgClientGetDepotDecryptionKey_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetDepotDecryptionKey, depot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetDepotDecryptionKey, app_id_),
  };
  CMsgClientGetDepotDecryptionKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientGetDepotDecryptionKey_descriptor_,
      CMsgClientGetDepotDecryptionKey::default_instance_,
      CMsgClientGetDepotDecryptionKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetDepotDecryptionKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetDepotDecryptionKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientGetDepotDecryptionKey));
  CMsgClientGetDepotDecryptionKeyResponse_descriptor_ = file->message_type(24);
  static const int CMsgClientGetDepotDecryptionKeyResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetDepotDecryptionKeyResponse, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetDepotDecryptionKeyResponse, depot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetDepotDecryptionKeyResponse, depot_encryption_key_),
  };
  CMsgClientGetDepotDecryptionKeyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientGetDepotDecryptionKeyResponse_descriptor_,
      CMsgClientGetDepotDecryptionKeyResponse::default_instance_,
      CMsgClientGetDepotDecryptionKeyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetDepotDecryptionKeyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetDepotDecryptionKeyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientGetDepotDecryptionKeyResponse));
  CMsgClientCheckAppBetaPassword_descriptor_ = file->message_type(25);
  static const int CMsgClientCheckAppBetaPassword_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCheckAppBetaPassword, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCheckAppBetaPassword, betapassword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCheckAppBetaPassword, language_),
  };
  CMsgClientCheckAppBetaPassword_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientCheckAppBetaPassword_descriptor_,
      CMsgClientCheckAppBetaPassword::default_instance_,
      CMsgClientCheckAppBetaPassword_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCheckAppBetaPassword, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCheckAppBetaPassword, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientCheckAppBetaPassword));
  CMsgClientCheckAppBetaPasswordResponse_descriptor_ = file->message_type(26);
  static const int CMsgClientCheckAppBetaPasswordResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCheckAppBetaPasswordResponse, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCheckAppBetaPasswordResponse, betapasswords_),
  };
  CMsgClientCheckAppBetaPasswordResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientCheckAppBetaPasswordResponse_descriptor_,
      CMsgClientCheckAppBetaPasswordResponse::default_instance_,
      CMsgClientCheckAppBetaPasswordResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCheckAppBetaPasswordResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCheckAppBetaPasswordResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientCheckAppBetaPasswordResponse));
  CMsgClientCheckAppBetaPasswordResponse_BetaPassword_descriptor_ = CMsgClientCheckAppBetaPasswordResponse_descriptor_->nested_type(0);
  static const int CMsgClientCheckAppBetaPasswordResponse_BetaPassword_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCheckAppBetaPasswordResponse_BetaPassword, betaname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCheckAppBetaPasswordResponse_BetaPassword, betapassword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCheckAppBetaPasswordResponse_BetaPassword, betadescription_),
  };
  CMsgClientCheckAppBetaPasswordResponse_BetaPassword_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientCheckAppBetaPasswordResponse_BetaPassword_descriptor_,
      CMsgClientCheckAppBetaPasswordResponse_BetaPassword::default_instance_,
      CMsgClientCheckAppBetaPasswordResponse_BetaPassword_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCheckAppBetaPasswordResponse_BetaPassword, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCheckAppBetaPasswordResponse_BetaPassword, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientCheckAppBetaPasswordResponse_BetaPassword));
  CMsgClientUpdateAppJobReport_descriptor_ = file->message_type(27);
  static const int CMsgClientUpdateAppJobReport_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateAppJobReport, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateAppJobReport, depot_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateAppJobReport, app_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateAppJobReport, job_app_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateAppJobReport, error_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateAppJobReport, job_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateAppJobReport, files_validation_failed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateAppJobReport, job_bytes_downloaded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateAppJobReport, job_bytes_staged_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateAppJobReport, bytes_comitted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateAppJobReport, start_app_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateAppJobReport, stats_machine_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateAppJobReport, branch_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateAppJobReport, total_bytes_downloaded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateAppJobReport, total_bytes_staged_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateAppJobReport, total_bytes_restored_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateAppJobReport, is_borrowed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateAppJobReport, is_free_weekend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateAppJobReport, total_bytes_legacy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateAppJobReport, total_bytes_patched_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateAppJobReport, total_bytes_saved_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateAppJobReport, cell_id_),
  };
  CMsgClientUpdateAppJobReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientUpdateAppJobReport_descriptor_,
      CMsgClientUpdateAppJobReport::default_instance_,
      CMsgClientUpdateAppJobReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateAppJobReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUpdateAppJobReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientUpdateAppJobReport));
  CMsgClientDPContentStatsReport_descriptor_ = file->message_type(28);
  static const int CMsgClientDPContentStatsReport_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDPContentStatsReport, stats_machine_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDPContentStatsReport, country_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDPContentStatsReport, os_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDPContentStatsReport, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDPContentStatsReport, num_install_folders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDPContentStatsReport, num_installed_games_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDPContentStatsReport, size_installed_games_),
  };
  CMsgClientDPContentStatsReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientDPContentStatsReport_descriptor_,
      CMsgClientDPContentStatsReport::default_instance_,
      CMsgClientDPContentStatsReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDPContentStatsReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDPContentStatsReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientDPContentStatsReport));
  CMsgClientGetCDNAuthTokenResponse_descriptor_ = file->message_type(29);
  static const int CMsgClientGetCDNAuthTokenResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetCDNAuthTokenResponse, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetCDNAuthTokenResponse, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetCDNAuthTokenResponse, expiration_time_),
  };
  CMsgClientGetCDNAuthTokenResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientGetCDNAuthTokenResponse_descriptor_,
      CMsgClientGetCDNAuthTokenResponse::default_instance_,
      CMsgClientGetCDNAuthTokenResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetCDNAuthTokenResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetCDNAuthTokenResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientGetCDNAuthTokenResponse));
  CMsgDownloadRateStatistics_descriptor_ = file->message_type(30);
  static const int CMsgDownloadRateStatistics_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDownloadRateStatistics, cell_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDownloadRateStatistics, stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDownloadRateStatistics, throttling_kbps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDownloadRateStatistics, steam_realm_),
  };
  CMsgDownloadRateStatistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDownloadRateStatistics_descriptor_,
      CMsgDownloadRateStatistics::default_instance_,
      CMsgDownloadRateStatistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDownloadRateStatistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDownloadRateStatistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDownloadRateStatistics));
  CMsgDownloadRateStatistics_StatsInfo_descriptor_ = CMsgDownloadRateStatistics_descriptor_->nested_type(0);
  static const int CMsgDownloadRateStatistics_StatsInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDownloadRateStatistics_StatsInfo, source_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDownloadRateStatistics_StatsInfo, source_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDownloadRateStatistics_StatsInfo, seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDownloadRateStatistics_StatsInfo, bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDownloadRateStatistics_StatsInfo, host_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDownloadRateStatistics_StatsInfo, microseconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDownloadRateStatistics_StatsInfo, used_ipv6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDownloadRateStatistics_StatsInfo, proxied_),
  };
  CMsgDownloadRateStatistics_StatsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDownloadRateStatistics_StatsInfo_descriptor_,
      CMsgDownloadRateStatistics_StatsInfo::default_instance_,
      CMsgDownloadRateStatistics_StatsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDownloadRateStatistics_StatsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDownloadRateStatistics_StatsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDownloadRateStatistics_StatsInfo));
  CMsgClientRequestAccountData_descriptor_ = file->message_type(31);
  static const int CMsgClientRequestAccountData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestAccountData, account_or_email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestAccountData, action_),
  };
  CMsgClientRequestAccountData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientRequestAccountData_descriptor_,
      CMsgClientRequestAccountData::default_instance_,
      CMsgClientRequestAccountData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestAccountData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestAccountData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientRequestAccountData));
  CMsgClientRequestAccountDataResponse_descriptor_ = file->message_type(32);
  static const int CMsgClientRequestAccountDataResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestAccountDataResponse, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestAccountDataResponse, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestAccountDataResponse, account_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestAccountDataResponse, ct_matches_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestAccountDataResponse, account_name_suggestion1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestAccountDataResponse, account_name_suggestion2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestAccountDataResponse, account_name_suggestion3_),
  };
  CMsgClientRequestAccountDataResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientRequestAccountDataResponse_descriptor_,
      CMsgClientRequestAccountDataResponse::default_instance_,
      CMsgClientRequestAccountDataResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestAccountDataResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestAccountDataResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientRequestAccountDataResponse));
  CMsgClientUGSGetGlobalStats_descriptor_ = file->message_type(33);
  static const int CMsgClientUGSGetGlobalStats_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUGSGetGlobalStats, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUGSGetGlobalStats, history_days_requested_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUGSGetGlobalStats, time_last_requested_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUGSGetGlobalStats, first_day_cached_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUGSGetGlobalStats, days_cached_),
  };
  CMsgClientUGSGetGlobalStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientUGSGetGlobalStats_descriptor_,
      CMsgClientUGSGetGlobalStats::default_instance_,
      CMsgClientUGSGetGlobalStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUGSGetGlobalStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUGSGetGlobalStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientUGSGetGlobalStats));
  CMsgClientUGSGetGlobalStatsResponse_descriptor_ = file->message_type(34);
  static const int CMsgClientUGSGetGlobalStatsResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUGSGetGlobalStatsResponse, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUGSGetGlobalStatsResponse, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUGSGetGlobalStatsResponse, day_current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUGSGetGlobalStatsResponse, days_),
  };
  CMsgClientUGSGetGlobalStatsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientUGSGetGlobalStatsResponse_descriptor_,
      CMsgClientUGSGetGlobalStatsResponse::default_instance_,
      CMsgClientUGSGetGlobalStatsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUGSGetGlobalStatsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUGSGetGlobalStatsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientUGSGetGlobalStatsResponse));
  CMsgClientUGSGetGlobalStatsResponse_Day_descriptor_ = CMsgClientUGSGetGlobalStatsResponse_descriptor_->nested_type(0);
  static const int CMsgClientUGSGetGlobalStatsResponse_Day_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUGSGetGlobalStatsResponse_Day, day_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUGSGetGlobalStatsResponse_Day, stats_),
  };
  CMsgClientUGSGetGlobalStatsResponse_Day_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientUGSGetGlobalStatsResponse_Day_descriptor_,
      CMsgClientUGSGetGlobalStatsResponse_Day::default_instance_,
      CMsgClientUGSGetGlobalStatsResponse_Day_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUGSGetGlobalStatsResponse_Day, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUGSGetGlobalStatsResponse_Day, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientUGSGetGlobalStatsResponse_Day));
  CMsgClientUGSGetGlobalStatsResponse_Day_Stat_descriptor_ = CMsgClientUGSGetGlobalStatsResponse_Day_descriptor_->nested_type(0);
  static const int CMsgClientUGSGetGlobalStatsResponse_Day_Stat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUGSGetGlobalStatsResponse_Day_Stat, stat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUGSGetGlobalStatsResponse_Day_Stat, data_),
  };
  CMsgClientUGSGetGlobalStatsResponse_Day_Stat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientUGSGetGlobalStatsResponse_Day_Stat_descriptor_,
      CMsgClientUGSGetGlobalStatsResponse_Day_Stat::default_instance_,
      CMsgClientUGSGetGlobalStatsResponse_Day_Stat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUGSGetGlobalStatsResponse_Day_Stat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUGSGetGlobalStatsResponse_Day_Stat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientUGSGetGlobalStatsResponse_Day_Stat));
  CMsgClientRedeemGuestPass_descriptor_ = file->message_type(35);
  static const int CMsgClientRedeemGuestPass_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRedeemGuestPass, guest_pass_id_),
  };
  CMsgClientRedeemGuestPass_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientRedeemGuestPass_descriptor_,
      CMsgClientRedeemGuestPass::default_instance_,
      CMsgClientRedeemGuestPass_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRedeemGuestPass, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRedeemGuestPass, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientRedeemGuestPass));
  CMsgClientRedeemGuestPassResponse_descriptor_ = file->message_type(36);
  static const int CMsgClientRedeemGuestPassResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRedeemGuestPassResponse, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRedeemGuestPassResponse, package_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRedeemGuestPassResponse, must_own_appid_),
  };
  CMsgClientRedeemGuestPassResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientRedeemGuestPassResponse_descriptor_,
      CMsgClientRedeemGuestPassResponse::default_instance_,
      CMsgClientRedeemGuestPassResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRedeemGuestPassResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRedeemGuestPassResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientRedeemGuestPassResponse));
  CMsgClientGetClanActivityCounts_descriptor_ = file->message_type(37);
  static const int CMsgClientGetClanActivityCounts_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClanActivityCounts, steamid_clans_),
  };
  CMsgClientGetClanActivityCounts_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientGetClanActivityCounts_descriptor_,
      CMsgClientGetClanActivityCounts::default_instance_,
      CMsgClientGetClanActivityCounts_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClanActivityCounts, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClanActivityCounts, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientGetClanActivityCounts));
  CMsgClientGetClanActivityCountsResponse_descriptor_ = file->message_type(38);
  static const int CMsgClientGetClanActivityCountsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClanActivityCountsResponse, eresult_),
  };
  CMsgClientGetClanActivityCountsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientGetClanActivityCountsResponse_descriptor_,
      CMsgClientGetClanActivityCountsResponse::default_instance_,
      CMsgClientGetClanActivityCountsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClanActivityCountsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetClanActivityCountsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientGetClanActivityCountsResponse));
  CMsgClientOGSReportString_descriptor_ = file->message_type(39);
  static const int CMsgClientOGSReportString_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientOGSReportString, accumulated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientOGSReportString, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientOGSReportString, severity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientOGSReportString, formatter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientOGSReportString, varargs_),
  };
  CMsgClientOGSReportString_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientOGSReportString_descriptor_,
      CMsgClientOGSReportString::default_instance_,
      CMsgClientOGSReportString_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientOGSReportString, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientOGSReportString, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientOGSReportString));
  CMsgClientOGSReportBug_descriptor_ = file->message_type(40);
  static const int CMsgClientOGSReportBug_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientOGSReportBug, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientOGSReportBug, bugtext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientOGSReportBug, screenshot_),
  };
  CMsgClientOGSReportBug_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientOGSReportBug_descriptor_,
      CMsgClientOGSReportBug::default_instance_,
      CMsgClientOGSReportBug_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientOGSReportBug, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientOGSReportBug, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientOGSReportBug));
  CMsgClientSentLogs_descriptor_ = file->message_type(41);
  static const int CMsgClientSentLogs_offsets_[1] = {
  };
  CMsgClientSentLogs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientSentLogs_descriptor_,
      CMsgClientSentLogs::default_instance_,
      CMsgClientSentLogs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSentLogs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSentLogs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientSentLogs));
  CMsgGCClient_descriptor_ = file->message_type(42);
  static const int CMsgGCClient_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClient, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClient, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClient, payload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClient, steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClient, gcname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClient, ip_),
  };
  CMsgGCClient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGCClient_descriptor_,
      CMsgGCClient::default_instance_,
      CMsgGCClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCClient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGCClient));
  CMsgClientRequestFreeLicense_descriptor_ = file->message_type(43);
  static const int CMsgClientRequestFreeLicense_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestFreeLicense, appids_),
  };
  CMsgClientRequestFreeLicense_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientRequestFreeLicense_descriptor_,
      CMsgClientRequestFreeLicense::default_instance_,
      CMsgClientRequestFreeLicense_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestFreeLicense, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestFreeLicense, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientRequestFreeLicense));
  CMsgClientRequestFreeLicenseResponse_descriptor_ = file->message_type(44);
  static const int CMsgClientRequestFreeLicenseResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestFreeLicenseResponse, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestFreeLicenseResponse, granted_packageids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestFreeLicenseResponse, granted_appids_),
  };
  CMsgClientRequestFreeLicenseResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientRequestFreeLicenseResponse_descriptor_,
      CMsgClientRequestFreeLicenseResponse::default_instance_,
      CMsgClientRequestFreeLicenseResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestFreeLicenseResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestFreeLicenseResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientRequestFreeLicenseResponse));
  CMsgDRMDownloadRequestWithCrashData_descriptor_ = file->message_type(45);
  static const int CMsgDRMDownloadRequestWithCrashData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDRMDownloadRequestWithCrashData, download_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDRMDownloadRequestWithCrashData, download_types_known_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDRMDownloadRequestWithCrashData, guid_drm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDRMDownloadRequestWithCrashData, guid_split_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDRMDownloadRequestWithCrashData, guid_merge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDRMDownloadRequestWithCrashData, module_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDRMDownloadRequestWithCrashData, module_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDRMDownloadRequestWithCrashData, crash_data_),
  };
  CMsgDRMDownloadRequestWithCrashData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDRMDownloadRequestWithCrashData_descriptor_,
      CMsgDRMDownloadRequestWithCrashData::default_instance_,
      CMsgDRMDownloadRequestWithCrashData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDRMDownloadRequestWithCrashData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDRMDownloadRequestWithCrashData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDRMDownloadRequestWithCrashData));
  CMsgDRMDownloadResponse_descriptor_ = file->message_type(46);
  static const int CMsgDRMDownloadResponse_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDRMDownloadResponse, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDRMDownloadResponse, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDRMDownloadResponse, blob_download_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDRMDownloadResponse, merge_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDRMDownloadResponse, download_file_dfs_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDRMDownloadResponse, download_file_dfs_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDRMDownloadResponse, download_file_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDRMDownloadResponse, module_path_),
  };
  CMsgDRMDownloadResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDRMDownloadResponse_descriptor_,
      CMsgDRMDownloadResponse::default_instance_,
      CMsgDRMDownloadResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDRMDownloadResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDRMDownloadResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDRMDownloadResponse));
  CMsgDRMFinalResult_descriptor_ = file->message_type(47);
  static const int CMsgDRMFinalResult_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDRMFinalResult, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDRMFinalResult, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDRMFinalResult, blob_download_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDRMFinalResult, error_detail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDRMFinalResult, merge_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDRMFinalResult, download_file_dfs_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDRMFinalResult, download_file_dfs_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDRMFinalResult, download_file_url_),
  };
  CMsgDRMFinalResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDRMFinalResult_descriptor_,
      CMsgDRMFinalResult::default_instance_,
      CMsgDRMFinalResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDRMFinalResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDRMFinalResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDRMFinalResult));
  CMsgClientDPCheckSpecialSurvey_descriptor_ = file->message_type(48);
  static const int CMsgClientDPCheckSpecialSurvey_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDPCheckSpecialSurvey, survey_id_),
  };
  CMsgClientDPCheckSpecialSurvey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientDPCheckSpecialSurvey_descriptor_,
      CMsgClientDPCheckSpecialSurvey::default_instance_,
      CMsgClientDPCheckSpecialSurvey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDPCheckSpecialSurvey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDPCheckSpecialSurvey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientDPCheckSpecialSurvey));
  CMsgClientDPCheckSpecialSurveyResponse_descriptor_ = file->message_type(49);
  static const int CMsgClientDPCheckSpecialSurveyResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDPCheckSpecialSurveyResponse, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDPCheckSpecialSurveyResponse, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDPCheckSpecialSurveyResponse, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDPCheckSpecialSurveyResponse, custom_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDPCheckSpecialSurveyResponse, include_software_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDPCheckSpecialSurveyResponse, token_),
  };
  CMsgClientDPCheckSpecialSurveyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientDPCheckSpecialSurveyResponse_descriptor_,
      CMsgClientDPCheckSpecialSurveyResponse::default_instance_,
      CMsgClientDPCheckSpecialSurveyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDPCheckSpecialSurveyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDPCheckSpecialSurveyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientDPCheckSpecialSurveyResponse));
  CMsgClientDPSendSpecialSurveyResponse_descriptor_ = file->message_type(50);
  static const int CMsgClientDPSendSpecialSurveyResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDPSendSpecialSurveyResponse, survey_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDPSendSpecialSurveyResponse, data_),
  };
  CMsgClientDPSendSpecialSurveyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientDPSendSpecialSurveyResponse_descriptor_,
      CMsgClientDPSendSpecialSurveyResponse::default_instance_,
      CMsgClientDPSendSpecialSurveyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDPSendSpecialSurveyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDPSendSpecialSurveyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientDPSendSpecialSurveyResponse));
  CMsgClientDPSendSpecialSurveyResponseReply_descriptor_ = file->message_type(51);
  static const int CMsgClientDPSendSpecialSurveyResponseReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDPSendSpecialSurveyResponseReply, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDPSendSpecialSurveyResponseReply, token_),
  };
  CMsgClientDPSendSpecialSurveyResponseReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientDPSendSpecialSurveyResponseReply_descriptor_,
      CMsgClientDPSendSpecialSurveyResponseReply::default_instance_,
      CMsgClientDPSendSpecialSurveyResponseReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDPSendSpecialSurveyResponseReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDPSendSpecialSurveyResponseReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientDPSendSpecialSurveyResponseReply));
  CMsgClientRequestForgottenPasswordEmail_descriptor_ = file->message_type(52);
  static const int CMsgClientRequestForgottenPasswordEmail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestForgottenPasswordEmail, account_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestForgottenPasswordEmail, password_tried_),
  };
  CMsgClientRequestForgottenPasswordEmail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientRequestForgottenPasswordEmail_descriptor_,
      CMsgClientRequestForgottenPasswordEmail::default_instance_,
      CMsgClientRequestForgottenPasswordEmail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestForgottenPasswordEmail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestForgottenPasswordEmail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientRequestForgottenPasswordEmail));
  CMsgClientRequestForgottenPasswordEmailResponse_descriptor_ = file->message_type(53);
  static const int CMsgClientRequestForgottenPasswordEmailResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestForgottenPasswordEmailResponse, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestForgottenPasswordEmailResponse, use_secret_question_),
  };
  CMsgClientRequestForgottenPasswordEmailResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientRequestForgottenPasswordEmailResponse_descriptor_,
      CMsgClientRequestForgottenPasswordEmailResponse::default_instance_,
      CMsgClientRequestForgottenPasswordEmailResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestForgottenPasswordEmailResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestForgottenPasswordEmailResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientRequestForgottenPasswordEmailResponse));
  CMsgClientItemAnnouncements_descriptor_ = file->message_type(54);
  static const int CMsgClientItemAnnouncements_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientItemAnnouncements, count_new_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientItemAnnouncements, unseen_items_),
  };
  CMsgClientItemAnnouncements_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientItemAnnouncements_descriptor_,
      CMsgClientItemAnnouncements::default_instance_,
      CMsgClientItemAnnouncements_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientItemAnnouncements, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientItemAnnouncements, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientItemAnnouncements));
  CMsgClientItemAnnouncements_UnseenItem_descriptor_ = CMsgClientItemAnnouncements_descriptor_->nested_type(0);
  static const int CMsgClientItemAnnouncements_UnseenItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientItemAnnouncements_UnseenItem, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientItemAnnouncements_UnseenItem, context_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientItemAnnouncements_UnseenItem, asset_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientItemAnnouncements_UnseenItem, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientItemAnnouncements_UnseenItem, rtime32_gained_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientItemAnnouncements_UnseenItem, source_appid_),
  };
  CMsgClientItemAnnouncements_UnseenItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientItemAnnouncements_UnseenItem_descriptor_,
      CMsgClientItemAnnouncements_UnseenItem::default_instance_,
      CMsgClientItemAnnouncements_UnseenItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientItemAnnouncements_UnseenItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientItemAnnouncements_UnseenItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientItemAnnouncements_UnseenItem));
  CMsgClientRequestItemAnnouncements_descriptor_ = file->message_type(55);
  static const int CMsgClientRequestItemAnnouncements_offsets_[1] = {
  };
  CMsgClientRequestItemAnnouncements_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientRequestItemAnnouncements_descriptor_,
      CMsgClientRequestItemAnnouncements::default_instance_,
      CMsgClientRequestItemAnnouncements_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestItemAnnouncements, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestItemAnnouncements, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientRequestItemAnnouncements));
  CMsgClientUserNotifications_descriptor_ = file->message_type(56);
  static const int CMsgClientUserNotifications_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUserNotifications, notifications_),
  };
  CMsgClientUserNotifications_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientUserNotifications_descriptor_,
      CMsgClientUserNotifications::default_instance_,
      CMsgClientUserNotifications_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUserNotifications, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUserNotifications, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientUserNotifications));
  CMsgClientUserNotifications_Notification_descriptor_ = CMsgClientUserNotifications_descriptor_->nested_type(0);
  static const int CMsgClientUserNotifications_Notification_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUserNotifications_Notification, user_notification_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUserNotifications_Notification, count_),
  };
  CMsgClientUserNotifications_Notification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientUserNotifications_Notification_descriptor_,
      CMsgClientUserNotifications_Notification::default_instance_,
      CMsgClientUserNotifications_Notification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUserNotifications_Notification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUserNotifications_Notification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientUserNotifications_Notification));
  CMsgClientCommentNotifications_descriptor_ = file->message_type(57);
  static const int CMsgClientCommentNotifications_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCommentNotifications, count_new_comments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCommentNotifications, count_new_comments_owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCommentNotifications, count_new_comments_subscriptions_),
  };
  CMsgClientCommentNotifications_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientCommentNotifications_descriptor_,
      CMsgClientCommentNotifications::default_instance_,
      CMsgClientCommentNotifications_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCommentNotifications, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCommentNotifications, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientCommentNotifications));
  CMsgClientRequestCommentNotifications_descriptor_ = file->message_type(58);
  static const int CMsgClientRequestCommentNotifications_offsets_[1] = {
  };
  CMsgClientRequestCommentNotifications_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientRequestCommentNotifications_descriptor_,
      CMsgClientRequestCommentNotifications::default_instance_,
      CMsgClientRequestCommentNotifications_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestCommentNotifications, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestCommentNotifications, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientRequestCommentNotifications));
  CMsgClientOfflineMessageNotification_descriptor_ = file->message_type(59);
  static const int CMsgClientOfflineMessageNotification_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientOfflineMessageNotification, offline_messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientOfflineMessageNotification, friends_with_offline_messages_),
  };
  CMsgClientOfflineMessageNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientOfflineMessageNotification_descriptor_,
      CMsgClientOfflineMessageNotification::default_instance_,
      CMsgClientOfflineMessageNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientOfflineMessageNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientOfflineMessageNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientOfflineMessageNotification));
  CMsgClientRequestOfflineMessageCount_descriptor_ = file->message_type(60);
  static const int CMsgClientRequestOfflineMessageCount_offsets_[1] = {
  };
  CMsgClientRequestOfflineMessageCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientRequestOfflineMessageCount_descriptor_,
      CMsgClientRequestOfflineMessageCount::default_instance_,
      CMsgClientRequestOfflineMessageCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestOfflineMessageCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestOfflineMessageCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientRequestOfflineMessageCount));
  CMsgClientChatGetFriendMessageHistory_descriptor_ = file->message_type(61);
  static const int CMsgClientChatGetFriendMessageHistory_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChatGetFriendMessageHistory, steamid_),
  };
  CMsgClientChatGetFriendMessageHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientChatGetFriendMessageHistory_descriptor_,
      CMsgClientChatGetFriendMessageHistory::default_instance_,
      CMsgClientChatGetFriendMessageHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChatGetFriendMessageHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChatGetFriendMessageHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientChatGetFriendMessageHistory));
  CMsgClientChatGetFriendMessageHistoryResponse_descriptor_ = file->message_type(62);
  static const int CMsgClientChatGetFriendMessageHistoryResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChatGetFriendMessageHistoryResponse, steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChatGetFriendMessageHistoryResponse, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChatGetFriendMessageHistoryResponse, messages_),
  };
  CMsgClientChatGetFriendMessageHistoryResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientChatGetFriendMessageHistoryResponse_descriptor_,
      CMsgClientChatGetFriendMessageHistoryResponse::default_instance_,
      CMsgClientChatGetFriendMessageHistoryResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChatGetFriendMessageHistoryResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChatGetFriendMessageHistoryResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientChatGetFriendMessageHistoryResponse));
  CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage_descriptor_ = CMsgClientChatGetFriendMessageHistoryResponse_descriptor_->nested_type(0);
  static const int CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage, unread_),
  };
  CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage_descriptor_,
      CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::default_instance_,
      CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage));
  CMsgClientChatGetFriendMessageHistoryForOfflineMessages_descriptor_ = file->message_type(63);
  static const int CMsgClientChatGetFriendMessageHistoryForOfflineMessages_offsets_[1] = {
  };
  CMsgClientChatGetFriendMessageHistoryForOfflineMessages_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientChatGetFriendMessageHistoryForOfflineMessages_descriptor_,
      CMsgClientChatGetFriendMessageHistoryForOfflineMessages::default_instance_,
      CMsgClientChatGetFriendMessageHistoryForOfflineMessages_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChatGetFriendMessageHistoryForOfflineMessages, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChatGetFriendMessageHistoryForOfflineMessages, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientChatGetFriendMessageHistoryForOfflineMessages));
  CMsgClientFSGetFriendsSteamLevels_descriptor_ = file->message_type(64);
  static const int CMsgClientFSGetFriendsSteamLevels_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFSGetFriendsSteamLevels, accountids_),
  };
  CMsgClientFSGetFriendsSteamLevels_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientFSGetFriendsSteamLevels_descriptor_,
      CMsgClientFSGetFriendsSteamLevels::default_instance_,
      CMsgClientFSGetFriendsSteamLevels_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFSGetFriendsSteamLevels, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFSGetFriendsSteamLevels, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientFSGetFriendsSteamLevels));
  CMsgClientFSGetFriendsSteamLevelsResponse_descriptor_ = file->message_type(65);
  static const int CMsgClientFSGetFriendsSteamLevelsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFSGetFriendsSteamLevelsResponse, friends_),
  };
  CMsgClientFSGetFriendsSteamLevelsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientFSGetFriendsSteamLevelsResponse_descriptor_,
      CMsgClientFSGetFriendsSteamLevelsResponse::default_instance_,
      CMsgClientFSGetFriendsSteamLevelsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFSGetFriendsSteamLevelsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFSGetFriendsSteamLevelsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientFSGetFriendsSteamLevelsResponse));
  CMsgClientFSGetFriendsSteamLevelsResponse_Friend_descriptor_ = CMsgClientFSGetFriendsSteamLevelsResponse_descriptor_->nested_type(0);
  static const int CMsgClientFSGetFriendsSteamLevelsResponse_Friend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFSGetFriendsSteamLevelsResponse_Friend, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFSGetFriendsSteamLevelsResponse_Friend, level_),
  };
  CMsgClientFSGetFriendsSteamLevelsResponse_Friend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientFSGetFriendsSteamLevelsResponse_Friend_descriptor_,
      CMsgClientFSGetFriendsSteamLevelsResponse_Friend::default_instance_,
      CMsgClientFSGetFriendsSteamLevelsResponse_Friend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFSGetFriendsSteamLevelsResponse_Friend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFSGetFriendsSteamLevelsResponse_Friend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientFSGetFriendsSteamLevelsResponse_Friend));
  CMsgClientEmailAddrInfo_descriptor_ = file->message_type(66);
  static const int CMsgClientEmailAddrInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmailAddrInfo, email_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmailAddrInfo, email_is_validated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmailAddrInfo, email_validation_changed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmailAddrInfo, credential_change_requires_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmailAddrInfo, password_or_secretqa_change_requires_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmailAddrInfo, remind_user_about_email_),
  };
  CMsgClientEmailAddrInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientEmailAddrInfo_descriptor_,
      CMsgClientEmailAddrInfo::default_instance_,
      CMsgClientEmailAddrInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmailAddrInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientEmailAddrInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientEmailAddrInfo));
  CMsgCREItemVoteSummary_descriptor_ = file->message_type(67);
  static const int CMsgCREItemVoteSummary_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCREItemVoteSummary, published_file_ids_),
  };
  CMsgCREItemVoteSummary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgCREItemVoteSummary_descriptor_,
      CMsgCREItemVoteSummary::default_instance_,
      CMsgCREItemVoteSummary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCREItemVoteSummary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCREItemVoteSummary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgCREItemVoteSummary));
  CMsgCREItemVoteSummary_PublishedFileId_descriptor_ = CMsgCREItemVoteSummary_descriptor_->nested_type(0);
  static const int CMsgCREItemVoteSummary_PublishedFileId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCREItemVoteSummary_PublishedFileId, published_file_id_),
  };
  CMsgCREItemVoteSummary_PublishedFileId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgCREItemVoteSummary_PublishedFileId_descriptor_,
      CMsgCREItemVoteSummary_PublishedFileId::default_instance_,
      CMsgCREItemVoteSummary_PublishedFileId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCREItemVoteSummary_PublishedFileId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCREItemVoteSummary_PublishedFileId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgCREItemVoteSummary_PublishedFileId));
  CMsgCREItemVoteSummaryResponse_descriptor_ = file->message_type(68);
  static const int CMsgCREItemVoteSummaryResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCREItemVoteSummaryResponse, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCREItemVoteSummaryResponse, item_vote_summaries_),
  };
  CMsgCREItemVoteSummaryResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgCREItemVoteSummaryResponse_descriptor_,
      CMsgCREItemVoteSummaryResponse::default_instance_,
      CMsgCREItemVoteSummaryResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCREItemVoteSummaryResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCREItemVoteSummaryResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgCREItemVoteSummaryResponse));
  CMsgCREItemVoteSummaryResponse_ItemVoteSummary_descriptor_ = CMsgCREItemVoteSummaryResponse_descriptor_->nested_type(0);
  static const int CMsgCREItemVoteSummaryResponse_ItemVoteSummary_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCREItemVoteSummaryResponse_ItemVoteSummary, published_file_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCREItemVoteSummaryResponse_ItemVoteSummary, votes_for_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCREItemVoteSummaryResponse_ItemVoteSummary, votes_against_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCREItemVoteSummaryResponse_ItemVoteSummary, reports_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCREItemVoteSummaryResponse_ItemVoteSummary, score_),
  };
  CMsgCREItemVoteSummaryResponse_ItemVoteSummary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgCREItemVoteSummaryResponse_ItemVoteSummary_descriptor_,
      CMsgCREItemVoteSummaryResponse_ItemVoteSummary::default_instance_,
      CMsgCREItemVoteSummaryResponse_ItemVoteSummary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCREItemVoteSummaryResponse_ItemVoteSummary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCREItemVoteSummaryResponse_ItemVoteSummary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgCREItemVoteSummaryResponse_ItemVoteSummary));
  CMsgCREUpdateUserPublishedItemVote_descriptor_ = file->message_type(69);
  static const int CMsgCREUpdateUserPublishedItemVote_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCREUpdateUserPublishedItemVote, published_file_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCREUpdateUserPublishedItemVote, vote_up_),
  };
  CMsgCREUpdateUserPublishedItemVote_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgCREUpdateUserPublishedItemVote_descriptor_,
      CMsgCREUpdateUserPublishedItemVote::default_instance_,
      CMsgCREUpdateUserPublishedItemVote_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCREUpdateUserPublishedItemVote, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCREUpdateUserPublishedItemVote, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgCREUpdateUserPublishedItemVote));
  CMsgCREUpdateUserPublishedItemVoteResponse_descriptor_ = file->message_type(70);
  static const int CMsgCREUpdateUserPublishedItemVoteResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCREUpdateUserPublishedItemVoteResponse, eresult_),
  };
  CMsgCREUpdateUserPublishedItemVoteResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgCREUpdateUserPublishedItemVoteResponse_descriptor_,
      CMsgCREUpdateUserPublishedItemVoteResponse::default_instance_,
      CMsgCREUpdateUserPublishedItemVoteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCREUpdateUserPublishedItemVoteResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCREUpdateUserPublishedItemVoteResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgCREUpdateUserPublishedItemVoteResponse));
  CMsgCREGetUserPublishedItemVoteDetails_descriptor_ = file->message_type(71);
  static const int CMsgCREGetUserPublishedItemVoteDetails_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCREGetUserPublishedItemVoteDetails, published_file_ids_),
  };
  CMsgCREGetUserPublishedItemVoteDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgCREGetUserPublishedItemVoteDetails_descriptor_,
      CMsgCREGetUserPublishedItemVoteDetails::default_instance_,
      CMsgCREGetUserPublishedItemVoteDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCREGetUserPublishedItemVoteDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCREGetUserPublishedItemVoteDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgCREGetUserPublishedItemVoteDetails));
  CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId_descriptor_ = CMsgCREGetUserPublishedItemVoteDetails_descriptor_->nested_type(0);
  static const int CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId, published_file_id_),
  };
  CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId_descriptor_,
      CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::default_instance_,
      CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId));
  CMsgCREGetUserPublishedItemVoteDetailsResponse_descriptor_ = file->message_type(72);
  static const int CMsgCREGetUserPublishedItemVoteDetailsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCREGetUserPublishedItemVoteDetailsResponse, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCREGetUserPublishedItemVoteDetailsResponse, user_item_vote_details_),
  };
  CMsgCREGetUserPublishedItemVoteDetailsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgCREGetUserPublishedItemVoteDetailsResponse_descriptor_,
      CMsgCREGetUserPublishedItemVoteDetailsResponse::default_instance_,
      CMsgCREGetUserPublishedItemVoteDetailsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCREGetUserPublishedItemVoteDetailsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCREGetUserPublishedItemVoteDetailsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgCREGetUserPublishedItemVoteDetailsResponse));
  CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail_descriptor_ = CMsgCREGetUserPublishedItemVoteDetailsResponse_descriptor_->nested_type(0);
  static const int CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail, published_file_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail, vote_),
  };
  CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail_descriptor_,
      CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::default_instance_,
      CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail));
  CMsgFSGetFollowerCount_descriptor_ = file->message_type(73);
  static const int CMsgFSGetFollowerCount_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFSGetFollowerCount, steam_id_),
  };
  CMsgFSGetFollowerCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgFSGetFollowerCount_descriptor_,
      CMsgFSGetFollowerCount::default_instance_,
      CMsgFSGetFollowerCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFSGetFollowerCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFSGetFollowerCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgFSGetFollowerCount));
  CMsgFSGetFollowerCountResponse_descriptor_ = file->message_type(74);
  static const int CMsgFSGetFollowerCountResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFSGetFollowerCountResponse, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFSGetFollowerCountResponse, count_),
  };
  CMsgFSGetFollowerCountResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgFSGetFollowerCountResponse_descriptor_,
      CMsgFSGetFollowerCountResponse::default_instance_,
      CMsgFSGetFollowerCountResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFSGetFollowerCountResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFSGetFollowerCountResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgFSGetFollowerCountResponse));
  CMsgFSGetIsFollowing_descriptor_ = file->message_type(75);
  static const int CMsgFSGetIsFollowing_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFSGetIsFollowing, steam_id_),
  };
  CMsgFSGetIsFollowing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgFSGetIsFollowing_descriptor_,
      CMsgFSGetIsFollowing::default_instance_,
      CMsgFSGetIsFollowing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFSGetIsFollowing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFSGetIsFollowing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgFSGetIsFollowing));
  CMsgFSGetIsFollowingResponse_descriptor_ = file->message_type(76);
  static const int CMsgFSGetIsFollowingResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFSGetIsFollowingResponse, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFSGetIsFollowingResponse, is_following_),
  };
  CMsgFSGetIsFollowingResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgFSGetIsFollowingResponse_descriptor_,
      CMsgFSGetIsFollowingResponse::default_instance_,
      CMsgFSGetIsFollowingResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFSGetIsFollowingResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFSGetIsFollowingResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgFSGetIsFollowingResponse));
  CMsgFSEnumerateFollowingList_descriptor_ = file->message_type(77);
  static const int CMsgFSEnumerateFollowingList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFSEnumerateFollowingList, start_index_),
  };
  CMsgFSEnumerateFollowingList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgFSEnumerateFollowingList_descriptor_,
      CMsgFSEnumerateFollowingList::default_instance_,
      CMsgFSEnumerateFollowingList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFSEnumerateFollowingList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFSEnumerateFollowingList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgFSEnumerateFollowingList));
  CMsgFSEnumerateFollowingListResponse_descriptor_ = file->message_type(78);
  static const int CMsgFSEnumerateFollowingListResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFSEnumerateFollowingListResponse, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFSEnumerateFollowingListResponse, total_results_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFSEnumerateFollowingListResponse, steam_ids_),
  };
  CMsgFSEnumerateFollowingListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgFSEnumerateFollowingListResponse_descriptor_,
      CMsgFSEnumerateFollowingListResponse::default_instance_,
      CMsgFSEnumerateFollowingListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFSEnumerateFollowingListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFSEnumerateFollowingListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgFSEnumerateFollowingListResponse));
  CMsgDPGetNumberOfCurrentPlayers_descriptor_ = file->message_type(79);
  static const int CMsgDPGetNumberOfCurrentPlayers_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPGetNumberOfCurrentPlayers, appid_),
  };
  CMsgDPGetNumberOfCurrentPlayers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDPGetNumberOfCurrentPlayers_descriptor_,
      CMsgDPGetNumberOfCurrentPlayers::default_instance_,
      CMsgDPGetNumberOfCurrentPlayers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPGetNumberOfCurrentPlayers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPGetNumberOfCurrentPlayers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDPGetNumberOfCurrentPlayers));
  CMsgDPGetNumberOfCurrentPlayersResponse_descriptor_ = file->message_type(80);
  static const int CMsgDPGetNumberOfCurrentPlayersResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPGetNumberOfCurrentPlayersResponse, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPGetNumberOfCurrentPlayersResponse, player_count_),
  };
  CMsgDPGetNumberOfCurrentPlayersResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgDPGetNumberOfCurrentPlayersResponse_descriptor_,
      CMsgDPGetNumberOfCurrentPlayersResponse::default_instance_,
      CMsgDPGetNumberOfCurrentPlayersResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPGetNumberOfCurrentPlayersResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPGetNumberOfCurrentPlayersResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgDPGetNumberOfCurrentPlayersResponse));
  CMsgClientFriendUserStatusPublished_descriptor_ = file->message_type(81);
  static const int CMsgClientFriendUserStatusPublished_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendUserStatusPublished, friend_steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendUserStatusPublished, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendUserStatusPublished, status_text_),
  };
  CMsgClientFriendUserStatusPublished_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientFriendUserStatusPublished_descriptor_,
      CMsgClientFriendUserStatusPublished::default_instance_,
      CMsgClientFriendUserStatusPublished_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendUserStatusPublished, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientFriendUserStatusPublished, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientFriendUserStatusPublished));
  CMsgClientServiceMethodLegacy_descriptor_ = file->message_type(82);
  static const int CMsgClientServiceMethodLegacy_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceMethodLegacy, method_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceMethodLegacy, serialized_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceMethodLegacy, is_notification_),
  };
  CMsgClientServiceMethodLegacy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientServiceMethodLegacy_descriptor_,
      CMsgClientServiceMethodLegacy::default_instance_,
      CMsgClientServiceMethodLegacy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceMethodLegacy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceMethodLegacy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientServiceMethodLegacy));
  CMsgClientServiceMethodLegacyResponse_descriptor_ = file->message_type(83);
  static const int CMsgClientServiceMethodLegacyResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceMethodLegacyResponse, method_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceMethodLegacyResponse, serialized_method_response_),
  };
  CMsgClientServiceMethodLegacyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientServiceMethodLegacyResponse_descriptor_,
      CMsgClientServiceMethodLegacyResponse::default_instance_,
      CMsgClientServiceMethodLegacyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceMethodLegacyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceMethodLegacyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientServiceMethodLegacyResponse));
  CMsgClientUIMode_descriptor_ = file->message_type(84);
  static const int CMsgClientUIMode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUIMode, uimode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUIMode, chat_mode_),
  };
  CMsgClientUIMode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientUIMode_descriptor_,
      CMsgClientUIMode::default_instance_,
      CMsgClientUIMode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUIMode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUIMode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientUIMode));
  CMsgClientVanityURLChangedNotification_descriptor_ = file->message_type(85);
  static const int CMsgClientVanityURLChangedNotification_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientVanityURLChangedNotification, vanity_url_),
  };
  CMsgClientVanityURLChangedNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientVanityURLChangedNotification_descriptor_,
      CMsgClientVanityURLChangedNotification::default_instance_,
      CMsgClientVanityURLChangedNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientVanityURLChangedNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientVanityURLChangedNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientVanityURLChangedNotification));
  CMsgClientAuthorizeLocalDeviceRequest_descriptor_ = file->message_type(86);
  static const int CMsgClientAuthorizeLocalDeviceRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAuthorizeLocalDeviceRequest, device_description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAuthorizeLocalDeviceRequest, owner_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAuthorizeLocalDeviceRequest, local_device_token_),
  };
  CMsgClientAuthorizeLocalDeviceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientAuthorizeLocalDeviceRequest_descriptor_,
      CMsgClientAuthorizeLocalDeviceRequest::default_instance_,
      CMsgClientAuthorizeLocalDeviceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAuthorizeLocalDeviceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAuthorizeLocalDeviceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientAuthorizeLocalDeviceRequest));
  CMsgClientAuthorizeLocalDevice_descriptor_ = file->message_type(87);
  static const int CMsgClientAuthorizeLocalDevice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAuthorizeLocalDevice, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAuthorizeLocalDevice, owner_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAuthorizeLocalDevice, authed_device_token_),
  };
  CMsgClientAuthorizeLocalDevice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientAuthorizeLocalDevice_descriptor_,
      CMsgClientAuthorizeLocalDevice::default_instance_,
      CMsgClientAuthorizeLocalDevice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAuthorizeLocalDevice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAuthorizeLocalDevice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientAuthorizeLocalDevice));
  CMsgClientAuthorizeLocalDeviceNotification_descriptor_ = file->message_type(88);
  static const int CMsgClientAuthorizeLocalDeviceNotification_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAuthorizeLocalDeviceNotification, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAuthorizeLocalDeviceNotification, owner_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAuthorizeLocalDeviceNotification, local_device_token_),
  };
  CMsgClientAuthorizeLocalDeviceNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientAuthorizeLocalDeviceNotification_descriptor_,
      CMsgClientAuthorizeLocalDeviceNotification::default_instance_,
      CMsgClientAuthorizeLocalDeviceNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAuthorizeLocalDeviceNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAuthorizeLocalDeviceNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientAuthorizeLocalDeviceNotification));
  CMsgClientDeauthorizeDeviceRequest_descriptor_ = file->message_type(89);
  static const int CMsgClientDeauthorizeDeviceRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDeauthorizeDeviceRequest, deauthorization_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDeauthorizeDeviceRequest, deauthorization_device_token_),
  };
  CMsgClientDeauthorizeDeviceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientDeauthorizeDeviceRequest_descriptor_,
      CMsgClientDeauthorizeDeviceRequest::default_instance_,
      CMsgClientDeauthorizeDeviceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDeauthorizeDeviceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDeauthorizeDeviceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientDeauthorizeDeviceRequest));
  CMsgClientDeauthorizeDevice_descriptor_ = file->message_type(90);
  static const int CMsgClientDeauthorizeDevice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDeauthorizeDevice, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDeauthorizeDevice, deauthorization_account_id_),
  };
  CMsgClientDeauthorizeDevice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientDeauthorizeDevice_descriptor_,
      CMsgClientDeauthorizeDevice::default_instance_,
      CMsgClientDeauthorizeDevice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDeauthorizeDevice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDeauthorizeDevice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientDeauthorizeDevice));
  CMsgClientUseLocalDeviceAuthorizations_descriptor_ = file->message_type(91);
  static const int CMsgClientUseLocalDeviceAuthorizations_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUseLocalDeviceAuthorizations, authorization_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUseLocalDeviceAuthorizations, device_tokens_),
  };
  CMsgClientUseLocalDeviceAuthorizations_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientUseLocalDeviceAuthorizations_descriptor_,
      CMsgClientUseLocalDeviceAuthorizations::default_instance_,
      CMsgClientUseLocalDeviceAuthorizations_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUseLocalDeviceAuthorizations, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUseLocalDeviceAuthorizations, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientUseLocalDeviceAuthorizations));
  CMsgClientUseLocalDeviceAuthorizations_DeviceToken_descriptor_ = CMsgClientUseLocalDeviceAuthorizations_descriptor_->nested_type(0);
  static const int CMsgClientUseLocalDeviceAuthorizations_DeviceToken_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUseLocalDeviceAuthorizations_DeviceToken, owner_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUseLocalDeviceAuthorizations_DeviceToken, token_id_),
  };
  CMsgClientUseLocalDeviceAuthorizations_DeviceToken_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientUseLocalDeviceAuthorizations_DeviceToken_descriptor_,
      CMsgClientUseLocalDeviceAuthorizations_DeviceToken::default_instance_,
      CMsgClientUseLocalDeviceAuthorizations_DeviceToken_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUseLocalDeviceAuthorizations_DeviceToken, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientUseLocalDeviceAuthorizations_DeviceToken, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientUseLocalDeviceAuthorizations_DeviceToken));
  CMsgClientGetAuthorizedDevices_descriptor_ = file->message_type(92);
  static const int CMsgClientGetAuthorizedDevices_offsets_[1] = {
  };
  CMsgClientGetAuthorizedDevices_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientGetAuthorizedDevices_descriptor_,
      CMsgClientGetAuthorizedDevices::default_instance_,
      CMsgClientGetAuthorizedDevices_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetAuthorizedDevices, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetAuthorizedDevices, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientGetAuthorizedDevices));
  CMsgClientGetAuthorizedDevicesResponse_descriptor_ = file->message_type(93);
  static const int CMsgClientGetAuthorizedDevicesResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetAuthorizedDevicesResponse, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetAuthorizedDevicesResponse, authorized_device_),
  };
  CMsgClientGetAuthorizedDevicesResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientGetAuthorizedDevicesResponse_descriptor_,
      CMsgClientGetAuthorizedDevicesResponse::default_instance_,
      CMsgClientGetAuthorizedDevicesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetAuthorizedDevicesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetAuthorizedDevicesResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientGetAuthorizedDevicesResponse));
  CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice_descriptor_ = CMsgClientGetAuthorizedDevicesResponse_descriptor_->nested_type(0);
  static const int CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice, auth_device_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice, device_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice, last_access_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice, borrower_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice, is_pending_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice, app_played_),
  };
  CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice_descriptor_,
      CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::default_instance_,
      CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice));
  CMsgClientSharedLibraryLockStatus_descriptor_ = file->message_type(94);
  static const int CMsgClientSharedLibraryLockStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSharedLibraryLockStatus, locked_library_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSharedLibraryLockStatus, own_library_locked_by_),
  };
  CMsgClientSharedLibraryLockStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientSharedLibraryLockStatus_descriptor_,
      CMsgClientSharedLibraryLockStatus::default_instance_,
      CMsgClientSharedLibraryLockStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSharedLibraryLockStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSharedLibraryLockStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientSharedLibraryLockStatus));
  CMsgClientSharedLibraryLockStatus_LockedLibrary_descriptor_ = CMsgClientSharedLibraryLockStatus_descriptor_->nested_type(0);
  static const int CMsgClientSharedLibraryLockStatus_LockedLibrary_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSharedLibraryLockStatus_LockedLibrary, owner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSharedLibraryLockStatus_LockedLibrary, locked_by_),
  };
  CMsgClientSharedLibraryLockStatus_LockedLibrary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientSharedLibraryLockStatus_LockedLibrary_descriptor_,
      CMsgClientSharedLibraryLockStatus_LockedLibrary::default_instance_,
      CMsgClientSharedLibraryLockStatus_LockedLibrary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSharedLibraryLockStatus_LockedLibrary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSharedLibraryLockStatus_LockedLibrary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientSharedLibraryLockStatus_LockedLibrary));
  CMsgClientSharedLibraryStopPlaying_descriptor_ = file->message_type(95);
  static const int CMsgClientSharedLibraryStopPlaying_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSharedLibraryStopPlaying, seconds_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSharedLibraryStopPlaying, stop_apps_),
  };
  CMsgClientSharedLibraryStopPlaying_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientSharedLibraryStopPlaying_descriptor_,
      CMsgClientSharedLibraryStopPlaying::default_instance_,
      CMsgClientSharedLibraryStopPlaying_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSharedLibraryStopPlaying, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSharedLibraryStopPlaying, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientSharedLibraryStopPlaying));
  CMsgClientSharedLibraryStopPlaying_StopApp_descriptor_ = CMsgClientSharedLibraryStopPlaying_descriptor_->nested_type(0);
  static const int CMsgClientSharedLibraryStopPlaying_StopApp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSharedLibraryStopPlaying_StopApp, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSharedLibraryStopPlaying_StopApp, owner_id_),
  };
  CMsgClientSharedLibraryStopPlaying_StopApp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientSharedLibraryStopPlaying_StopApp_descriptor_,
      CMsgClientSharedLibraryStopPlaying_StopApp::default_instance_,
      CMsgClientSharedLibraryStopPlaying_StopApp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSharedLibraryStopPlaying_StopApp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSharedLibraryStopPlaying_StopApp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientSharedLibraryStopPlaying_StopApp));
  CMsgClientServiceCall_descriptor_ = file->message_type(96);
  static const int CMsgClientServiceCall_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceCall, sysid_routing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceCall, call_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceCall, module_crc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceCall, module_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceCall, function_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceCall, cub_output_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceCall, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceCall, callparameter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceCall, ping_only_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceCall, max_outstanding_calls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceCall, app_id_),
  };
  CMsgClientServiceCall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientServiceCall_descriptor_,
      CMsgClientServiceCall::default_instance_,
      CMsgClientServiceCall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceCall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceCall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientServiceCall));
  CMsgClientServiceModule_descriptor_ = file->message_type(97);
  static const int CMsgClientServiceModule_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceModule, module_crc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceModule, module_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceModule, module_content_),
  };
  CMsgClientServiceModule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientServiceModule_descriptor_,
      CMsgClientServiceModule::default_instance_,
      CMsgClientServiceModule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceModule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceModule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientServiceModule));
  CMsgClientServiceCallResponse_descriptor_ = file->message_type(98);
  static const int CMsgClientServiceCallResponse_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceCallResponse, sysid_routing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceCallResponse, call_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceCallResponse, module_crc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceCallResponse, module_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceCallResponse, ecallresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceCallResponse, result_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceCallResponse, os_version_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceCallResponse, system_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceCallResponse, load_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceCallResponse, exception_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceCallResponse, portable_os_version_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceCallResponse, portable_system_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceCallResponse, was_converted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceCallResponse, internal_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceCallResponse, current_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceCallResponse, last_call_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceCallResponse, last_call_module_crc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceCallResponse, last_call_sysid_routing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceCallResponse, last_ecallresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceCallResponse, last_callissue_delta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceCallResponse, last_callcomplete_delta_),
  };
  CMsgClientServiceCallResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientServiceCallResponse_descriptor_,
      CMsgClientServiceCallResponse::default_instance_,
      CMsgClientServiceCallResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceCallResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServiceCallResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientServiceCallResponse));
  CMsgAMUnlockStreaming_descriptor_ = file->message_type(99);
  static const int CMsgAMUnlockStreaming_offsets_[1] = {
  };
  CMsgAMUnlockStreaming_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgAMUnlockStreaming_descriptor_,
      CMsgAMUnlockStreaming::default_instance_,
      CMsgAMUnlockStreaming_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMUnlockStreaming, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMUnlockStreaming, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgAMUnlockStreaming));
  CMsgAMUnlockStreamingResponse_descriptor_ = file->message_type(100);
  static const int CMsgAMUnlockStreamingResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMUnlockStreamingResponse, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMUnlockStreamingResponse, encryption_key_),
  };
  CMsgAMUnlockStreamingResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgAMUnlockStreamingResponse_descriptor_,
      CMsgAMUnlockStreamingResponse::default_instance_,
      CMsgAMUnlockStreamingResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMUnlockStreamingResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMUnlockStreamingResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgAMUnlockStreamingResponse));
  CMsgAMUnlockHEVC_descriptor_ = file->message_type(101);
  static const int CMsgAMUnlockHEVC_offsets_[1] = {
  };
  CMsgAMUnlockHEVC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgAMUnlockHEVC_descriptor_,
      CMsgAMUnlockHEVC::default_instance_,
      CMsgAMUnlockHEVC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMUnlockHEVC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMUnlockHEVC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgAMUnlockHEVC));
  CMsgAMUnlockHEVCResponse_descriptor_ = file->message_type(102);
  static const int CMsgAMUnlockHEVCResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMUnlockHEVCResponse, eresult_),
  };
  CMsgAMUnlockHEVCResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgAMUnlockHEVCResponse_descriptor_,
      CMsgAMUnlockHEVCResponse::default_instance_,
      CMsgAMUnlockHEVCResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMUnlockHEVCResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMUnlockHEVCResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgAMUnlockHEVCResponse));
  CMsgClientPlayingSessionState_descriptor_ = file->message_type(103);
  static const int CMsgClientPlayingSessionState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPlayingSessionState, playing_blocked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPlayingSessionState, playing_app_),
  };
  CMsgClientPlayingSessionState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientPlayingSessionState_descriptor_,
      CMsgClientPlayingSessionState::default_instance_,
      CMsgClientPlayingSessionState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPlayingSessionState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientPlayingSessionState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientPlayingSessionState));
  CMsgClientKickPlayingSession_descriptor_ = file->message_type(104);
  static const int CMsgClientKickPlayingSession_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientKickPlayingSession, only_stop_game_),
  };
  CMsgClientKickPlayingSession_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientKickPlayingSession_descriptor_,
      CMsgClientKickPlayingSession::default_instance_,
      CMsgClientKickPlayingSession_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientKickPlayingSession, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientKickPlayingSession, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientKickPlayingSession));
  CMsgClientVoiceCallPreAuthorize_descriptor_ = file->message_type(105);
  static const int CMsgClientVoiceCallPreAuthorize_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientVoiceCallPreAuthorize, caller_steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientVoiceCallPreAuthorize, receiver_steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientVoiceCallPreAuthorize, caller_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientVoiceCallPreAuthorize, hangup_),
  };
  CMsgClientVoiceCallPreAuthorize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientVoiceCallPreAuthorize_descriptor_,
      CMsgClientVoiceCallPreAuthorize::default_instance_,
      CMsgClientVoiceCallPreAuthorize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientVoiceCallPreAuthorize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientVoiceCallPreAuthorize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientVoiceCallPreAuthorize));
  CMsgClientVoiceCallPreAuthorizeResponse_descriptor_ = file->message_type(106);
  static const int CMsgClientVoiceCallPreAuthorizeResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientVoiceCallPreAuthorizeResponse, caller_steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientVoiceCallPreAuthorizeResponse, receiver_steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientVoiceCallPreAuthorizeResponse, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientVoiceCallPreAuthorizeResponse, caller_id_),
  };
  CMsgClientVoiceCallPreAuthorizeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientVoiceCallPreAuthorizeResponse_descriptor_,
      CMsgClientVoiceCallPreAuthorizeResponse::default_instance_,
      CMsgClientVoiceCallPreAuthorizeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientVoiceCallPreAuthorizeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientVoiceCallPreAuthorizeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientVoiceCallPreAuthorizeResponse));
  CMsgBadgeCraftedNotification_descriptor_ = file->message_type(107);
  static const int CMsgBadgeCraftedNotification_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBadgeCraftedNotification, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBadgeCraftedNotification, badge_level_),
  };
  CMsgBadgeCraftedNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgBadgeCraftedNotification_descriptor_,
      CMsgBadgeCraftedNotification::default_instance_,
      CMsgBadgeCraftedNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBadgeCraftedNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBadgeCraftedNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgBadgeCraftedNotification));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_steammessages_5fclientserver_5f2_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientUpdateUserGameInfo_descriptor_, &CMsgClientUpdateUserGameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientRichPresenceUpload_descriptor_, &CMsgClientRichPresenceUpload::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientRichPresenceRequest_descriptor_, &CMsgClientRichPresenceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientRichPresenceInfo_descriptor_, &CMsgClientRichPresenceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientRichPresenceInfo_RichPresence_descriptor_, &CMsgClientRichPresenceInfo_RichPresence::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientCheckFileSignature_descriptor_, &CMsgClientCheckFileSignature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientCheckFileSignatureResponse_descriptor_, &CMsgClientCheckFileSignatureResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientReadMachineAuth_descriptor_, &CMsgClientReadMachineAuth::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientReadMachineAuthResponse_descriptor_, &CMsgClientReadMachineAuthResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientUpdateMachineAuth_descriptor_, &CMsgClientUpdateMachineAuth::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientUpdateMachineAuthResponse_descriptor_, &CMsgClientUpdateMachineAuthResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientRequestMachineAuth_descriptor_, &CMsgClientRequestMachineAuth::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientRequestMachineAuthResponse_descriptor_, &CMsgClientRequestMachineAuthResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientRegisterKey_descriptor_, &CMsgClientRegisterKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientPurchaseResponse_descriptor_, &CMsgClientPurchaseResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientActivateOEMLicense_descriptor_, &CMsgClientActivateOEMLicense::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientRegisterOEMMachine_descriptor_, &CMsgClientRegisterOEMMachine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientRegisterOEMMachineResponse_descriptor_, &CMsgClientRegisterOEMMachineResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientPurchaseWithMachineID_descriptor_, &CMsgClientPurchaseWithMachineID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTrading_InitiateTradeRequest_descriptor_, &CMsgTrading_InitiateTradeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTrading_InitiateTradeResponse_descriptor_, &CMsgTrading_InitiateTradeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTrading_CancelTradeRequest_descriptor_, &CMsgTrading_CancelTradeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgTrading_StartSession_descriptor_, &CMsgTrading_StartSession::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientGetCDNAuthToken_descriptor_, &CMsgClientGetCDNAuthToken::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientGetDepotDecryptionKey_descriptor_, &CMsgClientGetDepotDecryptionKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientGetDepotDecryptionKeyResponse_descriptor_, &CMsgClientGetDepotDecryptionKeyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientCheckAppBetaPassword_descriptor_, &CMsgClientCheckAppBetaPassword::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientCheckAppBetaPasswordResponse_descriptor_, &CMsgClientCheckAppBetaPasswordResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientCheckAppBetaPasswordResponse_BetaPassword_descriptor_, &CMsgClientCheckAppBetaPasswordResponse_BetaPassword::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientUpdateAppJobReport_descriptor_, &CMsgClientUpdateAppJobReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientDPContentStatsReport_descriptor_, &CMsgClientDPContentStatsReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientGetCDNAuthTokenResponse_descriptor_, &CMsgClientGetCDNAuthTokenResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDownloadRateStatistics_descriptor_, &CMsgDownloadRateStatistics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDownloadRateStatistics_StatsInfo_descriptor_, &CMsgDownloadRateStatistics_StatsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientRequestAccountData_descriptor_, &CMsgClientRequestAccountData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientRequestAccountDataResponse_descriptor_, &CMsgClientRequestAccountDataResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientUGSGetGlobalStats_descriptor_, &CMsgClientUGSGetGlobalStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientUGSGetGlobalStatsResponse_descriptor_, &CMsgClientUGSGetGlobalStatsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientUGSGetGlobalStatsResponse_Day_descriptor_, &CMsgClientUGSGetGlobalStatsResponse_Day::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientUGSGetGlobalStatsResponse_Day_Stat_descriptor_, &CMsgClientUGSGetGlobalStatsResponse_Day_Stat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientRedeemGuestPass_descriptor_, &CMsgClientRedeemGuestPass::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientRedeemGuestPassResponse_descriptor_, &CMsgClientRedeemGuestPassResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientGetClanActivityCounts_descriptor_, &CMsgClientGetClanActivityCounts::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientGetClanActivityCountsResponse_descriptor_, &CMsgClientGetClanActivityCountsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientOGSReportString_descriptor_, &CMsgClientOGSReportString::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientOGSReportBug_descriptor_, &CMsgClientOGSReportBug::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientSentLogs_descriptor_, &CMsgClientSentLogs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGCClient_descriptor_, &CMsgGCClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientRequestFreeLicense_descriptor_, &CMsgClientRequestFreeLicense::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientRequestFreeLicenseResponse_descriptor_, &CMsgClientRequestFreeLicenseResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDRMDownloadRequestWithCrashData_descriptor_, &CMsgDRMDownloadRequestWithCrashData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDRMDownloadResponse_descriptor_, &CMsgDRMDownloadResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDRMFinalResult_descriptor_, &CMsgDRMFinalResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientDPCheckSpecialSurvey_descriptor_, &CMsgClientDPCheckSpecialSurvey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientDPCheckSpecialSurveyResponse_descriptor_, &CMsgClientDPCheckSpecialSurveyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientDPSendSpecialSurveyResponse_descriptor_, &CMsgClientDPSendSpecialSurveyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientDPSendSpecialSurveyResponseReply_descriptor_, &CMsgClientDPSendSpecialSurveyResponseReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientRequestForgottenPasswordEmail_descriptor_, &CMsgClientRequestForgottenPasswordEmail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientRequestForgottenPasswordEmailResponse_descriptor_, &CMsgClientRequestForgottenPasswordEmailResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientItemAnnouncements_descriptor_, &CMsgClientItemAnnouncements::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientItemAnnouncements_UnseenItem_descriptor_, &CMsgClientItemAnnouncements_UnseenItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientRequestItemAnnouncements_descriptor_, &CMsgClientRequestItemAnnouncements::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientUserNotifications_descriptor_, &CMsgClientUserNotifications::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientUserNotifications_Notification_descriptor_, &CMsgClientUserNotifications_Notification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientCommentNotifications_descriptor_, &CMsgClientCommentNotifications::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientRequestCommentNotifications_descriptor_, &CMsgClientRequestCommentNotifications::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientOfflineMessageNotification_descriptor_, &CMsgClientOfflineMessageNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientRequestOfflineMessageCount_descriptor_, &CMsgClientRequestOfflineMessageCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientChatGetFriendMessageHistory_descriptor_, &CMsgClientChatGetFriendMessageHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientChatGetFriendMessageHistoryResponse_descriptor_, &CMsgClientChatGetFriendMessageHistoryResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage_descriptor_, &CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientChatGetFriendMessageHistoryForOfflineMessages_descriptor_, &CMsgClientChatGetFriendMessageHistoryForOfflineMessages::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientFSGetFriendsSteamLevels_descriptor_, &CMsgClientFSGetFriendsSteamLevels::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientFSGetFriendsSteamLevelsResponse_descriptor_, &CMsgClientFSGetFriendsSteamLevelsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientFSGetFriendsSteamLevelsResponse_Friend_descriptor_, &CMsgClientFSGetFriendsSteamLevelsResponse_Friend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientEmailAddrInfo_descriptor_, &CMsgClientEmailAddrInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgCREItemVoteSummary_descriptor_, &CMsgCREItemVoteSummary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgCREItemVoteSummary_PublishedFileId_descriptor_, &CMsgCREItemVoteSummary_PublishedFileId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgCREItemVoteSummaryResponse_descriptor_, &CMsgCREItemVoteSummaryResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgCREItemVoteSummaryResponse_ItemVoteSummary_descriptor_, &CMsgCREItemVoteSummaryResponse_ItemVoteSummary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgCREUpdateUserPublishedItemVote_descriptor_, &CMsgCREUpdateUserPublishedItemVote::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgCREUpdateUserPublishedItemVoteResponse_descriptor_, &CMsgCREUpdateUserPublishedItemVoteResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgCREGetUserPublishedItemVoteDetails_descriptor_, &CMsgCREGetUserPublishedItemVoteDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId_descriptor_, &CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgCREGetUserPublishedItemVoteDetailsResponse_descriptor_, &CMsgCREGetUserPublishedItemVoteDetailsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail_descriptor_, &CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgFSGetFollowerCount_descriptor_, &CMsgFSGetFollowerCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgFSGetFollowerCountResponse_descriptor_, &CMsgFSGetFollowerCountResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgFSGetIsFollowing_descriptor_, &CMsgFSGetIsFollowing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgFSGetIsFollowingResponse_descriptor_, &CMsgFSGetIsFollowingResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgFSEnumerateFollowingList_descriptor_, &CMsgFSEnumerateFollowingList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgFSEnumerateFollowingListResponse_descriptor_, &CMsgFSEnumerateFollowingListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDPGetNumberOfCurrentPlayers_descriptor_, &CMsgDPGetNumberOfCurrentPlayers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgDPGetNumberOfCurrentPlayersResponse_descriptor_, &CMsgDPGetNumberOfCurrentPlayersResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientFriendUserStatusPublished_descriptor_, &CMsgClientFriendUserStatusPublished::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientServiceMethodLegacy_descriptor_, &CMsgClientServiceMethodLegacy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientServiceMethodLegacyResponse_descriptor_, &CMsgClientServiceMethodLegacyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientUIMode_descriptor_, &CMsgClientUIMode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientVanityURLChangedNotification_descriptor_, &CMsgClientVanityURLChangedNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientAuthorizeLocalDeviceRequest_descriptor_, &CMsgClientAuthorizeLocalDeviceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientAuthorizeLocalDevice_descriptor_, &CMsgClientAuthorizeLocalDevice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientAuthorizeLocalDeviceNotification_descriptor_, &CMsgClientAuthorizeLocalDeviceNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientDeauthorizeDeviceRequest_descriptor_, &CMsgClientDeauthorizeDeviceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientDeauthorizeDevice_descriptor_, &CMsgClientDeauthorizeDevice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientUseLocalDeviceAuthorizations_descriptor_, &CMsgClientUseLocalDeviceAuthorizations::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientUseLocalDeviceAuthorizations_DeviceToken_descriptor_, &CMsgClientUseLocalDeviceAuthorizations_DeviceToken::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientGetAuthorizedDevices_descriptor_, &CMsgClientGetAuthorizedDevices::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientGetAuthorizedDevicesResponse_descriptor_, &CMsgClientGetAuthorizedDevicesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice_descriptor_, &CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientSharedLibraryLockStatus_descriptor_, &CMsgClientSharedLibraryLockStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientSharedLibraryLockStatus_LockedLibrary_descriptor_, &CMsgClientSharedLibraryLockStatus_LockedLibrary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientSharedLibraryStopPlaying_descriptor_, &CMsgClientSharedLibraryStopPlaying::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientSharedLibraryStopPlaying_StopApp_descriptor_, &CMsgClientSharedLibraryStopPlaying_StopApp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientServiceCall_descriptor_, &CMsgClientServiceCall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientServiceModule_descriptor_, &CMsgClientServiceModule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientServiceCallResponse_descriptor_, &CMsgClientServiceCallResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgAMUnlockStreaming_descriptor_, &CMsgAMUnlockStreaming::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgAMUnlockStreamingResponse_descriptor_, &CMsgAMUnlockStreamingResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgAMUnlockHEVC_descriptor_, &CMsgAMUnlockHEVC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgAMUnlockHEVCResponse_descriptor_, &CMsgAMUnlockHEVCResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientPlayingSessionState_descriptor_, &CMsgClientPlayingSessionState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientKickPlayingSession_descriptor_, &CMsgClientKickPlayingSession::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientVoiceCallPreAuthorize_descriptor_, &CMsgClientVoiceCallPreAuthorize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientVoiceCallPreAuthorizeResponse_descriptor_, &CMsgClientVoiceCallPreAuthorizeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgBadgeCraftedNotification_descriptor_, &CMsgBadgeCraftedNotification::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_steammessages_5fclientserver_5f2_2eproto() {
  delete CMsgClientUpdateUserGameInfo::default_instance_;
  delete CMsgClientUpdateUserGameInfo_reflection_;
  delete CMsgClientRichPresenceUpload::default_instance_;
  delete CMsgClientRichPresenceUpload_reflection_;
  delete CMsgClientRichPresenceRequest::default_instance_;
  delete CMsgClientRichPresenceRequest_reflection_;
  delete CMsgClientRichPresenceInfo::default_instance_;
  delete CMsgClientRichPresenceInfo_reflection_;
  delete CMsgClientRichPresenceInfo_RichPresence::default_instance_;
  delete CMsgClientRichPresenceInfo_RichPresence_reflection_;
  delete CMsgClientCheckFileSignature::default_instance_;
  delete CMsgClientCheckFileSignature_reflection_;
  delete CMsgClientCheckFileSignatureResponse::default_instance_;
  delete CMsgClientCheckFileSignatureResponse_reflection_;
  delete CMsgClientReadMachineAuth::default_instance_;
  delete CMsgClientReadMachineAuth_reflection_;
  delete CMsgClientReadMachineAuthResponse::default_instance_;
  delete CMsgClientReadMachineAuthResponse_reflection_;
  delete CMsgClientUpdateMachineAuth::default_instance_;
  delete CMsgClientUpdateMachineAuth_reflection_;
  delete CMsgClientUpdateMachineAuthResponse::default_instance_;
  delete CMsgClientUpdateMachineAuthResponse_reflection_;
  delete CMsgClientRequestMachineAuth::default_instance_;
  delete CMsgClientRequestMachineAuth_reflection_;
  delete CMsgClientRequestMachineAuthResponse::default_instance_;
  delete CMsgClientRequestMachineAuthResponse_reflection_;
  delete CMsgClientRegisterKey::default_instance_;
  delete CMsgClientRegisterKey_reflection_;
  delete CMsgClientPurchaseResponse::default_instance_;
  delete CMsgClientPurchaseResponse_reflection_;
  delete CMsgClientActivateOEMLicense::default_instance_;
  delete CMsgClientActivateOEMLicense_reflection_;
  delete CMsgClientRegisterOEMMachine::default_instance_;
  delete CMsgClientRegisterOEMMachine_reflection_;
  delete CMsgClientRegisterOEMMachineResponse::default_instance_;
  delete CMsgClientRegisterOEMMachineResponse_reflection_;
  delete CMsgClientPurchaseWithMachineID::default_instance_;
  delete CMsgClientPurchaseWithMachineID_reflection_;
  delete CMsgTrading_InitiateTradeRequest::default_instance_;
  delete CMsgTrading_InitiateTradeRequest_reflection_;
  delete CMsgTrading_InitiateTradeResponse::default_instance_;
  delete CMsgTrading_InitiateTradeResponse_reflection_;
  delete CMsgTrading_CancelTradeRequest::default_instance_;
  delete CMsgTrading_CancelTradeRequest_reflection_;
  delete CMsgTrading_StartSession::default_instance_;
  delete CMsgTrading_StartSession_reflection_;
  delete CMsgClientGetCDNAuthToken::default_instance_;
  delete CMsgClientGetCDNAuthToken_reflection_;
  delete CMsgClientGetDepotDecryptionKey::default_instance_;
  delete CMsgClientGetDepotDecryptionKey_reflection_;
  delete CMsgClientGetDepotDecryptionKeyResponse::default_instance_;
  delete CMsgClientGetDepotDecryptionKeyResponse_reflection_;
  delete CMsgClientCheckAppBetaPassword::default_instance_;
  delete CMsgClientCheckAppBetaPassword_reflection_;
  delete CMsgClientCheckAppBetaPasswordResponse::default_instance_;
  delete CMsgClientCheckAppBetaPasswordResponse_reflection_;
  delete CMsgClientCheckAppBetaPasswordResponse_BetaPassword::default_instance_;
  delete CMsgClientCheckAppBetaPasswordResponse_BetaPassword_reflection_;
  delete CMsgClientUpdateAppJobReport::default_instance_;
  delete CMsgClientUpdateAppJobReport_reflection_;
  delete CMsgClientDPContentStatsReport::default_instance_;
  delete CMsgClientDPContentStatsReport_reflection_;
  delete CMsgClientGetCDNAuthTokenResponse::default_instance_;
  delete CMsgClientGetCDNAuthTokenResponse_reflection_;
  delete CMsgDownloadRateStatistics::default_instance_;
  delete CMsgDownloadRateStatistics_reflection_;
  delete CMsgDownloadRateStatistics_StatsInfo::default_instance_;
  delete CMsgDownloadRateStatistics_StatsInfo_reflection_;
  delete CMsgClientRequestAccountData::default_instance_;
  delete CMsgClientRequestAccountData_reflection_;
  delete CMsgClientRequestAccountDataResponse::default_instance_;
  delete CMsgClientRequestAccountDataResponse_reflection_;
  delete CMsgClientUGSGetGlobalStats::default_instance_;
  delete CMsgClientUGSGetGlobalStats_reflection_;
  delete CMsgClientUGSGetGlobalStatsResponse::default_instance_;
  delete CMsgClientUGSGetGlobalStatsResponse_reflection_;
  delete CMsgClientUGSGetGlobalStatsResponse_Day::default_instance_;
  delete CMsgClientUGSGetGlobalStatsResponse_Day_reflection_;
  delete CMsgClientUGSGetGlobalStatsResponse_Day_Stat::default_instance_;
  delete CMsgClientUGSGetGlobalStatsResponse_Day_Stat_reflection_;
  delete CMsgClientRedeemGuestPass::default_instance_;
  delete CMsgClientRedeemGuestPass_reflection_;
  delete CMsgClientRedeemGuestPassResponse::default_instance_;
  delete CMsgClientRedeemGuestPassResponse_reflection_;
  delete CMsgClientGetClanActivityCounts::default_instance_;
  delete CMsgClientGetClanActivityCounts_reflection_;
  delete CMsgClientGetClanActivityCountsResponse::default_instance_;
  delete CMsgClientGetClanActivityCountsResponse_reflection_;
  delete CMsgClientOGSReportString::default_instance_;
  delete CMsgClientOGSReportString_reflection_;
  delete CMsgClientOGSReportBug::default_instance_;
  delete CMsgClientOGSReportBug_reflection_;
  delete CMsgClientSentLogs::default_instance_;
  delete CMsgClientSentLogs_reflection_;
  delete CMsgGCClient::default_instance_;
  delete CMsgGCClient_reflection_;
  delete CMsgClientRequestFreeLicense::default_instance_;
  delete CMsgClientRequestFreeLicense_reflection_;
  delete CMsgClientRequestFreeLicenseResponse::default_instance_;
  delete CMsgClientRequestFreeLicenseResponse_reflection_;
  delete CMsgDRMDownloadRequestWithCrashData::default_instance_;
  delete CMsgDRMDownloadRequestWithCrashData_reflection_;
  delete CMsgDRMDownloadResponse::default_instance_;
  delete CMsgDRMDownloadResponse_reflection_;
  delete CMsgDRMFinalResult::default_instance_;
  delete CMsgDRMFinalResult_reflection_;
  delete CMsgClientDPCheckSpecialSurvey::default_instance_;
  delete CMsgClientDPCheckSpecialSurvey_reflection_;
  delete CMsgClientDPCheckSpecialSurveyResponse::default_instance_;
  delete CMsgClientDPCheckSpecialSurveyResponse_reflection_;
  delete CMsgClientDPSendSpecialSurveyResponse::default_instance_;
  delete CMsgClientDPSendSpecialSurveyResponse_reflection_;
  delete CMsgClientDPSendSpecialSurveyResponseReply::default_instance_;
  delete CMsgClientDPSendSpecialSurveyResponseReply_reflection_;
  delete CMsgClientRequestForgottenPasswordEmail::default_instance_;
  delete CMsgClientRequestForgottenPasswordEmail_reflection_;
  delete CMsgClientRequestForgottenPasswordEmailResponse::default_instance_;
  delete CMsgClientRequestForgottenPasswordEmailResponse_reflection_;
  delete CMsgClientItemAnnouncements::default_instance_;
  delete CMsgClientItemAnnouncements_reflection_;
  delete CMsgClientItemAnnouncements_UnseenItem::default_instance_;
  delete CMsgClientItemAnnouncements_UnseenItem_reflection_;
  delete CMsgClientRequestItemAnnouncements::default_instance_;
  delete CMsgClientRequestItemAnnouncements_reflection_;
  delete CMsgClientUserNotifications::default_instance_;
  delete CMsgClientUserNotifications_reflection_;
  delete CMsgClientUserNotifications_Notification::default_instance_;
  delete CMsgClientUserNotifications_Notification_reflection_;
  delete CMsgClientCommentNotifications::default_instance_;
  delete CMsgClientCommentNotifications_reflection_;
  delete CMsgClientRequestCommentNotifications::default_instance_;
  delete CMsgClientRequestCommentNotifications_reflection_;
  delete CMsgClientOfflineMessageNotification::default_instance_;
  delete CMsgClientOfflineMessageNotification_reflection_;
  delete CMsgClientRequestOfflineMessageCount::default_instance_;
  delete CMsgClientRequestOfflineMessageCount_reflection_;
  delete CMsgClientChatGetFriendMessageHistory::default_instance_;
  delete CMsgClientChatGetFriendMessageHistory_reflection_;
  delete CMsgClientChatGetFriendMessageHistoryResponse::default_instance_;
  delete CMsgClientChatGetFriendMessageHistoryResponse_reflection_;
  delete CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::default_instance_;
  delete CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage_reflection_;
  delete CMsgClientChatGetFriendMessageHistoryForOfflineMessages::default_instance_;
  delete CMsgClientChatGetFriendMessageHistoryForOfflineMessages_reflection_;
  delete CMsgClientFSGetFriendsSteamLevels::default_instance_;
  delete CMsgClientFSGetFriendsSteamLevels_reflection_;
  delete CMsgClientFSGetFriendsSteamLevelsResponse::default_instance_;
  delete CMsgClientFSGetFriendsSteamLevelsResponse_reflection_;
  delete CMsgClientFSGetFriendsSteamLevelsResponse_Friend::default_instance_;
  delete CMsgClientFSGetFriendsSteamLevelsResponse_Friend_reflection_;
  delete CMsgClientEmailAddrInfo::default_instance_;
  delete CMsgClientEmailAddrInfo_reflection_;
  delete CMsgCREItemVoteSummary::default_instance_;
  delete CMsgCREItemVoteSummary_reflection_;
  delete CMsgCREItemVoteSummary_PublishedFileId::default_instance_;
  delete CMsgCREItemVoteSummary_PublishedFileId_reflection_;
  delete CMsgCREItemVoteSummaryResponse::default_instance_;
  delete CMsgCREItemVoteSummaryResponse_reflection_;
  delete CMsgCREItemVoteSummaryResponse_ItemVoteSummary::default_instance_;
  delete CMsgCREItemVoteSummaryResponse_ItemVoteSummary_reflection_;
  delete CMsgCREUpdateUserPublishedItemVote::default_instance_;
  delete CMsgCREUpdateUserPublishedItemVote_reflection_;
  delete CMsgCREUpdateUserPublishedItemVoteResponse::default_instance_;
  delete CMsgCREUpdateUserPublishedItemVoteResponse_reflection_;
  delete CMsgCREGetUserPublishedItemVoteDetails::default_instance_;
  delete CMsgCREGetUserPublishedItemVoteDetails_reflection_;
  delete CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::default_instance_;
  delete CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId_reflection_;
  delete CMsgCREGetUserPublishedItemVoteDetailsResponse::default_instance_;
  delete CMsgCREGetUserPublishedItemVoteDetailsResponse_reflection_;
  delete CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::default_instance_;
  delete CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail_reflection_;
  delete CMsgFSGetFollowerCount::default_instance_;
  delete CMsgFSGetFollowerCount_reflection_;
  delete CMsgFSGetFollowerCountResponse::default_instance_;
  delete CMsgFSGetFollowerCountResponse_reflection_;
  delete CMsgFSGetIsFollowing::default_instance_;
  delete CMsgFSGetIsFollowing_reflection_;
  delete CMsgFSGetIsFollowingResponse::default_instance_;
  delete CMsgFSGetIsFollowingResponse_reflection_;
  delete CMsgFSEnumerateFollowingList::default_instance_;
  delete CMsgFSEnumerateFollowingList_reflection_;
  delete CMsgFSEnumerateFollowingListResponse::default_instance_;
  delete CMsgFSEnumerateFollowingListResponse_reflection_;
  delete CMsgDPGetNumberOfCurrentPlayers::default_instance_;
  delete CMsgDPGetNumberOfCurrentPlayers_reflection_;
  delete CMsgDPGetNumberOfCurrentPlayersResponse::default_instance_;
  delete CMsgDPGetNumberOfCurrentPlayersResponse_reflection_;
  delete CMsgClientFriendUserStatusPublished::default_instance_;
  delete CMsgClientFriendUserStatusPublished_reflection_;
  delete CMsgClientServiceMethodLegacy::default_instance_;
  delete CMsgClientServiceMethodLegacy_reflection_;
  delete CMsgClientServiceMethodLegacyResponse::default_instance_;
  delete CMsgClientServiceMethodLegacyResponse_reflection_;
  delete CMsgClientUIMode::default_instance_;
  delete CMsgClientUIMode_reflection_;
  delete CMsgClientVanityURLChangedNotification::default_instance_;
  delete CMsgClientVanityURLChangedNotification_reflection_;
  delete CMsgClientAuthorizeLocalDeviceRequest::default_instance_;
  delete CMsgClientAuthorizeLocalDeviceRequest_reflection_;
  delete CMsgClientAuthorizeLocalDevice::default_instance_;
  delete CMsgClientAuthorizeLocalDevice_reflection_;
  delete CMsgClientAuthorizeLocalDeviceNotification::default_instance_;
  delete CMsgClientAuthorizeLocalDeviceNotification_reflection_;
  delete CMsgClientDeauthorizeDeviceRequest::default_instance_;
  delete CMsgClientDeauthorizeDeviceRequest_reflection_;
  delete CMsgClientDeauthorizeDevice::default_instance_;
  delete CMsgClientDeauthorizeDevice_reflection_;
  delete CMsgClientUseLocalDeviceAuthorizations::default_instance_;
  delete CMsgClientUseLocalDeviceAuthorizations_reflection_;
  delete CMsgClientUseLocalDeviceAuthorizations_DeviceToken::default_instance_;
  delete CMsgClientUseLocalDeviceAuthorizations_DeviceToken_reflection_;
  delete CMsgClientGetAuthorizedDevices::default_instance_;
  delete CMsgClientGetAuthorizedDevices_reflection_;
  delete CMsgClientGetAuthorizedDevicesResponse::default_instance_;
  delete CMsgClientGetAuthorizedDevicesResponse_reflection_;
  delete CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::default_instance_;
  delete CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice_reflection_;
  delete CMsgClientSharedLibraryLockStatus::default_instance_;
  delete CMsgClientSharedLibraryLockStatus_reflection_;
  delete CMsgClientSharedLibraryLockStatus_LockedLibrary::default_instance_;
  delete CMsgClientSharedLibraryLockStatus_LockedLibrary_reflection_;
  delete CMsgClientSharedLibraryStopPlaying::default_instance_;
  delete CMsgClientSharedLibraryStopPlaying_reflection_;
  delete CMsgClientSharedLibraryStopPlaying_StopApp::default_instance_;
  delete CMsgClientSharedLibraryStopPlaying_StopApp_reflection_;
  delete CMsgClientServiceCall::default_instance_;
  delete CMsgClientServiceCall_reflection_;
  delete CMsgClientServiceModule::default_instance_;
  delete CMsgClientServiceModule_reflection_;
  delete CMsgClientServiceCallResponse::default_instance_;
  delete CMsgClientServiceCallResponse_reflection_;
  delete CMsgAMUnlockStreaming::default_instance_;
  delete CMsgAMUnlockStreaming_reflection_;
  delete CMsgAMUnlockStreamingResponse::default_instance_;
  delete CMsgAMUnlockStreamingResponse_reflection_;
  delete CMsgAMUnlockHEVC::default_instance_;
  delete CMsgAMUnlockHEVC_reflection_;
  delete CMsgAMUnlockHEVCResponse::default_instance_;
  delete CMsgAMUnlockHEVCResponse_reflection_;
  delete CMsgClientPlayingSessionState::default_instance_;
  delete CMsgClientPlayingSessionState_reflection_;
  delete CMsgClientKickPlayingSession::default_instance_;
  delete CMsgClientKickPlayingSession_reflection_;
  delete CMsgClientVoiceCallPreAuthorize::default_instance_;
  delete CMsgClientVoiceCallPreAuthorize_reflection_;
  delete CMsgClientVoiceCallPreAuthorizeResponse::default_instance_;
  delete CMsgClientVoiceCallPreAuthorizeResponse_reflection_;
  delete CMsgBadgeCraftedNotification::default_instance_;
  delete CMsgBadgeCraftedNotification_reflection_;
}

void protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_steammessages_5fbase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"steammessages_clientserver_2.proto\032\030st"
    "eammessages_base.proto\"w\n\034CMsgClientUpda"
    "teUserGameInfo\022\024\n\014steamid_idgs\030\001 \001(\006\022\016\n\006"
    "gameid\030\002 \001(\006\022\017\n\007game_ip\030\003 \001(\r\022\021\n\tgame_po"
    "rt\030\004 \001(\r\022\r\n\005token\030\005 \001(\014\"S\n\034CMsgClientRic"
    "hPresenceUpload\022\030\n\020rich_presence_kv\030\001 \001("
    "\014\022\031\n\021steamid_broadcast\030\002 \003(\006\"8\n\035CMsgClie"
    "ntRichPresenceRequest\022\027\n\017steamid_request"
    "\030\001 \003(\006\"\235\001\n\032CMsgClientRichPresenceInfo\022\?\n"
    "\rrich_presence\030\001 \003(\0132(.CMsgClientRichPre"
    "senceInfo.RichPresence\032>\n\014RichPresence\022\024"
    "\n\014steamid_user\030\001 \001(\006\022\030\n\020rich_presence_kv"
    "\030\002 \001(\014\".\n\034CMsgClientCheckFileSignature\022\016"
    "\n\006app_id\030\001 \001(\r\"\367\001\n$CMsgClientCheckFileSi"
    "gnatureResponse\022\016\n\006app_id\030\001 \001(\r\022\013\n\003pid\030\002"
    " \001(\r\022\017\n\007eresult\030\003 \001(\r\022\020\n\010filename\030\004 \001(\t\022"
    "\030\n\020esignatureresult\030\005 \001(\r\022\020\n\010sha_file\030\006 "
    "\001(\014\022\027\n\017signatureheader\030\007 \001(\014\022\020\n\010filesize"
    "\030\010 \001(\r\022\024\n\014getlasterror\030\t \001(\r\022\"\n\032evalvesi"
    "gnaturecheckdetail\030\n \001(\r\"P\n\031CMsgClientRe"
    "adMachineAuth\022\020\n\010filename\030\001 \001(\t\022\016\n\006offse"
    "t\030\002 \001(\r\022\021\n\tcubtoread\030\003 \001(\r\"\316\001\n!CMsgClien"
    "tReadMachineAuthResponse\022\020\n\010filename\030\001 \001"
    "(\t\022\017\n\007eresult\030\002 \001(\r\022\020\n\010filesize\030\003 \001(\r\022\020\n"
    "\010sha_file\030\004 \001(\014\022\024\n\014getlasterror\030\005 \001(\r\022\016\n"
    "\006offset\030\006 \001(\r\022\017\n\007cubread\030\007 \001(\r\022\022\n\nbytes_"
    "read\030\010 \001(\014\022\027\n\017filename_sentry\030\t \001(\t\"\275\001\n\033"
    "CMsgClientUpdateMachineAuth\022\020\n\010filename\030"
    "\001 \001(\t\022\016\n\006offset\030\002 \001(\r\022\022\n\ncubtowrite\030\003 \001("
    "\r\022\r\n\005bytes\030\004 \001(\014\022\020\n\010otp_type\030\005 \001(\r\022\026\n\016ot"
    "p_identifier\030\006 \001(\t\022\030\n\020otp_sharedsecret\030\007"
    " \001(\014\022\025\n\rotp_timedrift\030\010 \001(\r\"\341\001\n#CMsgClie"
    "ntUpdateMachineAuthResponse\022\020\n\010filename\030"
    "\001 \001(\t\022\017\n\007eresult\030\002 \001(\r\022\020\n\010filesize\030\003 \001(\r"
    "\022\020\n\010sha_file\030\004 \001(\014\022\024\n\014getlasterror\030\005 \001(\r"
    "\022\016\n\006offset\030\006 \001(\r\022\020\n\010cubwrote\030\007 \001(\r\022\020\n\010ot"
    "p_type\030\010 \001(\005\022\021\n\totp_value\030\t \001(\r\022\026\n\016otp_i"
    "dentifier\030\n \001(\t\"\241\002\n\034CMsgClientRequestMac"
    "hineAuth\022\020\n\010filename\030\001 \001(\t\022\032\n\022eresult_se"
    "ntryfile\030\002 \001(\r\022\020\n\010filesize\030\003 \001(\r\022\026\n\016sha_"
    "sentryfile\030\004 \001(\014\022\033\n\023lock_account_action\030"
    "\006 \001(\005\022\020\n\010otp_type\030\007 \001(\r\022\026\n\016otp_identifie"
    "r\030\010 \001(\t\022\030\n\020otp_sharedsecret\030\t \001(\014\022\021\n\totp"
    "_value\030\n \001(\r\022\024\n\014machine_name\030\013 \001(\t\022\037\n\027ma"
    "chine_name_userchosen\030\014 \001(\t\"7\n$CMsgClien"
    "tRequestMachineAuthResponse\022\017\n\007eresult\030\001"
    " \001(\r\"$\n\025CMsgClientRegisterKey\022\013\n\003key\030\001 \001"
    "(\t\"p\n\032CMsgClientPurchaseResponse\022\022\n\007eres"
    "ult\030\001 \001(\005:\0012\022\037\n\027purchase_result_details\030"
    "\002 \001(\005\022\035\n\025purchase_receipt_info\030\003 \001(\014\"\305\001\n"
    "\034CMsgClientActivateOEMLicense\022\031\n\021bios_ma"
    "nufacturer\030\001 \001(\t\022\031\n\021bios_serialnumber\030\002 "
    "\001(\t\022\024\n\014license_file\030\003 \001(\014\022\036\n\026mainboard_m"
    "anufacturer\030\004 \001(\t\022\031\n\021mainboard_product\030\005"
    " \001(\t\022\036\n\026mainboard_serialnumber\030\006 \001(\t\"9\n\034"
    "CMsgClientRegisterOEMMachine\022\031\n\021oem_regi"
    "ster_file\030\001 \001(\014\"7\n$CMsgClientRegisterOEM"
    "MachineResponse\022\017\n\007eresult\030\001 \001(\r\"K\n\037CMsg"
    "ClientPurchaseWithMachineID\022\022\n\npackage_i"
    "d\030\001 \001(\r\022\024\n\014machine_info\030\002 \001(\014\"g\n CMsgTra"
    "ding_InitiateTradeRequest\022\030\n\020trade_reque"
    "st_id\030\001 \001(\r\022\025\n\rother_steamid\030\002 \001(\004\022\022\n\not"
    "her_name\030\003 \001(\t\"\322\002\n!CMsgTrading_InitiateT"
    "radeResponse\022\020\n\010response\030\001 \001(\r\022\030\n\020trade_"
    "request_id\030\002 \001(\r\022\025\n\rother_steamid\030\003 \001(\004\022"
    " \n\030steamguard_required_days\030\004 \001(\r\022 \n\030new"
    "_device_cooldown_days\030\005 \001(\r\022-\n%default_p"
    "assword_reset_probation_days\030\006 \001(\r\022%\n\035pa"
    "ssword_reset_probation_days\030\007 \001(\r\022+\n#def"
    "ault_email_change_probation_days\030\010 \001(\r\022#"
    "\n\033email_change_probation_days\030\t \001(\r\"7\n\036C"
    "MsgTrading_CancelTradeRequest\022\025\n\rother_s"
    "teamid\030\001 \001(\004\"1\n\030CMsgTrading_StartSession"
    "\022\025\n\rother_steamid\030\001 \001(\004\"P\n\031CMsgClientGet"
    "CDNAuthToken\022\020\n\010depot_id\030\001 \001(\r\022\021\n\thost_n"
    "ame\030\002 \001(\t\022\016\n\006app_id\030\003 \001(\r\"C\n\037CMsgClientG"
    "etDepotDecryptionKey\022\020\n\010depot_id\030\001 \001(\r\022\016"
    "\n\006app_id\030\002 \001(\r\"m\n\'CMsgClientGetDepotDecr"
    "yptionKeyResponse\022\022\n\007eresult\030\001 \001(\005:\0012\022\020\n"
    "\010depot_id\030\002 \001(\r\022\034\n\024depot_encryption_key\030"
    "\003 \001(\014\"X\n\036CMsgClientCheckAppBetaPassword\022"
    "\016\n\006app_id\030\001 \001(\r\022\024\n\014betapassword\030\002 \001(\t\022\020\n"
    "\010language\030\003 \001(\005\"\332\001\n&CMsgClientCheckAppBe"
    "taPasswordResponse\022\022\n\007eresult\030\001 \001(\005:\0012\022K"
    "\n\rbetapasswords\030\004 \003(\01324.CMsgClientCheckA"
    "ppBetaPasswordResponse.BetaPassword\032O\n\014B"
    "etaPassword\022\020\n\010betaname\030\001 \001(\t\022\024\n\014betapas"
    "sword\030\002 \001(\t\022\027\n\017betadescription\030\003 \001(\t\"\276\004\n"
    "\034CMsgClientUpdateAppJobReport\022\016\n\006app_id\030"
    "\001 \001(\r\022\021\n\tdepot_ids\030\002 \003(\r\022\021\n\tapp_state\030\003 "
    "\001(\r\022\025\n\rjob_app_error\030\004 \001(\r\022\025\n\rerror_deta"
    "ils\030\005 \001(\t\022\024\n\014job_duration\030\006 \001(\r\022\037\n\027files"
    "_validation_failed\030\007 \001(\r\022\034\n\024job_bytes_do"
    "wnloaded\030\010 \001(\004\022\030\n\020job_bytes_staged\030\t \001(\004"
    "\022\026\n\016bytes_comitted\030\n \001(\004\022\027\n\017start_app_st"
    "ate\030\013 \001(\r\022\030\n\020stats_machine_id\030\014 \001(\006\022\023\n\013b"
    "ranch_name\030\r \001(\t\022\036\n\026total_bytes_download"
    "ed\030\016 \001(\004\022\032\n\022total_bytes_staged\030\017 \001(\004\022\034\n\024"
    "total_bytes_restored\030\020 \001(\004\022\023\n\013is_borrowe"
    "d\030\021 \001(\010\022\027\n\017is_free_weekend\030\022 \001(\010\022\032\n\022tota"
    "l_bytes_legacy\030\023 \001(\004\022\033\n\023total_bytes_patc"
    "hed\030\024 \001(\004\022\031\n\021total_bytes_saved\030\025 \001(\004\022\017\n\007"
    "cell_id\030\026 \001(\r\"\313\001\n\036CMsgClientDPContentSta"
    "tsReport\022\030\n\020stats_machine_id\030\001 \001(\006\022\024\n\014co"
    "untry_code\030\002 \001(\t\022\017\n\007os_type\030\003 \001(\005\022\020\n\010lan"
    "guage\030\004 \001(\005\022\033\n\023num_install_folders\030\005 \001(\r"
    "\022\033\n\023num_installed_games\030\006 \001(\r\022\034\n\024size_in"
    "stalled_games\030\007 \001(\004\"_\n!CMsgClientGetCDNA"
    "uthTokenResponse\022\022\n\007eresult\030\001 \001(\r:\0012\022\r\n\005"
    "token\030\002 \001(\t\022\027\n\017expiration_time\030\003 \001(\r\"\264\002\n"
    "\032CMsgDownloadRateStatistics\022\017\n\007cell_id\030\001"
    " \001(\r\0224\n\005stats\030\002 \003(\0132%.CMsgDownloadRateSt"
    "atistics.StatsInfo\022\027\n\017throttling_kbps\030\003 "
    "\001(\r\022\023\n\013steam_realm\030\004 \001(\r\032\240\001\n\tStatsInfo\022\023"
    "\n\013source_type\030\001 \001(\r\022\021\n\tsource_id\030\002 \001(\r\022\017"
    "\n\007seconds\030\003 \001(\r\022\r\n\005bytes\030\004 \001(\004\022\021\n\thost_n"
    "ame\030\005 \001(\t\022\024\n\014microseconds\030\006 \001(\004\022\021\n\tused_"
    "ipv6\030\007 \001(\010\022\017\n\007proxied\030\010 \001(\010\"H\n\034CMsgClien"
    "tRequestAccountData\022\030\n\020account_or_email\030"
    "\001 \001(\t\022\016\n\006action\030\002 \001(\r\"\327\001\n$CMsgClientRequ"
    "estAccountDataResponse\022\016\n\006action\030\001 \001(\r\022\017"
    "\n\007eresult\030\002 \001(\r\022\024\n\014account_name\030\003 \001(\t\022\022\n"
    "\nct_matches\030\004 \001(\r\022 \n\030account_name_sugges"
    "tion1\030\005 \001(\t\022 \n\030account_name_suggestion2\030"
    "\006 \001(\t\022 \n\030account_name_suggestion3\030\007 \001(\t\""
    "\231\001\n\033CMsgClientUGSGetGlobalStats\022\016\n\006gamei"
    "d\030\001 \001(\004\022\036\n\026history_days_requested\030\002 \001(\r\022"
    "\033\n\023time_last_requested\030\003 \001(\007\022\030\n\020first_da"
    "y_cached\030\004 \001(\r\022\023\n\013days_cached\030\005 \001(\r\"\225\002\n#"
    "CMsgClientUGSGetGlobalStatsResponse\022\022\n\007e"
    "result\030\001 \001(\005:\0012\022\021\n\ttimestamp\030\002 \001(\007\022\023\n\013da"
    "y_current\030\003 \001(\005\0226\n\004days\030\004 \003(\0132(.CMsgClie"
    "ntUGSGetGlobalStatsResponse.Day\032z\n\003Day\022\016"
    "\n\006day_id\030\001 \001(\r\022<\n\005stats\030\002 \003(\0132-.CMsgClie"
    "ntUGSGetGlobalStatsResponse.Day.Stat\032%\n\004"
    "Stat\022\017\n\007stat_id\030\001 \001(\005\022\014\n\004data\030\002 \001(\003\"2\n\031C"
    "MsgClientRedeemGuestPass\022\025\n\rguest_pass_i"
    "d\030\001 \001(\006\"c\n!CMsgClientRedeemGuestPassResp"
    "onse\022\022\n\007eresult\030\001 \001(\r:\0012\022\022\n\npackage_id\030\002"
    " \001(\r\022\026\n\016must_own_appid\030\003 \001(\r\"8\n\037CMsgClie"
    "ntGetClanActivityCounts\022\025\n\rsteamid_clans"
    "\030\001 \003(\004\"=\n\'CMsgClientGetClanActivityCount"
    "sResponse\022\022\n\007eresult\030\001 \001(\r:\0012\"y\n\031CMsgCli"
    "entOGSReportString\022\023\n\013accumulated\030\001 \001(\010\022"
    "\021\n\tsessionid\030\002 \001(\004\022\020\n\010severity\030\003 \001(\005\022\021\n\t"
    "formatter\030\004 \001(\t\022\017\n\007varargs\030\005 \001(\014\"P\n\026CMsg"
    "ClientOGSReportBug\022\021\n\tsessionid\030\001 \001(\004\022\017\n"
    "\007bugtext\030\002 \001(\t\022\022\n\nscreenshot\030\003 \001(\014\"\024\n\022CM"
    "sgClientSentLogs\"l\n\014CMsgGCClient\022\r\n\005appi"
    "d\030\001 \001(\r\022\017\n\007msgtype\030\002 \001(\r\022\017\n\007payload\030\003 \001("
    "\014\022\017\n\007steamid\030\004 \001(\006\022\016\n\006gcname\030\005 \001(\t\022\n\n\002ip"
    "\030\006 \001(\r\".\n\034CMsgClientRequestFreeLicense\022\016"
    "\n\006appids\030\002 \003(\r\"n\n$CMsgClientRequestFreeL"
    "icenseResponse\022\022\n\007eresult\030\001 \001(\r:\0012\022\032\n\022gr"
    "anted_packageids\030\002 \003(\r\022\026\n\016granted_appids"
    "\030\003 \003(\r\"\323\001\n#CMsgDRMDownloadRequestWithCra"
    "shData\022\026\n\016download_flags\030\001 \001(\r\022\034\n\024downlo"
    "ad_types_known\030\002 \001(\r\022\020\n\010guid_drm\030\003 \001(\014\022\022"
    "\n\nguid_split\030\004 \001(\014\022\022\n\nguid_merge\030\005 \001(\014\022\023"
    "\n\013module_name\030\006 \001(\t\022\023\n\013module_path\030\007 \001(\t"
    "\022\022\n\ncrash_data\030\010 \001(\014\"\333\001\n\027CMsgDRMDownload"
    "Response\022\022\n\007eresult\030\001 \001(\r:\0012\022\016\n\006app_id\030\002"
    " \001(\r\022\032\n\022blob_download_type\030\003 \001(\r\022\022\n\nmerg"
    "e_guid\030\004 \001(\014\022\034\n\024download_file_dfs_ip\030\005 \001"
    "(\r\022\036\n\026download_file_dfs_port\030\006 \001(\r\022\031\n\021do"
    "wnload_file_url\030\007 \001(\t\022\023\n\013module_path\030\010 \001"
    "(\t\"\327\001\n\022CMsgDRMFinalResult\022\022\n\007eResult\030\001 \001"
    "(\r:\0012\022\016\n\006app_id\030\002 \001(\r\022\032\n\022blob_download_t"
    "ype\030\003 \001(\r\022\024\n\014error_detail\030\004 \001(\r\022\022\n\nmerge"
    "_guid\030\005 \001(\014\022\034\n\024download_file_dfs_ip\030\006 \001("
    "\r\022\036\n\026download_file_dfs_port\030\007 \001(\r\022\031\n\021dow"
    "nload_file_url\030\010 \001(\t\"3\n\036CMsgClientDPChec"
    "kSpecialSurvey\022\021\n\tsurvey_id\030\001 \001(\r\"\226\001\n&CM"
    "sgClientDPCheckSpecialSurveyResponse\022\022\n\007"
    "eResult\030\001 \001(\r:\0012\022\r\n\005state\030\002 \001(\r\022\014\n\004name\030"
    "\003 \001(\t\022\022\n\ncustom_url\030\004 \001(\t\022\030\n\020include_sof"
    "tware\030\005 \001(\010\022\r\n\005token\030\006 \001(\014\"H\n%CMsgClient"
    "DPSendSpecialSurveyResponse\022\021\n\tsurvey_id"
    "\030\001 \001(\r\022\014\n\004data\030\002 \001(\014\"O\n*CMsgClientDPSend"
    "SpecialSurveyResponseReply\022\022\n\007eResult\030\001 "
    "\001(\r:\0012\022\r\n\005token\030\002 \001(\014\"W\n\'CMsgClientReque"
    "stForgottenPasswordEmail\022\024\n\014account_name"
    "\030\001 \001(\t\022\026\n\016password_tried\030\002 \001(\t\"_\n/CMsgCl"
    "ientRequestForgottenPasswordEmailRespons"
    "e\022\017\n\007eResult\030\001 \001(\r\022\033\n\023use_secret_questio"
    "n\030\002 \001(\010\"\366\001\n\033CMsgClientItemAnnouncements\022"
    "\027\n\017count_new_items\030\001 \001(\r\022=\n\014unseen_items"
    "\030\002 \003(\0132\'.CMsgClientItemAnnouncements.Uns"
    "eenItem\032\177\n\nUnseenItem\022\r\n\005appid\030\001 \001(\r\022\022\n\n"
    "context_id\030\002 \001(\004\022\020\n\010asset_id\030\003 \001(\004\022\016\n\006am"
    "ount\030\004 \001(\004\022\026\n\016rtime32_gained\030\005 \001(\007\022\024\n\014so"
    "urce_appid\030\006 \001(\r\"$\n\"CMsgClientRequestIte"
    "mAnnouncements\"\236\001\n\033CMsgClientUserNotific"
    "ations\022@\n\rnotifications\030\001 \003(\0132).CMsgClie"
    "ntUserNotifications.Notification\032=\n\014Noti"
    "fication\022\036\n\026user_notification_type\030\001 \001(\r"
    "\022\r\n\005count\030\002 \001(\r\"\210\001\n\036CMsgClientCommentNot"
    "ifications\022\032\n\022count_new_comments\030\001 \001(\r\022 "
    "\n\030count_new_comments_owner\030\002 \001(\r\022(\n coun"
    "t_new_comments_subscriptions\030\003 \001(\r\"\'\n%CM"
    "sgClientRequestCommentNotifications\"g\n$C"
    "MsgClientOfflineMessageNotification\022\030\n\020o"
    "ffline_messages\030\001 \001(\r\022%\n\035friends_with_of"
    "fline_messages\030\002 \003(\r\"&\n$CMsgClientReques"
    "tOfflineMessageCount\"8\n%CMsgClientChatGe"
    "tFriendMessageHistory\022\017\n\007steamid\030\001 \001(\006\"\371"
    "\001\n-CMsgClientChatGetFriendMessageHistory"
    "Response\022\017\n\007steamid\030\001 \001(\006\022\017\n\007success\030\002 \001"
    "(\r\022N\n\010messages\030\003 \003(\0132<.CMsgClientChatGet"
    "FriendMessageHistoryResponse.FriendMessa"
    "ge\032V\n\rFriendMessage\022\021\n\taccountid\030\001 \001(\r\022\021"
    "\n\ttimestamp\030\002 \001(\r\022\017\n\007message\030\003 \001(\t\022\016\n\006un"
    "read\030\004 \001(\010\"9\n7CMsgClientChatGetFriendMes"
    "sageHistoryForOfflineMessages\"7\n!CMsgCli"
    "entFSGetFriendsSteamLevels\022\022\n\naccountids"
    "\030\001 \003(\r\"\233\001\n)CMsgClientFSGetFriendsSteamLe"
    "velsResponse\022B\n\007friends\030\001 \003(\01321.CMsgClie"
    "ntFSGetFriendsSteamLevelsResponse.Friend"
    "\032*\n\006Friend\022\021\n\taccountid\030\001 \001(\r\022\r\n\005level\030\002"
    " \001(\r\"\353\001\n\027CMsgClientEmailAddrInfo\022\025\n\remai"
    "l_address\030\001 \001(\t\022\032\n\022email_is_validated\030\002 "
    "\001(\010\022 \n\030email_validation_changed\030\003 \001(\010\022\'\n"
    "\037credential_change_requires_code\030\004 \001(\010\0221"
    "\n)password_or_secretqa_change_requires_c"
    "ode\030\005 \001(\010\022\037\n\027remind_user_about_email\030\006 \001"
    "(\010\"\213\001\n\026CMsgCREItemVoteSummary\022C\n\022publish"
    "ed_file_ids\030\001 \003(\0132\'.CMsgCREItemVoteSumma"
    "ry.PublishedFileId\032,\n\017PublishedFileId\022\031\n"
    "\021published_file_id\030\001 \001(\006\"\372\001\n\036CMsgCREItem"
    "VoteSummaryResponse\022\022\n\007eresult\030\001 \001(\005:\0012\022"
    "L\n\023item_vote_summaries\030\002 \003(\0132/.CMsgCREIt"
    "emVoteSummaryResponse.ItemVoteSummary\032v\n"
    "\017ItemVoteSummary\022\031\n\021published_file_id\030\001 "
    "\001(\006\022\021\n\tvotes_for\030\002 \001(\005\022\025\n\rvotes_against\030"
    "\003 \001(\005\022\017\n\007reports\030\004 \001(\005\022\r\n\005score\030\005 \001(\002\"P\n"
    "\"CMsgCREUpdateUserPublishedItemVote\022\031\n\021p"
    "ublished_file_id\030\001 \001(\006\022\017\n\007vote_up\030\002 \001(\010\""
    "@\n*CMsgCREUpdateUserPublishedItemVoteRes"
    "ponse\022\022\n\007eresult\030\001 \001(\005:\0012\"\253\001\n&CMsgCREGet"
    "UserPublishedItemVoteDetails\022S\n\022publishe"
    "d_file_ids\030\001 \003(\01327.CMsgCREGetUserPublish"
    "edItemVoteDetails.PublishedFileId\032,\n\017Pub"
    "lishedFileId\022\031\n\021published_file_id\030\001 \001(\006\""
    "\352\001\n.CMsgCREGetUserPublishedItemVoteDetai"
    "lsResponse\022\022\n\007eresult\030\001 \001(\005:\0012\022b\n\026user_i"
    "tem_vote_details\030\002 \003(\0132B.CMsgCREGetUserP"
    "ublishedItemVoteDetailsResponse.UserItem"
    "VoteDetail\032@\n\022UserItemVoteDetail\022\031\n\021publ"
    "ished_file_id\030\001 \001(\006\022\017\n\004vote\030\002 \001(\005:\0010\"*\n\026"
    "CMsgFSGetFollowerCount\022\020\n\010steam_id\030\001 \001(\006"
    "\"F\n\036CMsgFSGetFollowerCountResponse\022\022\n\007er"
    "esult\030\001 \001(\005:\0012\022\020\n\005count\030\002 \001(\005:\0010\"(\n\024CMsg"
    "FSGetIsFollowing\022\020\n\010steam_id\030\001 \001(\006\"O\n\034CM"
    "sgFSGetIsFollowingResponse\022\022\n\007eresult\030\001 "
    "\001(\005:\0012\022\033\n\014is_following\030\002 \001(\010:\005false\"3\n\034C"
    "MsgFSEnumerateFollowingList\022\023\n\013start_ind"
    "ex\030\001 \001(\r\"d\n$CMsgFSEnumerateFollowingList"
    "Response\022\022\n\007eresult\030\001 \001(\005:\0012\022\025\n\rtotal_re"
    "sults\030\002 \001(\005\022\021\n\tsteam_ids\030\003 \003(\006\"0\n\037CMsgDP"
    "GetNumberOfCurrentPlayers\022\r\n\005appid\030\001 \001(\r"
    "\"S\n\'CMsgDPGetNumberOfCurrentPlayersRespo"
    "nse\022\022\n\007eresult\030\001 \001(\005:\0012\022\024\n\014player_count\030"
    "\002 \001(\005\"a\n#CMsgClientFriendUserStatusPubli"
    "shed\022\026\n\016friend_steamid\030\001 \001(\006\022\r\n\005appid\030\002 "
    "\001(\r\022\023\n\013status_text\030\003 \001(\t\"h\n\035CMsgClientSe"
    "rviceMethodLegacy\022\023\n\013method_name\030\001 \001(\t\022\031"
    "\n\021serialized_method\030\002 \001(\014\022\027\n\017is_notifica"
    "tion\030\003 \001(\010\"`\n%CMsgClientServiceMethodLeg"
    "acyResponse\022\023\n\013method_name\030\001 \001(\t\022\"\n\032seri"
    "alized_method_response\030\002 \001(\014\"5\n\020CMsgClie"
    "ntUIMode\022\016\n\006uimode\030\001 \001(\r\022\021\n\tchat_mode\030\002 "
    "\001(\r\"<\n&CMsgClientVanityURLChangedNotific"
    "ation\022\022\n\nvanity_url\030\001 \001(\t\"y\n%CMsgClientA"
    "uthorizeLocalDeviceRequest\022\032\n\022device_des"
    "cription\030\001 \001(\t\022\030\n\020owner_account_id\030\002 \001(\r"
    "\022\032\n\022local_device_token\030\003 \001(\004\"k\n\036CMsgClie"
    "ntAuthorizeLocalDevice\022\022\n\007eresult\030\001 \001(\005:"
    "\0012\022\030\n\020owner_account_id\030\002 \001(\r\022\033\n\023authed_d"
    "evice_token\030\003 \001(\004\"v\n*CMsgClientAuthorize"
    "LocalDeviceNotification\022\022\n\007eresult\030\001 \001(\005"
    ":\0012\022\030\n\020owner_account_id\030\002 \001(\r\022\032\n\022local_d"
    "evice_token\030\003 \001(\004\"n\n\"CMsgClientDeauthori"
    "zeDeviceRequest\022\"\n\032deauthorization_accou"
    "nt_id\030\001 \001(\r\022$\n\034deauthorization_device_to"
    "ken\030\002 \001(\004\"U\n\033CMsgClientDeauthorizeDevice"
    "\022\022\n\007eresult\030\001 \001(\005:\0012\022\"\n\032deauthorization_"
    "account_id\030\002 \001(\r\"\321\001\n&CMsgClientUseLocalD"
    "eviceAuthorizations\022 \n\030authorization_acc"
    "ount_id\030\001 \003(\r\022J\n\rdevice_tokens\030\002 \003(\01323.C"
    "MsgClientUseLocalDeviceAuthorizations.De"
    "viceToken\0329\n\013DeviceToken\022\030\n\020owner_accoun"
    "t_id\030\001 \001(\r\022\020\n\010token_id\030\002 \001(\004\" \n\036CMsgClie"
    "ntGetAuthorizedDevices\"\255\002\n&CMsgClientGet"
    "AuthorizedDevicesResponse\022\022\n\007eresult\030\001 \001"
    "(\005:\0012\022S\n\021authorized_device\030\002 \003(\01328.CMsgC"
    "lientGetAuthorizedDevicesResponse.Author"
    "izedDevice\032\231\001\n\020AuthorizedDevice\022\031\n\021auth_"
    "device_token\030\001 \001(\004\022\023\n\013device_name\030\002 \001(\t\022"
    "\030\n\020last_access_time\030\003 \001(\r\022\023\n\013borrower_id"
    "\030\004 \001(\r\022\022\n\nis_pending\030\005 \001(\010\022\022\n\napp_played"
    "\030\006 \001(\r\"\302\001\n!CMsgClientSharedLibraryLockSt"
    "atus\022H\n\016locked_library\030\001 \003(\01320.CMsgClien"
    "tSharedLibraryLockStatus.LockedLibrary\022\035"
    "\n\025own_library_locked_by\030\002 \001(\r\0324\n\rLockedL"
    "ibrary\022\020\n\010owner_id\030\001 \001(\r\022\021\n\tlocked_by\030\002 "
    "\001(\r\"\247\001\n\"CMsgClientSharedLibraryStopPlayi"
    "ng\022\024\n\014seconds_left\030\001 \001(\005\022>\n\tstop_apps\030\002 "
    "\003(\0132+.CMsgClientSharedLibraryStopPlaying"
    ".StopApp\032+\n\007StopApp\022\016\n\006app_id\030\001 \001(\r\022\020\n\010o"
    "wner_id\030\002 \001(\r\"\201\002\n\025CMsgClientServiceCall\022"
    "\025\n\rsysid_routing\030\001 \001(\014\022\023\n\013call_handle\030\002 "
    "\001(\r\022\022\n\nmodule_crc\030\003 \001(\r\022\023\n\013module_hash\030\004"
    " \001(\014\022\023\n\013function_id\030\005 \001(\r\022\026\n\016cub_output_"
    "max\030\006 \001(\r\022\r\n\005flags\030\007 \001(\r\022\025\n\rcallparamete"
    "r\030\010 \001(\014\022\021\n\tping_only\030\t \001(\010\022\035\n\025max_outsta"
    "nding_calls\030\n \001(\r\022\016\n\006app_id\030\013 \001(\r\"Z\n\027CMs"
    "gClientServiceModule\022\022\n\nmodule_crc\030\001 \001(\r"
    "\022\023\n\013module_hash\030\002 \001(\014\022\026\n\016module_content\030"
    "\003 \001(\014\"\270\004\n\035CMsgClientServiceCallResponse\022"
    "\025\n\rsysid_routing\030\001 \001(\014\022\023\n\013call_handle\030\002 "
    "\001(\r\022\022\n\nmodule_crc\030\003 \001(\r\022\023\n\013module_hash\030\004"
    " \001(\014\022\023\n\013ecallresult\030\005 \001(\r\022\026\n\016result_cont"
    "ent\030\006 \001(\014\022\027\n\017os_version_info\030\007 \001(\014\022\023\n\013sy"
    "stem_info\030\010 \001(\014\022\024\n\014load_address\030\t \001(\006\022\030\n"
    "\020exception_record\030\n \001(\014\022 \n\030portable_os_v"
    "ersion_info\030\013 \001(\014\022\034\n\024portable_system_inf"
    "o\030\014 \001(\014\022\025\n\rwas_converted\030\r \001(\010\022\027\n\017intern"
    "al_result\030\016 \001(\r\022\025\n\rcurrent_count\030\017 \001(\r\022\030"
    "\n\020last_call_handle\030\020 \001(\r\022\034\n\024last_call_mo"
    "dule_crc\030\021 \001(\r\022\037\n\027last_call_sysid_routin"
    "g\030\022 \001(\014\022\030\n\020last_ecallresult\030\023 \001(\r\022\034\n\024las"
    "t_callissue_delta\030\024 \001(\r\022\037\n\027last_callcomp"
    "lete_delta\030\025 \001(\r\"\027\n\025CMsgAMUnlockStreamin"
    "g\"K\n\035CMsgAMUnlockStreamingResponse\022\022\n\007er"
    "esult\030\001 \001(\005:\0012\022\026\n\016encryption_key\030\002 \001(\014\"\022"
    "\n\020CMsgAMUnlockHEVC\".\n\030CMsgAMUnlockHEVCRe"
    "sponse\022\022\n\007eresult\030\001 \001(\005:\0012\"M\n\035CMsgClient"
    "PlayingSessionState\022\027\n\017playing_blocked\030\002"
    " \001(\010\022\023\n\013playing_app\030\003 \001(\r\"6\n\034CMsgClientK"
    "ickPlayingSession\022\026\n\016only_stop_game\030\001 \001("
    "\010\"v\n\037CMsgClientVoiceCallPreAuthorize\022\026\n\016"
    "caller_steamid\030\001 \001(\006\022\030\n\020receiver_steamid"
    "\030\002 \001(\006\022\021\n\tcaller_id\030\003 \001(\005\022\016\n\006hangup\030\004 \001("
    "\010\"\202\001\n\'CMsgClientVoiceCallPreAuthorizeRes"
    "ponse\022\026\n\016caller_steamid\030\001 \001(\006\022\030\n\020receive"
    "r_steamid\030\002 \001(\006\022\022\n\007eresult\030\003 \001(\005:\0012\022\021\n\tc"
    "aller_id\030\004 \001(\005\"B\n\034CMsgBadgeCraftedNotifi"
    "cation\022\r\n\005appid\030\001 \001(\r\022\023\n\013badge_level\030\002 \001"
    "(\rB\005H\001\200\001\000", 13929);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_clientserver_2.proto", &protobuf_RegisterTypes);
  CMsgClientUpdateUserGameInfo::default_instance_ = new CMsgClientUpdateUserGameInfo();
  CMsgClientRichPresenceUpload::default_instance_ = new CMsgClientRichPresenceUpload();
  CMsgClientRichPresenceRequest::default_instance_ = new CMsgClientRichPresenceRequest();
  CMsgClientRichPresenceInfo::default_instance_ = new CMsgClientRichPresenceInfo();
  CMsgClientRichPresenceInfo_RichPresence::default_instance_ = new CMsgClientRichPresenceInfo_RichPresence();
  CMsgClientCheckFileSignature::default_instance_ = new CMsgClientCheckFileSignature();
  CMsgClientCheckFileSignatureResponse::default_instance_ = new CMsgClientCheckFileSignatureResponse();
  CMsgClientReadMachineAuth::default_instance_ = new CMsgClientReadMachineAuth();
  CMsgClientReadMachineAuthResponse::default_instance_ = new CMsgClientReadMachineAuthResponse();
  CMsgClientUpdateMachineAuth::default_instance_ = new CMsgClientUpdateMachineAuth();
  CMsgClientUpdateMachineAuthResponse::default_instance_ = new CMsgClientUpdateMachineAuthResponse();
  CMsgClientRequestMachineAuth::default_instance_ = new CMsgClientRequestMachineAuth();
  CMsgClientRequestMachineAuthResponse::default_instance_ = new CMsgClientRequestMachineAuthResponse();
  CMsgClientRegisterKey::default_instance_ = new CMsgClientRegisterKey();
  CMsgClientPurchaseResponse::default_instance_ = new CMsgClientPurchaseResponse();
  CMsgClientActivateOEMLicense::default_instance_ = new CMsgClientActivateOEMLicense();
  CMsgClientRegisterOEMMachine::default_instance_ = new CMsgClientRegisterOEMMachine();
  CMsgClientRegisterOEMMachineResponse::default_instance_ = new CMsgClientRegisterOEMMachineResponse();
  CMsgClientPurchaseWithMachineID::default_instance_ = new CMsgClientPurchaseWithMachineID();
  CMsgTrading_InitiateTradeRequest::default_instance_ = new CMsgTrading_InitiateTradeRequest();
  CMsgTrading_InitiateTradeResponse::default_instance_ = new CMsgTrading_InitiateTradeResponse();
  CMsgTrading_CancelTradeRequest::default_instance_ = new CMsgTrading_CancelTradeRequest();
  CMsgTrading_StartSession::default_instance_ = new CMsgTrading_StartSession();
  CMsgClientGetCDNAuthToken::default_instance_ = new CMsgClientGetCDNAuthToken();
  CMsgClientGetDepotDecryptionKey::default_instance_ = new CMsgClientGetDepotDecryptionKey();
  CMsgClientGetDepotDecryptionKeyResponse::default_instance_ = new CMsgClientGetDepotDecryptionKeyResponse();
  CMsgClientCheckAppBetaPassword::default_instance_ = new CMsgClientCheckAppBetaPassword();
  CMsgClientCheckAppBetaPasswordResponse::default_instance_ = new CMsgClientCheckAppBetaPasswordResponse();
  CMsgClientCheckAppBetaPasswordResponse_BetaPassword::default_instance_ = new CMsgClientCheckAppBetaPasswordResponse_BetaPassword();
  CMsgClientUpdateAppJobReport::default_instance_ = new CMsgClientUpdateAppJobReport();
  CMsgClientDPContentStatsReport::default_instance_ = new CMsgClientDPContentStatsReport();
  CMsgClientGetCDNAuthTokenResponse::default_instance_ = new CMsgClientGetCDNAuthTokenResponse();
  CMsgDownloadRateStatistics::default_instance_ = new CMsgDownloadRateStatistics();
  CMsgDownloadRateStatistics_StatsInfo::default_instance_ = new CMsgDownloadRateStatistics_StatsInfo();
  CMsgClientRequestAccountData::default_instance_ = new CMsgClientRequestAccountData();
  CMsgClientRequestAccountDataResponse::default_instance_ = new CMsgClientRequestAccountDataResponse();
  CMsgClientUGSGetGlobalStats::default_instance_ = new CMsgClientUGSGetGlobalStats();
  CMsgClientUGSGetGlobalStatsResponse::default_instance_ = new CMsgClientUGSGetGlobalStatsResponse();
  CMsgClientUGSGetGlobalStatsResponse_Day::default_instance_ = new CMsgClientUGSGetGlobalStatsResponse_Day();
  CMsgClientUGSGetGlobalStatsResponse_Day_Stat::default_instance_ = new CMsgClientUGSGetGlobalStatsResponse_Day_Stat();
  CMsgClientRedeemGuestPass::default_instance_ = new CMsgClientRedeemGuestPass();
  CMsgClientRedeemGuestPassResponse::default_instance_ = new CMsgClientRedeemGuestPassResponse();
  CMsgClientGetClanActivityCounts::default_instance_ = new CMsgClientGetClanActivityCounts();
  CMsgClientGetClanActivityCountsResponse::default_instance_ = new CMsgClientGetClanActivityCountsResponse();
  CMsgClientOGSReportString::default_instance_ = new CMsgClientOGSReportString();
  CMsgClientOGSReportBug::default_instance_ = new CMsgClientOGSReportBug();
  CMsgClientSentLogs::default_instance_ = new CMsgClientSentLogs();
  CMsgGCClient::default_instance_ = new CMsgGCClient();
  CMsgClientRequestFreeLicense::default_instance_ = new CMsgClientRequestFreeLicense();
  CMsgClientRequestFreeLicenseResponse::default_instance_ = new CMsgClientRequestFreeLicenseResponse();
  CMsgDRMDownloadRequestWithCrashData::default_instance_ = new CMsgDRMDownloadRequestWithCrashData();
  CMsgDRMDownloadResponse::default_instance_ = new CMsgDRMDownloadResponse();
  CMsgDRMFinalResult::default_instance_ = new CMsgDRMFinalResult();
  CMsgClientDPCheckSpecialSurvey::default_instance_ = new CMsgClientDPCheckSpecialSurvey();
  CMsgClientDPCheckSpecialSurveyResponse::default_instance_ = new CMsgClientDPCheckSpecialSurveyResponse();
  CMsgClientDPSendSpecialSurveyResponse::default_instance_ = new CMsgClientDPSendSpecialSurveyResponse();
  CMsgClientDPSendSpecialSurveyResponseReply::default_instance_ = new CMsgClientDPSendSpecialSurveyResponseReply();
  CMsgClientRequestForgottenPasswordEmail::default_instance_ = new CMsgClientRequestForgottenPasswordEmail();
  CMsgClientRequestForgottenPasswordEmailResponse::default_instance_ = new CMsgClientRequestForgottenPasswordEmailResponse();
  CMsgClientItemAnnouncements::default_instance_ = new CMsgClientItemAnnouncements();
  CMsgClientItemAnnouncements_UnseenItem::default_instance_ = new CMsgClientItemAnnouncements_UnseenItem();
  CMsgClientRequestItemAnnouncements::default_instance_ = new CMsgClientRequestItemAnnouncements();
  CMsgClientUserNotifications::default_instance_ = new CMsgClientUserNotifications();
  CMsgClientUserNotifications_Notification::default_instance_ = new CMsgClientUserNotifications_Notification();
  CMsgClientCommentNotifications::default_instance_ = new CMsgClientCommentNotifications();
  CMsgClientRequestCommentNotifications::default_instance_ = new CMsgClientRequestCommentNotifications();
  CMsgClientOfflineMessageNotification::default_instance_ = new CMsgClientOfflineMessageNotification();
  CMsgClientRequestOfflineMessageCount::default_instance_ = new CMsgClientRequestOfflineMessageCount();
  CMsgClientChatGetFriendMessageHistory::default_instance_ = new CMsgClientChatGetFriendMessageHistory();
  CMsgClientChatGetFriendMessageHistoryResponse::default_instance_ = new CMsgClientChatGetFriendMessageHistoryResponse();
  CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::default_instance_ = new CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage();
  CMsgClientChatGetFriendMessageHistoryForOfflineMessages::default_instance_ = new CMsgClientChatGetFriendMessageHistoryForOfflineMessages();
  CMsgClientFSGetFriendsSteamLevels::default_instance_ = new CMsgClientFSGetFriendsSteamLevels();
  CMsgClientFSGetFriendsSteamLevelsResponse::default_instance_ = new CMsgClientFSGetFriendsSteamLevelsResponse();
  CMsgClientFSGetFriendsSteamLevelsResponse_Friend::default_instance_ = new CMsgClientFSGetFriendsSteamLevelsResponse_Friend();
  CMsgClientEmailAddrInfo::default_instance_ = new CMsgClientEmailAddrInfo();
  CMsgCREItemVoteSummary::default_instance_ = new CMsgCREItemVoteSummary();
  CMsgCREItemVoteSummary_PublishedFileId::default_instance_ = new CMsgCREItemVoteSummary_PublishedFileId();
  CMsgCREItemVoteSummaryResponse::default_instance_ = new CMsgCREItemVoteSummaryResponse();
  CMsgCREItemVoteSummaryResponse_ItemVoteSummary::default_instance_ = new CMsgCREItemVoteSummaryResponse_ItemVoteSummary();
  CMsgCREUpdateUserPublishedItemVote::default_instance_ = new CMsgCREUpdateUserPublishedItemVote();
  CMsgCREUpdateUserPublishedItemVoteResponse::default_instance_ = new CMsgCREUpdateUserPublishedItemVoteResponse();
  CMsgCREGetUserPublishedItemVoteDetails::default_instance_ = new CMsgCREGetUserPublishedItemVoteDetails();
  CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::default_instance_ = new CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId();
  CMsgCREGetUserPublishedItemVoteDetailsResponse::default_instance_ = new CMsgCREGetUserPublishedItemVoteDetailsResponse();
  CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::default_instance_ = new CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail();
  CMsgFSGetFollowerCount::default_instance_ = new CMsgFSGetFollowerCount();
  CMsgFSGetFollowerCountResponse::default_instance_ = new CMsgFSGetFollowerCountResponse();
  CMsgFSGetIsFollowing::default_instance_ = new CMsgFSGetIsFollowing();
  CMsgFSGetIsFollowingResponse::default_instance_ = new CMsgFSGetIsFollowingResponse();
  CMsgFSEnumerateFollowingList::default_instance_ = new CMsgFSEnumerateFollowingList();
  CMsgFSEnumerateFollowingListResponse::default_instance_ = new CMsgFSEnumerateFollowingListResponse();
  CMsgDPGetNumberOfCurrentPlayers::default_instance_ = new CMsgDPGetNumberOfCurrentPlayers();
  CMsgDPGetNumberOfCurrentPlayersResponse::default_instance_ = new CMsgDPGetNumberOfCurrentPlayersResponse();
  CMsgClientFriendUserStatusPublished::default_instance_ = new CMsgClientFriendUserStatusPublished();
  CMsgClientServiceMethodLegacy::default_instance_ = new CMsgClientServiceMethodLegacy();
  CMsgClientServiceMethodLegacyResponse::default_instance_ = new CMsgClientServiceMethodLegacyResponse();
  CMsgClientUIMode::default_instance_ = new CMsgClientUIMode();
  CMsgClientVanityURLChangedNotification::default_instance_ = new CMsgClientVanityURLChangedNotification();
  CMsgClientAuthorizeLocalDeviceRequest::default_instance_ = new CMsgClientAuthorizeLocalDeviceRequest();
  CMsgClientAuthorizeLocalDevice::default_instance_ = new CMsgClientAuthorizeLocalDevice();
  CMsgClientAuthorizeLocalDeviceNotification::default_instance_ = new CMsgClientAuthorizeLocalDeviceNotification();
  CMsgClientDeauthorizeDeviceRequest::default_instance_ = new CMsgClientDeauthorizeDeviceRequest();
  CMsgClientDeauthorizeDevice::default_instance_ = new CMsgClientDeauthorizeDevice();
  CMsgClientUseLocalDeviceAuthorizations::default_instance_ = new CMsgClientUseLocalDeviceAuthorizations();
  CMsgClientUseLocalDeviceAuthorizations_DeviceToken::default_instance_ = new CMsgClientUseLocalDeviceAuthorizations_DeviceToken();
  CMsgClientGetAuthorizedDevices::default_instance_ = new CMsgClientGetAuthorizedDevices();
  CMsgClientGetAuthorizedDevicesResponse::default_instance_ = new CMsgClientGetAuthorizedDevicesResponse();
  CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::default_instance_ = new CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice();
  CMsgClientSharedLibraryLockStatus::default_instance_ = new CMsgClientSharedLibraryLockStatus();
  CMsgClientSharedLibraryLockStatus_LockedLibrary::default_instance_ = new CMsgClientSharedLibraryLockStatus_LockedLibrary();
  CMsgClientSharedLibraryStopPlaying::default_instance_ = new CMsgClientSharedLibraryStopPlaying();
  CMsgClientSharedLibraryStopPlaying_StopApp::default_instance_ = new CMsgClientSharedLibraryStopPlaying_StopApp();
  CMsgClientServiceCall::default_instance_ = new CMsgClientServiceCall();
  CMsgClientServiceModule::default_instance_ = new CMsgClientServiceModule();
  CMsgClientServiceCallResponse::default_instance_ = new CMsgClientServiceCallResponse();
  CMsgAMUnlockStreaming::default_instance_ = new CMsgAMUnlockStreaming();
  CMsgAMUnlockStreamingResponse::default_instance_ = new CMsgAMUnlockStreamingResponse();
  CMsgAMUnlockHEVC::default_instance_ = new CMsgAMUnlockHEVC();
  CMsgAMUnlockHEVCResponse::default_instance_ = new CMsgAMUnlockHEVCResponse();
  CMsgClientPlayingSessionState::default_instance_ = new CMsgClientPlayingSessionState();
  CMsgClientKickPlayingSession::default_instance_ = new CMsgClientKickPlayingSession();
  CMsgClientVoiceCallPreAuthorize::default_instance_ = new CMsgClientVoiceCallPreAuthorize();
  CMsgClientVoiceCallPreAuthorizeResponse::default_instance_ = new CMsgClientVoiceCallPreAuthorizeResponse();
  CMsgBadgeCraftedNotification::default_instance_ = new CMsgBadgeCraftedNotification();
  CMsgClientUpdateUserGameInfo::default_instance_->InitAsDefaultInstance();
  CMsgClientRichPresenceUpload::default_instance_->InitAsDefaultInstance();
  CMsgClientRichPresenceRequest::default_instance_->InitAsDefaultInstance();
  CMsgClientRichPresenceInfo::default_instance_->InitAsDefaultInstance();
  CMsgClientRichPresenceInfo_RichPresence::default_instance_->InitAsDefaultInstance();
  CMsgClientCheckFileSignature::default_instance_->InitAsDefaultInstance();
  CMsgClientCheckFileSignatureResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientReadMachineAuth::default_instance_->InitAsDefaultInstance();
  CMsgClientReadMachineAuthResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientUpdateMachineAuth::default_instance_->InitAsDefaultInstance();
  CMsgClientUpdateMachineAuthResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientRequestMachineAuth::default_instance_->InitAsDefaultInstance();
  CMsgClientRequestMachineAuthResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientRegisterKey::default_instance_->InitAsDefaultInstance();
  CMsgClientPurchaseResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientActivateOEMLicense::default_instance_->InitAsDefaultInstance();
  CMsgClientRegisterOEMMachine::default_instance_->InitAsDefaultInstance();
  CMsgClientRegisterOEMMachineResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientPurchaseWithMachineID::default_instance_->InitAsDefaultInstance();
  CMsgTrading_InitiateTradeRequest::default_instance_->InitAsDefaultInstance();
  CMsgTrading_InitiateTradeResponse::default_instance_->InitAsDefaultInstance();
  CMsgTrading_CancelTradeRequest::default_instance_->InitAsDefaultInstance();
  CMsgTrading_StartSession::default_instance_->InitAsDefaultInstance();
  CMsgClientGetCDNAuthToken::default_instance_->InitAsDefaultInstance();
  CMsgClientGetDepotDecryptionKey::default_instance_->InitAsDefaultInstance();
  CMsgClientGetDepotDecryptionKeyResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientCheckAppBetaPassword::default_instance_->InitAsDefaultInstance();
  CMsgClientCheckAppBetaPasswordResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientCheckAppBetaPasswordResponse_BetaPassword::default_instance_->InitAsDefaultInstance();
  CMsgClientUpdateAppJobReport::default_instance_->InitAsDefaultInstance();
  CMsgClientDPContentStatsReport::default_instance_->InitAsDefaultInstance();
  CMsgClientGetCDNAuthTokenResponse::default_instance_->InitAsDefaultInstance();
  CMsgDownloadRateStatistics::default_instance_->InitAsDefaultInstance();
  CMsgDownloadRateStatistics_StatsInfo::default_instance_->InitAsDefaultInstance();
  CMsgClientRequestAccountData::default_instance_->InitAsDefaultInstance();
  CMsgClientRequestAccountDataResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientUGSGetGlobalStats::default_instance_->InitAsDefaultInstance();
  CMsgClientUGSGetGlobalStatsResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientUGSGetGlobalStatsResponse_Day::default_instance_->InitAsDefaultInstance();
  CMsgClientUGSGetGlobalStatsResponse_Day_Stat::default_instance_->InitAsDefaultInstance();
  CMsgClientRedeemGuestPass::default_instance_->InitAsDefaultInstance();
  CMsgClientRedeemGuestPassResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientGetClanActivityCounts::default_instance_->InitAsDefaultInstance();
  CMsgClientGetClanActivityCountsResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientOGSReportString::default_instance_->InitAsDefaultInstance();
  CMsgClientOGSReportBug::default_instance_->InitAsDefaultInstance();
  CMsgClientSentLogs::default_instance_->InitAsDefaultInstance();
  CMsgGCClient::default_instance_->InitAsDefaultInstance();
  CMsgClientRequestFreeLicense::default_instance_->InitAsDefaultInstance();
  CMsgClientRequestFreeLicenseResponse::default_instance_->InitAsDefaultInstance();
  CMsgDRMDownloadRequestWithCrashData::default_instance_->InitAsDefaultInstance();
  CMsgDRMDownloadResponse::default_instance_->InitAsDefaultInstance();
  CMsgDRMFinalResult::default_instance_->InitAsDefaultInstance();
  CMsgClientDPCheckSpecialSurvey::default_instance_->InitAsDefaultInstance();
  CMsgClientDPCheckSpecialSurveyResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientDPSendSpecialSurveyResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientDPSendSpecialSurveyResponseReply::default_instance_->InitAsDefaultInstance();
  CMsgClientRequestForgottenPasswordEmail::default_instance_->InitAsDefaultInstance();
  CMsgClientRequestForgottenPasswordEmailResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientItemAnnouncements::default_instance_->InitAsDefaultInstance();
  CMsgClientItemAnnouncements_UnseenItem::default_instance_->InitAsDefaultInstance();
  CMsgClientRequestItemAnnouncements::default_instance_->InitAsDefaultInstance();
  CMsgClientUserNotifications::default_instance_->InitAsDefaultInstance();
  CMsgClientUserNotifications_Notification::default_instance_->InitAsDefaultInstance();
  CMsgClientCommentNotifications::default_instance_->InitAsDefaultInstance();
  CMsgClientRequestCommentNotifications::default_instance_->InitAsDefaultInstance();
  CMsgClientOfflineMessageNotification::default_instance_->InitAsDefaultInstance();
  CMsgClientRequestOfflineMessageCount::default_instance_->InitAsDefaultInstance();
  CMsgClientChatGetFriendMessageHistory::default_instance_->InitAsDefaultInstance();
  CMsgClientChatGetFriendMessageHistoryResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::default_instance_->InitAsDefaultInstance();
  CMsgClientChatGetFriendMessageHistoryForOfflineMessages::default_instance_->InitAsDefaultInstance();
  CMsgClientFSGetFriendsSteamLevels::default_instance_->InitAsDefaultInstance();
  CMsgClientFSGetFriendsSteamLevelsResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientFSGetFriendsSteamLevelsResponse_Friend::default_instance_->InitAsDefaultInstance();
  CMsgClientEmailAddrInfo::default_instance_->InitAsDefaultInstance();
  CMsgCREItemVoteSummary::default_instance_->InitAsDefaultInstance();
  CMsgCREItemVoteSummary_PublishedFileId::default_instance_->InitAsDefaultInstance();
  CMsgCREItemVoteSummaryResponse::default_instance_->InitAsDefaultInstance();
  CMsgCREItemVoteSummaryResponse_ItemVoteSummary::default_instance_->InitAsDefaultInstance();
  CMsgCREUpdateUserPublishedItemVote::default_instance_->InitAsDefaultInstance();
  CMsgCREUpdateUserPublishedItemVoteResponse::default_instance_->InitAsDefaultInstance();
  CMsgCREGetUserPublishedItemVoteDetails::default_instance_->InitAsDefaultInstance();
  CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::default_instance_->InitAsDefaultInstance();
  CMsgCREGetUserPublishedItemVoteDetailsResponse::default_instance_->InitAsDefaultInstance();
  CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::default_instance_->InitAsDefaultInstance();
  CMsgFSGetFollowerCount::default_instance_->InitAsDefaultInstance();
  CMsgFSGetFollowerCountResponse::default_instance_->InitAsDefaultInstance();
  CMsgFSGetIsFollowing::default_instance_->InitAsDefaultInstance();
  CMsgFSGetIsFollowingResponse::default_instance_->InitAsDefaultInstance();
  CMsgFSEnumerateFollowingList::default_instance_->InitAsDefaultInstance();
  CMsgFSEnumerateFollowingListResponse::default_instance_->InitAsDefaultInstance();
  CMsgDPGetNumberOfCurrentPlayers::default_instance_->InitAsDefaultInstance();
  CMsgDPGetNumberOfCurrentPlayersResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientFriendUserStatusPublished::default_instance_->InitAsDefaultInstance();
  CMsgClientServiceMethodLegacy::default_instance_->InitAsDefaultInstance();
  CMsgClientServiceMethodLegacyResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientUIMode::default_instance_->InitAsDefaultInstance();
  CMsgClientVanityURLChangedNotification::default_instance_->InitAsDefaultInstance();
  CMsgClientAuthorizeLocalDeviceRequest::default_instance_->InitAsDefaultInstance();
  CMsgClientAuthorizeLocalDevice::default_instance_->InitAsDefaultInstance();
  CMsgClientAuthorizeLocalDeviceNotification::default_instance_->InitAsDefaultInstance();
  CMsgClientDeauthorizeDeviceRequest::default_instance_->InitAsDefaultInstance();
  CMsgClientDeauthorizeDevice::default_instance_->InitAsDefaultInstance();
  CMsgClientUseLocalDeviceAuthorizations::default_instance_->InitAsDefaultInstance();
  CMsgClientUseLocalDeviceAuthorizations_DeviceToken::default_instance_->InitAsDefaultInstance();
  CMsgClientGetAuthorizedDevices::default_instance_->InitAsDefaultInstance();
  CMsgClientGetAuthorizedDevicesResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::default_instance_->InitAsDefaultInstance();
  CMsgClientSharedLibraryLockStatus::default_instance_->InitAsDefaultInstance();
  CMsgClientSharedLibraryLockStatus_LockedLibrary::default_instance_->InitAsDefaultInstance();
  CMsgClientSharedLibraryStopPlaying::default_instance_->InitAsDefaultInstance();
  CMsgClientSharedLibraryStopPlaying_StopApp::default_instance_->InitAsDefaultInstance();
  CMsgClientServiceCall::default_instance_->InitAsDefaultInstance();
  CMsgClientServiceModule::default_instance_->InitAsDefaultInstance();
  CMsgClientServiceCallResponse::default_instance_->InitAsDefaultInstance();
  CMsgAMUnlockStreaming::default_instance_->InitAsDefaultInstance();
  CMsgAMUnlockStreamingResponse::default_instance_->InitAsDefaultInstance();
  CMsgAMUnlockHEVC::default_instance_->InitAsDefaultInstance();
  CMsgAMUnlockHEVCResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientPlayingSessionState::default_instance_->InitAsDefaultInstance();
  CMsgClientKickPlayingSession::default_instance_->InitAsDefaultInstance();
  CMsgClientVoiceCallPreAuthorize::default_instance_->InitAsDefaultInstance();
  CMsgClientVoiceCallPreAuthorizeResponse::default_instance_->InitAsDefaultInstance();
  CMsgBadgeCraftedNotification::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_steammessages_5fclientserver_5f2_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_steammessages_5fclientserver_5f2_2eproto {
  StaticDescriptorInitializer_steammessages_5fclientserver_5f2_2eproto() {
    protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  }
} static_descriptor_initializer_steammessages_5fclientserver_5f2_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUpdateUserGameInfo::kSteamidIdgsFieldNumber;
const int CMsgClientUpdateUserGameInfo::kGameidFieldNumber;
const int CMsgClientUpdateUserGameInfo::kGameIpFieldNumber;
const int CMsgClientUpdateUserGameInfo::kGamePortFieldNumber;
const int CMsgClientUpdateUserGameInfo::kTokenFieldNumber;
#endif  // !_MSC_VER

CMsgClientUpdateUserGameInfo::CMsgClientUpdateUserGameInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientUpdateUserGameInfo::InitAsDefaultInstance() {
}

CMsgClientUpdateUserGameInfo::CMsgClientUpdateUserGameInfo(const CMsgClientUpdateUserGameInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUpdateUserGameInfo::SharedCtor() {
  _cached_size_ = 0;
  steamid_idgs_ = GOOGLE_ULONGLONG(0);
  gameid_ = GOOGLE_ULONGLONG(0);
  game_ip_ = 0u;
  game_port_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUpdateUserGameInfo::~CMsgClientUpdateUserGameInfo() {
  SharedDtor();
}

void CMsgClientUpdateUserGameInfo::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientUpdateUserGameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUpdateUserGameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientUpdateUserGameInfo_descriptor_;
}

const CMsgClientUpdateUserGameInfo& CMsgClientUpdateUserGameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientUpdateUserGameInfo* CMsgClientUpdateUserGameInfo::default_instance_ = NULL;

CMsgClientUpdateUserGameInfo* CMsgClientUpdateUserGameInfo::New() const {
  return new CMsgClientUpdateUserGameInfo;
}

void CMsgClientUpdateUserGameInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_idgs_ = GOOGLE_ULONGLONG(0);
    gameid_ = GOOGLE_ULONGLONG(0);
    game_ip_ = 0u;
    game_port_ = 0u;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientUpdateUserGameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid_idgs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_idgs_)));
          set_has_steamid_idgs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_gameid;
        break;
      }

      // optional fixed64 gameid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game_ip;
        break;
      }

      // optional uint32 game_ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_ip_)));
          set_has_game_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_port;
        break;
      }

      // optional uint32 game_port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_port_)));
          set_has_game_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_token;
        break;
      }

      // optional bytes token = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUpdateUserGameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid_idgs = 1;
  if (has_steamid_idgs()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid_idgs(), output);
  }

  // optional fixed64 gameid = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->gameid(), output);
  }

  // optional uint32 game_ip = 3;
  if (has_game_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_ip(), output);
  }

  // optional uint32 game_port = 4;
  if (has_game_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_port(), output);
  }

  // optional bytes token = 5;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientUpdateUserGameInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steamid_idgs = 1;
  if (has_steamid_idgs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid_idgs(), target);
  }

  // optional fixed64 gameid = 2;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->gameid(), target);
  }

  // optional uint32 game_ip = 3;
  if (has_game_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_ip(), target);
  }

  // optional uint32 game_port = 4;
  if (has_game_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_port(), target);
  }

  // optional bytes token = 5;
  if (has_token()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientUpdateUserGameInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid_idgs = 1;
    if (has_steamid_idgs()) {
      total_size += 1 + 8;
    }

    // optional fixed64 gameid = 2;
    if (has_gameid()) {
      total_size += 1 + 8;
    }

    // optional uint32 game_ip = 3;
    if (has_game_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_ip());
    }

    // optional uint32 game_port = 4;
    if (has_game_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_port());
    }

    // optional bytes token = 5;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUpdateUserGameInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientUpdateUserGameInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientUpdateUserGameInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientUpdateUserGameInfo::MergeFrom(const CMsgClientUpdateUserGameInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid_idgs()) {
      set_steamid_idgs(from.steamid_idgs());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_game_ip()) {
      set_game_ip(from.game_ip());
    }
    if (from.has_game_port()) {
      set_game_port(from.game_port());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientUpdateUserGameInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUpdateUserGameInfo::CopyFrom(const CMsgClientUpdateUserGameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUpdateUserGameInfo::IsInitialized() const {

  return true;
}

void CMsgClientUpdateUserGameInfo::Swap(CMsgClientUpdateUserGameInfo* other) {
  if (other != this) {
    std::swap(steamid_idgs_, other->steamid_idgs_);
    std::swap(gameid_, other->gameid_);
    std::swap(game_ip_, other->game_ip_);
    std::swap(game_port_, other->game_port_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientUpdateUserGameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientUpdateUserGameInfo_descriptor_;
  metadata.reflection = CMsgClientUpdateUserGameInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRichPresenceUpload::kRichPresenceKvFieldNumber;
const int CMsgClientRichPresenceUpload::kSteamidBroadcastFieldNumber;
#endif  // !_MSC_VER

CMsgClientRichPresenceUpload::CMsgClientRichPresenceUpload()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientRichPresenceUpload::InitAsDefaultInstance() {
}

CMsgClientRichPresenceUpload::CMsgClientRichPresenceUpload(const CMsgClientRichPresenceUpload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRichPresenceUpload::SharedCtor() {
  _cached_size_ = 0;
  rich_presence_kv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRichPresenceUpload::~CMsgClientRichPresenceUpload() {
  SharedDtor();
}

void CMsgClientRichPresenceUpload::SharedDtor() {
  if (rich_presence_kv_ != &::google::protobuf::internal::kEmptyString) {
    delete rich_presence_kv_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientRichPresenceUpload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRichPresenceUpload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientRichPresenceUpload_descriptor_;
}

const CMsgClientRichPresenceUpload& CMsgClientRichPresenceUpload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientRichPresenceUpload* CMsgClientRichPresenceUpload::default_instance_ = NULL;

CMsgClientRichPresenceUpload* CMsgClientRichPresenceUpload::New() const {
  return new CMsgClientRichPresenceUpload;
}

void CMsgClientRichPresenceUpload::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rich_presence_kv()) {
      if (rich_presence_kv_ != &::google::protobuf::internal::kEmptyString) {
        rich_presence_kv_->clear();
      }
    }
  }
  steamid_broadcast_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientRichPresenceUpload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes rich_presence_kv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rich_presence_kv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steamid_broadcast;
        break;
      }

      // repeated fixed64 steamid_broadcast = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steamid_broadcast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17, input, this->mutable_steamid_broadcast())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_steamid_broadcast())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steamid_broadcast;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRichPresenceUpload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes rich_presence_kv = 1;
  if (has_rich_presence_kv()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->rich_presence_kv(), output);
  }

  // repeated fixed64 steamid_broadcast = 2;
  for (int i = 0; i < this->steamid_broadcast_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->steamid_broadcast(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientRichPresenceUpload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes rich_presence_kv = 1;
  if (has_rich_presence_kv()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->rich_presence_kv(), target);
  }

  // repeated fixed64 steamid_broadcast = 2;
  for (int i = 0; i < this->steamid_broadcast_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(2, this->steamid_broadcast(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientRichPresenceUpload::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes rich_presence_kv = 1;
    if (has_rich_presence_kv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rich_presence_kv());
    }

  }
  // repeated fixed64 steamid_broadcast = 2;
  {
    int data_size = 0;
    data_size = 8 * this->steamid_broadcast_size();
    total_size += 1 * this->steamid_broadcast_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRichPresenceUpload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientRichPresenceUpload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientRichPresenceUpload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientRichPresenceUpload::MergeFrom(const CMsgClientRichPresenceUpload& from) {
  GOOGLE_CHECK_NE(&from, this);
  steamid_broadcast_.MergeFrom(from.steamid_broadcast_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rich_presence_kv()) {
      set_rich_presence_kv(from.rich_presence_kv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientRichPresenceUpload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRichPresenceUpload::CopyFrom(const CMsgClientRichPresenceUpload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRichPresenceUpload::IsInitialized() const {

  return true;
}

void CMsgClientRichPresenceUpload::Swap(CMsgClientRichPresenceUpload* other) {
  if (other != this) {
    std::swap(rich_presence_kv_, other->rich_presence_kv_);
    steamid_broadcast_.Swap(&other->steamid_broadcast_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientRichPresenceUpload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientRichPresenceUpload_descriptor_;
  metadata.reflection = CMsgClientRichPresenceUpload_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRichPresenceRequest::kSteamidRequestFieldNumber;
#endif  // !_MSC_VER

CMsgClientRichPresenceRequest::CMsgClientRichPresenceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientRichPresenceRequest::InitAsDefaultInstance() {
}

CMsgClientRichPresenceRequest::CMsgClientRichPresenceRequest(const CMsgClientRichPresenceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRichPresenceRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRichPresenceRequest::~CMsgClientRichPresenceRequest() {
  SharedDtor();
}

void CMsgClientRichPresenceRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientRichPresenceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRichPresenceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientRichPresenceRequest_descriptor_;
}

const CMsgClientRichPresenceRequest& CMsgClientRichPresenceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientRichPresenceRequest* CMsgClientRichPresenceRequest::default_instance_ = NULL;

CMsgClientRichPresenceRequest* CMsgClientRichPresenceRequest::New() const {
  return new CMsgClientRichPresenceRequest;
}

void CMsgClientRichPresenceRequest::Clear() {
  steamid_request_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientRichPresenceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 steamid_request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steamid_request:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9, input, this->mutable_steamid_request())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_steamid_request())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_steamid_request;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRichPresenceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated fixed64 steamid_request = 1;
  for (int i = 0; i < this->steamid_request_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->steamid_request(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientRichPresenceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated fixed64 steamid_request = 1;
  for (int i = 0; i < this->steamid_request_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(1, this->steamid_request(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientRichPresenceRequest::ByteSize() const {
  int total_size = 0;

  // repeated fixed64 steamid_request = 1;
  {
    int data_size = 0;
    data_size = 8 * this->steamid_request_size();
    total_size += 1 * this->steamid_request_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRichPresenceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientRichPresenceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientRichPresenceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientRichPresenceRequest::MergeFrom(const CMsgClientRichPresenceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  steamid_request_.MergeFrom(from.steamid_request_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientRichPresenceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRichPresenceRequest::CopyFrom(const CMsgClientRichPresenceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRichPresenceRequest::IsInitialized() const {

  return true;
}

void CMsgClientRichPresenceRequest::Swap(CMsgClientRichPresenceRequest* other) {
  if (other != this) {
    steamid_request_.Swap(&other->steamid_request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientRichPresenceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientRichPresenceRequest_descriptor_;
  metadata.reflection = CMsgClientRichPresenceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRichPresenceInfo_RichPresence::kSteamidUserFieldNumber;
const int CMsgClientRichPresenceInfo_RichPresence::kRichPresenceKvFieldNumber;
#endif  // !_MSC_VER

CMsgClientRichPresenceInfo_RichPresence::CMsgClientRichPresenceInfo_RichPresence()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientRichPresenceInfo_RichPresence::InitAsDefaultInstance() {
}

CMsgClientRichPresenceInfo_RichPresence::CMsgClientRichPresenceInfo_RichPresence(const CMsgClientRichPresenceInfo_RichPresence& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRichPresenceInfo_RichPresence::SharedCtor() {
  _cached_size_ = 0;
  steamid_user_ = GOOGLE_ULONGLONG(0);
  rich_presence_kv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRichPresenceInfo_RichPresence::~CMsgClientRichPresenceInfo_RichPresence() {
  SharedDtor();
}

void CMsgClientRichPresenceInfo_RichPresence::SharedDtor() {
  if (rich_presence_kv_ != &::google::protobuf::internal::kEmptyString) {
    delete rich_presence_kv_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientRichPresenceInfo_RichPresence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRichPresenceInfo_RichPresence::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientRichPresenceInfo_RichPresence_descriptor_;
}

const CMsgClientRichPresenceInfo_RichPresence& CMsgClientRichPresenceInfo_RichPresence::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientRichPresenceInfo_RichPresence* CMsgClientRichPresenceInfo_RichPresence::default_instance_ = NULL;

CMsgClientRichPresenceInfo_RichPresence* CMsgClientRichPresenceInfo_RichPresence::New() const {
  return new CMsgClientRichPresenceInfo_RichPresence;
}

void CMsgClientRichPresenceInfo_RichPresence::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_user_ = GOOGLE_ULONGLONG(0);
    if (has_rich_presence_kv()) {
      if (rich_presence_kv_ != &::google::protobuf::internal::kEmptyString) {
        rich_presence_kv_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientRichPresenceInfo_RichPresence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid_user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_user_)));
          set_has_steamid_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rich_presence_kv;
        break;
      }

      // optional bytes rich_presence_kv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rich_presence_kv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rich_presence_kv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRichPresenceInfo_RichPresence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid_user = 1;
  if (has_steamid_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid_user(), output);
  }

  // optional bytes rich_presence_kv = 2;
  if (has_rich_presence_kv()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->rich_presence_kv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientRichPresenceInfo_RichPresence::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steamid_user = 1;
  if (has_steamid_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid_user(), target);
  }

  // optional bytes rich_presence_kv = 2;
  if (has_rich_presence_kv()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->rich_presence_kv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientRichPresenceInfo_RichPresence::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid_user = 1;
    if (has_steamid_user()) {
      total_size += 1 + 8;
    }

    // optional bytes rich_presence_kv = 2;
    if (has_rich_presence_kv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rich_presence_kv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRichPresenceInfo_RichPresence::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientRichPresenceInfo_RichPresence* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientRichPresenceInfo_RichPresence*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientRichPresenceInfo_RichPresence::MergeFrom(const CMsgClientRichPresenceInfo_RichPresence& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid_user()) {
      set_steamid_user(from.steamid_user());
    }
    if (from.has_rich_presence_kv()) {
      set_rich_presence_kv(from.rich_presence_kv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientRichPresenceInfo_RichPresence::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRichPresenceInfo_RichPresence::CopyFrom(const CMsgClientRichPresenceInfo_RichPresence& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRichPresenceInfo_RichPresence::IsInitialized() const {

  return true;
}

void CMsgClientRichPresenceInfo_RichPresence::Swap(CMsgClientRichPresenceInfo_RichPresence* other) {
  if (other != this) {
    std::swap(steamid_user_, other->steamid_user_);
    std::swap(rich_presence_kv_, other->rich_presence_kv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientRichPresenceInfo_RichPresence::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientRichPresenceInfo_RichPresence_descriptor_;
  metadata.reflection = CMsgClientRichPresenceInfo_RichPresence_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientRichPresenceInfo::kRichPresenceFieldNumber;
#endif  // !_MSC_VER

CMsgClientRichPresenceInfo::CMsgClientRichPresenceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientRichPresenceInfo::InitAsDefaultInstance() {
}

CMsgClientRichPresenceInfo::CMsgClientRichPresenceInfo(const CMsgClientRichPresenceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRichPresenceInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRichPresenceInfo::~CMsgClientRichPresenceInfo() {
  SharedDtor();
}

void CMsgClientRichPresenceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientRichPresenceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRichPresenceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientRichPresenceInfo_descriptor_;
}

const CMsgClientRichPresenceInfo& CMsgClientRichPresenceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientRichPresenceInfo* CMsgClientRichPresenceInfo::default_instance_ = NULL;

CMsgClientRichPresenceInfo* CMsgClientRichPresenceInfo::New() const {
  return new CMsgClientRichPresenceInfo;
}

void CMsgClientRichPresenceInfo::Clear() {
  rich_presence_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientRichPresenceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgClientRichPresenceInfo.RichPresence rich_presence = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rich_presence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rich_presence()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rich_presence;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRichPresenceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgClientRichPresenceInfo.RichPresence rich_presence = 1;
  for (int i = 0; i < this->rich_presence_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rich_presence(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientRichPresenceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgClientRichPresenceInfo.RichPresence rich_presence = 1;
  for (int i = 0; i < this->rich_presence_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rich_presence(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientRichPresenceInfo::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgClientRichPresenceInfo.RichPresence rich_presence = 1;
  total_size += 1 * this->rich_presence_size();
  for (int i = 0; i < this->rich_presence_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rich_presence(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRichPresenceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientRichPresenceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientRichPresenceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientRichPresenceInfo::MergeFrom(const CMsgClientRichPresenceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rich_presence_.MergeFrom(from.rich_presence_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientRichPresenceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRichPresenceInfo::CopyFrom(const CMsgClientRichPresenceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRichPresenceInfo::IsInitialized() const {

  return true;
}

void CMsgClientRichPresenceInfo::Swap(CMsgClientRichPresenceInfo* other) {
  if (other != this) {
    rich_presence_.Swap(&other->rich_presence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientRichPresenceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientRichPresenceInfo_descriptor_;
  metadata.reflection = CMsgClientRichPresenceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientCheckFileSignature::kAppIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientCheckFileSignature::CMsgClientCheckFileSignature()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientCheckFileSignature::InitAsDefaultInstance() {
}

CMsgClientCheckFileSignature::CMsgClientCheckFileSignature(const CMsgClientCheckFileSignature& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientCheckFileSignature::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientCheckFileSignature::~CMsgClientCheckFileSignature() {
  SharedDtor();
}

void CMsgClientCheckFileSignature::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientCheckFileSignature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientCheckFileSignature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientCheckFileSignature_descriptor_;
}

const CMsgClientCheckFileSignature& CMsgClientCheckFileSignature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientCheckFileSignature* CMsgClientCheckFileSignature::default_instance_ = NULL;

CMsgClientCheckFileSignature* CMsgClientCheckFileSignature::New() const {
  return new CMsgClientCheckFileSignature;
}

void CMsgClientCheckFileSignature::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientCheckFileSignature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientCheckFileSignature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientCheckFileSignature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientCheckFileSignature::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientCheckFileSignature::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientCheckFileSignature* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientCheckFileSignature*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientCheckFileSignature::MergeFrom(const CMsgClientCheckFileSignature& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientCheckFileSignature::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientCheckFileSignature::CopyFrom(const CMsgClientCheckFileSignature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientCheckFileSignature::IsInitialized() const {

  return true;
}

void CMsgClientCheckFileSignature::Swap(CMsgClientCheckFileSignature* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientCheckFileSignature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientCheckFileSignature_descriptor_;
  metadata.reflection = CMsgClientCheckFileSignature_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientCheckFileSignatureResponse::kAppIdFieldNumber;
const int CMsgClientCheckFileSignatureResponse::kPidFieldNumber;
const int CMsgClientCheckFileSignatureResponse::kEresultFieldNumber;
const int CMsgClientCheckFileSignatureResponse::kFilenameFieldNumber;
const int CMsgClientCheckFileSignatureResponse::kEsignatureresultFieldNumber;
const int CMsgClientCheckFileSignatureResponse::kShaFileFieldNumber;
const int CMsgClientCheckFileSignatureResponse::kSignatureheaderFieldNumber;
const int CMsgClientCheckFileSignatureResponse::kFilesizeFieldNumber;
const int CMsgClientCheckFileSignatureResponse::kGetlasterrorFieldNumber;
const int CMsgClientCheckFileSignatureResponse::kEvalvesignaturecheckdetailFieldNumber;
#endif  // !_MSC_VER

CMsgClientCheckFileSignatureResponse::CMsgClientCheckFileSignatureResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientCheckFileSignatureResponse::InitAsDefaultInstance() {
}

CMsgClientCheckFileSignatureResponse::CMsgClientCheckFileSignatureResponse(const CMsgClientCheckFileSignatureResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientCheckFileSignatureResponse::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  pid_ = 0u;
  eresult_ = 0u;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  esignatureresult_ = 0u;
  sha_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signatureheader_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filesize_ = 0u;
  getlasterror_ = 0u;
  evalvesignaturecheckdetail_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientCheckFileSignatureResponse::~CMsgClientCheckFileSignatureResponse() {
  SharedDtor();
}

void CMsgClientCheckFileSignatureResponse::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (sha_file_ != &::google::protobuf::internal::kEmptyString) {
    delete sha_file_;
  }
  if (signatureheader_ != &::google::protobuf::internal::kEmptyString) {
    delete signatureheader_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientCheckFileSignatureResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientCheckFileSignatureResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientCheckFileSignatureResponse_descriptor_;
}

const CMsgClientCheckFileSignatureResponse& CMsgClientCheckFileSignatureResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientCheckFileSignatureResponse* CMsgClientCheckFileSignatureResponse::default_instance_ = NULL;

CMsgClientCheckFileSignatureResponse* CMsgClientCheckFileSignatureResponse::New() const {
  return new CMsgClientCheckFileSignatureResponse;
}

void CMsgClientCheckFileSignatureResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    pid_ = 0u;
    eresult_ = 0u;
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    esignatureresult_ = 0u;
    if (has_sha_file()) {
      if (sha_file_ != &::google::protobuf::internal::kEmptyString) {
        sha_file_->clear();
      }
    }
    if (has_signatureheader()) {
      if (signatureheader_ != &::google::protobuf::internal::kEmptyString) {
        signatureheader_->clear();
      }
    }
    filesize_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    getlasterror_ = 0u;
    evalvesignaturecheckdetail_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientCheckFileSignatureResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pid;
        break;
      }

      // optional uint32 pid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_eresult;
        break;
      }

      // optional uint32 eresult = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_filename;
        break;
      }

      // optional string filename = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_esignatureresult;
        break;
      }

      // optional uint32 esignatureresult = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_esignatureresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &esignatureresult_)));
          set_has_esignatureresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_sha_file;
        break;
      }

      // optional bytes sha_file = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sha_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_signatureheader;
        break;
      }

      // optional bytes signatureheader = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signatureheader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signatureheader()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_filesize;
        break;
      }

      // optional uint32 filesize = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filesize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filesize_)));
          set_has_filesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_getlasterror;
        break;
      }

      // optional uint32 getlasterror = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getlasterror:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &getlasterror_)));
          set_has_getlasterror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_evalvesignaturecheckdetail;
        break;
      }

      // optional uint32 evalvesignaturecheckdetail = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_evalvesignaturecheckdetail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &evalvesignaturecheckdetail_)));
          set_has_evalvesignaturecheckdetail();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientCheckFileSignatureResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional uint32 pid = 2;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pid(), output);
  }

  // optional uint32 eresult = 3;
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->eresult(), output);
  }

  // optional string filename = 4;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->filename(), output);
  }

  // optional uint32 esignatureresult = 5;
  if (has_esignatureresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->esignatureresult(), output);
  }

  // optional bytes sha_file = 6;
  if (has_sha_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->sha_file(), output);
  }

  // optional bytes signatureheader = 7;
  if (has_signatureheader()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->signatureheader(), output);
  }

  // optional uint32 filesize = 8;
  if (has_filesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->filesize(), output);
  }

  // optional uint32 getlasterror = 9;
  if (has_getlasterror()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->getlasterror(), output);
  }

  // optional uint32 evalvesignaturecheckdetail = 10;
  if (has_evalvesignaturecheckdetail()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->evalvesignaturecheckdetail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientCheckFileSignatureResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional uint32 pid = 2;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pid(), target);
  }

  // optional uint32 eresult = 3;
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->eresult(), target);
  }

  // optional string filename = 4;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->filename(), target);
  }

  // optional uint32 esignatureresult = 5;
  if (has_esignatureresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->esignatureresult(), target);
  }

  // optional bytes sha_file = 6;
  if (has_sha_file()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->sha_file(), target);
  }

  // optional bytes signatureheader = 7;
  if (has_signatureheader()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->signatureheader(), target);
  }

  // optional uint32 filesize = 8;
  if (has_filesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->filesize(), target);
  }

  // optional uint32 getlasterror = 9;
  if (has_getlasterror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->getlasterror(), target);
  }

  // optional uint32 evalvesignaturecheckdetail = 10;
  if (has_evalvesignaturecheckdetail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->evalvesignaturecheckdetail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientCheckFileSignatureResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 pid = 2;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pid());
    }

    // optional uint32 eresult = 3;
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

    // optional string filename = 4;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional uint32 esignatureresult = 5;
    if (has_esignatureresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->esignatureresult());
    }

    // optional bytes sha_file = 6;
    if (has_sha_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_file());
    }

    // optional bytes signatureheader = 7;
    if (has_signatureheader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signatureheader());
    }

    // optional uint32 filesize = 8;
    if (has_filesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filesize());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 getlasterror = 9;
    if (has_getlasterror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->getlasterror());
    }

    // optional uint32 evalvesignaturecheckdetail = 10;
    if (has_evalvesignaturecheckdetail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->evalvesignaturecheckdetail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientCheckFileSignatureResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientCheckFileSignatureResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientCheckFileSignatureResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientCheckFileSignatureResponse::MergeFrom(const CMsgClientCheckFileSignatureResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_esignatureresult()) {
      set_esignatureresult(from.esignatureresult());
    }
    if (from.has_sha_file()) {
      set_sha_file(from.sha_file());
    }
    if (from.has_signatureheader()) {
      set_signatureheader(from.signatureheader());
    }
    if (from.has_filesize()) {
      set_filesize(from.filesize());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_getlasterror()) {
      set_getlasterror(from.getlasterror());
    }
    if (from.has_evalvesignaturecheckdetail()) {
      set_evalvesignaturecheckdetail(from.evalvesignaturecheckdetail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientCheckFileSignatureResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientCheckFileSignatureResponse::CopyFrom(const CMsgClientCheckFileSignatureResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientCheckFileSignatureResponse::IsInitialized() const {

  return true;
}

void CMsgClientCheckFileSignatureResponse::Swap(CMsgClientCheckFileSignatureResponse* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(pid_, other->pid_);
    std::swap(eresult_, other->eresult_);
    std::swap(filename_, other->filename_);
    std::swap(esignatureresult_, other->esignatureresult_);
    std::swap(sha_file_, other->sha_file_);
    std::swap(signatureheader_, other->signatureheader_);
    std::swap(filesize_, other->filesize_);
    std::swap(getlasterror_, other->getlasterror_);
    std::swap(evalvesignaturecheckdetail_, other->evalvesignaturecheckdetail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientCheckFileSignatureResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientCheckFileSignatureResponse_descriptor_;
  metadata.reflection = CMsgClientCheckFileSignatureResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientReadMachineAuth::kFilenameFieldNumber;
const int CMsgClientReadMachineAuth::kOffsetFieldNumber;
const int CMsgClientReadMachineAuth::kCubtoreadFieldNumber;
#endif  // !_MSC_VER

CMsgClientReadMachineAuth::CMsgClientReadMachineAuth()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientReadMachineAuth::InitAsDefaultInstance() {
}

CMsgClientReadMachineAuth::CMsgClientReadMachineAuth(const CMsgClientReadMachineAuth& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientReadMachineAuth::SharedCtor() {
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  offset_ = 0u;
  cubtoread_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientReadMachineAuth::~CMsgClientReadMachineAuth() {
  SharedDtor();
}

void CMsgClientReadMachineAuth::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientReadMachineAuth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientReadMachineAuth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientReadMachineAuth_descriptor_;
}

const CMsgClientReadMachineAuth& CMsgClientReadMachineAuth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientReadMachineAuth* CMsgClientReadMachineAuth::default_instance_ = NULL;

CMsgClientReadMachineAuth* CMsgClientReadMachineAuth::New() const {
  return new CMsgClientReadMachineAuth;
}

void CMsgClientReadMachineAuth::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    offset_ = 0u;
    cubtoread_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientReadMachineAuth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }

      // optional uint32 offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cubtoread;
        break;
      }

      // optional uint32 cubtoread = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cubtoread:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cubtoread_)));
          set_has_cubtoread();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientReadMachineAuth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filename(), output);
  }

  // optional uint32 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->offset(), output);
  }

  // optional uint32 cubtoread = 3;
  if (has_cubtoread()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cubtoread(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientReadMachineAuth::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // optional uint32 offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->offset(), target);
  }

  // optional uint32 cubtoread = 3;
  if (has_cubtoread()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cubtoread(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientReadMachineAuth::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional uint32 offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 cubtoread = 3;
    if (has_cubtoread()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cubtoread());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientReadMachineAuth::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientReadMachineAuth* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientReadMachineAuth*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientReadMachineAuth::MergeFrom(const CMsgClientReadMachineAuth& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_cubtoread()) {
      set_cubtoread(from.cubtoread());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientReadMachineAuth::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientReadMachineAuth::CopyFrom(const CMsgClientReadMachineAuth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientReadMachineAuth::IsInitialized() const {

  return true;
}

void CMsgClientReadMachineAuth::Swap(CMsgClientReadMachineAuth* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(offset_, other->offset_);
    std::swap(cubtoread_, other->cubtoread_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientReadMachineAuth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientReadMachineAuth_descriptor_;
  metadata.reflection = CMsgClientReadMachineAuth_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientReadMachineAuthResponse::kFilenameFieldNumber;
const int CMsgClientReadMachineAuthResponse::kEresultFieldNumber;
const int CMsgClientReadMachineAuthResponse::kFilesizeFieldNumber;
const int CMsgClientReadMachineAuthResponse::kShaFileFieldNumber;
const int CMsgClientReadMachineAuthResponse::kGetlasterrorFieldNumber;
const int CMsgClientReadMachineAuthResponse::kOffsetFieldNumber;
const int CMsgClientReadMachineAuthResponse::kCubreadFieldNumber;
const int CMsgClientReadMachineAuthResponse::kBytesReadFieldNumber;
const int CMsgClientReadMachineAuthResponse::kFilenameSentryFieldNumber;
#endif  // !_MSC_VER

CMsgClientReadMachineAuthResponse::CMsgClientReadMachineAuthResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientReadMachineAuthResponse::InitAsDefaultInstance() {
}

CMsgClientReadMachineAuthResponse::CMsgClientReadMachineAuthResponse(const CMsgClientReadMachineAuthResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientReadMachineAuthResponse::SharedCtor() {
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  eresult_ = 0u;
  filesize_ = 0u;
  sha_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  getlasterror_ = 0u;
  offset_ = 0u;
  cubread_ = 0u;
  bytes_read_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filename_sentry_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientReadMachineAuthResponse::~CMsgClientReadMachineAuthResponse() {
  SharedDtor();
}

void CMsgClientReadMachineAuthResponse::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (sha_file_ != &::google::protobuf::internal::kEmptyString) {
    delete sha_file_;
  }
  if (bytes_read_ != &::google::protobuf::internal::kEmptyString) {
    delete bytes_read_;
  }
  if (filename_sentry_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_sentry_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientReadMachineAuthResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientReadMachineAuthResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientReadMachineAuthResponse_descriptor_;
}

const CMsgClientReadMachineAuthResponse& CMsgClientReadMachineAuthResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientReadMachineAuthResponse* CMsgClientReadMachineAuthResponse::default_instance_ = NULL;

CMsgClientReadMachineAuthResponse* CMsgClientReadMachineAuthResponse::New() const {
  return new CMsgClientReadMachineAuthResponse;
}

void CMsgClientReadMachineAuthResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    eresult_ = 0u;
    filesize_ = 0u;
    if (has_sha_file()) {
      if (sha_file_ != &::google::protobuf::internal::kEmptyString) {
        sha_file_->clear();
      }
    }
    getlasterror_ = 0u;
    offset_ = 0u;
    cubread_ = 0u;
    if (has_bytes_read()) {
      if (bytes_read_ != &::google::protobuf::internal::kEmptyString) {
        bytes_read_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_filename_sentry()) {
      if (filename_sentry_ != &::google::protobuf::internal::kEmptyString) {
        filename_sentry_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientReadMachineAuthResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eresult;
        break;
      }

      // optional uint32 eresult = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_filesize;
        break;
      }

      // optional uint32 filesize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filesize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filesize_)));
          set_has_filesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sha_file;
        break;
      }

      // optional bytes sha_file = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sha_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_getlasterror;
        break;
      }

      // optional uint32 getlasterror = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getlasterror:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &getlasterror_)));
          set_has_getlasterror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_offset;
        break;
      }

      // optional uint32 offset = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cubread;
        break;
      }

      // optional uint32 cubread = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cubread:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cubread_)));
          set_has_cubread();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_bytes_read;
        break;
      }

      // optional bytes bytes_read = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bytes_read:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytes_read()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_filename_sentry;
        break;
      }

      // optional string filename_sentry = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filename_sentry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename_sentry()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename_sentry().data(), this->filename_sentry().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientReadMachineAuthResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filename(), output);
  }

  // optional uint32 eresult = 2;
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->eresult(), output);
  }

  // optional uint32 filesize = 3;
  if (has_filesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->filesize(), output);
  }

  // optional bytes sha_file = 4;
  if (has_sha_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->sha_file(), output);
  }

  // optional uint32 getlasterror = 5;
  if (has_getlasterror()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->getlasterror(), output);
  }

  // optional uint32 offset = 6;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->offset(), output);
  }

  // optional uint32 cubread = 7;
  if (has_cubread()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cubread(), output);
  }

  // optional bytes bytes_read = 8;
  if (has_bytes_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->bytes_read(), output);
  }

  // optional string filename_sentry = 9;
  if (has_filename_sentry()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename_sentry().data(), this->filename_sentry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->filename_sentry(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientReadMachineAuthResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // optional uint32 eresult = 2;
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->eresult(), target);
  }

  // optional uint32 filesize = 3;
  if (has_filesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->filesize(), target);
  }

  // optional bytes sha_file = 4;
  if (has_sha_file()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->sha_file(), target);
  }

  // optional uint32 getlasterror = 5;
  if (has_getlasterror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->getlasterror(), target);
  }

  // optional uint32 offset = 6;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->offset(), target);
  }

  // optional uint32 cubread = 7;
  if (has_cubread()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->cubread(), target);
  }

  // optional bytes bytes_read = 8;
  if (has_bytes_read()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->bytes_read(), target);
  }

  // optional string filename_sentry = 9;
  if (has_filename_sentry()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename_sentry().data(), this->filename_sentry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->filename_sentry(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientReadMachineAuthResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional uint32 eresult = 2;
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

    // optional uint32 filesize = 3;
    if (has_filesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filesize());
    }

    // optional bytes sha_file = 4;
    if (has_sha_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_file());
    }

    // optional uint32 getlasterror = 5;
    if (has_getlasterror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->getlasterror());
    }

    // optional uint32 offset = 6;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 cubread = 7;
    if (has_cubread()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cubread());
    }

    // optional bytes bytes_read = 8;
    if (has_bytes_read()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bytes_read());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string filename_sentry = 9;
    if (has_filename_sentry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename_sentry());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientReadMachineAuthResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientReadMachineAuthResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientReadMachineAuthResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientReadMachineAuthResponse::MergeFrom(const CMsgClientReadMachineAuthResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_filesize()) {
      set_filesize(from.filesize());
    }
    if (from.has_sha_file()) {
      set_sha_file(from.sha_file());
    }
    if (from.has_getlasterror()) {
      set_getlasterror(from.getlasterror());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_cubread()) {
      set_cubread(from.cubread());
    }
    if (from.has_bytes_read()) {
      set_bytes_read(from.bytes_read());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_filename_sentry()) {
      set_filename_sentry(from.filename_sentry());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientReadMachineAuthResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientReadMachineAuthResponse::CopyFrom(const CMsgClientReadMachineAuthResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientReadMachineAuthResponse::IsInitialized() const {

  return true;
}

void CMsgClientReadMachineAuthResponse::Swap(CMsgClientReadMachineAuthResponse* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(eresult_, other->eresult_);
    std::swap(filesize_, other->filesize_);
    std::swap(sha_file_, other->sha_file_);
    std::swap(getlasterror_, other->getlasterror_);
    std::swap(offset_, other->offset_);
    std::swap(cubread_, other->cubread_);
    std::swap(bytes_read_, other->bytes_read_);
    std::swap(filename_sentry_, other->filename_sentry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientReadMachineAuthResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientReadMachineAuthResponse_descriptor_;
  metadata.reflection = CMsgClientReadMachineAuthResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUpdateMachineAuth::kFilenameFieldNumber;
const int CMsgClientUpdateMachineAuth::kOffsetFieldNumber;
const int CMsgClientUpdateMachineAuth::kCubtowriteFieldNumber;
const int CMsgClientUpdateMachineAuth::kBytesFieldNumber;
const int CMsgClientUpdateMachineAuth::kOtpTypeFieldNumber;
const int CMsgClientUpdateMachineAuth::kOtpIdentifierFieldNumber;
const int CMsgClientUpdateMachineAuth::kOtpSharedsecretFieldNumber;
const int CMsgClientUpdateMachineAuth::kOtpTimedriftFieldNumber;
#endif  // !_MSC_VER

CMsgClientUpdateMachineAuth::CMsgClientUpdateMachineAuth()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientUpdateMachineAuth::InitAsDefaultInstance() {
}

CMsgClientUpdateMachineAuth::CMsgClientUpdateMachineAuth(const CMsgClientUpdateMachineAuth& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUpdateMachineAuth::SharedCtor() {
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  offset_ = 0u;
  cubtowrite_ = 0u;
  bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  otp_type_ = 0u;
  otp_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  otp_sharedsecret_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  otp_timedrift_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUpdateMachineAuth::~CMsgClientUpdateMachineAuth() {
  SharedDtor();
}

void CMsgClientUpdateMachineAuth::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete bytes_;
  }
  if (otp_identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete otp_identifier_;
  }
  if (otp_sharedsecret_ != &::google::protobuf::internal::kEmptyString) {
    delete otp_sharedsecret_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientUpdateMachineAuth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUpdateMachineAuth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientUpdateMachineAuth_descriptor_;
}

const CMsgClientUpdateMachineAuth& CMsgClientUpdateMachineAuth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientUpdateMachineAuth* CMsgClientUpdateMachineAuth::default_instance_ = NULL;

CMsgClientUpdateMachineAuth* CMsgClientUpdateMachineAuth::New() const {
  return new CMsgClientUpdateMachineAuth;
}

void CMsgClientUpdateMachineAuth::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    offset_ = 0u;
    cubtowrite_ = 0u;
    if (has_bytes()) {
      if (bytes_ != &::google::protobuf::internal::kEmptyString) {
        bytes_->clear();
      }
    }
    otp_type_ = 0u;
    if (has_otp_identifier()) {
      if (otp_identifier_ != &::google::protobuf::internal::kEmptyString) {
        otp_identifier_->clear();
      }
    }
    if (has_otp_sharedsecret()) {
      if (otp_sharedsecret_ != &::google::protobuf::internal::kEmptyString) {
        otp_sharedsecret_->clear();
      }
    }
    otp_timedrift_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientUpdateMachineAuth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }

      // optional uint32 offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cubtowrite;
        break;
      }

      // optional uint32 cubtowrite = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cubtowrite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cubtowrite_)));
          set_has_cubtowrite();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_bytes;
        break;
      }

      // optional bytes bytes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_otp_type;
        break;
      }

      // optional uint32 otp_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_otp_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &otp_type_)));
          set_has_otp_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_otp_identifier;
        break;
      }

      // optional string otp_identifier = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_otp_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_otp_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->otp_identifier().data(), this->otp_identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_otp_sharedsecret;
        break;
      }

      // optional bytes otp_sharedsecret = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_otp_sharedsecret:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_otp_sharedsecret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_otp_timedrift;
        break;
      }

      // optional uint32 otp_timedrift = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_otp_timedrift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &otp_timedrift_)));
          set_has_otp_timedrift();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUpdateMachineAuth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filename(), output);
  }

  // optional uint32 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->offset(), output);
  }

  // optional uint32 cubtowrite = 3;
  if (has_cubtowrite()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cubtowrite(), output);
  }

  // optional bytes bytes = 4;
  if (has_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->bytes(), output);
  }

  // optional uint32 otp_type = 5;
  if (has_otp_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->otp_type(), output);
  }

  // optional string otp_identifier = 6;
  if (has_otp_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->otp_identifier().data(), this->otp_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->otp_identifier(), output);
  }

  // optional bytes otp_sharedsecret = 7;
  if (has_otp_sharedsecret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->otp_sharedsecret(), output);
  }

  // optional uint32 otp_timedrift = 8;
  if (has_otp_timedrift()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->otp_timedrift(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientUpdateMachineAuth::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // optional uint32 offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->offset(), target);
  }

  // optional uint32 cubtowrite = 3;
  if (has_cubtowrite()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cubtowrite(), target);
  }

  // optional bytes bytes = 4;
  if (has_bytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->bytes(), target);
  }

  // optional uint32 otp_type = 5;
  if (has_otp_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->otp_type(), target);
  }

  // optional string otp_identifier = 6;
  if (has_otp_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->otp_identifier().data(), this->otp_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->otp_identifier(), target);
  }

  // optional bytes otp_sharedsecret = 7;
  if (has_otp_sharedsecret()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->otp_sharedsecret(), target);
  }

  // optional uint32 otp_timedrift = 8;
  if (has_otp_timedrift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->otp_timedrift(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientUpdateMachineAuth::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional uint32 offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 cubtowrite = 3;
    if (has_cubtowrite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cubtowrite());
    }

    // optional bytes bytes = 4;
    if (has_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bytes());
    }

    // optional uint32 otp_type = 5;
    if (has_otp_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->otp_type());
    }

    // optional string otp_identifier = 6;
    if (has_otp_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->otp_identifier());
    }

    // optional bytes otp_sharedsecret = 7;
    if (has_otp_sharedsecret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->otp_sharedsecret());
    }

    // optional uint32 otp_timedrift = 8;
    if (has_otp_timedrift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->otp_timedrift());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUpdateMachineAuth::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientUpdateMachineAuth* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientUpdateMachineAuth*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientUpdateMachineAuth::MergeFrom(const CMsgClientUpdateMachineAuth& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_cubtowrite()) {
      set_cubtowrite(from.cubtowrite());
    }
    if (from.has_bytes()) {
      set_bytes(from.bytes());
    }
    if (from.has_otp_type()) {
      set_otp_type(from.otp_type());
    }
    if (from.has_otp_identifier()) {
      set_otp_identifier(from.otp_identifier());
    }
    if (from.has_otp_sharedsecret()) {
      set_otp_sharedsecret(from.otp_sharedsecret());
    }
    if (from.has_otp_timedrift()) {
      set_otp_timedrift(from.otp_timedrift());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientUpdateMachineAuth::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUpdateMachineAuth::CopyFrom(const CMsgClientUpdateMachineAuth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUpdateMachineAuth::IsInitialized() const {

  return true;
}

void CMsgClientUpdateMachineAuth::Swap(CMsgClientUpdateMachineAuth* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(offset_, other->offset_);
    std::swap(cubtowrite_, other->cubtowrite_);
    std::swap(bytes_, other->bytes_);
    std::swap(otp_type_, other->otp_type_);
    std::swap(otp_identifier_, other->otp_identifier_);
    std::swap(otp_sharedsecret_, other->otp_sharedsecret_);
    std::swap(otp_timedrift_, other->otp_timedrift_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientUpdateMachineAuth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientUpdateMachineAuth_descriptor_;
  metadata.reflection = CMsgClientUpdateMachineAuth_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUpdateMachineAuthResponse::kFilenameFieldNumber;
const int CMsgClientUpdateMachineAuthResponse::kEresultFieldNumber;
const int CMsgClientUpdateMachineAuthResponse::kFilesizeFieldNumber;
const int CMsgClientUpdateMachineAuthResponse::kShaFileFieldNumber;
const int CMsgClientUpdateMachineAuthResponse::kGetlasterrorFieldNumber;
const int CMsgClientUpdateMachineAuthResponse::kOffsetFieldNumber;
const int CMsgClientUpdateMachineAuthResponse::kCubwroteFieldNumber;
const int CMsgClientUpdateMachineAuthResponse::kOtpTypeFieldNumber;
const int CMsgClientUpdateMachineAuthResponse::kOtpValueFieldNumber;
const int CMsgClientUpdateMachineAuthResponse::kOtpIdentifierFieldNumber;
#endif  // !_MSC_VER

CMsgClientUpdateMachineAuthResponse::CMsgClientUpdateMachineAuthResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientUpdateMachineAuthResponse::InitAsDefaultInstance() {
}

CMsgClientUpdateMachineAuthResponse::CMsgClientUpdateMachineAuthResponse(const CMsgClientUpdateMachineAuthResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUpdateMachineAuthResponse::SharedCtor() {
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  eresult_ = 0u;
  filesize_ = 0u;
  sha_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  getlasterror_ = 0u;
  offset_ = 0u;
  cubwrote_ = 0u;
  otp_type_ = 0;
  otp_value_ = 0u;
  otp_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUpdateMachineAuthResponse::~CMsgClientUpdateMachineAuthResponse() {
  SharedDtor();
}

void CMsgClientUpdateMachineAuthResponse::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (sha_file_ != &::google::protobuf::internal::kEmptyString) {
    delete sha_file_;
  }
  if (otp_identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete otp_identifier_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientUpdateMachineAuthResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUpdateMachineAuthResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientUpdateMachineAuthResponse_descriptor_;
}

const CMsgClientUpdateMachineAuthResponse& CMsgClientUpdateMachineAuthResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientUpdateMachineAuthResponse* CMsgClientUpdateMachineAuthResponse::default_instance_ = NULL;

CMsgClientUpdateMachineAuthResponse* CMsgClientUpdateMachineAuthResponse::New() const {
  return new CMsgClientUpdateMachineAuthResponse;
}

void CMsgClientUpdateMachineAuthResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    eresult_ = 0u;
    filesize_ = 0u;
    if (has_sha_file()) {
      if (sha_file_ != &::google::protobuf::internal::kEmptyString) {
        sha_file_->clear();
      }
    }
    getlasterror_ = 0u;
    offset_ = 0u;
    cubwrote_ = 0u;
    otp_type_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    otp_value_ = 0u;
    if (has_otp_identifier()) {
      if (otp_identifier_ != &::google::protobuf::internal::kEmptyString) {
        otp_identifier_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientUpdateMachineAuthResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eresult;
        break;
      }

      // optional uint32 eresult = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_filesize;
        break;
      }

      // optional uint32 filesize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filesize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filesize_)));
          set_has_filesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sha_file;
        break;
      }

      // optional bytes sha_file = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sha_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_getlasterror;
        break;
      }

      // optional uint32 getlasterror = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getlasterror:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &getlasterror_)));
          set_has_getlasterror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_offset;
        break;
      }

      // optional uint32 offset = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cubwrote;
        break;
      }

      // optional uint32 cubwrote = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cubwrote:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cubwrote_)));
          set_has_cubwrote();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_otp_type;
        break;
      }

      // optional int32 otp_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_otp_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &otp_type_)));
          set_has_otp_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_otp_value;
        break;
      }

      // optional uint32 otp_value = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_otp_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &otp_value_)));
          set_has_otp_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_otp_identifier;
        break;
      }

      // optional string otp_identifier = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_otp_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_otp_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->otp_identifier().data(), this->otp_identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUpdateMachineAuthResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filename(), output);
  }

  // optional uint32 eresult = 2;
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->eresult(), output);
  }

  // optional uint32 filesize = 3;
  if (has_filesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->filesize(), output);
  }

  // optional bytes sha_file = 4;
  if (has_sha_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->sha_file(), output);
  }

  // optional uint32 getlasterror = 5;
  if (has_getlasterror()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->getlasterror(), output);
  }

  // optional uint32 offset = 6;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->offset(), output);
  }

  // optional uint32 cubwrote = 7;
  if (has_cubwrote()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cubwrote(), output);
  }

  // optional int32 otp_type = 8;
  if (has_otp_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->otp_type(), output);
  }

  // optional uint32 otp_value = 9;
  if (has_otp_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->otp_value(), output);
  }

  // optional string otp_identifier = 10;
  if (has_otp_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->otp_identifier().data(), this->otp_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->otp_identifier(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientUpdateMachineAuthResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // optional uint32 eresult = 2;
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->eresult(), target);
  }

  // optional uint32 filesize = 3;
  if (has_filesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->filesize(), target);
  }

  // optional bytes sha_file = 4;
  if (has_sha_file()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->sha_file(), target);
  }

  // optional uint32 getlasterror = 5;
  if (has_getlasterror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->getlasterror(), target);
  }

  // optional uint32 offset = 6;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->offset(), target);
  }

  // optional uint32 cubwrote = 7;
  if (has_cubwrote()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->cubwrote(), target);
  }

  // optional int32 otp_type = 8;
  if (has_otp_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->otp_type(), target);
  }

  // optional uint32 otp_value = 9;
  if (has_otp_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->otp_value(), target);
  }

  // optional string otp_identifier = 10;
  if (has_otp_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->otp_identifier().data(), this->otp_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->otp_identifier(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientUpdateMachineAuthResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional uint32 eresult = 2;
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

    // optional uint32 filesize = 3;
    if (has_filesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filesize());
    }

    // optional bytes sha_file = 4;
    if (has_sha_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_file());
    }

    // optional uint32 getlasterror = 5;
    if (has_getlasterror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->getlasterror());
    }

    // optional uint32 offset = 6;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 cubwrote = 7;
    if (has_cubwrote()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cubwrote());
    }

    // optional int32 otp_type = 8;
    if (has_otp_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->otp_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 otp_value = 9;
    if (has_otp_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->otp_value());
    }

    // optional string otp_identifier = 10;
    if (has_otp_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->otp_identifier());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUpdateMachineAuthResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientUpdateMachineAuthResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientUpdateMachineAuthResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientUpdateMachineAuthResponse::MergeFrom(const CMsgClientUpdateMachineAuthResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_filesize()) {
      set_filesize(from.filesize());
    }
    if (from.has_sha_file()) {
      set_sha_file(from.sha_file());
    }
    if (from.has_getlasterror()) {
      set_getlasterror(from.getlasterror());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_cubwrote()) {
      set_cubwrote(from.cubwrote());
    }
    if (from.has_otp_type()) {
      set_otp_type(from.otp_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_otp_value()) {
      set_otp_value(from.otp_value());
    }
    if (from.has_otp_identifier()) {
      set_otp_identifier(from.otp_identifier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientUpdateMachineAuthResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUpdateMachineAuthResponse::CopyFrom(const CMsgClientUpdateMachineAuthResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUpdateMachineAuthResponse::IsInitialized() const {

  return true;
}

void CMsgClientUpdateMachineAuthResponse::Swap(CMsgClientUpdateMachineAuthResponse* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(eresult_, other->eresult_);
    std::swap(filesize_, other->filesize_);
    std::swap(sha_file_, other->sha_file_);
    std::swap(getlasterror_, other->getlasterror_);
    std::swap(offset_, other->offset_);
    std::swap(cubwrote_, other->cubwrote_);
    std::swap(otp_type_, other->otp_type_);
    std::swap(otp_value_, other->otp_value_);
    std::swap(otp_identifier_, other->otp_identifier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientUpdateMachineAuthResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientUpdateMachineAuthResponse_descriptor_;
  metadata.reflection = CMsgClientUpdateMachineAuthResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRequestMachineAuth::kFilenameFieldNumber;
const int CMsgClientRequestMachineAuth::kEresultSentryfileFieldNumber;
const int CMsgClientRequestMachineAuth::kFilesizeFieldNumber;
const int CMsgClientRequestMachineAuth::kShaSentryfileFieldNumber;
const int CMsgClientRequestMachineAuth::kLockAccountActionFieldNumber;
const int CMsgClientRequestMachineAuth::kOtpTypeFieldNumber;
const int CMsgClientRequestMachineAuth::kOtpIdentifierFieldNumber;
const int CMsgClientRequestMachineAuth::kOtpSharedsecretFieldNumber;
const int CMsgClientRequestMachineAuth::kOtpValueFieldNumber;
const int CMsgClientRequestMachineAuth::kMachineNameFieldNumber;
const int CMsgClientRequestMachineAuth::kMachineNameUserchosenFieldNumber;
#endif  // !_MSC_VER

CMsgClientRequestMachineAuth::CMsgClientRequestMachineAuth()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientRequestMachineAuth::InitAsDefaultInstance() {
}

CMsgClientRequestMachineAuth::CMsgClientRequestMachineAuth(const CMsgClientRequestMachineAuth& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRequestMachineAuth::SharedCtor() {
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  eresult_sentryfile_ = 0u;
  filesize_ = 0u;
  sha_sentryfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lock_account_action_ = 0;
  otp_type_ = 0u;
  otp_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  otp_sharedsecret_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  otp_value_ = 0u;
  machine_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  machine_name_userchosen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRequestMachineAuth::~CMsgClientRequestMachineAuth() {
  SharedDtor();
}

void CMsgClientRequestMachineAuth::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (sha_sentryfile_ != &::google::protobuf::internal::kEmptyString) {
    delete sha_sentryfile_;
  }
  if (otp_identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete otp_identifier_;
  }
  if (otp_sharedsecret_ != &::google::protobuf::internal::kEmptyString) {
    delete otp_sharedsecret_;
  }
  if (machine_name_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_name_;
  }
  if (machine_name_userchosen_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_name_userchosen_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientRequestMachineAuth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRequestMachineAuth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientRequestMachineAuth_descriptor_;
}

const CMsgClientRequestMachineAuth& CMsgClientRequestMachineAuth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientRequestMachineAuth* CMsgClientRequestMachineAuth::default_instance_ = NULL;

CMsgClientRequestMachineAuth* CMsgClientRequestMachineAuth::New() const {
  return new CMsgClientRequestMachineAuth;
}

void CMsgClientRequestMachineAuth::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    eresult_sentryfile_ = 0u;
    filesize_ = 0u;
    if (has_sha_sentryfile()) {
      if (sha_sentryfile_ != &::google::protobuf::internal::kEmptyString) {
        sha_sentryfile_->clear();
      }
    }
    lock_account_action_ = 0;
    otp_type_ = 0u;
    if (has_otp_identifier()) {
      if (otp_identifier_ != &::google::protobuf::internal::kEmptyString) {
        otp_identifier_->clear();
      }
    }
    if (has_otp_sharedsecret()) {
      if (otp_sharedsecret_ != &::google::protobuf::internal::kEmptyString) {
        otp_sharedsecret_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    otp_value_ = 0u;
    if (has_machine_name()) {
      if (machine_name_ != &::google::protobuf::internal::kEmptyString) {
        machine_name_->clear();
      }
    }
    if (has_machine_name_userchosen()) {
      if (machine_name_userchosen_ != &::google::protobuf::internal::kEmptyString) {
        machine_name_userchosen_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientRequestMachineAuth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eresult_sentryfile;
        break;
      }

      // optional uint32 eresult_sentryfile = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eresult_sentryfile:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_sentryfile_)));
          set_has_eresult_sentryfile();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_filesize;
        break;
      }

      // optional uint32 filesize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filesize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filesize_)));
          set_has_filesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sha_sentryfile;
        break;
      }

      // optional bytes sha_sentryfile = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sha_sentryfile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_sentryfile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lock_account_action;
        break;
      }

      // optional int32 lock_account_action = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lock_account_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lock_account_action_)));
          set_has_lock_account_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_otp_type;
        break;
      }

      // optional uint32 otp_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_otp_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &otp_type_)));
          set_has_otp_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_otp_identifier;
        break;
      }

      // optional string otp_identifier = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_otp_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_otp_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->otp_identifier().data(), this->otp_identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_otp_sharedsecret;
        break;
      }

      // optional bytes otp_sharedsecret = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_otp_sharedsecret:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_otp_sharedsecret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_otp_value;
        break;
      }

      // optional uint32 otp_value = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_otp_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &otp_value_)));
          set_has_otp_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_machine_name;
        break;
      }

      // optional string machine_name = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machine_name().data(), this->machine_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_machine_name_userchosen;
        break;
      }

      // optional string machine_name_userchosen = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_name_userchosen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_name_userchosen()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machine_name_userchosen().data(), this->machine_name_userchosen().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRequestMachineAuth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filename(), output);
  }

  // optional uint32 eresult_sentryfile = 2;
  if (has_eresult_sentryfile()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->eresult_sentryfile(), output);
  }

  // optional uint32 filesize = 3;
  if (has_filesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->filesize(), output);
  }

  // optional bytes sha_sentryfile = 4;
  if (has_sha_sentryfile()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->sha_sentryfile(), output);
  }

  // optional int32 lock_account_action = 6;
  if (has_lock_account_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lock_account_action(), output);
  }

  // optional uint32 otp_type = 7;
  if (has_otp_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->otp_type(), output);
  }

  // optional string otp_identifier = 8;
  if (has_otp_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->otp_identifier().data(), this->otp_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->otp_identifier(), output);
  }

  // optional bytes otp_sharedsecret = 9;
  if (has_otp_sharedsecret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->otp_sharedsecret(), output);
  }

  // optional uint32 otp_value = 10;
  if (has_otp_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->otp_value(), output);
  }

  // optional string machine_name = 11;
  if (has_machine_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_name().data(), this->machine_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->machine_name(), output);
  }

  // optional string machine_name_userchosen = 12;
  if (has_machine_name_userchosen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_name_userchosen().data(), this->machine_name_userchosen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->machine_name_userchosen(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientRequestMachineAuth::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // optional uint32 eresult_sentryfile = 2;
  if (has_eresult_sentryfile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->eresult_sentryfile(), target);
  }

  // optional uint32 filesize = 3;
  if (has_filesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->filesize(), target);
  }

  // optional bytes sha_sentryfile = 4;
  if (has_sha_sentryfile()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->sha_sentryfile(), target);
  }

  // optional int32 lock_account_action = 6;
  if (has_lock_account_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lock_account_action(), target);
  }

  // optional uint32 otp_type = 7;
  if (has_otp_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->otp_type(), target);
  }

  // optional string otp_identifier = 8;
  if (has_otp_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->otp_identifier().data(), this->otp_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->otp_identifier(), target);
  }

  // optional bytes otp_sharedsecret = 9;
  if (has_otp_sharedsecret()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->otp_sharedsecret(), target);
  }

  // optional uint32 otp_value = 10;
  if (has_otp_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->otp_value(), target);
  }

  // optional string machine_name = 11;
  if (has_machine_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_name().data(), this->machine_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->machine_name(), target);
  }

  // optional string machine_name_userchosen = 12;
  if (has_machine_name_userchosen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_name_userchosen().data(), this->machine_name_userchosen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->machine_name_userchosen(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientRequestMachineAuth::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional uint32 eresult_sentryfile = 2;
    if (has_eresult_sentryfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult_sentryfile());
    }

    // optional uint32 filesize = 3;
    if (has_filesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filesize());
    }

    // optional bytes sha_sentryfile = 4;
    if (has_sha_sentryfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_sentryfile());
    }

    // optional int32 lock_account_action = 6;
    if (has_lock_account_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lock_account_action());
    }

    // optional uint32 otp_type = 7;
    if (has_otp_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->otp_type());
    }

    // optional string otp_identifier = 8;
    if (has_otp_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->otp_identifier());
    }

    // optional bytes otp_sharedsecret = 9;
    if (has_otp_sharedsecret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->otp_sharedsecret());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 otp_value = 10;
    if (has_otp_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->otp_value());
    }

    // optional string machine_name = 11;
    if (has_machine_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_name());
    }

    // optional string machine_name_userchosen = 12;
    if (has_machine_name_userchosen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_name_userchosen());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestMachineAuth::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientRequestMachineAuth* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientRequestMachineAuth*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientRequestMachineAuth::MergeFrom(const CMsgClientRequestMachineAuth& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_eresult_sentryfile()) {
      set_eresult_sentryfile(from.eresult_sentryfile());
    }
    if (from.has_filesize()) {
      set_filesize(from.filesize());
    }
    if (from.has_sha_sentryfile()) {
      set_sha_sentryfile(from.sha_sentryfile());
    }
    if (from.has_lock_account_action()) {
      set_lock_account_action(from.lock_account_action());
    }
    if (from.has_otp_type()) {
      set_otp_type(from.otp_type());
    }
    if (from.has_otp_identifier()) {
      set_otp_identifier(from.otp_identifier());
    }
    if (from.has_otp_sharedsecret()) {
      set_otp_sharedsecret(from.otp_sharedsecret());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_otp_value()) {
      set_otp_value(from.otp_value());
    }
    if (from.has_machine_name()) {
      set_machine_name(from.machine_name());
    }
    if (from.has_machine_name_userchosen()) {
      set_machine_name_userchosen(from.machine_name_userchosen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientRequestMachineAuth::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRequestMachineAuth::CopyFrom(const CMsgClientRequestMachineAuth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestMachineAuth::IsInitialized() const {

  return true;
}

void CMsgClientRequestMachineAuth::Swap(CMsgClientRequestMachineAuth* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(eresult_sentryfile_, other->eresult_sentryfile_);
    std::swap(filesize_, other->filesize_);
    std::swap(sha_sentryfile_, other->sha_sentryfile_);
    std::swap(lock_account_action_, other->lock_account_action_);
    std::swap(otp_type_, other->otp_type_);
    std::swap(otp_identifier_, other->otp_identifier_);
    std::swap(otp_sharedsecret_, other->otp_sharedsecret_);
    std::swap(otp_value_, other->otp_value_);
    std::swap(machine_name_, other->machine_name_);
    std::swap(machine_name_userchosen_, other->machine_name_userchosen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientRequestMachineAuth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientRequestMachineAuth_descriptor_;
  metadata.reflection = CMsgClientRequestMachineAuth_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRequestMachineAuthResponse::kEresultFieldNumber;
#endif  // !_MSC_VER

CMsgClientRequestMachineAuthResponse::CMsgClientRequestMachineAuthResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientRequestMachineAuthResponse::InitAsDefaultInstance() {
}

CMsgClientRequestMachineAuthResponse::CMsgClientRequestMachineAuthResponse(const CMsgClientRequestMachineAuthResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRequestMachineAuthResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRequestMachineAuthResponse::~CMsgClientRequestMachineAuthResponse() {
  SharedDtor();
}

void CMsgClientRequestMachineAuthResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientRequestMachineAuthResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRequestMachineAuthResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientRequestMachineAuthResponse_descriptor_;
}

const CMsgClientRequestMachineAuthResponse& CMsgClientRequestMachineAuthResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientRequestMachineAuthResponse* CMsgClientRequestMachineAuthResponse::default_instance_ = NULL;

CMsgClientRequestMachineAuthResponse* CMsgClientRequestMachineAuthResponse::New() const {
  return new CMsgClientRequestMachineAuthResponse;
}

void CMsgClientRequestMachineAuthResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientRequestMachineAuthResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRequestMachineAuthResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eresult = 1;
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientRequestMachineAuthResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 eresult = 1;
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientRequestMachineAuthResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eresult = 1;
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestMachineAuthResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientRequestMachineAuthResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientRequestMachineAuthResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientRequestMachineAuthResponse::MergeFrom(const CMsgClientRequestMachineAuthResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientRequestMachineAuthResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRequestMachineAuthResponse::CopyFrom(const CMsgClientRequestMachineAuthResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestMachineAuthResponse::IsInitialized() const {

  return true;
}

void CMsgClientRequestMachineAuthResponse::Swap(CMsgClientRequestMachineAuthResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientRequestMachineAuthResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientRequestMachineAuthResponse_descriptor_;
  metadata.reflection = CMsgClientRequestMachineAuthResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRegisterKey::kKeyFieldNumber;
#endif  // !_MSC_VER

CMsgClientRegisterKey::CMsgClientRegisterKey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientRegisterKey::InitAsDefaultInstance() {
}

CMsgClientRegisterKey::CMsgClientRegisterKey(const CMsgClientRegisterKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRegisterKey::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRegisterKey::~CMsgClientRegisterKey() {
  SharedDtor();
}

void CMsgClientRegisterKey::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientRegisterKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRegisterKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientRegisterKey_descriptor_;
}

const CMsgClientRegisterKey& CMsgClientRegisterKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientRegisterKey* CMsgClientRegisterKey::default_instance_ = NULL;

CMsgClientRegisterKey* CMsgClientRegisterKey::New() const {
  return new CMsgClientRegisterKey;
}

void CMsgClientRegisterKey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientRegisterKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRegisterKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientRegisterKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientRegisterKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRegisterKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientRegisterKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientRegisterKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientRegisterKey::MergeFrom(const CMsgClientRegisterKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientRegisterKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRegisterKey::CopyFrom(const CMsgClientRegisterKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRegisterKey::IsInitialized() const {

  return true;
}

void CMsgClientRegisterKey::Swap(CMsgClientRegisterKey* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientRegisterKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientRegisterKey_descriptor_;
  metadata.reflection = CMsgClientRegisterKey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientPurchaseResponse::kEresultFieldNumber;
const int CMsgClientPurchaseResponse::kPurchaseResultDetailsFieldNumber;
const int CMsgClientPurchaseResponse::kPurchaseReceiptInfoFieldNumber;
#endif  // !_MSC_VER

CMsgClientPurchaseResponse::CMsgClientPurchaseResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientPurchaseResponse::InitAsDefaultInstance() {
}

CMsgClientPurchaseResponse::CMsgClientPurchaseResponse(const CMsgClientPurchaseResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientPurchaseResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  purchase_result_details_ = 0;
  purchase_receipt_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientPurchaseResponse::~CMsgClientPurchaseResponse() {
  SharedDtor();
}

void CMsgClientPurchaseResponse::SharedDtor() {
  if (purchase_receipt_info_ != &::google::protobuf::internal::kEmptyString) {
    delete purchase_receipt_info_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientPurchaseResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientPurchaseResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientPurchaseResponse_descriptor_;
}

const CMsgClientPurchaseResponse& CMsgClientPurchaseResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientPurchaseResponse* CMsgClientPurchaseResponse::default_instance_ = NULL;

CMsgClientPurchaseResponse* CMsgClientPurchaseResponse::New() const {
  return new CMsgClientPurchaseResponse;
}

void CMsgClientPurchaseResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    purchase_result_details_ = 0;
    if (has_purchase_receipt_info()) {
      if (purchase_receipt_info_ != &::google::protobuf::internal::kEmptyString) {
        purchase_receipt_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientPurchaseResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_purchase_result_details;
        break;
      }

      // optional int32 purchase_result_details = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_purchase_result_details:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &purchase_result_details_)));
          set_has_purchase_result_details();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_purchase_receipt_info;
        break;
      }

      // optional bytes purchase_receipt_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_purchase_receipt_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_purchase_receipt_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientPurchaseResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional int32 purchase_result_details = 2;
  if (has_purchase_result_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->purchase_result_details(), output);
  }

  // optional bytes purchase_receipt_info = 3;
  if (has_purchase_receipt_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->purchase_receipt_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientPurchaseResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional int32 purchase_result_details = 2;
  if (has_purchase_result_details()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->purchase_result_details(), target);
  }

  // optional bytes purchase_receipt_info = 3;
  if (has_purchase_receipt_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->purchase_receipt_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientPurchaseResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional int32 purchase_result_details = 2;
    if (has_purchase_result_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->purchase_result_details());
    }

    // optional bytes purchase_receipt_info = 3;
    if (has_purchase_receipt_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->purchase_receipt_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientPurchaseResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientPurchaseResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientPurchaseResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientPurchaseResponse::MergeFrom(const CMsgClientPurchaseResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_purchase_result_details()) {
      set_purchase_result_details(from.purchase_result_details());
    }
    if (from.has_purchase_receipt_info()) {
      set_purchase_receipt_info(from.purchase_receipt_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientPurchaseResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPurchaseResponse::CopyFrom(const CMsgClientPurchaseResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPurchaseResponse::IsInitialized() const {

  return true;
}

void CMsgClientPurchaseResponse::Swap(CMsgClientPurchaseResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(purchase_result_details_, other->purchase_result_details_);
    std::swap(purchase_receipt_info_, other->purchase_receipt_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientPurchaseResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientPurchaseResponse_descriptor_;
  metadata.reflection = CMsgClientPurchaseResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientActivateOEMLicense::kBiosManufacturerFieldNumber;
const int CMsgClientActivateOEMLicense::kBiosSerialnumberFieldNumber;
const int CMsgClientActivateOEMLicense::kLicenseFileFieldNumber;
const int CMsgClientActivateOEMLicense::kMainboardManufacturerFieldNumber;
const int CMsgClientActivateOEMLicense::kMainboardProductFieldNumber;
const int CMsgClientActivateOEMLicense::kMainboardSerialnumberFieldNumber;
#endif  // !_MSC_VER

CMsgClientActivateOEMLicense::CMsgClientActivateOEMLicense()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientActivateOEMLicense::InitAsDefaultInstance() {
}

CMsgClientActivateOEMLicense::CMsgClientActivateOEMLicense(const CMsgClientActivateOEMLicense& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientActivateOEMLicense::SharedCtor() {
  _cached_size_ = 0;
  bios_manufacturer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bios_serialnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  license_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mainboard_manufacturer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mainboard_product_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mainboard_serialnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientActivateOEMLicense::~CMsgClientActivateOEMLicense() {
  SharedDtor();
}

void CMsgClientActivateOEMLicense::SharedDtor() {
  if (bios_manufacturer_ != &::google::protobuf::internal::kEmptyString) {
    delete bios_manufacturer_;
  }
  if (bios_serialnumber_ != &::google::protobuf::internal::kEmptyString) {
    delete bios_serialnumber_;
  }
  if (license_file_ != &::google::protobuf::internal::kEmptyString) {
    delete license_file_;
  }
  if (mainboard_manufacturer_ != &::google::protobuf::internal::kEmptyString) {
    delete mainboard_manufacturer_;
  }
  if (mainboard_product_ != &::google::protobuf::internal::kEmptyString) {
    delete mainboard_product_;
  }
  if (mainboard_serialnumber_ != &::google::protobuf::internal::kEmptyString) {
    delete mainboard_serialnumber_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientActivateOEMLicense::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientActivateOEMLicense::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientActivateOEMLicense_descriptor_;
}

const CMsgClientActivateOEMLicense& CMsgClientActivateOEMLicense::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientActivateOEMLicense* CMsgClientActivateOEMLicense::default_instance_ = NULL;

CMsgClientActivateOEMLicense* CMsgClientActivateOEMLicense::New() const {
  return new CMsgClientActivateOEMLicense;
}

void CMsgClientActivateOEMLicense::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bios_manufacturer()) {
      if (bios_manufacturer_ != &::google::protobuf::internal::kEmptyString) {
        bios_manufacturer_->clear();
      }
    }
    if (has_bios_serialnumber()) {
      if (bios_serialnumber_ != &::google::protobuf::internal::kEmptyString) {
        bios_serialnumber_->clear();
      }
    }
    if (has_license_file()) {
      if (license_file_ != &::google::protobuf::internal::kEmptyString) {
        license_file_->clear();
      }
    }
    if (has_mainboard_manufacturer()) {
      if (mainboard_manufacturer_ != &::google::protobuf::internal::kEmptyString) {
        mainboard_manufacturer_->clear();
      }
    }
    if (has_mainboard_product()) {
      if (mainboard_product_ != &::google::protobuf::internal::kEmptyString) {
        mainboard_product_->clear();
      }
    }
    if (has_mainboard_serialnumber()) {
      if (mainboard_serialnumber_ != &::google::protobuf::internal::kEmptyString) {
        mainboard_serialnumber_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientActivateOEMLicense::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string bios_manufacturer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bios_manufacturer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bios_manufacturer().data(), this->bios_manufacturer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bios_serialnumber;
        break;
      }

      // optional string bios_serialnumber = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bios_serialnumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bios_serialnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bios_serialnumber().data(), this->bios_serialnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_license_file;
        break;
      }

      // optional bytes license_file = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_license_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_license_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mainboard_manufacturer;
        break;
      }

      // optional string mainboard_manufacturer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mainboard_manufacturer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mainboard_manufacturer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mainboard_manufacturer().data(), this->mainboard_manufacturer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_mainboard_product;
        break;
      }

      // optional string mainboard_product = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mainboard_product:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mainboard_product()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mainboard_product().data(), this->mainboard_product().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_mainboard_serialnumber;
        break;
      }

      // optional string mainboard_serialnumber = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mainboard_serialnumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mainboard_serialnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mainboard_serialnumber().data(), this->mainboard_serialnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientActivateOEMLicense::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string bios_manufacturer = 1;
  if (has_bios_manufacturer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bios_manufacturer().data(), this->bios_manufacturer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->bios_manufacturer(), output);
  }

  // optional string bios_serialnumber = 2;
  if (has_bios_serialnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bios_serialnumber().data(), this->bios_serialnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->bios_serialnumber(), output);
  }

  // optional bytes license_file = 3;
  if (has_license_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->license_file(), output);
  }

  // optional string mainboard_manufacturer = 4;
  if (has_mainboard_manufacturer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mainboard_manufacturer().data(), this->mainboard_manufacturer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->mainboard_manufacturer(), output);
  }

  // optional string mainboard_product = 5;
  if (has_mainboard_product()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mainboard_product().data(), this->mainboard_product().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->mainboard_product(), output);
  }

  // optional string mainboard_serialnumber = 6;
  if (has_mainboard_serialnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mainboard_serialnumber().data(), this->mainboard_serialnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->mainboard_serialnumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientActivateOEMLicense::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string bios_manufacturer = 1;
  if (has_bios_manufacturer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bios_manufacturer().data(), this->bios_manufacturer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bios_manufacturer(), target);
  }

  // optional string bios_serialnumber = 2;
  if (has_bios_serialnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bios_serialnumber().data(), this->bios_serialnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bios_serialnumber(), target);
  }

  // optional bytes license_file = 3;
  if (has_license_file()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->license_file(), target);
  }

  // optional string mainboard_manufacturer = 4;
  if (has_mainboard_manufacturer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mainboard_manufacturer().data(), this->mainboard_manufacturer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mainboard_manufacturer(), target);
  }

  // optional string mainboard_product = 5;
  if (has_mainboard_product()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mainboard_product().data(), this->mainboard_product().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->mainboard_product(), target);
  }

  // optional string mainboard_serialnumber = 6;
  if (has_mainboard_serialnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mainboard_serialnumber().data(), this->mainboard_serialnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->mainboard_serialnumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientActivateOEMLicense::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string bios_manufacturer = 1;
    if (has_bios_manufacturer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bios_manufacturer());
    }

    // optional string bios_serialnumber = 2;
    if (has_bios_serialnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bios_serialnumber());
    }

    // optional bytes license_file = 3;
    if (has_license_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->license_file());
    }

    // optional string mainboard_manufacturer = 4;
    if (has_mainboard_manufacturer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mainboard_manufacturer());
    }

    // optional string mainboard_product = 5;
    if (has_mainboard_product()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mainboard_product());
    }

    // optional string mainboard_serialnumber = 6;
    if (has_mainboard_serialnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mainboard_serialnumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientActivateOEMLicense::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientActivateOEMLicense* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientActivateOEMLicense*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientActivateOEMLicense::MergeFrom(const CMsgClientActivateOEMLicense& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bios_manufacturer()) {
      set_bios_manufacturer(from.bios_manufacturer());
    }
    if (from.has_bios_serialnumber()) {
      set_bios_serialnumber(from.bios_serialnumber());
    }
    if (from.has_license_file()) {
      set_license_file(from.license_file());
    }
    if (from.has_mainboard_manufacturer()) {
      set_mainboard_manufacturer(from.mainboard_manufacturer());
    }
    if (from.has_mainboard_product()) {
      set_mainboard_product(from.mainboard_product());
    }
    if (from.has_mainboard_serialnumber()) {
      set_mainboard_serialnumber(from.mainboard_serialnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientActivateOEMLicense::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientActivateOEMLicense::CopyFrom(const CMsgClientActivateOEMLicense& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientActivateOEMLicense::IsInitialized() const {

  return true;
}

void CMsgClientActivateOEMLicense::Swap(CMsgClientActivateOEMLicense* other) {
  if (other != this) {
    std::swap(bios_manufacturer_, other->bios_manufacturer_);
    std::swap(bios_serialnumber_, other->bios_serialnumber_);
    std::swap(license_file_, other->license_file_);
    std::swap(mainboard_manufacturer_, other->mainboard_manufacturer_);
    std::swap(mainboard_product_, other->mainboard_product_);
    std::swap(mainboard_serialnumber_, other->mainboard_serialnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientActivateOEMLicense::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientActivateOEMLicense_descriptor_;
  metadata.reflection = CMsgClientActivateOEMLicense_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRegisterOEMMachine::kOemRegisterFileFieldNumber;
#endif  // !_MSC_VER

CMsgClientRegisterOEMMachine::CMsgClientRegisterOEMMachine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientRegisterOEMMachine::InitAsDefaultInstance() {
}

CMsgClientRegisterOEMMachine::CMsgClientRegisterOEMMachine(const CMsgClientRegisterOEMMachine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRegisterOEMMachine::SharedCtor() {
  _cached_size_ = 0;
  oem_register_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRegisterOEMMachine::~CMsgClientRegisterOEMMachine() {
  SharedDtor();
}

void CMsgClientRegisterOEMMachine::SharedDtor() {
  if (oem_register_file_ != &::google::protobuf::internal::kEmptyString) {
    delete oem_register_file_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientRegisterOEMMachine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRegisterOEMMachine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientRegisterOEMMachine_descriptor_;
}

const CMsgClientRegisterOEMMachine& CMsgClientRegisterOEMMachine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientRegisterOEMMachine* CMsgClientRegisterOEMMachine::default_instance_ = NULL;

CMsgClientRegisterOEMMachine* CMsgClientRegisterOEMMachine::New() const {
  return new CMsgClientRegisterOEMMachine;
}

void CMsgClientRegisterOEMMachine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_oem_register_file()) {
      if (oem_register_file_ != &::google::protobuf::internal::kEmptyString) {
        oem_register_file_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientRegisterOEMMachine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes oem_register_file = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_oem_register_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRegisterOEMMachine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes oem_register_file = 1;
  if (has_oem_register_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->oem_register_file(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientRegisterOEMMachine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes oem_register_file = 1;
  if (has_oem_register_file()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->oem_register_file(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientRegisterOEMMachine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes oem_register_file = 1;
    if (has_oem_register_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->oem_register_file());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRegisterOEMMachine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientRegisterOEMMachine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientRegisterOEMMachine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientRegisterOEMMachine::MergeFrom(const CMsgClientRegisterOEMMachine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_oem_register_file()) {
      set_oem_register_file(from.oem_register_file());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientRegisterOEMMachine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRegisterOEMMachine::CopyFrom(const CMsgClientRegisterOEMMachine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRegisterOEMMachine::IsInitialized() const {

  return true;
}

void CMsgClientRegisterOEMMachine::Swap(CMsgClientRegisterOEMMachine* other) {
  if (other != this) {
    std::swap(oem_register_file_, other->oem_register_file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientRegisterOEMMachine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientRegisterOEMMachine_descriptor_;
  metadata.reflection = CMsgClientRegisterOEMMachine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRegisterOEMMachineResponse::kEresultFieldNumber;
#endif  // !_MSC_VER

CMsgClientRegisterOEMMachineResponse::CMsgClientRegisterOEMMachineResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientRegisterOEMMachineResponse::InitAsDefaultInstance() {
}

CMsgClientRegisterOEMMachineResponse::CMsgClientRegisterOEMMachineResponse(const CMsgClientRegisterOEMMachineResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRegisterOEMMachineResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRegisterOEMMachineResponse::~CMsgClientRegisterOEMMachineResponse() {
  SharedDtor();
}

void CMsgClientRegisterOEMMachineResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientRegisterOEMMachineResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRegisterOEMMachineResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientRegisterOEMMachineResponse_descriptor_;
}

const CMsgClientRegisterOEMMachineResponse& CMsgClientRegisterOEMMachineResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientRegisterOEMMachineResponse* CMsgClientRegisterOEMMachineResponse::default_instance_ = NULL;

CMsgClientRegisterOEMMachineResponse* CMsgClientRegisterOEMMachineResponse::New() const {
  return new CMsgClientRegisterOEMMachineResponse;
}

void CMsgClientRegisterOEMMachineResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientRegisterOEMMachineResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRegisterOEMMachineResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eresult = 1;
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientRegisterOEMMachineResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 eresult = 1;
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientRegisterOEMMachineResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eresult = 1;
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRegisterOEMMachineResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientRegisterOEMMachineResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientRegisterOEMMachineResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientRegisterOEMMachineResponse::MergeFrom(const CMsgClientRegisterOEMMachineResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientRegisterOEMMachineResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRegisterOEMMachineResponse::CopyFrom(const CMsgClientRegisterOEMMachineResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRegisterOEMMachineResponse::IsInitialized() const {

  return true;
}

void CMsgClientRegisterOEMMachineResponse::Swap(CMsgClientRegisterOEMMachineResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientRegisterOEMMachineResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientRegisterOEMMachineResponse_descriptor_;
  metadata.reflection = CMsgClientRegisterOEMMachineResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientPurchaseWithMachineID::kPackageIdFieldNumber;
const int CMsgClientPurchaseWithMachineID::kMachineInfoFieldNumber;
#endif  // !_MSC_VER

CMsgClientPurchaseWithMachineID::CMsgClientPurchaseWithMachineID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientPurchaseWithMachineID::InitAsDefaultInstance() {
}

CMsgClientPurchaseWithMachineID::CMsgClientPurchaseWithMachineID(const CMsgClientPurchaseWithMachineID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientPurchaseWithMachineID::SharedCtor() {
  _cached_size_ = 0;
  package_id_ = 0u;
  machine_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientPurchaseWithMachineID::~CMsgClientPurchaseWithMachineID() {
  SharedDtor();
}

void CMsgClientPurchaseWithMachineID::SharedDtor() {
  if (machine_info_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_info_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientPurchaseWithMachineID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientPurchaseWithMachineID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientPurchaseWithMachineID_descriptor_;
}

const CMsgClientPurchaseWithMachineID& CMsgClientPurchaseWithMachineID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientPurchaseWithMachineID* CMsgClientPurchaseWithMachineID::default_instance_ = NULL;

CMsgClientPurchaseWithMachineID* CMsgClientPurchaseWithMachineID::New() const {
  return new CMsgClientPurchaseWithMachineID;
}

void CMsgClientPurchaseWithMachineID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    package_id_ = 0u;
    if (has_machine_info()) {
      if (machine_info_ != &::google::protobuf::internal::kEmptyString) {
        machine_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientPurchaseWithMachineID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 package_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &package_id_)));
          set_has_package_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_machine_info;
        break;
      }

      // optional bytes machine_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_machine_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientPurchaseWithMachineID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 package_id = 1;
  if (has_package_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->package_id(), output);
  }

  // optional bytes machine_info = 2;
  if (has_machine_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->machine_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientPurchaseWithMachineID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 package_id = 1;
  if (has_package_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->package_id(), target);
  }

  // optional bytes machine_info = 2;
  if (has_machine_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->machine_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientPurchaseWithMachineID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 package_id = 1;
    if (has_package_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->package_id());
    }

    // optional bytes machine_info = 2;
    if (has_machine_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->machine_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientPurchaseWithMachineID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientPurchaseWithMachineID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientPurchaseWithMachineID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientPurchaseWithMachineID::MergeFrom(const CMsgClientPurchaseWithMachineID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_package_id()) {
      set_package_id(from.package_id());
    }
    if (from.has_machine_info()) {
      set_machine_info(from.machine_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientPurchaseWithMachineID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPurchaseWithMachineID::CopyFrom(const CMsgClientPurchaseWithMachineID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPurchaseWithMachineID::IsInitialized() const {

  return true;
}

void CMsgClientPurchaseWithMachineID::Swap(CMsgClientPurchaseWithMachineID* other) {
  if (other != this) {
    std::swap(package_id_, other->package_id_);
    std::swap(machine_info_, other->machine_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientPurchaseWithMachineID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientPurchaseWithMachineID_descriptor_;
  metadata.reflection = CMsgClientPurchaseWithMachineID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTrading_InitiateTradeRequest::kTradeRequestIdFieldNumber;
const int CMsgTrading_InitiateTradeRequest::kOtherSteamidFieldNumber;
const int CMsgTrading_InitiateTradeRequest::kOtherNameFieldNumber;
#endif  // !_MSC_VER

CMsgTrading_InitiateTradeRequest::CMsgTrading_InitiateTradeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTrading_InitiateTradeRequest::InitAsDefaultInstance() {
}

CMsgTrading_InitiateTradeRequest::CMsgTrading_InitiateTradeRequest(const CMsgTrading_InitiateTradeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTrading_InitiateTradeRequest::SharedCtor() {
  _cached_size_ = 0;
  trade_request_id_ = 0u;
  other_steamid_ = GOOGLE_ULONGLONG(0);
  other_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTrading_InitiateTradeRequest::~CMsgTrading_InitiateTradeRequest() {
  SharedDtor();
}

void CMsgTrading_InitiateTradeRequest::SharedDtor() {
  if (other_name_ != &::google::protobuf::internal::kEmptyString) {
    delete other_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgTrading_InitiateTradeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTrading_InitiateTradeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTrading_InitiateTradeRequest_descriptor_;
}

const CMsgTrading_InitiateTradeRequest& CMsgTrading_InitiateTradeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgTrading_InitiateTradeRequest* CMsgTrading_InitiateTradeRequest::default_instance_ = NULL;

CMsgTrading_InitiateTradeRequest* CMsgTrading_InitiateTradeRequest::New() const {
  return new CMsgTrading_InitiateTradeRequest;
}

void CMsgTrading_InitiateTradeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    trade_request_id_ = 0u;
    other_steamid_ = GOOGLE_ULONGLONG(0);
    if (has_other_name()) {
      if (other_name_ != &::google::protobuf::internal::kEmptyString) {
        other_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTrading_InitiateTradeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 trade_request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trade_request_id_)));
          set_has_trade_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_other_steamid;
        break;
      }

      // optional uint64 other_steamid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_other_steamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &other_steamid_)));
          set_has_other_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_other_name;
        break;
      }

      // optional string other_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_other_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_other_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->other_name().data(), this->other_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTrading_InitiateTradeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 trade_request_id = 1;
  if (has_trade_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->trade_request_id(), output);
  }

  // optional uint64 other_steamid = 2;
  if (has_other_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->other_steamid(), output);
  }

  // optional string other_name = 3;
  if (has_other_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->other_name().data(), this->other_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->other_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTrading_InitiateTradeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 trade_request_id = 1;
  if (has_trade_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->trade_request_id(), target);
  }

  // optional uint64 other_steamid = 2;
  if (has_other_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->other_steamid(), target);
  }

  // optional string other_name = 3;
  if (has_other_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->other_name().data(), this->other_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->other_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTrading_InitiateTradeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 trade_request_id = 1;
    if (has_trade_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trade_request_id());
    }

    // optional uint64 other_steamid = 2;
    if (has_other_steamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->other_steamid());
    }

    // optional string other_name = 3;
    if (has_other_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->other_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTrading_InitiateTradeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTrading_InitiateTradeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTrading_InitiateTradeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTrading_InitiateTradeRequest::MergeFrom(const CMsgTrading_InitiateTradeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trade_request_id()) {
      set_trade_request_id(from.trade_request_id());
    }
    if (from.has_other_steamid()) {
      set_other_steamid(from.other_steamid());
    }
    if (from.has_other_name()) {
      set_other_name(from.other_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTrading_InitiateTradeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTrading_InitiateTradeRequest::CopyFrom(const CMsgTrading_InitiateTradeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTrading_InitiateTradeRequest::IsInitialized() const {

  return true;
}

void CMsgTrading_InitiateTradeRequest::Swap(CMsgTrading_InitiateTradeRequest* other) {
  if (other != this) {
    std::swap(trade_request_id_, other->trade_request_id_);
    std::swap(other_steamid_, other->other_steamid_);
    std::swap(other_name_, other->other_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTrading_InitiateTradeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTrading_InitiateTradeRequest_descriptor_;
  metadata.reflection = CMsgTrading_InitiateTradeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTrading_InitiateTradeResponse::kResponseFieldNumber;
const int CMsgTrading_InitiateTradeResponse::kTradeRequestIdFieldNumber;
const int CMsgTrading_InitiateTradeResponse::kOtherSteamidFieldNumber;
const int CMsgTrading_InitiateTradeResponse::kSteamguardRequiredDaysFieldNumber;
const int CMsgTrading_InitiateTradeResponse::kNewDeviceCooldownDaysFieldNumber;
const int CMsgTrading_InitiateTradeResponse::kDefaultPasswordResetProbationDaysFieldNumber;
const int CMsgTrading_InitiateTradeResponse::kPasswordResetProbationDaysFieldNumber;
const int CMsgTrading_InitiateTradeResponse::kDefaultEmailChangeProbationDaysFieldNumber;
const int CMsgTrading_InitiateTradeResponse::kEmailChangeProbationDaysFieldNumber;
#endif  // !_MSC_VER

CMsgTrading_InitiateTradeResponse::CMsgTrading_InitiateTradeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTrading_InitiateTradeResponse::InitAsDefaultInstance() {
}

CMsgTrading_InitiateTradeResponse::CMsgTrading_InitiateTradeResponse(const CMsgTrading_InitiateTradeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTrading_InitiateTradeResponse::SharedCtor() {
  _cached_size_ = 0;
  response_ = 0u;
  trade_request_id_ = 0u;
  other_steamid_ = GOOGLE_ULONGLONG(0);
  steamguard_required_days_ = 0u;
  new_device_cooldown_days_ = 0u;
  default_password_reset_probation_days_ = 0u;
  password_reset_probation_days_ = 0u;
  default_email_change_probation_days_ = 0u;
  email_change_probation_days_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTrading_InitiateTradeResponse::~CMsgTrading_InitiateTradeResponse() {
  SharedDtor();
}

void CMsgTrading_InitiateTradeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTrading_InitiateTradeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTrading_InitiateTradeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTrading_InitiateTradeResponse_descriptor_;
}

const CMsgTrading_InitiateTradeResponse& CMsgTrading_InitiateTradeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgTrading_InitiateTradeResponse* CMsgTrading_InitiateTradeResponse::default_instance_ = NULL;

CMsgTrading_InitiateTradeResponse* CMsgTrading_InitiateTradeResponse::New() const {
  return new CMsgTrading_InitiateTradeResponse;
}

void CMsgTrading_InitiateTradeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    response_ = 0u;
    trade_request_id_ = 0u;
    other_steamid_ = GOOGLE_ULONGLONG(0);
    steamguard_required_days_ = 0u;
    new_device_cooldown_days_ = 0u;
    default_password_reset_probation_days_ = 0u;
    password_reset_probation_days_ = 0u;
    default_email_change_probation_days_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    email_change_probation_days_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTrading_InitiateTradeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 response = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &response_)));
          set_has_response();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_trade_request_id;
        break;
      }

      // optional uint32 trade_request_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trade_request_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trade_request_id_)));
          set_has_trade_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_other_steamid;
        break;
      }

      // optional uint64 other_steamid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_other_steamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &other_steamid_)));
          set_has_other_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_steamguard_required_days;
        break;
      }

      // optional uint32 steamguard_required_days = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_steamguard_required_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steamguard_required_days_)));
          set_has_steamguard_required_days();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_new_device_cooldown_days;
        break;
      }

      // optional uint32 new_device_cooldown_days = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_device_cooldown_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_device_cooldown_days_)));
          set_has_new_device_cooldown_days();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_default_password_reset_probation_days;
        break;
      }

      // optional uint32 default_password_reset_probation_days = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_default_password_reset_probation_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &default_password_reset_probation_days_)));
          set_has_default_password_reset_probation_days();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_password_reset_probation_days;
        break;
      }

      // optional uint32 password_reset_probation_days = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_password_reset_probation_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &password_reset_probation_days_)));
          set_has_password_reset_probation_days();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_default_email_change_probation_days;
        break;
      }

      // optional uint32 default_email_change_probation_days = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_default_email_change_probation_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &default_email_change_probation_days_)));
          set_has_default_email_change_probation_days();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_email_change_probation_days;
        break;
      }

      // optional uint32 email_change_probation_days = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_email_change_probation_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &email_change_probation_days_)));
          set_has_email_change_probation_days();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTrading_InitiateTradeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 response = 1;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->response(), output);
  }

  // optional uint32 trade_request_id = 2;
  if (has_trade_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->trade_request_id(), output);
  }

  // optional uint64 other_steamid = 3;
  if (has_other_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->other_steamid(), output);
  }

  // optional uint32 steamguard_required_days = 4;
  if (has_steamguard_required_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->steamguard_required_days(), output);
  }

  // optional uint32 new_device_cooldown_days = 5;
  if (has_new_device_cooldown_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->new_device_cooldown_days(), output);
  }

  // optional uint32 default_password_reset_probation_days = 6;
  if (has_default_password_reset_probation_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->default_password_reset_probation_days(), output);
  }

  // optional uint32 password_reset_probation_days = 7;
  if (has_password_reset_probation_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->password_reset_probation_days(), output);
  }

  // optional uint32 default_email_change_probation_days = 8;
  if (has_default_email_change_probation_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->default_email_change_probation_days(), output);
  }

  // optional uint32 email_change_probation_days = 9;
  if (has_email_change_probation_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->email_change_probation_days(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTrading_InitiateTradeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 response = 1;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->response(), target);
  }

  // optional uint32 trade_request_id = 2;
  if (has_trade_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->trade_request_id(), target);
  }

  // optional uint64 other_steamid = 3;
  if (has_other_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->other_steamid(), target);
  }

  // optional uint32 steamguard_required_days = 4;
  if (has_steamguard_required_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->steamguard_required_days(), target);
  }

  // optional uint32 new_device_cooldown_days = 5;
  if (has_new_device_cooldown_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->new_device_cooldown_days(), target);
  }

  // optional uint32 default_password_reset_probation_days = 6;
  if (has_default_password_reset_probation_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->default_password_reset_probation_days(), target);
  }

  // optional uint32 password_reset_probation_days = 7;
  if (has_password_reset_probation_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->password_reset_probation_days(), target);
  }

  // optional uint32 default_email_change_probation_days = 8;
  if (has_default_email_change_probation_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->default_email_change_probation_days(), target);
  }

  // optional uint32 email_change_probation_days = 9;
  if (has_email_change_probation_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->email_change_probation_days(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTrading_InitiateTradeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 response = 1;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->response());
    }

    // optional uint32 trade_request_id = 2;
    if (has_trade_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trade_request_id());
    }

    // optional uint64 other_steamid = 3;
    if (has_other_steamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->other_steamid());
    }

    // optional uint32 steamguard_required_days = 4;
    if (has_steamguard_required_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->steamguard_required_days());
    }

    // optional uint32 new_device_cooldown_days = 5;
    if (has_new_device_cooldown_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_device_cooldown_days());
    }

    // optional uint32 default_password_reset_probation_days = 6;
    if (has_default_password_reset_probation_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->default_password_reset_probation_days());
    }

    // optional uint32 password_reset_probation_days = 7;
    if (has_password_reset_probation_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->password_reset_probation_days());
    }

    // optional uint32 default_email_change_probation_days = 8;
    if (has_default_email_change_probation_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->default_email_change_probation_days());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 email_change_probation_days = 9;
    if (has_email_change_probation_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->email_change_probation_days());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTrading_InitiateTradeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTrading_InitiateTradeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTrading_InitiateTradeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTrading_InitiateTradeResponse::MergeFrom(const CMsgTrading_InitiateTradeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response()) {
      set_response(from.response());
    }
    if (from.has_trade_request_id()) {
      set_trade_request_id(from.trade_request_id());
    }
    if (from.has_other_steamid()) {
      set_other_steamid(from.other_steamid());
    }
    if (from.has_steamguard_required_days()) {
      set_steamguard_required_days(from.steamguard_required_days());
    }
    if (from.has_new_device_cooldown_days()) {
      set_new_device_cooldown_days(from.new_device_cooldown_days());
    }
    if (from.has_default_password_reset_probation_days()) {
      set_default_password_reset_probation_days(from.default_password_reset_probation_days());
    }
    if (from.has_password_reset_probation_days()) {
      set_password_reset_probation_days(from.password_reset_probation_days());
    }
    if (from.has_default_email_change_probation_days()) {
      set_default_email_change_probation_days(from.default_email_change_probation_days());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_email_change_probation_days()) {
      set_email_change_probation_days(from.email_change_probation_days());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTrading_InitiateTradeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTrading_InitiateTradeResponse::CopyFrom(const CMsgTrading_InitiateTradeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTrading_InitiateTradeResponse::IsInitialized() const {

  return true;
}

void CMsgTrading_InitiateTradeResponse::Swap(CMsgTrading_InitiateTradeResponse* other) {
  if (other != this) {
    std::swap(response_, other->response_);
    std::swap(trade_request_id_, other->trade_request_id_);
    std::swap(other_steamid_, other->other_steamid_);
    std::swap(steamguard_required_days_, other->steamguard_required_days_);
    std::swap(new_device_cooldown_days_, other->new_device_cooldown_days_);
    std::swap(default_password_reset_probation_days_, other->default_password_reset_probation_days_);
    std::swap(password_reset_probation_days_, other->password_reset_probation_days_);
    std::swap(default_email_change_probation_days_, other->default_email_change_probation_days_);
    std::swap(email_change_probation_days_, other->email_change_probation_days_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTrading_InitiateTradeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTrading_InitiateTradeResponse_descriptor_;
  metadata.reflection = CMsgTrading_InitiateTradeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTrading_CancelTradeRequest::kOtherSteamidFieldNumber;
#endif  // !_MSC_VER

CMsgTrading_CancelTradeRequest::CMsgTrading_CancelTradeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTrading_CancelTradeRequest::InitAsDefaultInstance() {
}

CMsgTrading_CancelTradeRequest::CMsgTrading_CancelTradeRequest(const CMsgTrading_CancelTradeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTrading_CancelTradeRequest::SharedCtor() {
  _cached_size_ = 0;
  other_steamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTrading_CancelTradeRequest::~CMsgTrading_CancelTradeRequest() {
  SharedDtor();
}

void CMsgTrading_CancelTradeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTrading_CancelTradeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTrading_CancelTradeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTrading_CancelTradeRequest_descriptor_;
}

const CMsgTrading_CancelTradeRequest& CMsgTrading_CancelTradeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgTrading_CancelTradeRequest* CMsgTrading_CancelTradeRequest::default_instance_ = NULL;

CMsgTrading_CancelTradeRequest* CMsgTrading_CancelTradeRequest::New() const {
  return new CMsgTrading_CancelTradeRequest;
}

void CMsgTrading_CancelTradeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    other_steamid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTrading_CancelTradeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 other_steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &other_steamid_)));
          set_has_other_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTrading_CancelTradeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 other_steamid = 1;
  if (has_other_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->other_steamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTrading_CancelTradeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 other_steamid = 1;
  if (has_other_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->other_steamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTrading_CancelTradeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 other_steamid = 1;
    if (has_other_steamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->other_steamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTrading_CancelTradeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTrading_CancelTradeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTrading_CancelTradeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTrading_CancelTradeRequest::MergeFrom(const CMsgTrading_CancelTradeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_other_steamid()) {
      set_other_steamid(from.other_steamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTrading_CancelTradeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTrading_CancelTradeRequest::CopyFrom(const CMsgTrading_CancelTradeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTrading_CancelTradeRequest::IsInitialized() const {

  return true;
}

void CMsgTrading_CancelTradeRequest::Swap(CMsgTrading_CancelTradeRequest* other) {
  if (other != this) {
    std::swap(other_steamid_, other->other_steamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTrading_CancelTradeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTrading_CancelTradeRequest_descriptor_;
  metadata.reflection = CMsgTrading_CancelTradeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTrading_StartSession::kOtherSteamidFieldNumber;
#endif  // !_MSC_VER

CMsgTrading_StartSession::CMsgTrading_StartSession()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgTrading_StartSession::InitAsDefaultInstance() {
}

CMsgTrading_StartSession::CMsgTrading_StartSession(const CMsgTrading_StartSession& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTrading_StartSession::SharedCtor() {
  _cached_size_ = 0;
  other_steamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTrading_StartSession::~CMsgTrading_StartSession() {
  SharedDtor();
}

void CMsgTrading_StartSession::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgTrading_StartSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTrading_StartSession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgTrading_StartSession_descriptor_;
}

const CMsgTrading_StartSession& CMsgTrading_StartSession::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgTrading_StartSession* CMsgTrading_StartSession::default_instance_ = NULL;

CMsgTrading_StartSession* CMsgTrading_StartSession::New() const {
  return new CMsgTrading_StartSession;
}

void CMsgTrading_StartSession::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    other_steamid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgTrading_StartSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 other_steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &other_steamid_)));
          set_has_other_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTrading_StartSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 other_steamid = 1;
  if (has_other_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->other_steamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgTrading_StartSession::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 other_steamid = 1;
  if (has_other_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->other_steamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgTrading_StartSession::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 other_steamid = 1;
    if (has_other_steamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->other_steamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTrading_StartSession::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgTrading_StartSession* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgTrading_StartSession*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgTrading_StartSession::MergeFrom(const CMsgTrading_StartSession& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_other_steamid()) {
      set_other_steamid(from.other_steamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgTrading_StartSession::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTrading_StartSession::CopyFrom(const CMsgTrading_StartSession& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTrading_StartSession::IsInitialized() const {

  return true;
}

void CMsgTrading_StartSession::Swap(CMsgTrading_StartSession* other) {
  if (other != this) {
    std::swap(other_steamid_, other->other_steamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgTrading_StartSession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgTrading_StartSession_descriptor_;
  metadata.reflection = CMsgTrading_StartSession_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientGetCDNAuthToken::kDepotIdFieldNumber;
const int CMsgClientGetCDNAuthToken::kHostNameFieldNumber;
const int CMsgClientGetCDNAuthToken::kAppIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientGetCDNAuthToken::CMsgClientGetCDNAuthToken()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientGetCDNAuthToken::InitAsDefaultInstance() {
}

CMsgClientGetCDNAuthToken::CMsgClientGetCDNAuthToken(const CMsgClientGetCDNAuthToken& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGetCDNAuthToken::SharedCtor() {
  _cached_size_ = 0;
  depot_id_ = 0u;
  host_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  app_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGetCDNAuthToken::~CMsgClientGetCDNAuthToken() {
  SharedDtor();
}

void CMsgClientGetCDNAuthToken::SharedDtor() {
  if (host_name_ != &::google::protobuf::internal::kEmptyString) {
    delete host_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientGetCDNAuthToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientGetCDNAuthToken::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientGetCDNAuthToken_descriptor_;
}

const CMsgClientGetCDNAuthToken& CMsgClientGetCDNAuthToken::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientGetCDNAuthToken* CMsgClientGetCDNAuthToken::default_instance_ = NULL;

CMsgClientGetCDNAuthToken* CMsgClientGetCDNAuthToken::New() const {
  return new CMsgClientGetCDNAuthToken;
}

void CMsgClientGetCDNAuthToken::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    depot_id_ = 0u;
    if (has_host_name()) {
      if (host_name_ != &::google::protobuf::internal::kEmptyString) {
        host_name_->clear();
      }
    }
    app_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientGetCDNAuthToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 depot_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &depot_id_)));
          set_has_depot_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_host_name;
        break;
      }

      // optional string host_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host_name().data(), this->host_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_app_id;
        break;
      }

      // optional uint32 app_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientGetCDNAuthToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 depot_id = 1;
  if (has_depot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->depot_id(), output);
  }

  // optional string host_name = 2;
  if (has_host_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host_name().data(), this->host_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->host_name(), output);
  }

  // optional uint32 app_id = 3;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->app_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientGetCDNAuthToken::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 depot_id = 1;
  if (has_depot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->depot_id(), target);
  }

  // optional string host_name = 2;
  if (has_host_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host_name().data(), this->host_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->host_name(), target);
  }

  // optional uint32 app_id = 3;
  if (has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->app_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientGetCDNAuthToken::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 depot_id = 1;
    if (has_depot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->depot_id());
    }

    // optional string host_name = 2;
    if (has_host_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host_name());
    }

    // optional uint32 app_id = 3;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetCDNAuthToken::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientGetCDNAuthToken* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientGetCDNAuthToken*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientGetCDNAuthToken::MergeFrom(const CMsgClientGetCDNAuthToken& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_depot_id()) {
      set_depot_id(from.depot_id());
    }
    if (from.has_host_name()) {
      set_host_name(from.host_name());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientGetCDNAuthToken::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetCDNAuthToken::CopyFrom(const CMsgClientGetCDNAuthToken& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetCDNAuthToken::IsInitialized() const {

  return true;
}

void CMsgClientGetCDNAuthToken::Swap(CMsgClientGetCDNAuthToken* other) {
  if (other != this) {
    std::swap(depot_id_, other->depot_id_);
    std::swap(host_name_, other->host_name_);
    std::swap(app_id_, other->app_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientGetCDNAuthToken::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientGetCDNAuthToken_descriptor_;
  metadata.reflection = CMsgClientGetCDNAuthToken_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientGetDepotDecryptionKey::kDepotIdFieldNumber;
const int CMsgClientGetDepotDecryptionKey::kAppIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientGetDepotDecryptionKey::CMsgClientGetDepotDecryptionKey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientGetDepotDecryptionKey::InitAsDefaultInstance() {
}

CMsgClientGetDepotDecryptionKey::CMsgClientGetDepotDecryptionKey(const CMsgClientGetDepotDecryptionKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGetDepotDecryptionKey::SharedCtor() {
  _cached_size_ = 0;
  depot_id_ = 0u;
  app_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGetDepotDecryptionKey::~CMsgClientGetDepotDecryptionKey() {
  SharedDtor();
}

void CMsgClientGetDepotDecryptionKey::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientGetDepotDecryptionKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientGetDepotDecryptionKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientGetDepotDecryptionKey_descriptor_;
}

const CMsgClientGetDepotDecryptionKey& CMsgClientGetDepotDecryptionKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientGetDepotDecryptionKey* CMsgClientGetDepotDecryptionKey::default_instance_ = NULL;

CMsgClientGetDepotDecryptionKey* CMsgClientGetDepotDecryptionKey::New() const {
  return new CMsgClientGetDepotDecryptionKey;
}

void CMsgClientGetDepotDecryptionKey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    depot_id_ = 0u;
    app_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientGetDepotDecryptionKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 depot_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &depot_id_)));
          set_has_depot_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_app_id;
        break;
      }

      // optional uint32 app_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientGetDepotDecryptionKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 depot_id = 1;
  if (has_depot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->depot_id(), output);
  }

  // optional uint32 app_id = 2;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->app_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientGetDepotDecryptionKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 depot_id = 1;
  if (has_depot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->depot_id(), target);
  }

  // optional uint32 app_id = 2;
  if (has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->app_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientGetDepotDecryptionKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 depot_id = 1;
    if (has_depot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->depot_id());
    }

    // optional uint32 app_id = 2;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetDepotDecryptionKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientGetDepotDecryptionKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientGetDepotDecryptionKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientGetDepotDecryptionKey::MergeFrom(const CMsgClientGetDepotDecryptionKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_depot_id()) {
      set_depot_id(from.depot_id());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientGetDepotDecryptionKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetDepotDecryptionKey::CopyFrom(const CMsgClientGetDepotDecryptionKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetDepotDecryptionKey::IsInitialized() const {

  return true;
}

void CMsgClientGetDepotDecryptionKey::Swap(CMsgClientGetDepotDecryptionKey* other) {
  if (other != this) {
    std::swap(depot_id_, other->depot_id_);
    std::swap(app_id_, other->app_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientGetDepotDecryptionKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientGetDepotDecryptionKey_descriptor_;
  metadata.reflection = CMsgClientGetDepotDecryptionKey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientGetDepotDecryptionKeyResponse::kEresultFieldNumber;
const int CMsgClientGetDepotDecryptionKeyResponse::kDepotIdFieldNumber;
const int CMsgClientGetDepotDecryptionKeyResponse::kDepotEncryptionKeyFieldNumber;
#endif  // !_MSC_VER

CMsgClientGetDepotDecryptionKeyResponse::CMsgClientGetDepotDecryptionKeyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientGetDepotDecryptionKeyResponse::InitAsDefaultInstance() {
}

CMsgClientGetDepotDecryptionKeyResponse::CMsgClientGetDepotDecryptionKeyResponse(const CMsgClientGetDepotDecryptionKeyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGetDepotDecryptionKeyResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  depot_id_ = 0u;
  depot_encryption_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGetDepotDecryptionKeyResponse::~CMsgClientGetDepotDecryptionKeyResponse() {
  SharedDtor();
}

void CMsgClientGetDepotDecryptionKeyResponse::SharedDtor() {
  if (depot_encryption_key_ != &::google::protobuf::internal::kEmptyString) {
    delete depot_encryption_key_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientGetDepotDecryptionKeyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientGetDepotDecryptionKeyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientGetDepotDecryptionKeyResponse_descriptor_;
}

const CMsgClientGetDepotDecryptionKeyResponse& CMsgClientGetDepotDecryptionKeyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientGetDepotDecryptionKeyResponse* CMsgClientGetDepotDecryptionKeyResponse::default_instance_ = NULL;

CMsgClientGetDepotDecryptionKeyResponse* CMsgClientGetDepotDecryptionKeyResponse::New() const {
  return new CMsgClientGetDepotDecryptionKeyResponse;
}

void CMsgClientGetDepotDecryptionKeyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    depot_id_ = 0u;
    if (has_depot_encryption_key()) {
      if (depot_encryption_key_ != &::google::protobuf::internal::kEmptyString) {
        depot_encryption_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientGetDepotDecryptionKeyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_depot_id;
        break;
      }

      // optional uint32 depot_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_depot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &depot_id_)));
          set_has_depot_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_depot_encryption_key;
        break;
      }

      // optional bytes depot_encryption_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_depot_encryption_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_depot_encryption_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientGetDepotDecryptionKeyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional uint32 depot_id = 2;
  if (has_depot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->depot_id(), output);
  }

  // optional bytes depot_encryption_key = 3;
  if (has_depot_encryption_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->depot_encryption_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientGetDepotDecryptionKeyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional uint32 depot_id = 2;
  if (has_depot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->depot_id(), target);
  }

  // optional bytes depot_encryption_key = 3;
  if (has_depot_encryption_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->depot_encryption_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientGetDepotDecryptionKeyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional uint32 depot_id = 2;
    if (has_depot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->depot_id());
    }

    // optional bytes depot_encryption_key = 3;
    if (has_depot_encryption_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->depot_encryption_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetDepotDecryptionKeyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientGetDepotDecryptionKeyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientGetDepotDecryptionKeyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientGetDepotDecryptionKeyResponse::MergeFrom(const CMsgClientGetDepotDecryptionKeyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_depot_id()) {
      set_depot_id(from.depot_id());
    }
    if (from.has_depot_encryption_key()) {
      set_depot_encryption_key(from.depot_encryption_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientGetDepotDecryptionKeyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetDepotDecryptionKeyResponse::CopyFrom(const CMsgClientGetDepotDecryptionKeyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetDepotDecryptionKeyResponse::IsInitialized() const {

  return true;
}

void CMsgClientGetDepotDecryptionKeyResponse::Swap(CMsgClientGetDepotDecryptionKeyResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(depot_id_, other->depot_id_);
    std::swap(depot_encryption_key_, other->depot_encryption_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientGetDepotDecryptionKeyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientGetDepotDecryptionKeyResponse_descriptor_;
  metadata.reflection = CMsgClientGetDepotDecryptionKeyResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientCheckAppBetaPassword::kAppIdFieldNumber;
const int CMsgClientCheckAppBetaPassword::kBetapasswordFieldNumber;
const int CMsgClientCheckAppBetaPassword::kLanguageFieldNumber;
#endif  // !_MSC_VER

CMsgClientCheckAppBetaPassword::CMsgClientCheckAppBetaPassword()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientCheckAppBetaPassword::InitAsDefaultInstance() {
}

CMsgClientCheckAppBetaPassword::CMsgClientCheckAppBetaPassword(const CMsgClientCheckAppBetaPassword& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientCheckAppBetaPassword::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  betapassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  language_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientCheckAppBetaPassword::~CMsgClientCheckAppBetaPassword() {
  SharedDtor();
}

void CMsgClientCheckAppBetaPassword::SharedDtor() {
  if (betapassword_ != &::google::protobuf::internal::kEmptyString) {
    delete betapassword_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientCheckAppBetaPassword::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientCheckAppBetaPassword::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientCheckAppBetaPassword_descriptor_;
}

const CMsgClientCheckAppBetaPassword& CMsgClientCheckAppBetaPassword::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientCheckAppBetaPassword* CMsgClientCheckAppBetaPassword::default_instance_ = NULL;

CMsgClientCheckAppBetaPassword* CMsgClientCheckAppBetaPassword::New() const {
  return new CMsgClientCheckAppBetaPassword;
}

void CMsgClientCheckAppBetaPassword::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    if (has_betapassword()) {
      if (betapassword_ != &::google::protobuf::internal::kEmptyString) {
        betapassword_->clear();
      }
    }
    language_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientCheckAppBetaPassword::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_betapassword;
        break;
      }

      // optional string betapassword = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_betapassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_betapassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->betapassword().data(), this->betapassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_language;
        break;
      }

      // optional int32 language = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_language:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &language_)));
          set_has_language();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientCheckAppBetaPassword::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional string betapassword = 2;
  if (has_betapassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->betapassword().data(), this->betapassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->betapassword(), output);
  }

  // optional int32 language = 3;
  if (has_language()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->language(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientCheckAppBetaPassword::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional string betapassword = 2;
  if (has_betapassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->betapassword().data(), this->betapassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->betapassword(), target);
  }

  // optional int32 language = 3;
  if (has_language()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->language(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientCheckAppBetaPassword::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional string betapassword = 2;
    if (has_betapassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->betapassword());
    }

    // optional int32 language = 3;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->language());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientCheckAppBetaPassword::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientCheckAppBetaPassword* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientCheckAppBetaPassword*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientCheckAppBetaPassword::MergeFrom(const CMsgClientCheckAppBetaPassword& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_betapassword()) {
      set_betapassword(from.betapassword());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientCheckAppBetaPassword::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientCheckAppBetaPassword::CopyFrom(const CMsgClientCheckAppBetaPassword& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientCheckAppBetaPassword::IsInitialized() const {

  return true;
}

void CMsgClientCheckAppBetaPassword::Swap(CMsgClientCheckAppBetaPassword* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(betapassword_, other->betapassword_);
    std::swap(language_, other->language_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientCheckAppBetaPassword::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientCheckAppBetaPassword_descriptor_;
  metadata.reflection = CMsgClientCheckAppBetaPassword_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientCheckAppBetaPasswordResponse_BetaPassword::kBetanameFieldNumber;
const int CMsgClientCheckAppBetaPasswordResponse_BetaPassword::kBetapasswordFieldNumber;
const int CMsgClientCheckAppBetaPasswordResponse_BetaPassword::kBetadescriptionFieldNumber;
#endif  // !_MSC_VER

CMsgClientCheckAppBetaPasswordResponse_BetaPassword::CMsgClientCheckAppBetaPasswordResponse_BetaPassword()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientCheckAppBetaPasswordResponse_BetaPassword::InitAsDefaultInstance() {
}

CMsgClientCheckAppBetaPasswordResponse_BetaPassword::CMsgClientCheckAppBetaPasswordResponse_BetaPassword(const CMsgClientCheckAppBetaPasswordResponse_BetaPassword& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientCheckAppBetaPasswordResponse_BetaPassword::SharedCtor() {
  _cached_size_ = 0;
  betaname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  betapassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  betadescription_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientCheckAppBetaPasswordResponse_BetaPassword::~CMsgClientCheckAppBetaPasswordResponse_BetaPassword() {
  SharedDtor();
}

void CMsgClientCheckAppBetaPasswordResponse_BetaPassword::SharedDtor() {
  if (betaname_ != &::google::protobuf::internal::kEmptyString) {
    delete betaname_;
  }
  if (betapassword_ != &::google::protobuf::internal::kEmptyString) {
    delete betapassword_;
  }
  if (betadescription_ != &::google::protobuf::internal::kEmptyString) {
    delete betadescription_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientCheckAppBetaPasswordResponse_BetaPassword::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientCheckAppBetaPasswordResponse_BetaPassword::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientCheckAppBetaPasswordResponse_BetaPassword_descriptor_;
}

const CMsgClientCheckAppBetaPasswordResponse_BetaPassword& CMsgClientCheckAppBetaPasswordResponse_BetaPassword::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientCheckAppBetaPasswordResponse_BetaPassword* CMsgClientCheckAppBetaPasswordResponse_BetaPassword::default_instance_ = NULL;

CMsgClientCheckAppBetaPasswordResponse_BetaPassword* CMsgClientCheckAppBetaPasswordResponse_BetaPassword::New() const {
  return new CMsgClientCheckAppBetaPasswordResponse_BetaPassword;
}

void CMsgClientCheckAppBetaPasswordResponse_BetaPassword::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_betaname()) {
      if (betaname_ != &::google::protobuf::internal::kEmptyString) {
        betaname_->clear();
      }
    }
    if (has_betapassword()) {
      if (betapassword_ != &::google::protobuf::internal::kEmptyString) {
        betapassword_->clear();
      }
    }
    if (has_betadescription()) {
      if (betadescription_ != &::google::protobuf::internal::kEmptyString) {
        betadescription_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientCheckAppBetaPasswordResponse_BetaPassword::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string betaname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_betaname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->betaname().data(), this->betaname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_betapassword;
        break;
      }

      // optional string betapassword = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_betapassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_betapassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->betapassword().data(), this->betapassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_betadescription;
        break;
      }

      // optional string betadescription = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_betadescription:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_betadescription()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->betadescription().data(), this->betadescription().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientCheckAppBetaPasswordResponse_BetaPassword::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string betaname = 1;
  if (has_betaname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->betaname().data(), this->betaname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->betaname(), output);
  }

  // optional string betapassword = 2;
  if (has_betapassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->betapassword().data(), this->betapassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->betapassword(), output);
  }

  // optional string betadescription = 3;
  if (has_betadescription()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->betadescription().data(), this->betadescription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->betadescription(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientCheckAppBetaPasswordResponse_BetaPassword::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string betaname = 1;
  if (has_betaname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->betaname().data(), this->betaname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->betaname(), target);
  }

  // optional string betapassword = 2;
  if (has_betapassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->betapassword().data(), this->betapassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->betapassword(), target);
  }

  // optional string betadescription = 3;
  if (has_betadescription()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->betadescription().data(), this->betadescription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->betadescription(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientCheckAppBetaPasswordResponse_BetaPassword::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string betaname = 1;
    if (has_betaname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->betaname());
    }

    // optional string betapassword = 2;
    if (has_betapassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->betapassword());
    }

    // optional string betadescription = 3;
    if (has_betadescription()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->betadescription());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientCheckAppBetaPasswordResponse_BetaPassword::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientCheckAppBetaPasswordResponse_BetaPassword* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientCheckAppBetaPasswordResponse_BetaPassword*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientCheckAppBetaPasswordResponse_BetaPassword::MergeFrom(const CMsgClientCheckAppBetaPasswordResponse_BetaPassword& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_betaname()) {
      set_betaname(from.betaname());
    }
    if (from.has_betapassword()) {
      set_betapassword(from.betapassword());
    }
    if (from.has_betadescription()) {
      set_betadescription(from.betadescription());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientCheckAppBetaPasswordResponse_BetaPassword::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientCheckAppBetaPasswordResponse_BetaPassword::CopyFrom(const CMsgClientCheckAppBetaPasswordResponse_BetaPassword& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientCheckAppBetaPasswordResponse_BetaPassword::IsInitialized() const {

  return true;
}

void CMsgClientCheckAppBetaPasswordResponse_BetaPassword::Swap(CMsgClientCheckAppBetaPasswordResponse_BetaPassword* other) {
  if (other != this) {
    std::swap(betaname_, other->betaname_);
    std::swap(betapassword_, other->betapassword_);
    std::swap(betadescription_, other->betadescription_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientCheckAppBetaPasswordResponse_BetaPassword::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientCheckAppBetaPasswordResponse_BetaPassword_descriptor_;
  metadata.reflection = CMsgClientCheckAppBetaPasswordResponse_BetaPassword_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientCheckAppBetaPasswordResponse::kEresultFieldNumber;
const int CMsgClientCheckAppBetaPasswordResponse::kBetapasswordsFieldNumber;
#endif  // !_MSC_VER

CMsgClientCheckAppBetaPasswordResponse::CMsgClientCheckAppBetaPasswordResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientCheckAppBetaPasswordResponse::InitAsDefaultInstance() {
}

CMsgClientCheckAppBetaPasswordResponse::CMsgClientCheckAppBetaPasswordResponse(const CMsgClientCheckAppBetaPasswordResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientCheckAppBetaPasswordResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientCheckAppBetaPasswordResponse::~CMsgClientCheckAppBetaPasswordResponse() {
  SharedDtor();
}

void CMsgClientCheckAppBetaPasswordResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientCheckAppBetaPasswordResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientCheckAppBetaPasswordResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientCheckAppBetaPasswordResponse_descriptor_;
}

const CMsgClientCheckAppBetaPasswordResponse& CMsgClientCheckAppBetaPasswordResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientCheckAppBetaPasswordResponse* CMsgClientCheckAppBetaPasswordResponse::default_instance_ = NULL;

CMsgClientCheckAppBetaPasswordResponse* CMsgClientCheckAppBetaPasswordResponse::New() const {
  return new CMsgClientCheckAppBetaPasswordResponse;
}

void CMsgClientCheckAppBetaPasswordResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
  }
  betapasswords_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientCheckAppBetaPasswordResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_betapasswords;
        break;
      }

      // repeated .CMsgClientCheckAppBetaPasswordResponse.BetaPassword betapasswords = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_betapasswords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_betapasswords()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_betapasswords;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientCheckAppBetaPasswordResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // repeated .CMsgClientCheckAppBetaPasswordResponse.BetaPassword betapasswords = 4;
  for (int i = 0; i < this->betapasswords_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->betapasswords(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientCheckAppBetaPasswordResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // repeated .CMsgClientCheckAppBetaPasswordResponse.BetaPassword betapasswords = 4;
  for (int i = 0; i < this->betapasswords_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->betapasswords(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientCheckAppBetaPasswordResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  // repeated .CMsgClientCheckAppBetaPasswordResponse.BetaPassword betapasswords = 4;
  total_size += 1 * this->betapasswords_size();
  for (int i = 0; i < this->betapasswords_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->betapasswords(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientCheckAppBetaPasswordResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientCheckAppBetaPasswordResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientCheckAppBetaPasswordResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientCheckAppBetaPasswordResponse::MergeFrom(const CMsgClientCheckAppBetaPasswordResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  betapasswords_.MergeFrom(from.betapasswords_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientCheckAppBetaPasswordResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientCheckAppBetaPasswordResponse::CopyFrom(const CMsgClientCheckAppBetaPasswordResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientCheckAppBetaPasswordResponse::IsInitialized() const {

  return true;
}

void CMsgClientCheckAppBetaPasswordResponse::Swap(CMsgClientCheckAppBetaPasswordResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    betapasswords_.Swap(&other->betapasswords_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientCheckAppBetaPasswordResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientCheckAppBetaPasswordResponse_descriptor_;
  metadata.reflection = CMsgClientCheckAppBetaPasswordResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUpdateAppJobReport::kAppIdFieldNumber;
const int CMsgClientUpdateAppJobReport::kDepotIdsFieldNumber;
const int CMsgClientUpdateAppJobReport::kAppStateFieldNumber;
const int CMsgClientUpdateAppJobReport::kJobAppErrorFieldNumber;
const int CMsgClientUpdateAppJobReport::kErrorDetailsFieldNumber;
const int CMsgClientUpdateAppJobReport::kJobDurationFieldNumber;
const int CMsgClientUpdateAppJobReport::kFilesValidationFailedFieldNumber;
const int CMsgClientUpdateAppJobReport::kJobBytesDownloadedFieldNumber;
const int CMsgClientUpdateAppJobReport::kJobBytesStagedFieldNumber;
const int CMsgClientUpdateAppJobReport::kBytesComittedFieldNumber;
const int CMsgClientUpdateAppJobReport::kStartAppStateFieldNumber;
const int CMsgClientUpdateAppJobReport::kStatsMachineIdFieldNumber;
const int CMsgClientUpdateAppJobReport::kBranchNameFieldNumber;
const int CMsgClientUpdateAppJobReport::kTotalBytesDownloadedFieldNumber;
const int CMsgClientUpdateAppJobReport::kTotalBytesStagedFieldNumber;
const int CMsgClientUpdateAppJobReport::kTotalBytesRestoredFieldNumber;
const int CMsgClientUpdateAppJobReport::kIsBorrowedFieldNumber;
const int CMsgClientUpdateAppJobReport::kIsFreeWeekendFieldNumber;
const int CMsgClientUpdateAppJobReport::kTotalBytesLegacyFieldNumber;
const int CMsgClientUpdateAppJobReport::kTotalBytesPatchedFieldNumber;
const int CMsgClientUpdateAppJobReport::kTotalBytesSavedFieldNumber;
const int CMsgClientUpdateAppJobReport::kCellIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientUpdateAppJobReport::CMsgClientUpdateAppJobReport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientUpdateAppJobReport::InitAsDefaultInstance() {
}

CMsgClientUpdateAppJobReport::CMsgClientUpdateAppJobReport(const CMsgClientUpdateAppJobReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUpdateAppJobReport::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  app_state_ = 0u;
  job_app_error_ = 0u;
  error_details_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  job_duration_ = 0u;
  files_validation_failed_ = 0u;
  job_bytes_downloaded_ = GOOGLE_ULONGLONG(0);
  job_bytes_staged_ = GOOGLE_ULONGLONG(0);
  bytes_comitted_ = GOOGLE_ULONGLONG(0);
  start_app_state_ = 0u;
  stats_machine_id_ = GOOGLE_ULONGLONG(0);
  branch_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  total_bytes_downloaded_ = GOOGLE_ULONGLONG(0);
  total_bytes_staged_ = GOOGLE_ULONGLONG(0);
  total_bytes_restored_ = GOOGLE_ULONGLONG(0);
  is_borrowed_ = false;
  is_free_weekend_ = false;
  total_bytes_legacy_ = GOOGLE_ULONGLONG(0);
  total_bytes_patched_ = GOOGLE_ULONGLONG(0);
  total_bytes_saved_ = GOOGLE_ULONGLONG(0);
  cell_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUpdateAppJobReport::~CMsgClientUpdateAppJobReport() {
  SharedDtor();
}

void CMsgClientUpdateAppJobReport::SharedDtor() {
  if (error_details_ != &::google::protobuf::internal::kEmptyString) {
    delete error_details_;
  }
  if (branch_name_ != &::google::protobuf::internal::kEmptyString) {
    delete branch_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientUpdateAppJobReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUpdateAppJobReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientUpdateAppJobReport_descriptor_;
}

const CMsgClientUpdateAppJobReport& CMsgClientUpdateAppJobReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientUpdateAppJobReport* CMsgClientUpdateAppJobReport::default_instance_ = NULL;

CMsgClientUpdateAppJobReport* CMsgClientUpdateAppJobReport::New() const {
  return new CMsgClientUpdateAppJobReport;
}

void CMsgClientUpdateAppJobReport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    app_state_ = 0u;
    job_app_error_ = 0u;
    if (has_error_details()) {
      if (error_details_ != &::google::protobuf::internal::kEmptyString) {
        error_details_->clear();
      }
    }
    job_duration_ = 0u;
    files_validation_failed_ = 0u;
    job_bytes_downloaded_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    job_bytes_staged_ = GOOGLE_ULONGLONG(0);
    bytes_comitted_ = GOOGLE_ULONGLONG(0);
    start_app_state_ = 0u;
    stats_machine_id_ = GOOGLE_ULONGLONG(0);
    if (has_branch_name()) {
      if (branch_name_ != &::google::protobuf::internal::kEmptyString) {
        branch_name_->clear();
      }
    }
    total_bytes_downloaded_ = GOOGLE_ULONGLONG(0);
    total_bytes_staged_ = GOOGLE_ULONGLONG(0);
    total_bytes_restored_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    is_borrowed_ = false;
    is_free_weekend_ = false;
    total_bytes_legacy_ = GOOGLE_ULONGLONG(0);
    total_bytes_patched_ = GOOGLE_ULONGLONG(0);
    total_bytes_saved_ = GOOGLE_ULONGLONG(0);
    cell_id_ = 0u;
  }
  depot_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientUpdateAppJobReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_depot_ids;
        break;
      }

      // repeated uint32 depot_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_depot_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_depot_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_depot_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_depot_ids;
        if (input->ExpectTag(24)) goto parse_app_state;
        break;
      }

      // optional uint32 app_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_state_)));
          set_has_app_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_job_app_error;
        break;
      }

      // optional uint32 job_app_error = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_app_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_app_error_)));
          set_has_job_app_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_error_details;
        break;
      }

      // optional string error_details = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_details()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_details().data(), this->error_details().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_job_duration;
        break;
      }

      // optional uint32 job_duration = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_duration_)));
          set_has_job_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_files_validation_failed;
        break;
      }

      // optional uint32 files_validation_failed = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_files_validation_failed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &files_validation_failed_)));
          set_has_files_validation_failed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_job_bytes_downloaded;
        break;
      }

      // optional uint64 job_bytes_downloaded = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_bytes_downloaded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &job_bytes_downloaded_)));
          set_has_job_bytes_downloaded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_job_bytes_staged;
        break;
      }

      // optional uint64 job_bytes_staged = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_bytes_staged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &job_bytes_staged_)));
          set_has_job_bytes_staged();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_bytes_comitted;
        break;
      }

      // optional uint64 bytes_comitted = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytes_comitted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_comitted_)));
          set_has_bytes_comitted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_start_app_state;
        break;
      }

      // optional uint32 start_app_state = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_app_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_app_state_)));
          set_has_start_app_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_stats_machine_id;
        break;
      }

      // optional fixed64 stats_machine_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_stats_machine_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &stats_machine_id_)));
          set_has_stats_machine_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_branch_name;
        break;
      }

      // optional string branch_name = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_branch_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_branch_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->branch_name().data(), this->branch_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_total_bytes_downloaded;
        break;
      }

      // optional uint64 total_bytes_downloaded = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_bytes_downloaded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_bytes_downloaded_)));
          set_has_total_bytes_downloaded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_total_bytes_staged;
        break;
      }

      // optional uint64 total_bytes_staged = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_bytes_staged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_bytes_staged_)));
          set_has_total_bytes_staged();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_total_bytes_restored;
        break;
      }

      // optional uint64 total_bytes_restored = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_bytes_restored:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_bytes_restored_)));
          set_has_total_bytes_restored();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_is_borrowed;
        break;
      }

      // optional bool is_borrowed = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_borrowed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_borrowed_)));
          set_has_is_borrowed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_is_free_weekend;
        break;
      }

      // optional bool is_free_weekend = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_free_weekend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_free_weekend_)));
          set_has_is_free_weekend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_total_bytes_legacy;
        break;
      }

      // optional uint64 total_bytes_legacy = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_bytes_legacy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_bytes_legacy_)));
          set_has_total_bytes_legacy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_total_bytes_patched;
        break;
      }

      // optional uint64 total_bytes_patched = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_bytes_patched:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_bytes_patched_)));
          set_has_total_bytes_patched();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_total_bytes_saved;
        break;
      }

      // optional uint64 total_bytes_saved = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_bytes_saved:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_bytes_saved_)));
          set_has_total_bytes_saved();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_cell_id;
        break;
      }

      // optional uint32 cell_id = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUpdateAppJobReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // repeated uint32 depot_ids = 2;
  for (int i = 0; i < this->depot_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->depot_ids(i), output);
  }

  // optional uint32 app_state = 3;
  if (has_app_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->app_state(), output);
  }

  // optional uint32 job_app_error = 4;
  if (has_job_app_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->job_app_error(), output);
  }

  // optional string error_details = 5;
  if (has_error_details()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_details().data(), this->error_details().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->error_details(), output);
  }

  // optional uint32 job_duration = 6;
  if (has_job_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->job_duration(), output);
  }

  // optional uint32 files_validation_failed = 7;
  if (has_files_validation_failed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->files_validation_failed(), output);
  }

  // optional uint64 job_bytes_downloaded = 8;
  if (has_job_bytes_downloaded()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->job_bytes_downloaded(), output);
  }

  // optional uint64 job_bytes_staged = 9;
  if (has_job_bytes_staged()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->job_bytes_staged(), output);
  }

  // optional uint64 bytes_comitted = 10;
  if (has_bytes_comitted()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->bytes_comitted(), output);
  }

  // optional uint32 start_app_state = 11;
  if (has_start_app_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->start_app_state(), output);
  }

  // optional fixed64 stats_machine_id = 12;
  if (has_stats_machine_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(12, this->stats_machine_id(), output);
  }

  // optional string branch_name = 13;
  if (has_branch_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->branch_name().data(), this->branch_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->branch_name(), output);
  }

  // optional uint64 total_bytes_downloaded = 14;
  if (has_total_bytes_downloaded()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->total_bytes_downloaded(), output);
  }

  // optional uint64 total_bytes_staged = 15;
  if (has_total_bytes_staged()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->total_bytes_staged(), output);
  }

  // optional uint64 total_bytes_restored = 16;
  if (has_total_bytes_restored()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->total_bytes_restored(), output);
  }

  // optional bool is_borrowed = 17;
  if (has_is_borrowed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->is_borrowed(), output);
  }

  // optional bool is_free_weekend = 18;
  if (has_is_free_weekend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->is_free_weekend(), output);
  }

  // optional uint64 total_bytes_legacy = 19;
  if (has_total_bytes_legacy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->total_bytes_legacy(), output);
  }

  // optional uint64 total_bytes_patched = 20;
  if (has_total_bytes_patched()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->total_bytes_patched(), output);
  }

  // optional uint64 total_bytes_saved = 21;
  if (has_total_bytes_saved()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->total_bytes_saved(), output);
  }

  // optional uint32 cell_id = 22;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->cell_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientUpdateAppJobReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // repeated uint32 depot_ids = 2;
  for (int i = 0; i < this->depot_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->depot_ids(i), target);
  }

  // optional uint32 app_state = 3;
  if (has_app_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->app_state(), target);
  }

  // optional uint32 job_app_error = 4;
  if (has_job_app_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->job_app_error(), target);
  }

  // optional string error_details = 5;
  if (has_error_details()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_details().data(), this->error_details().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->error_details(), target);
  }

  // optional uint32 job_duration = 6;
  if (has_job_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->job_duration(), target);
  }

  // optional uint32 files_validation_failed = 7;
  if (has_files_validation_failed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->files_validation_failed(), target);
  }

  // optional uint64 job_bytes_downloaded = 8;
  if (has_job_bytes_downloaded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->job_bytes_downloaded(), target);
  }

  // optional uint64 job_bytes_staged = 9;
  if (has_job_bytes_staged()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->job_bytes_staged(), target);
  }

  // optional uint64 bytes_comitted = 10;
  if (has_bytes_comitted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->bytes_comitted(), target);
  }

  // optional uint32 start_app_state = 11;
  if (has_start_app_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->start_app_state(), target);
  }

  // optional fixed64 stats_machine_id = 12;
  if (has_stats_machine_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(12, this->stats_machine_id(), target);
  }

  // optional string branch_name = 13;
  if (has_branch_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->branch_name().data(), this->branch_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->branch_name(), target);
  }

  // optional uint64 total_bytes_downloaded = 14;
  if (has_total_bytes_downloaded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->total_bytes_downloaded(), target);
  }

  // optional uint64 total_bytes_staged = 15;
  if (has_total_bytes_staged()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->total_bytes_staged(), target);
  }

  // optional uint64 total_bytes_restored = 16;
  if (has_total_bytes_restored()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->total_bytes_restored(), target);
  }

  // optional bool is_borrowed = 17;
  if (has_is_borrowed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->is_borrowed(), target);
  }

  // optional bool is_free_weekend = 18;
  if (has_is_free_weekend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->is_free_weekend(), target);
  }

  // optional uint64 total_bytes_legacy = 19;
  if (has_total_bytes_legacy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->total_bytes_legacy(), target);
  }

  // optional uint64 total_bytes_patched = 20;
  if (has_total_bytes_patched()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->total_bytes_patched(), target);
  }

  // optional uint64 total_bytes_saved = 21;
  if (has_total_bytes_saved()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->total_bytes_saved(), target);
  }

  // optional uint32 cell_id = 22;
  if (has_cell_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->cell_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientUpdateAppJobReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 app_state = 3;
    if (has_app_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_state());
    }

    // optional uint32 job_app_error = 4;
    if (has_job_app_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job_app_error());
    }

    // optional string error_details = 5;
    if (has_error_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_details());
    }

    // optional uint32 job_duration = 6;
    if (has_job_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job_duration());
    }

    // optional uint32 files_validation_failed = 7;
    if (has_files_validation_failed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->files_validation_failed());
    }

    // optional uint64 job_bytes_downloaded = 8;
    if (has_job_bytes_downloaded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->job_bytes_downloaded());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 job_bytes_staged = 9;
    if (has_job_bytes_staged()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->job_bytes_staged());
    }

    // optional uint64 bytes_comitted = 10;
    if (has_bytes_comitted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_comitted());
    }

    // optional uint32 start_app_state = 11;
    if (has_start_app_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_app_state());
    }

    // optional fixed64 stats_machine_id = 12;
    if (has_stats_machine_id()) {
      total_size += 1 + 8;
    }

    // optional string branch_name = 13;
    if (has_branch_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->branch_name());
    }

    // optional uint64 total_bytes_downloaded = 14;
    if (has_total_bytes_downloaded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_bytes_downloaded());
    }

    // optional uint64 total_bytes_staged = 15;
    if (has_total_bytes_staged()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_bytes_staged());
    }

    // optional uint64 total_bytes_restored = 16;
    if (has_total_bytes_restored()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_bytes_restored());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool is_borrowed = 17;
    if (has_is_borrowed()) {
      total_size += 2 + 1;
    }

    // optional bool is_free_weekend = 18;
    if (has_is_free_weekend()) {
      total_size += 2 + 1;
    }

    // optional uint64 total_bytes_legacy = 19;
    if (has_total_bytes_legacy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_bytes_legacy());
    }

    // optional uint64 total_bytes_patched = 20;
    if (has_total_bytes_patched()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_bytes_patched());
    }

    // optional uint64 total_bytes_saved = 21;
    if (has_total_bytes_saved()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_bytes_saved());
    }

    // optional uint32 cell_id = 22;
    if (has_cell_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

  }
  // repeated uint32 depot_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->depot_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->depot_ids(i));
    }
    total_size += 1 * this->depot_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUpdateAppJobReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientUpdateAppJobReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientUpdateAppJobReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientUpdateAppJobReport::MergeFrom(const CMsgClientUpdateAppJobReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  depot_ids_.MergeFrom(from.depot_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_app_state()) {
      set_app_state(from.app_state());
    }
    if (from.has_job_app_error()) {
      set_job_app_error(from.job_app_error());
    }
    if (from.has_error_details()) {
      set_error_details(from.error_details());
    }
    if (from.has_job_duration()) {
      set_job_duration(from.job_duration());
    }
    if (from.has_files_validation_failed()) {
      set_files_validation_failed(from.files_validation_failed());
    }
    if (from.has_job_bytes_downloaded()) {
      set_job_bytes_downloaded(from.job_bytes_downloaded());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_job_bytes_staged()) {
      set_job_bytes_staged(from.job_bytes_staged());
    }
    if (from.has_bytes_comitted()) {
      set_bytes_comitted(from.bytes_comitted());
    }
    if (from.has_start_app_state()) {
      set_start_app_state(from.start_app_state());
    }
    if (from.has_stats_machine_id()) {
      set_stats_machine_id(from.stats_machine_id());
    }
    if (from.has_branch_name()) {
      set_branch_name(from.branch_name());
    }
    if (from.has_total_bytes_downloaded()) {
      set_total_bytes_downloaded(from.total_bytes_downloaded());
    }
    if (from.has_total_bytes_staged()) {
      set_total_bytes_staged(from.total_bytes_staged());
    }
    if (from.has_total_bytes_restored()) {
      set_total_bytes_restored(from.total_bytes_restored());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_is_borrowed()) {
      set_is_borrowed(from.is_borrowed());
    }
    if (from.has_is_free_weekend()) {
      set_is_free_weekend(from.is_free_weekend());
    }
    if (from.has_total_bytes_legacy()) {
      set_total_bytes_legacy(from.total_bytes_legacy());
    }
    if (from.has_total_bytes_patched()) {
      set_total_bytes_patched(from.total_bytes_patched());
    }
    if (from.has_total_bytes_saved()) {
      set_total_bytes_saved(from.total_bytes_saved());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientUpdateAppJobReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUpdateAppJobReport::CopyFrom(const CMsgClientUpdateAppJobReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUpdateAppJobReport::IsInitialized() const {

  return true;
}

void CMsgClientUpdateAppJobReport::Swap(CMsgClientUpdateAppJobReport* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    depot_ids_.Swap(&other->depot_ids_);
    std::swap(app_state_, other->app_state_);
    std::swap(job_app_error_, other->job_app_error_);
    std::swap(error_details_, other->error_details_);
    std::swap(job_duration_, other->job_duration_);
    std::swap(files_validation_failed_, other->files_validation_failed_);
    std::swap(job_bytes_downloaded_, other->job_bytes_downloaded_);
    std::swap(job_bytes_staged_, other->job_bytes_staged_);
    std::swap(bytes_comitted_, other->bytes_comitted_);
    std::swap(start_app_state_, other->start_app_state_);
    std::swap(stats_machine_id_, other->stats_machine_id_);
    std::swap(branch_name_, other->branch_name_);
    std::swap(total_bytes_downloaded_, other->total_bytes_downloaded_);
    std::swap(total_bytes_staged_, other->total_bytes_staged_);
    std::swap(total_bytes_restored_, other->total_bytes_restored_);
    std::swap(is_borrowed_, other->is_borrowed_);
    std::swap(is_free_weekend_, other->is_free_weekend_);
    std::swap(total_bytes_legacy_, other->total_bytes_legacy_);
    std::swap(total_bytes_patched_, other->total_bytes_patched_);
    std::swap(total_bytes_saved_, other->total_bytes_saved_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientUpdateAppJobReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientUpdateAppJobReport_descriptor_;
  metadata.reflection = CMsgClientUpdateAppJobReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientDPContentStatsReport::kStatsMachineIdFieldNumber;
const int CMsgClientDPContentStatsReport::kCountryCodeFieldNumber;
const int CMsgClientDPContentStatsReport::kOsTypeFieldNumber;
const int CMsgClientDPContentStatsReport::kLanguageFieldNumber;
const int CMsgClientDPContentStatsReport::kNumInstallFoldersFieldNumber;
const int CMsgClientDPContentStatsReport::kNumInstalledGamesFieldNumber;
const int CMsgClientDPContentStatsReport::kSizeInstalledGamesFieldNumber;
#endif  // !_MSC_VER

CMsgClientDPContentStatsReport::CMsgClientDPContentStatsReport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientDPContentStatsReport::InitAsDefaultInstance() {
}

CMsgClientDPContentStatsReport::CMsgClientDPContentStatsReport(const CMsgClientDPContentStatsReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientDPContentStatsReport::SharedCtor() {
  _cached_size_ = 0;
  stats_machine_id_ = GOOGLE_ULONGLONG(0);
  country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  os_type_ = 0;
  language_ = 0;
  num_install_folders_ = 0u;
  num_installed_games_ = 0u;
  size_installed_games_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientDPContentStatsReport::~CMsgClientDPContentStatsReport() {
  SharedDtor();
}

void CMsgClientDPContentStatsReport::SharedDtor() {
  if (country_code_ != &::google::protobuf::internal::kEmptyString) {
    delete country_code_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientDPContentStatsReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientDPContentStatsReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientDPContentStatsReport_descriptor_;
}

const CMsgClientDPContentStatsReport& CMsgClientDPContentStatsReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientDPContentStatsReport* CMsgClientDPContentStatsReport::default_instance_ = NULL;

CMsgClientDPContentStatsReport* CMsgClientDPContentStatsReport::New() const {
  return new CMsgClientDPContentStatsReport;
}

void CMsgClientDPContentStatsReport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stats_machine_id_ = GOOGLE_ULONGLONG(0);
    if (has_country_code()) {
      if (country_code_ != &::google::protobuf::internal::kEmptyString) {
        country_code_->clear();
      }
    }
    os_type_ = 0;
    language_ = 0;
    num_install_folders_ = 0u;
    num_installed_games_ = 0u;
    size_installed_games_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientDPContentStatsReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 stats_machine_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &stats_machine_id_)));
          set_has_stats_machine_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_country_code;
        break;
      }

      // optional string country_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_country_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->country_code().data(), this->country_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_os_type;
        break;
      }

      // optional int32 os_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_os_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &os_type_)));
          set_has_os_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_language;
        break;
      }

      // optional int32 language = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_language:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &language_)));
          set_has_language();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_num_install_folders;
        break;
      }

      // optional uint32 num_install_folders = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_install_folders:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_install_folders_)));
          set_has_num_install_folders();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_num_installed_games;
        break;
      }

      // optional uint32 num_installed_games = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_installed_games:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_installed_games_)));
          set_has_num_installed_games();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_size_installed_games;
        break;
      }

      // optional uint64 size_installed_games = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size_installed_games:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_installed_games_)));
          set_has_size_installed_games();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientDPContentStatsReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 stats_machine_id = 1;
  if (has_stats_machine_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->stats_machine_id(), output);
  }

  // optional string country_code = 2;
  if (has_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->country_code(), output);
  }

  // optional int32 os_type = 3;
  if (has_os_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->os_type(), output);
  }

  // optional int32 language = 4;
  if (has_language()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->language(), output);
  }

  // optional uint32 num_install_folders = 5;
  if (has_num_install_folders()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->num_install_folders(), output);
  }

  // optional uint32 num_installed_games = 6;
  if (has_num_installed_games()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->num_installed_games(), output);
  }

  // optional uint64 size_installed_games = 7;
  if (has_size_installed_games()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->size_installed_games(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientDPContentStatsReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 stats_machine_id = 1;
  if (has_stats_machine_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->stats_machine_id(), target);
  }

  // optional string country_code = 2;
  if (has_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->country_code(), target);
  }

  // optional int32 os_type = 3;
  if (has_os_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->os_type(), target);
  }

  // optional int32 language = 4;
  if (has_language()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->language(), target);
  }

  // optional uint32 num_install_folders = 5;
  if (has_num_install_folders()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->num_install_folders(), target);
  }

  // optional uint32 num_installed_games = 6;
  if (has_num_installed_games()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->num_installed_games(), target);
  }

  // optional uint64 size_installed_games = 7;
  if (has_size_installed_games()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->size_installed_games(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientDPContentStatsReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 stats_machine_id = 1;
    if (has_stats_machine_id()) {
      total_size += 1 + 8;
    }

    // optional string country_code = 2;
    if (has_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_code());
    }

    // optional int32 os_type = 3;
    if (has_os_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->os_type());
    }

    // optional int32 language = 4;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->language());
    }

    // optional uint32 num_install_folders = 5;
    if (has_num_install_folders()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_install_folders());
    }

    // optional uint32 num_installed_games = 6;
    if (has_num_installed_games()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_installed_games());
    }

    // optional uint64 size_installed_games = 7;
    if (has_size_installed_games()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size_installed_games());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientDPContentStatsReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientDPContentStatsReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientDPContentStatsReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientDPContentStatsReport::MergeFrom(const CMsgClientDPContentStatsReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stats_machine_id()) {
      set_stats_machine_id(from.stats_machine_id());
    }
    if (from.has_country_code()) {
      set_country_code(from.country_code());
    }
    if (from.has_os_type()) {
      set_os_type(from.os_type());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_num_install_folders()) {
      set_num_install_folders(from.num_install_folders());
    }
    if (from.has_num_installed_games()) {
      set_num_installed_games(from.num_installed_games());
    }
    if (from.has_size_installed_games()) {
      set_size_installed_games(from.size_installed_games());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientDPContentStatsReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientDPContentStatsReport::CopyFrom(const CMsgClientDPContentStatsReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientDPContentStatsReport::IsInitialized() const {

  return true;
}

void CMsgClientDPContentStatsReport::Swap(CMsgClientDPContentStatsReport* other) {
  if (other != this) {
    std::swap(stats_machine_id_, other->stats_machine_id_);
    std::swap(country_code_, other->country_code_);
    std::swap(os_type_, other->os_type_);
    std::swap(language_, other->language_);
    std::swap(num_install_folders_, other->num_install_folders_);
    std::swap(num_installed_games_, other->num_installed_games_);
    std::swap(size_installed_games_, other->size_installed_games_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientDPContentStatsReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientDPContentStatsReport_descriptor_;
  metadata.reflection = CMsgClientDPContentStatsReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientGetCDNAuthTokenResponse::kEresultFieldNumber;
const int CMsgClientGetCDNAuthTokenResponse::kTokenFieldNumber;
const int CMsgClientGetCDNAuthTokenResponse::kExpirationTimeFieldNumber;
#endif  // !_MSC_VER

CMsgClientGetCDNAuthTokenResponse::CMsgClientGetCDNAuthTokenResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientGetCDNAuthTokenResponse::InitAsDefaultInstance() {
}

CMsgClientGetCDNAuthTokenResponse::CMsgClientGetCDNAuthTokenResponse(const CMsgClientGetCDNAuthTokenResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGetCDNAuthTokenResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  expiration_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGetCDNAuthTokenResponse::~CMsgClientGetCDNAuthTokenResponse() {
  SharedDtor();
}

void CMsgClientGetCDNAuthTokenResponse::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientGetCDNAuthTokenResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientGetCDNAuthTokenResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientGetCDNAuthTokenResponse_descriptor_;
}

const CMsgClientGetCDNAuthTokenResponse& CMsgClientGetCDNAuthTokenResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientGetCDNAuthTokenResponse* CMsgClientGetCDNAuthTokenResponse::default_instance_ = NULL;

CMsgClientGetCDNAuthTokenResponse* CMsgClientGetCDNAuthTokenResponse::New() const {
  return new CMsgClientGetCDNAuthTokenResponse;
}

void CMsgClientGetCDNAuthTokenResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2u;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    expiration_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientGetCDNAuthTokenResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_expiration_time;
        break;
      }

      // optional uint32 expiration_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expiration_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expiration_time_)));
          set_has_expiration_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientGetCDNAuthTokenResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->token(), output);
  }

  // optional uint32 expiration_time = 3;
  if (has_expiration_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->expiration_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientGetCDNAuthTokenResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 eresult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // optional uint32 expiration_time = 3;
  if (has_expiration_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->expiration_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientGetCDNAuthTokenResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint32 expiration_time = 3;
    if (has_expiration_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expiration_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetCDNAuthTokenResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientGetCDNAuthTokenResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientGetCDNAuthTokenResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientGetCDNAuthTokenResponse::MergeFrom(const CMsgClientGetCDNAuthTokenResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_expiration_time()) {
      set_expiration_time(from.expiration_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientGetCDNAuthTokenResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetCDNAuthTokenResponse::CopyFrom(const CMsgClientGetCDNAuthTokenResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetCDNAuthTokenResponse::IsInitialized() const {

  return true;
}

void CMsgClientGetCDNAuthTokenResponse::Swap(CMsgClientGetCDNAuthTokenResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(token_, other->token_);
    std::swap(expiration_time_, other->expiration_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientGetCDNAuthTokenResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientGetCDNAuthTokenResponse_descriptor_;
  metadata.reflection = CMsgClientGetCDNAuthTokenResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDownloadRateStatistics_StatsInfo::kSourceTypeFieldNumber;
const int CMsgDownloadRateStatistics_StatsInfo::kSourceIdFieldNumber;
const int CMsgDownloadRateStatistics_StatsInfo::kSecondsFieldNumber;
const int CMsgDownloadRateStatistics_StatsInfo::kBytesFieldNumber;
const int CMsgDownloadRateStatistics_StatsInfo::kHostNameFieldNumber;
const int CMsgDownloadRateStatistics_StatsInfo::kMicrosecondsFieldNumber;
const int CMsgDownloadRateStatistics_StatsInfo::kUsedIpv6FieldNumber;
const int CMsgDownloadRateStatistics_StatsInfo::kProxiedFieldNumber;
#endif  // !_MSC_VER

CMsgDownloadRateStatistics_StatsInfo::CMsgDownloadRateStatistics_StatsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgDownloadRateStatistics_StatsInfo::InitAsDefaultInstance() {
}

CMsgDownloadRateStatistics_StatsInfo::CMsgDownloadRateStatistics_StatsInfo(const CMsgDownloadRateStatistics_StatsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDownloadRateStatistics_StatsInfo::SharedCtor() {
  _cached_size_ = 0;
  source_type_ = 0u;
  source_id_ = 0u;
  seconds_ = 0u;
  bytes_ = GOOGLE_ULONGLONG(0);
  host_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  microseconds_ = GOOGLE_ULONGLONG(0);
  used_ipv6_ = false;
  proxied_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDownloadRateStatistics_StatsInfo::~CMsgDownloadRateStatistics_StatsInfo() {
  SharedDtor();
}

void CMsgDownloadRateStatistics_StatsInfo::SharedDtor() {
  if (host_name_ != &::google::protobuf::internal::kEmptyString) {
    delete host_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDownloadRateStatistics_StatsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDownloadRateStatistics_StatsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDownloadRateStatistics_StatsInfo_descriptor_;
}

const CMsgDownloadRateStatistics_StatsInfo& CMsgDownloadRateStatistics_StatsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgDownloadRateStatistics_StatsInfo* CMsgDownloadRateStatistics_StatsInfo::default_instance_ = NULL;

CMsgDownloadRateStatistics_StatsInfo* CMsgDownloadRateStatistics_StatsInfo::New() const {
  return new CMsgDownloadRateStatistics_StatsInfo;
}

void CMsgDownloadRateStatistics_StatsInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    source_type_ = 0u;
    source_id_ = 0u;
    seconds_ = 0u;
    bytes_ = GOOGLE_ULONGLONG(0);
    if (has_host_name()) {
      if (host_name_ != &::google::protobuf::internal::kEmptyString) {
        host_name_->clear();
      }
    }
    microseconds_ = GOOGLE_ULONGLONG(0);
    used_ipv6_ = false;
    proxied_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDownloadRateStatistics_StatsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 source_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_type_)));
          set_has_source_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_source_id;
        break;
      }

      // optional uint32 source_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_id_)));
          set_has_source_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seconds;
        break;
      }

      // optional uint32 seconds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_)));
          set_has_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bytes;
        break;
      }

      // optional uint64 bytes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_)));
          set_has_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_host_name;
        break;
      }

      // optional string host_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host_name().data(), this->host_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_microseconds;
        break;
      }

      // optional uint64 microseconds = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_microseconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &microseconds_)));
          set_has_microseconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_used_ipv6;
        break;
      }

      // optional bool used_ipv6 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_ipv6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &used_ipv6_)));
          set_has_used_ipv6();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_proxied;
        break;
      }

      // optional bool proxied = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proxied:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &proxied_)));
          set_has_proxied();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDownloadRateStatistics_StatsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 source_type = 1;
  if (has_source_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->source_type(), output);
  }

  // optional uint32 source_id = 2;
  if (has_source_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->source_id(), output);
  }

  // optional uint32 seconds = 3;
  if (has_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->seconds(), output);
  }

  // optional uint64 bytes = 4;
  if (has_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->bytes(), output);
  }

  // optional string host_name = 5;
  if (has_host_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host_name().data(), this->host_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->host_name(), output);
  }

  // optional uint64 microseconds = 6;
  if (has_microseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->microseconds(), output);
  }

  // optional bool used_ipv6 = 7;
  if (has_used_ipv6()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->used_ipv6(), output);
  }

  // optional bool proxied = 8;
  if (has_proxied()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->proxied(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgDownloadRateStatistics_StatsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 source_type = 1;
  if (has_source_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->source_type(), target);
  }

  // optional uint32 source_id = 2;
  if (has_source_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->source_id(), target);
  }

  // optional uint32 seconds = 3;
  if (has_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->seconds(), target);
  }

  // optional uint64 bytes = 4;
  if (has_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->bytes(), target);
  }

  // optional string host_name = 5;
  if (has_host_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host_name().data(), this->host_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->host_name(), target);
  }

  // optional uint64 microseconds = 6;
  if (has_microseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->microseconds(), target);
  }

  // optional bool used_ipv6 = 7;
  if (has_used_ipv6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->used_ipv6(), target);
  }

  // optional bool proxied = 8;
  if (has_proxied()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->proxied(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgDownloadRateStatistics_StatsInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 source_type = 1;
    if (has_source_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_type());
    }

    // optional uint32 source_id = 2;
    if (has_source_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_id());
    }

    // optional uint32 seconds = 3;
    if (has_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds());
    }

    // optional uint64 bytes = 4;
    if (has_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes());
    }

    // optional string host_name = 5;
    if (has_host_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host_name());
    }

    // optional uint64 microseconds = 6;
    if (has_microseconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->microseconds());
    }

    // optional bool used_ipv6 = 7;
    if (has_used_ipv6()) {
      total_size += 1 + 1;
    }

    // optional bool proxied = 8;
    if (has_proxied()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDownloadRateStatistics_StatsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDownloadRateStatistics_StatsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDownloadRateStatistics_StatsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDownloadRateStatistics_StatsInfo::MergeFrom(const CMsgDownloadRateStatistics_StatsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_type()) {
      set_source_type(from.source_type());
    }
    if (from.has_source_id()) {
      set_source_id(from.source_id());
    }
    if (from.has_seconds()) {
      set_seconds(from.seconds());
    }
    if (from.has_bytes()) {
      set_bytes(from.bytes());
    }
    if (from.has_host_name()) {
      set_host_name(from.host_name());
    }
    if (from.has_microseconds()) {
      set_microseconds(from.microseconds());
    }
    if (from.has_used_ipv6()) {
      set_used_ipv6(from.used_ipv6());
    }
    if (from.has_proxied()) {
      set_proxied(from.proxied());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDownloadRateStatistics_StatsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDownloadRateStatistics_StatsInfo::CopyFrom(const CMsgDownloadRateStatistics_StatsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDownloadRateStatistics_StatsInfo::IsInitialized() const {

  return true;
}

void CMsgDownloadRateStatistics_StatsInfo::Swap(CMsgDownloadRateStatistics_StatsInfo* other) {
  if (other != this) {
    std::swap(source_type_, other->source_type_);
    std::swap(source_id_, other->source_id_);
    std::swap(seconds_, other->seconds_);
    std::swap(bytes_, other->bytes_);
    std::swap(host_name_, other->host_name_);
    std::swap(microseconds_, other->microseconds_);
    std::swap(used_ipv6_, other->used_ipv6_);
    std::swap(proxied_, other->proxied_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDownloadRateStatistics_StatsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDownloadRateStatistics_StatsInfo_descriptor_;
  metadata.reflection = CMsgDownloadRateStatistics_StatsInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDownloadRateStatistics::kCellIdFieldNumber;
const int CMsgDownloadRateStatistics::kStatsFieldNumber;
const int CMsgDownloadRateStatistics::kThrottlingKbpsFieldNumber;
const int CMsgDownloadRateStatistics::kSteamRealmFieldNumber;
#endif  // !_MSC_VER

CMsgDownloadRateStatistics::CMsgDownloadRateStatistics()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgDownloadRateStatistics::InitAsDefaultInstance() {
}

CMsgDownloadRateStatistics::CMsgDownloadRateStatistics(const CMsgDownloadRateStatistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDownloadRateStatistics::SharedCtor() {
  _cached_size_ = 0;
  cell_id_ = 0u;
  throttling_kbps_ = 0u;
  steam_realm_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDownloadRateStatistics::~CMsgDownloadRateStatistics() {
  SharedDtor();
}

void CMsgDownloadRateStatistics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDownloadRateStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDownloadRateStatistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDownloadRateStatistics_descriptor_;
}

const CMsgDownloadRateStatistics& CMsgDownloadRateStatistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgDownloadRateStatistics* CMsgDownloadRateStatistics::default_instance_ = NULL;

CMsgDownloadRateStatistics* CMsgDownloadRateStatistics::New() const {
  return new CMsgDownloadRateStatistics;
}

void CMsgDownloadRateStatistics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cell_id_ = 0u;
    throttling_kbps_ = 0u;
    steam_realm_ = 0u;
  }
  stats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDownloadRateStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cell_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stats;
        break;
      }

      // repeated .CMsgDownloadRateStatistics.StatsInfo stats = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stats;
        if (input->ExpectTag(24)) goto parse_throttling_kbps;
        break;
      }

      // optional uint32 throttling_kbps = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_throttling_kbps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &throttling_kbps_)));
          set_has_throttling_kbps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_steam_realm;
        break;
      }

      // optional uint32 steam_realm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_steam_realm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steam_realm_)));
          set_has_steam_realm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDownloadRateStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cell_id = 1;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cell_id(), output);
  }

  // repeated .CMsgDownloadRateStatistics.StatsInfo stats = 2;
  for (int i = 0; i < this->stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stats(i), output);
  }

  // optional uint32 throttling_kbps = 3;
  if (has_throttling_kbps()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->throttling_kbps(), output);
  }

  // optional uint32 steam_realm = 4;
  if (has_steam_realm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->steam_realm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgDownloadRateStatistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cell_id = 1;
  if (has_cell_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cell_id(), target);
  }

  // repeated .CMsgDownloadRateStatistics.StatsInfo stats = 2;
  for (int i = 0; i < this->stats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stats(i), target);
  }

  // optional uint32 throttling_kbps = 3;
  if (has_throttling_kbps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->throttling_kbps(), target);
  }

  // optional uint32 steam_realm = 4;
  if (has_steam_realm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->steam_realm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgDownloadRateStatistics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cell_id = 1;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

    // optional uint32 throttling_kbps = 3;
    if (has_throttling_kbps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->throttling_kbps());
    }

    // optional uint32 steam_realm = 4;
    if (has_steam_realm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->steam_realm());
    }

  }
  // repeated .CMsgDownloadRateStatistics.StatsInfo stats = 2;
  total_size += 1 * this->stats_size();
  for (int i = 0; i < this->stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stats(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDownloadRateStatistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDownloadRateStatistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDownloadRateStatistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDownloadRateStatistics::MergeFrom(const CMsgDownloadRateStatistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  stats_.MergeFrom(from.stats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_throttling_kbps()) {
      set_throttling_kbps(from.throttling_kbps());
    }
    if (from.has_steam_realm()) {
      set_steam_realm(from.steam_realm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDownloadRateStatistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDownloadRateStatistics::CopyFrom(const CMsgDownloadRateStatistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDownloadRateStatistics::IsInitialized() const {

  return true;
}

void CMsgDownloadRateStatistics::Swap(CMsgDownloadRateStatistics* other) {
  if (other != this) {
    std::swap(cell_id_, other->cell_id_);
    stats_.Swap(&other->stats_);
    std::swap(throttling_kbps_, other->throttling_kbps_);
    std::swap(steam_realm_, other->steam_realm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDownloadRateStatistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDownloadRateStatistics_descriptor_;
  metadata.reflection = CMsgDownloadRateStatistics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRequestAccountData::kAccountOrEmailFieldNumber;
const int CMsgClientRequestAccountData::kActionFieldNumber;
#endif  // !_MSC_VER

CMsgClientRequestAccountData::CMsgClientRequestAccountData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientRequestAccountData::InitAsDefaultInstance() {
}

CMsgClientRequestAccountData::CMsgClientRequestAccountData(const CMsgClientRequestAccountData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRequestAccountData::SharedCtor() {
  _cached_size_ = 0;
  account_or_email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  action_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRequestAccountData::~CMsgClientRequestAccountData() {
  SharedDtor();
}

void CMsgClientRequestAccountData::SharedDtor() {
  if (account_or_email_ != &::google::protobuf::internal::kEmptyString) {
    delete account_or_email_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientRequestAccountData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRequestAccountData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientRequestAccountData_descriptor_;
}

const CMsgClientRequestAccountData& CMsgClientRequestAccountData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientRequestAccountData* CMsgClientRequestAccountData::default_instance_ = NULL;

CMsgClientRequestAccountData* CMsgClientRequestAccountData::New() const {
  return new CMsgClientRequestAccountData;
}

void CMsgClientRequestAccountData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account_or_email()) {
      if (account_or_email_ != &::google::protobuf::internal::kEmptyString) {
        account_or_email_->clear();
      }
    }
    action_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientRequestAccountData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account_or_email = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_or_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account_or_email().data(), this->account_or_email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_action;
        break;
      }

      // optional uint32 action = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRequestAccountData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account_or_email = 1;
  if (has_account_or_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_or_email().data(), this->account_or_email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account_or_email(), output);
  }

  // optional uint32 action = 2;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->action(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientRequestAccountData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account_or_email = 1;
  if (has_account_or_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_or_email().data(), this->account_or_email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account_or_email(), target);
  }

  // optional uint32 action = 2;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->action(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientRequestAccountData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account_or_email = 1;
    if (has_account_or_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_or_email());
    }

    // optional uint32 action = 2;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestAccountData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientRequestAccountData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientRequestAccountData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientRequestAccountData::MergeFrom(const CMsgClientRequestAccountData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_or_email()) {
      set_account_or_email(from.account_or_email());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientRequestAccountData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRequestAccountData::CopyFrom(const CMsgClientRequestAccountData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestAccountData::IsInitialized() const {

  return true;
}

void CMsgClientRequestAccountData::Swap(CMsgClientRequestAccountData* other) {
  if (other != this) {
    std::swap(account_or_email_, other->account_or_email_);
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientRequestAccountData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientRequestAccountData_descriptor_;
  metadata.reflection = CMsgClientRequestAccountData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRequestAccountDataResponse::kActionFieldNumber;
const int CMsgClientRequestAccountDataResponse::kEresultFieldNumber;
const int CMsgClientRequestAccountDataResponse::kAccountNameFieldNumber;
const int CMsgClientRequestAccountDataResponse::kCtMatchesFieldNumber;
const int CMsgClientRequestAccountDataResponse::kAccountNameSuggestion1FieldNumber;
const int CMsgClientRequestAccountDataResponse::kAccountNameSuggestion2FieldNumber;
const int CMsgClientRequestAccountDataResponse::kAccountNameSuggestion3FieldNumber;
#endif  // !_MSC_VER

CMsgClientRequestAccountDataResponse::CMsgClientRequestAccountDataResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientRequestAccountDataResponse::InitAsDefaultInstance() {
}

CMsgClientRequestAccountDataResponse::CMsgClientRequestAccountDataResponse(const CMsgClientRequestAccountDataResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRequestAccountDataResponse::SharedCtor() {
  _cached_size_ = 0;
  action_ = 0u;
  eresult_ = 0u;
  account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ct_matches_ = 0u;
  account_name_suggestion1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_name_suggestion2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_name_suggestion3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRequestAccountDataResponse::~CMsgClientRequestAccountDataResponse() {
  SharedDtor();
}

void CMsgClientRequestAccountDataResponse::SharedDtor() {
  if (account_name_ != &::google::protobuf::internal::kEmptyString) {
    delete account_name_;
  }
  if (account_name_suggestion1_ != &::google::protobuf::internal::kEmptyString) {
    delete account_name_suggestion1_;
  }
  if (account_name_suggestion2_ != &::google::protobuf::internal::kEmptyString) {
    delete account_name_suggestion2_;
  }
  if (account_name_suggestion3_ != &::google::protobuf::internal::kEmptyString) {
    delete account_name_suggestion3_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientRequestAccountDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRequestAccountDataResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientRequestAccountDataResponse_descriptor_;
}

const CMsgClientRequestAccountDataResponse& CMsgClientRequestAccountDataResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientRequestAccountDataResponse* CMsgClientRequestAccountDataResponse::default_instance_ = NULL;

CMsgClientRequestAccountDataResponse* CMsgClientRequestAccountDataResponse::New() const {
  return new CMsgClientRequestAccountDataResponse;
}

void CMsgClientRequestAccountDataResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_ = 0u;
    eresult_ = 0u;
    if (has_account_name()) {
      if (account_name_ != &::google::protobuf::internal::kEmptyString) {
        account_name_->clear();
      }
    }
    ct_matches_ = 0u;
    if (has_account_name_suggestion1()) {
      if (account_name_suggestion1_ != &::google::protobuf::internal::kEmptyString) {
        account_name_suggestion1_->clear();
      }
    }
    if (has_account_name_suggestion2()) {
      if (account_name_suggestion2_ != &::google::protobuf::internal::kEmptyString) {
        account_name_suggestion2_->clear();
      }
    }
    if (has_account_name_suggestion3()) {
      if (account_name_suggestion3_ != &::google::protobuf::internal::kEmptyString) {
        account_name_suggestion3_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientRequestAccountDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 action = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eresult;
        break;
      }

      // optional uint32 eresult = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account_name;
        break;
      }

      // optional string account_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account_name().data(), this->account_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ct_matches;
        break;
      }

      // optional uint32 ct_matches = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ct_matches:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ct_matches_)));
          set_has_ct_matches();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_account_name_suggestion1;
        break;
      }

      // optional string account_name_suggestion1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_name_suggestion1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name_suggestion1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account_name_suggestion1().data(), this->account_name_suggestion1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_account_name_suggestion2;
        break;
      }

      // optional string account_name_suggestion2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_name_suggestion2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name_suggestion2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account_name_suggestion2().data(), this->account_name_suggestion2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_account_name_suggestion3;
        break;
      }

      // optional string account_name_suggestion3 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_name_suggestion3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name_suggestion3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account_name_suggestion3().data(), this->account_name_suggestion3().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRequestAccountDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->action(), output);
  }

  // optional uint32 eresult = 2;
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->eresult(), output);
  }

  // optional string account_name = 3;
  if (has_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->account_name(), output);
  }

  // optional uint32 ct_matches = 4;
  if (has_ct_matches()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ct_matches(), output);
  }

  // optional string account_name_suggestion1 = 5;
  if (has_account_name_suggestion1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_name_suggestion1().data(), this->account_name_suggestion1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->account_name_suggestion1(), output);
  }

  // optional string account_name_suggestion2 = 6;
  if (has_account_name_suggestion2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_name_suggestion2().data(), this->account_name_suggestion2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->account_name_suggestion2(), output);
  }

  // optional string account_name_suggestion3 = 7;
  if (has_account_name_suggestion3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_name_suggestion3().data(), this->account_name_suggestion3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->account_name_suggestion3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientRequestAccountDataResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 action = 1;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->action(), target);
  }

  // optional uint32 eresult = 2;
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->eresult(), target);
  }

  // optional string account_name = 3;
  if (has_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account_name(), target);
  }

  // optional uint32 ct_matches = 4;
  if (has_ct_matches()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ct_matches(), target);
  }

  // optional string account_name_suggestion1 = 5;
  if (has_account_name_suggestion1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_name_suggestion1().data(), this->account_name_suggestion1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->account_name_suggestion1(), target);
  }

  // optional string account_name_suggestion2 = 6;
  if (has_account_name_suggestion2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_name_suggestion2().data(), this->account_name_suggestion2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->account_name_suggestion2(), target);
  }

  // optional string account_name_suggestion3 = 7;
  if (has_account_name_suggestion3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_name_suggestion3().data(), this->account_name_suggestion3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->account_name_suggestion3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientRequestAccountDataResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action());
    }

    // optional uint32 eresult = 2;
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

    // optional string account_name = 3;
    if (has_account_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name());
    }

    // optional uint32 ct_matches = 4;
    if (has_ct_matches()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ct_matches());
    }

    // optional string account_name_suggestion1 = 5;
    if (has_account_name_suggestion1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name_suggestion1());
    }

    // optional string account_name_suggestion2 = 6;
    if (has_account_name_suggestion2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name_suggestion2());
    }

    // optional string account_name_suggestion3 = 7;
    if (has_account_name_suggestion3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name_suggestion3());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestAccountDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientRequestAccountDataResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientRequestAccountDataResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientRequestAccountDataResponse::MergeFrom(const CMsgClientRequestAccountDataResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_account_name()) {
      set_account_name(from.account_name());
    }
    if (from.has_ct_matches()) {
      set_ct_matches(from.ct_matches());
    }
    if (from.has_account_name_suggestion1()) {
      set_account_name_suggestion1(from.account_name_suggestion1());
    }
    if (from.has_account_name_suggestion2()) {
      set_account_name_suggestion2(from.account_name_suggestion2());
    }
    if (from.has_account_name_suggestion3()) {
      set_account_name_suggestion3(from.account_name_suggestion3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientRequestAccountDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRequestAccountDataResponse::CopyFrom(const CMsgClientRequestAccountDataResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestAccountDataResponse::IsInitialized() const {

  return true;
}

void CMsgClientRequestAccountDataResponse::Swap(CMsgClientRequestAccountDataResponse* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(eresult_, other->eresult_);
    std::swap(account_name_, other->account_name_);
    std::swap(ct_matches_, other->ct_matches_);
    std::swap(account_name_suggestion1_, other->account_name_suggestion1_);
    std::swap(account_name_suggestion2_, other->account_name_suggestion2_);
    std::swap(account_name_suggestion3_, other->account_name_suggestion3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientRequestAccountDataResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientRequestAccountDataResponse_descriptor_;
  metadata.reflection = CMsgClientRequestAccountDataResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUGSGetGlobalStats::kGameidFieldNumber;
const int CMsgClientUGSGetGlobalStats::kHistoryDaysRequestedFieldNumber;
const int CMsgClientUGSGetGlobalStats::kTimeLastRequestedFieldNumber;
const int CMsgClientUGSGetGlobalStats::kFirstDayCachedFieldNumber;
const int CMsgClientUGSGetGlobalStats::kDaysCachedFieldNumber;
#endif  // !_MSC_VER

CMsgClientUGSGetGlobalStats::CMsgClientUGSGetGlobalStats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientUGSGetGlobalStats::InitAsDefaultInstance() {
}

CMsgClientUGSGetGlobalStats::CMsgClientUGSGetGlobalStats(const CMsgClientUGSGetGlobalStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUGSGetGlobalStats::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = GOOGLE_ULONGLONG(0);
  history_days_requested_ = 0u;
  time_last_requested_ = 0u;
  first_day_cached_ = 0u;
  days_cached_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUGSGetGlobalStats::~CMsgClientUGSGetGlobalStats() {
  SharedDtor();
}

void CMsgClientUGSGetGlobalStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientUGSGetGlobalStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUGSGetGlobalStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientUGSGetGlobalStats_descriptor_;
}

const CMsgClientUGSGetGlobalStats& CMsgClientUGSGetGlobalStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientUGSGetGlobalStats* CMsgClientUGSGetGlobalStats::default_instance_ = NULL;

CMsgClientUGSGetGlobalStats* CMsgClientUGSGetGlobalStats::New() const {
  return new CMsgClientUGSGetGlobalStats;
}

void CMsgClientUGSGetGlobalStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = GOOGLE_ULONGLONG(0);
    history_days_requested_ = 0u;
    time_last_requested_ = 0u;
    first_day_cached_ = 0u;
    days_cached_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientUGSGetGlobalStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 gameid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_history_days_requested;
        break;
      }

      // optional uint32 history_days_requested = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history_days_requested:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &history_days_requested_)));
          set_has_history_days_requested();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_time_last_requested;
        break;
      }

      // optional fixed32 time_last_requested = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_time_last_requested:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &time_last_requested_)));
          set_has_time_last_requested();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_first_day_cached;
        break;
      }

      // optional uint32 first_day_cached = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_day_cached:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_day_cached_)));
          set_has_first_day_cached();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_days_cached;
        break;
      }

      // optional uint32 days_cached = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_days_cached:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &days_cached_)));
          set_has_days_cached();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUGSGetGlobalStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->gameid(), output);
  }

  // optional uint32 history_days_requested = 2;
  if (has_history_days_requested()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->history_days_requested(), output);
  }

  // optional fixed32 time_last_requested = 3;
  if (has_time_last_requested()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->time_last_requested(), output);
  }

  // optional uint32 first_day_cached = 4;
  if (has_first_day_cached()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->first_day_cached(), output);
  }

  // optional uint32 days_cached = 5;
  if (has_days_cached()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->days_cached(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientUGSGetGlobalStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->gameid(), target);
  }

  // optional uint32 history_days_requested = 2;
  if (has_history_days_requested()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->history_days_requested(), target);
  }

  // optional fixed32 time_last_requested = 3;
  if (has_time_last_requested()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->time_last_requested(), target);
  }

  // optional uint32 first_day_cached = 4;
  if (has_first_day_cached()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->first_day_cached(), target);
  }

  // optional uint32 days_cached = 5;
  if (has_days_cached()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->days_cached(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientUGSGetGlobalStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gameid());
    }

    // optional uint32 history_days_requested = 2;
    if (has_history_days_requested()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->history_days_requested());
    }

    // optional fixed32 time_last_requested = 3;
    if (has_time_last_requested()) {
      total_size += 1 + 4;
    }

    // optional uint32 first_day_cached = 4;
    if (has_first_day_cached()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first_day_cached());
    }

    // optional uint32 days_cached = 5;
    if (has_days_cached()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->days_cached());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUGSGetGlobalStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientUGSGetGlobalStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientUGSGetGlobalStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientUGSGetGlobalStats::MergeFrom(const CMsgClientUGSGetGlobalStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_history_days_requested()) {
      set_history_days_requested(from.history_days_requested());
    }
    if (from.has_time_last_requested()) {
      set_time_last_requested(from.time_last_requested());
    }
    if (from.has_first_day_cached()) {
      set_first_day_cached(from.first_day_cached());
    }
    if (from.has_days_cached()) {
      set_days_cached(from.days_cached());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientUGSGetGlobalStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUGSGetGlobalStats::CopyFrom(const CMsgClientUGSGetGlobalStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUGSGetGlobalStats::IsInitialized() const {

  return true;
}

void CMsgClientUGSGetGlobalStats::Swap(CMsgClientUGSGetGlobalStats* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(history_days_requested_, other->history_days_requested_);
    std::swap(time_last_requested_, other->time_last_requested_);
    std::swap(first_day_cached_, other->first_day_cached_);
    std::swap(days_cached_, other->days_cached_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientUGSGetGlobalStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientUGSGetGlobalStats_descriptor_;
  metadata.reflection = CMsgClientUGSGetGlobalStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUGSGetGlobalStatsResponse_Day_Stat::kStatIdFieldNumber;
const int CMsgClientUGSGetGlobalStatsResponse_Day_Stat::kDataFieldNumber;
#endif  // !_MSC_VER

CMsgClientUGSGetGlobalStatsResponse_Day_Stat::CMsgClientUGSGetGlobalStatsResponse_Day_Stat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientUGSGetGlobalStatsResponse_Day_Stat::InitAsDefaultInstance() {
}

CMsgClientUGSGetGlobalStatsResponse_Day_Stat::CMsgClientUGSGetGlobalStatsResponse_Day_Stat(const CMsgClientUGSGetGlobalStatsResponse_Day_Stat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUGSGetGlobalStatsResponse_Day_Stat::SharedCtor() {
  _cached_size_ = 0;
  stat_id_ = 0;
  data_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUGSGetGlobalStatsResponse_Day_Stat::~CMsgClientUGSGetGlobalStatsResponse_Day_Stat() {
  SharedDtor();
}

void CMsgClientUGSGetGlobalStatsResponse_Day_Stat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientUGSGetGlobalStatsResponse_Day_Stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUGSGetGlobalStatsResponse_Day_Stat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientUGSGetGlobalStatsResponse_Day_Stat_descriptor_;
}

const CMsgClientUGSGetGlobalStatsResponse_Day_Stat& CMsgClientUGSGetGlobalStatsResponse_Day_Stat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientUGSGetGlobalStatsResponse_Day_Stat* CMsgClientUGSGetGlobalStatsResponse_Day_Stat::default_instance_ = NULL;

CMsgClientUGSGetGlobalStatsResponse_Day_Stat* CMsgClientUGSGetGlobalStatsResponse_Day_Stat::New() const {
  return new CMsgClientUGSGetGlobalStatsResponse_Day_Stat;
}

void CMsgClientUGSGetGlobalStatsResponse_Day_Stat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stat_id_ = 0;
    data_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientUGSGetGlobalStatsResponse_Day_Stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 stat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stat_id_)));
          set_has_stat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_data;
        break;
      }

      // optional int64 data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUGSGetGlobalStatsResponse_Day_Stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 stat_id = 1;
  if (has_stat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stat_id(), output);
  }

  // optional int64 data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientUGSGetGlobalStatsResponse_Day_Stat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 stat_id = 1;
  if (has_stat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stat_id(), target);
  }

  // optional int64 data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientUGSGetGlobalStatsResponse_Day_Stat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 stat_id = 1;
    if (has_stat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stat_id());
    }

    // optional int64 data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUGSGetGlobalStatsResponse_Day_Stat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientUGSGetGlobalStatsResponse_Day_Stat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientUGSGetGlobalStatsResponse_Day_Stat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientUGSGetGlobalStatsResponse_Day_Stat::MergeFrom(const CMsgClientUGSGetGlobalStatsResponse_Day_Stat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stat_id()) {
      set_stat_id(from.stat_id());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientUGSGetGlobalStatsResponse_Day_Stat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUGSGetGlobalStatsResponse_Day_Stat::CopyFrom(const CMsgClientUGSGetGlobalStatsResponse_Day_Stat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUGSGetGlobalStatsResponse_Day_Stat::IsInitialized() const {

  return true;
}

void CMsgClientUGSGetGlobalStatsResponse_Day_Stat::Swap(CMsgClientUGSGetGlobalStatsResponse_Day_Stat* other) {
  if (other != this) {
    std::swap(stat_id_, other->stat_id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientUGSGetGlobalStatsResponse_Day_Stat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientUGSGetGlobalStatsResponse_Day_Stat_descriptor_;
  metadata.reflection = CMsgClientUGSGetGlobalStatsResponse_Day_Stat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientUGSGetGlobalStatsResponse_Day::kDayIdFieldNumber;
const int CMsgClientUGSGetGlobalStatsResponse_Day::kStatsFieldNumber;
#endif  // !_MSC_VER

CMsgClientUGSGetGlobalStatsResponse_Day::CMsgClientUGSGetGlobalStatsResponse_Day()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientUGSGetGlobalStatsResponse_Day::InitAsDefaultInstance() {
}

CMsgClientUGSGetGlobalStatsResponse_Day::CMsgClientUGSGetGlobalStatsResponse_Day(const CMsgClientUGSGetGlobalStatsResponse_Day& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUGSGetGlobalStatsResponse_Day::SharedCtor() {
  _cached_size_ = 0;
  day_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUGSGetGlobalStatsResponse_Day::~CMsgClientUGSGetGlobalStatsResponse_Day() {
  SharedDtor();
}

void CMsgClientUGSGetGlobalStatsResponse_Day::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientUGSGetGlobalStatsResponse_Day::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUGSGetGlobalStatsResponse_Day::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientUGSGetGlobalStatsResponse_Day_descriptor_;
}

const CMsgClientUGSGetGlobalStatsResponse_Day& CMsgClientUGSGetGlobalStatsResponse_Day::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientUGSGetGlobalStatsResponse_Day* CMsgClientUGSGetGlobalStatsResponse_Day::default_instance_ = NULL;

CMsgClientUGSGetGlobalStatsResponse_Day* CMsgClientUGSGetGlobalStatsResponse_Day::New() const {
  return new CMsgClientUGSGetGlobalStatsResponse_Day;
}

void CMsgClientUGSGetGlobalStatsResponse_Day::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    day_id_ = 0u;
  }
  stats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientUGSGetGlobalStatsResponse_Day::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 day_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_id_)));
          set_has_day_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stats;
        break;
      }

      // repeated .CMsgClientUGSGetGlobalStatsResponse.Day.Stat stats = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stats;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUGSGetGlobalStatsResponse_Day::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 day_id = 1;
  if (has_day_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->day_id(), output);
  }

  // repeated .CMsgClientUGSGetGlobalStatsResponse.Day.Stat stats = 2;
  for (int i = 0; i < this->stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stats(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientUGSGetGlobalStatsResponse_Day::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 day_id = 1;
  if (has_day_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->day_id(), target);
  }

  // repeated .CMsgClientUGSGetGlobalStatsResponse.Day.Stat stats = 2;
  for (int i = 0; i < this->stats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stats(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientUGSGetGlobalStatsResponse_Day::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 day_id = 1;
    if (has_day_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day_id());
    }

  }
  // repeated .CMsgClientUGSGetGlobalStatsResponse.Day.Stat stats = 2;
  total_size += 1 * this->stats_size();
  for (int i = 0; i < this->stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stats(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUGSGetGlobalStatsResponse_Day::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientUGSGetGlobalStatsResponse_Day* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientUGSGetGlobalStatsResponse_Day*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientUGSGetGlobalStatsResponse_Day::MergeFrom(const CMsgClientUGSGetGlobalStatsResponse_Day& from) {
  GOOGLE_CHECK_NE(&from, this);
  stats_.MergeFrom(from.stats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day_id()) {
      set_day_id(from.day_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientUGSGetGlobalStatsResponse_Day::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUGSGetGlobalStatsResponse_Day::CopyFrom(const CMsgClientUGSGetGlobalStatsResponse_Day& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUGSGetGlobalStatsResponse_Day::IsInitialized() const {

  return true;
}

void CMsgClientUGSGetGlobalStatsResponse_Day::Swap(CMsgClientUGSGetGlobalStatsResponse_Day* other) {
  if (other != this) {
    std::swap(day_id_, other->day_id_);
    stats_.Swap(&other->stats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientUGSGetGlobalStatsResponse_Day::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientUGSGetGlobalStatsResponse_Day_descriptor_;
  metadata.reflection = CMsgClientUGSGetGlobalStatsResponse_Day_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientUGSGetGlobalStatsResponse::kEresultFieldNumber;
const int CMsgClientUGSGetGlobalStatsResponse::kTimestampFieldNumber;
const int CMsgClientUGSGetGlobalStatsResponse::kDayCurrentFieldNumber;
const int CMsgClientUGSGetGlobalStatsResponse::kDaysFieldNumber;
#endif  // !_MSC_VER

CMsgClientUGSGetGlobalStatsResponse::CMsgClientUGSGetGlobalStatsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientUGSGetGlobalStatsResponse::InitAsDefaultInstance() {
}

CMsgClientUGSGetGlobalStatsResponse::CMsgClientUGSGetGlobalStatsResponse(const CMsgClientUGSGetGlobalStatsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUGSGetGlobalStatsResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  timestamp_ = 0u;
  day_current_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUGSGetGlobalStatsResponse::~CMsgClientUGSGetGlobalStatsResponse() {
  SharedDtor();
}

void CMsgClientUGSGetGlobalStatsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientUGSGetGlobalStatsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUGSGetGlobalStatsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientUGSGetGlobalStatsResponse_descriptor_;
}

const CMsgClientUGSGetGlobalStatsResponse& CMsgClientUGSGetGlobalStatsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientUGSGetGlobalStatsResponse* CMsgClientUGSGetGlobalStatsResponse::default_instance_ = NULL;

CMsgClientUGSGetGlobalStatsResponse* CMsgClientUGSGetGlobalStatsResponse::New() const {
  return new CMsgClientUGSGetGlobalStatsResponse;
}

void CMsgClientUGSGetGlobalStatsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    timestamp_ = 0u;
    day_current_ = 0;
  }
  days_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientUGSGetGlobalStatsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_timestamp;
        break;
      }

      // optional fixed32 timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_day_current;
        break;
      }

      // optional int32 day_current = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_current_)));
          set_has_day_current();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_days;
        break;
      }

      // repeated .CMsgClientUGSGetGlobalStatsResponse.Day days = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_days:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_days()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_days;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUGSGetGlobalStatsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional fixed32 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->timestamp(), output);
  }

  // optional int32 day_current = 3;
  if (has_day_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->day_current(), output);
  }

  // repeated .CMsgClientUGSGetGlobalStatsResponse.Day days = 4;
  for (int i = 0; i < this->days_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->days(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientUGSGetGlobalStatsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional fixed32 timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->timestamp(), target);
  }

  // optional int32 day_current = 3;
  if (has_day_current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->day_current(), target);
  }

  // repeated .CMsgClientUGSGetGlobalStatsResponse.Day days = 4;
  for (int i = 0; i < this->days_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->days(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientUGSGetGlobalStatsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional fixed32 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 + 4;
    }

    // optional int32 day_current = 3;
    if (has_day_current()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day_current());
    }

  }
  // repeated .CMsgClientUGSGetGlobalStatsResponse.Day days = 4;
  total_size += 1 * this->days_size();
  for (int i = 0; i < this->days_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->days(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUGSGetGlobalStatsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientUGSGetGlobalStatsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientUGSGetGlobalStatsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientUGSGetGlobalStatsResponse::MergeFrom(const CMsgClientUGSGetGlobalStatsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  days_.MergeFrom(from.days_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_day_current()) {
      set_day_current(from.day_current());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientUGSGetGlobalStatsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUGSGetGlobalStatsResponse::CopyFrom(const CMsgClientUGSGetGlobalStatsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUGSGetGlobalStatsResponse::IsInitialized() const {

  return true;
}

void CMsgClientUGSGetGlobalStatsResponse::Swap(CMsgClientUGSGetGlobalStatsResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(day_current_, other->day_current_);
    days_.Swap(&other->days_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientUGSGetGlobalStatsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientUGSGetGlobalStatsResponse_descriptor_;
  metadata.reflection = CMsgClientUGSGetGlobalStatsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRedeemGuestPass::kGuestPassIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientRedeemGuestPass::CMsgClientRedeemGuestPass()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientRedeemGuestPass::InitAsDefaultInstance() {
}

CMsgClientRedeemGuestPass::CMsgClientRedeemGuestPass(const CMsgClientRedeemGuestPass& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRedeemGuestPass::SharedCtor() {
  _cached_size_ = 0;
  guest_pass_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRedeemGuestPass::~CMsgClientRedeemGuestPass() {
  SharedDtor();
}

void CMsgClientRedeemGuestPass::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientRedeemGuestPass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRedeemGuestPass::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientRedeemGuestPass_descriptor_;
}

const CMsgClientRedeemGuestPass& CMsgClientRedeemGuestPass::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientRedeemGuestPass* CMsgClientRedeemGuestPass::default_instance_ = NULL;

CMsgClientRedeemGuestPass* CMsgClientRedeemGuestPass::New() const {
  return new CMsgClientRedeemGuestPass;
}

void CMsgClientRedeemGuestPass::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guest_pass_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientRedeemGuestPass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 guest_pass_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guest_pass_id_)));
          set_has_guest_pass_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRedeemGuestPass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 guest_pass_id = 1;
  if (has_guest_pass_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guest_pass_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientRedeemGuestPass::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 guest_pass_id = 1;
  if (has_guest_pass_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guest_pass_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientRedeemGuestPass::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 guest_pass_id = 1;
    if (has_guest_pass_id()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRedeemGuestPass::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientRedeemGuestPass* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientRedeemGuestPass*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientRedeemGuestPass::MergeFrom(const CMsgClientRedeemGuestPass& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guest_pass_id()) {
      set_guest_pass_id(from.guest_pass_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientRedeemGuestPass::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRedeemGuestPass::CopyFrom(const CMsgClientRedeemGuestPass& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRedeemGuestPass::IsInitialized() const {

  return true;
}

void CMsgClientRedeemGuestPass::Swap(CMsgClientRedeemGuestPass* other) {
  if (other != this) {
    std::swap(guest_pass_id_, other->guest_pass_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientRedeemGuestPass::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientRedeemGuestPass_descriptor_;
  metadata.reflection = CMsgClientRedeemGuestPass_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRedeemGuestPassResponse::kEresultFieldNumber;
const int CMsgClientRedeemGuestPassResponse::kPackageIdFieldNumber;
const int CMsgClientRedeemGuestPassResponse::kMustOwnAppidFieldNumber;
#endif  // !_MSC_VER

CMsgClientRedeemGuestPassResponse::CMsgClientRedeemGuestPassResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientRedeemGuestPassResponse::InitAsDefaultInstance() {
}

CMsgClientRedeemGuestPassResponse::CMsgClientRedeemGuestPassResponse(const CMsgClientRedeemGuestPassResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRedeemGuestPassResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2u;
  package_id_ = 0u;
  must_own_appid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRedeemGuestPassResponse::~CMsgClientRedeemGuestPassResponse() {
  SharedDtor();
}

void CMsgClientRedeemGuestPassResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientRedeemGuestPassResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRedeemGuestPassResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientRedeemGuestPassResponse_descriptor_;
}

const CMsgClientRedeemGuestPassResponse& CMsgClientRedeemGuestPassResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientRedeemGuestPassResponse* CMsgClientRedeemGuestPassResponse::default_instance_ = NULL;

CMsgClientRedeemGuestPassResponse* CMsgClientRedeemGuestPassResponse::New() const {
  return new CMsgClientRedeemGuestPassResponse;
}

void CMsgClientRedeemGuestPassResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2u;
    package_id_ = 0u;
    must_own_appid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientRedeemGuestPassResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_package_id;
        break;
      }

      // optional uint32 package_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_package_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &package_id_)));
          set_has_package_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_must_own_appid;
        break;
      }

      // optional uint32 must_own_appid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_must_own_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &must_own_appid_)));
          set_has_must_own_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRedeemGuestPassResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  // optional uint32 package_id = 2;
  if (has_package_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->package_id(), output);
  }

  // optional uint32 must_own_appid = 3;
  if (has_must_own_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->must_own_appid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientRedeemGuestPassResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 eresult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  // optional uint32 package_id = 2;
  if (has_package_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->package_id(), target);
  }

  // optional uint32 must_own_appid = 3;
  if (has_must_own_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->must_own_appid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientRedeemGuestPassResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

    // optional uint32 package_id = 2;
    if (has_package_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->package_id());
    }

    // optional uint32 must_own_appid = 3;
    if (has_must_own_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->must_own_appid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRedeemGuestPassResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientRedeemGuestPassResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientRedeemGuestPassResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientRedeemGuestPassResponse::MergeFrom(const CMsgClientRedeemGuestPassResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_package_id()) {
      set_package_id(from.package_id());
    }
    if (from.has_must_own_appid()) {
      set_must_own_appid(from.must_own_appid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientRedeemGuestPassResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRedeemGuestPassResponse::CopyFrom(const CMsgClientRedeemGuestPassResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRedeemGuestPassResponse::IsInitialized() const {

  return true;
}

void CMsgClientRedeemGuestPassResponse::Swap(CMsgClientRedeemGuestPassResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(package_id_, other->package_id_);
    std::swap(must_own_appid_, other->must_own_appid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientRedeemGuestPassResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientRedeemGuestPassResponse_descriptor_;
  metadata.reflection = CMsgClientRedeemGuestPassResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientGetClanActivityCounts::kSteamidClansFieldNumber;
#endif  // !_MSC_VER

CMsgClientGetClanActivityCounts::CMsgClientGetClanActivityCounts()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientGetClanActivityCounts::InitAsDefaultInstance() {
}

CMsgClientGetClanActivityCounts::CMsgClientGetClanActivityCounts(const CMsgClientGetClanActivityCounts& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGetClanActivityCounts::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGetClanActivityCounts::~CMsgClientGetClanActivityCounts() {
  SharedDtor();
}

void CMsgClientGetClanActivityCounts::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientGetClanActivityCounts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientGetClanActivityCounts::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientGetClanActivityCounts_descriptor_;
}

const CMsgClientGetClanActivityCounts& CMsgClientGetClanActivityCounts::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientGetClanActivityCounts* CMsgClientGetClanActivityCounts::default_instance_ = NULL;

CMsgClientGetClanActivityCounts* CMsgClientGetClanActivityCounts::New() const {
  return new CMsgClientGetClanActivityCounts;
}

void CMsgClientGetClanActivityCounts::Clear() {
  steamid_clans_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientGetClanActivityCounts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 steamid_clans = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_steamid_clans:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_steamid_clans())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_steamid_clans())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_steamid_clans;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientGetClanActivityCounts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 steamid_clans = 1;
  for (int i = 0; i < this->steamid_clans_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->steamid_clans(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientGetClanActivityCounts::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 steamid_clans = 1;
  for (int i = 0; i < this->steamid_clans_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->steamid_clans(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientGetClanActivityCounts::ByteSize() const {
  int total_size = 0;

  // repeated uint64 steamid_clans = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->steamid_clans_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->steamid_clans(i));
    }
    total_size += 1 * this->steamid_clans_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetClanActivityCounts::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientGetClanActivityCounts* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientGetClanActivityCounts*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientGetClanActivityCounts::MergeFrom(const CMsgClientGetClanActivityCounts& from) {
  GOOGLE_CHECK_NE(&from, this);
  steamid_clans_.MergeFrom(from.steamid_clans_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientGetClanActivityCounts::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetClanActivityCounts::CopyFrom(const CMsgClientGetClanActivityCounts& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetClanActivityCounts::IsInitialized() const {

  return true;
}

void CMsgClientGetClanActivityCounts::Swap(CMsgClientGetClanActivityCounts* other) {
  if (other != this) {
    steamid_clans_.Swap(&other->steamid_clans_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientGetClanActivityCounts::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientGetClanActivityCounts_descriptor_;
  metadata.reflection = CMsgClientGetClanActivityCounts_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientGetClanActivityCountsResponse::kEresultFieldNumber;
#endif  // !_MSC_VER

CMsgClientGetClanActivityCountsResponse::CMsgClientGetClanActivityCountsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientGetClanActivityCountsResponse::InitAsDefaultInstance() {
}

CMsgClientGetClanActivityCountsResponse::CMsgClientGetClanActivityCountsResponse(const CMsgClientGetClanActivityCountsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGetClanActivityCountsResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGetClanActivityCountsResponse::~CMsgClientGetClanActivityCountsResponse() {
  SharedDtor();
}

void CMsgClientGetClanActivityCountsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientGetClanActivityCountsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientGetClanActivityCountsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientGetClanActivityCountsResponse_descriptor_;
}

const CMsgClientGetClanActivityCountsResponse& CMsgClientGetClanActivityCountsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientGetClanActivityCountsResponse* CMsgClientGetClanActivityCountsResponse::default_instance_ = NULL;

CMsgClientGetClanActivityCountsResponse* CMsgClientGetClanActivityCountsResponse::New() const {
  return new CMsgClientGetClanActivityCountsResponse;
}

void CMsgClientGetClanActivityCountsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientGetClanActivityCountsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientGetClanActivityCountsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientGetClanActivityCountsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 eresult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientGetClanActivityCountsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetClanActivityCountsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientGetClanActivityCountsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientGetClanActivityCountsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientGetClanActivityCountsResponse::MergeFrom(const CMsgClientGetClanActivityCountsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientGetClanActivityCountsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetClanActivityCountsResponse::CopyFrom(const CMsgClientGetClanActivityCountsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetClanActivityCountsResponse::IsInitialized() const {

  return true;
}

void CMsgClientGetClanActivityCountsResponse::Swap(CMsgClientGetClanActivityCountsResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientGetClanActivityCountsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientGetClanActivityCountsResponse_descriptor_;
  metadata.reflection = CMsgClientGetClanActivityCountsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientOGSReportString::kAccumulatedFieldNumber;
const int CMsgClientOGSReportString::kSessionidFieldNumber;
const int CMsgClientOGSReportString::kSeverityFieldNumber;
const int CMsgClientOGSReportString::kFormatterFieldNumber;
const int CMsgClientOGSReportString::kVarargsFieldNumber;
#endif  // !_MSC_VER

CMsgClientOGSReportString::CMsgClientOGSReportString()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientOGSReportString::InitAsDefaultInstance() {
}

CMsgClientOGSReportString::CMsgClientOGSReportString(const CMsgClientOGSReportString& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientOGSReportString::SharedCtor() {
  _cached_size_ = 0;
  accumulated_ = false;
  sessionid_ = GOOGLE_ULONGLONG(0);
  severity_ = 0;
  formatter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  varargs_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientOGSReportString::~CMsgClientOGSReportString() {
  SharedDtor();
}

void CMsgClientOGSReportString::SharedDtor() {
  if (formatter_ != &::google::protobuf::internal::kEmptyString) {
    delete formatter_;
  }
  if (varargs_ != &::google::protobuf::internal::kEmptyString) {
    delete varargs_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientOGSReportString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientOGSReportString::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientOGSReportString_descriptor_;
}

const CMsgClientOGSReportString& CMsgClientOGSReportString::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientOGSReportString* CMsgClientOGSReportString::default_instance_ = NULL;

CMsgClientOGSReportString* CMsgClientOGSReportString::New() const {
  return new CMsgClientOGSReportString;
}

void CMsgClientOGSReportString::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accumulated_ = false;
    sessionid_ = GOOGLE_ULONGLONG(0);
    severity_ = 0;
    if (has_formatter()) {
      if (formatter_ != &::google::protobuf::internal::kEmptyString) {
        formatter_->clear();
      }
    }
    if (has_varargs()) {
      if (varargs_ != &::google::protobuf::internal::kEmptyString) {
        varargs_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientOGSReportString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool accumulated = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accumulated_)));
          set_has_accumulated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // optional uint64 sessionid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sessionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_severity;
        break;
      }

      // optional int32 severity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_severity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &severity_)));
          set_has_severity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_formatter;
        break;
      }

      // optional string formatter = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_formatter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_formatter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->formatter().data(), this->formatter().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_varargs;
        break;
      }

      // optional bytes varargs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_varargs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_varargs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientOGSReportString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool accumulated = 1;
  if (has_accumulated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->accumulated(), output);
  }

  // optional uint64 sessionid = 2;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->sessionid(), output);
  }

  // optional int32 severity = 3;
  if (has_severity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->severity(), output);
  }

  // optional string formatter = 4;
  if (has_formatter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->formatter().data(), this->formatter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->formatter(), output);
  }

  // optional bytes varargs = 5;
  if (has_varargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->varargs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientOGSReportString::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool accumulated = 1;
  if (has_accumulated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->accumulated(), target);
  }

  // optional uint64 sessionid = 2;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->sessionid(), target);
  }

  // optional int32 severity = 3;
  if (has_severity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->severity(), target);
  }

  // optional string formatter = 4;
  if (has_formatter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->formatter().data(), this->formatter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->formatter(), target);
  }

  // optional bytes varargs = 5;
  if (has_varargs()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->varargs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientOGSReportString::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool accumulated = 1;
    if (has_accumulated()) {
      total_size += 1 + 1;
    }

    // optional uint64 sessionid = 2;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sessionid());
    }

    // optional int32 severity = 3;
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->severity());
    }

    // optional string formatter = 4;
    if (has_formatter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->formatter());
    }

    // optional bytes varargs = 5;
    if (has_varargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->varargs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientOGSReportString::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientOGSReportString* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientOGSReportString*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientOGSReportString::MergeFrom(const CMsgClientOGSReportString& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accumulated()) {
      set_accumulated(from.accumulated());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_severity()) {
      set_severity(from.severity());
    }
    if (from.has_formatter()) {
      set_formatter(from.formatter());
    }
    if (from.has_varargs()) {
      set_varargs(from.varargs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientOGSReportString::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientOGSReportString::CopyFrom(const CMsgClientOGSReportString& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientOGSReportString::IsInitialized() const {

  return true;
}

void CMsgClientOGSReportString::Swap(CMsgClientOGSReportString* other) {
  if (other != this) {
    std::swap(accumulated_, other->accumulated_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(severity_, other->severity_);
    std::swap(formatter_, other->formatter_);
    std::swap(varargs_, other->varargs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientOGSReportString::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientOGSReportString_descriptor_;
  metadata.reflection = CMsgClientOGSReportString_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientOGSReportBug::kSessionidFieldNumber;
const int CMsgClientOGSReportBug::kBugtextFieldNumber;
const int CMsgClientOGSReportBug::kScreenshotFieldNumber;
#endif  // !_MSC_VER

CMsgClientOGSReportBug::CMsgClientOGSReportBug()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientOGSReportBug::InitAsDefaultInstance() {
}

CMsgClientOGSReportBug::CMsgClientOGSReportBug(const CMsgClientOGSReportBug& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientOGSReportBug::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = GOOGLE_ULONGLONG(0);
  bugtext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  screenshot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientOGSReportBug::~CMsgClientOGSReportBug() {
  SharedDtor();
}

void CMsgClientOGSReportBug::SharedDtor() {
  if (bugtext_ != &::google::protobuf::internal::kEmptyString) {
    delete bugtext_;
  }
  if (screenshot_ != &::google::protobuf::internal::kEmptyString) {
    delete screenshot_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientOGSReportBug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientOGSReportBug::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientOGSReportBug_descriptor_;
}

const CMsgClientOGSReportBug& CMsgClientOGSReportBug::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientOGSReportBug* CMsgClientOGSReportBug::default_instance_ = NULL;

CMsgClientOGSReportBug* CMsgClientOGSReportBug::New() const {
  return new CMsgClientOGSReportBug;
}

void CMsgClientOGSReportBug::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sessionid_ = GOOGLE_ULONGLONG(0);
    if (has_bugtext()) {
      if (bugtext_ != &::google::protobuf::internal::kEmptyString) {
        bugtext_->clear();
      }
    }
    if (has_screenshot()) {
      if (screenshot_ != &::google::protobuf::internal::kEmptyString) {
        screenshot_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientOGSReportBug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 sessionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bugtext;
        break;
      }

      // optional string bugtext = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bugtext:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bugtext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bugtext().data(), this->bugtext().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_screenshot;
        break;
      }

      // optional bytes screenshot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_screenshot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_screenshot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientOGSReportBug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 sessionid = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sessionid(), output);
  }

  // optional string bugtext = 2;
  if (has_bugtext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bugtext().data(), this->bugtext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->bugtext(), output);
  }

  // optional bytes screenshot = 3;
  if (has_screenshot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->screenshot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientOGSReportBug::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 sessionid = 1;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sessionid(), target);
  }

  // optional string bugtext = 2;
  if (has_bugtext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bugtext().data(), this->bugtext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bugtext(), target);
  }

  // optional bytes screenshot = 3;
  if (has_screenshot()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->screenshot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientOGSReportBug::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 sessionid = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sessionid());
    }

    // optional string bugtext = 2;
    if (has_bugtext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bugtext());
    }

    // optional bytes screenshot = 3;
    if (has_screenshot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->screenshot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientOGSReportBug::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientOGSReportBug* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientOGSReportBug*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientOGSReportBug::MergeFrom(const CMsgClientOGSReportBug& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_bugtext()) {
      set_bugtext(from.bugtext());
    }
    if (from.has_screenshot()) {
      set_screenshot(from.screenshot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientOGSReportBug::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientOGSReportBug::CopyFrom(const CMsgClientOGSReportBug& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientOGSReportBug::IsInitialized() const {

  return true;
}

void CMsgClientOGSReportBug::Swap(CMsgClientOGSReportBug* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(bugtext_, other->bugtext_);
    std::swap(screenshot_, other->screenshot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientOGSReportBug::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientOGSReportBug_descriptor_;
  metadata.reflection = CMsgClientOGSReportBug_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgClientSentLogs::CMsgClientSentLogs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientSentLogs::InitAsDefaultInstance() {
}

CMsgClientSentLogs::CMsgClientSentLogs(const CMsgClientSentLogs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientSentLogs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientSentLogs::~CMsgClientSentLogs() {
  SharedDtor();
}

void CMsgClientSentLogs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientSentLogs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientSentLogs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientSentLogs_descriptor_;
}

const CMsgClientSentLogs& CMsgClientSentLogs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientSentLogs* CMsgClientSentLogs::default_instance_ = NULL;

CMsgClientSentLogs* CMsgClientSentLogs::New() const {
  return new CMsgClientSentLogs;
}

void CMsgClientSentLogs::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientSentLogs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgClientSentLogs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientSentLogs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientSentLogs::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientSentLogs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientSentLogs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientSentLogs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientSentLogs::MergeFrom(const CMsgClientSentLogs& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientSentLogs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSentLogs::CopyFrom(const CMsgClientSentLogs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSentLogs::IsInitialized() const {

  return true;
}

void CMsgClientSentLogs::Swap(CMsgClientSentLogs* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientSentLogs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientSentLogs_descriptor_;
  metadata.reflection = CMsgClientSentLogs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCClient::kAppidFieldNumber;
const int CMsgGCClient::kMsgtypeFieldNumber;
const int CMsgGCClient::kPayloadFieldNumber;
const int CMsgGCClient::kSteamidFieldNumber;
const int CMsgGCClient::kGcnameFieldNumber;
const int CMsgGCClient::kIpFieldNumber;
#endif  // !_MSC_VER

CMsgGCClient::CMsgGCClient()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGCClient::InitAsDefaultInstance() {
}

CMsgGCClient::CMsgGCClient(const CMsgGCClient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCClient::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
  msgtype_ = 0u;
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  steamid_ = GOOGLE_ULONGLONG(0);
  gcname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCClient::~CMsgGCClient() {
  SharedDtor();
}

void CMsgGCClient::SharedDtor() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (gcname_ != &::google::protobuf::internal::kEmptyString) {
    delete gcname_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGCClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGCClient_descriptor_;
}

const CMsgGCClient& CMsgGCClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgGCClient* CMsgGCClient::default_instance_ = NULL;

CMsgGCClient* CMsgGCClient::New() const {
  return new CMsgGCClient;
}

void CMsgGCClient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0u;
    msgtype_ = 0u;
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::kEmptyString) {
        payload_->clear();
      }
    }
    steamid_ = GOOGLE_ULONGLONG(0);
    if (has_gcname()) {
      if (gcname_ != &::google::protobuf::internal::kEmptyString) {
        gcname_->clear();
      }
    }
    ip_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGCClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_msgtype;
        break;
      }

      // optional uint32 msgtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgtype_)));
          set_has_msgtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_payload;
        break;
      }

      // optional bytes payload = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_steamid;
        break;
      }

      // optional fixed64 steamid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_gcname;
        break;
      }

      // optional string gcname = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gcname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gcname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gcname().data(), this->gcname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ip;
        break;
      }

      // optional uint32 ip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint32 msgtype = 2;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msgtype(), output);
  }

  // optional bytes payload = 3;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->payload(), output);
  }

  // optional fixed64 steamid = 4;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->steamid(), output);
  }

  // optional string gcname = 5;
  if (has_gcname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gcname().data(), this->gcname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->gcname(), output);
  }

  // optional uint32 ip = 6;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGCClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 appid = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint32 msgtype = 2;
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msgtype(), target);
  }

  // optional bytes payload = 3;
  if (has_payload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->payload(), target);
  }

  // optional fixed64 steamid = 4;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->steamid(), target);
  }

  // optional string gcname = 5;
  if (has_gcname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gcname().data(), this->gcname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->gcname(), target);
  }

  // optional uint32 ip = 6;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGCClient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 msgtype = 2;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgtype());
    }

    // optional bytes payload = 3;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }

    // optional fixed64 steamid = 4;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional string gcname = 5;
    if (has_gcname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gcname());
    }

    // optional uint32 ip = 6;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCClient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGCClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGCClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGCClient::MergeFrom(const CMsgGCClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_payload()) {
      set_payload(from.payload());
    }
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_gcname()) {
      set_gcname(from.gcname());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGCClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCClient::CopyFrom(const CMsgGCClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCClient::IsInitialized() const {

  return true;
}

void CMsgGCClient::Swap(CMsgGCClient* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(payload_, other->payload_);
    std::swap(steamid_, other->steamid_);
    std::swap(gcname_, other->gcname_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGCClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGCClient_descriptor_;
  metadata.reflection = CMsgGCClient_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRequestFreeLicense::kAppidsFieldNumber;
#endif  // !_MSC_VER

CMsgClientRequestFreeLicense::CMsgClientRequestFreeLicense()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientRequestFreeLicense::InitAsDefaultInstance() {
}

CMsgClientRequestFreeLicense::CMsgClientRequestFreeLicense(const CMsgClientRequestFreeLicense& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRequestFreeLicense::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRequestFreeLicense::~CMsgClientRequestFreeLicense() {
  SharedDtor();
}

void CMsgClientRequestFreeLicense::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientRequestFreeLicense::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRequestFreeLicense::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientRequestFreeLicense_descriptor_;
}

const CMsgClientRequestFreeLicense& CMsgClientRequestFreeLicense::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientRequestFreeLicense* CMsgClientRequestFreeLicense::default_instance_ = NULL;

CMsgClientRequestFreeLicense* CMsgClientRequestFreeLicense::New() const {
  return new CMsgClientRequestFreeLicense;
}

void CMsgClientRequestFreeLicense::Clear() {
  appids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientRequestFreeLicense::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 appids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_appids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_appids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_appids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRequestFreeLicense::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 appids = 2;
  for (int i = 0; i < this->appids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->appids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientRequestFreeLicense::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 appids = 2;
  for (int i = 0; i < this->appids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->appids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientRequestFreeLicense::ByteSize() const {
  int total_size = 0;

  // repeated uint32 appids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->appids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->appids(i));
    }
    total_size += 1 * this->appids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestFreeLicense::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientRequestFreeLicense* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientRequestFreeLicense*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientRequestFreeLicense::MergeFrom(const CMsgClientRequestFreeLicense& from) {
  GOOGLE_CHECK_NE(&from, this);
  appids_.MergeFrom(from.appids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientRequestFreeLicense::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRequestFreeLicense::CopyFrom(const CMsgClientRequestFreeLicense& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestFreeLicense::IsInitialized() const {

  return true;
}

void CMsgClientRequestFreeLicense::Swap(CMsgClientRequestFreeLicense* other) {
  if (other != this) {
    appids_.Swap(&other->appids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientRequestFreeLicense::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientRequestFreeLicense_descriptor_;
  metadata.reflection = CMsgClientRequestFreeLicense_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRequestFreeLicenseResponse::kEresultFieldNumber;
const int CMsgClientRequestFreeLicenseResponse::kGrantedPackageidsFieldNumber;
const int CMsgClientRequestFreeLicenseResponse::kGrantedAppidsFieldNumber;
#endif  // !_MSC_VER

CMsgClientRequestFreeLicenseResponse::CMsgClientRequestFreeLicenseResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientRequestFreeLicenseResponse::InitAsDefaultInstance() {
}

CMsgClientRequestFreeLicenseResponse::CMsgClientRequestFreeLicenseResponse(const CMsgClientRequestFreeLicenseResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRequestFreeLicenseResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRequestFreeLicenseResponse::~CMsgClientRequestFreeLicenseResponse() {
  SharedDtor();
}

void CMsgClientRequestFreeLicenseResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientRequestFreeLicenseResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRequestFreeLicenseResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientRequestFreeLicenseResponse_descriptor_;
}

const CMsgClientRequestFreeLicenseResponse& CMsgClientRequestFreeLicenseResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientRequestFreeLicenseResponse* CMsgClientRequestFreeLicenseResponse::default_instance_ = NULL;

CMsgClientRequestFreeLicenseResponse* CMsgClientRequestFreeLicenseResponse::New() const {
  return new CMsgClientRequestFreeLicenseResponse;
}

void CMsgClientRequestFreeLicenseResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2u;
  }
  granted_packageids_.Clear();
  granted_appids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientRequestFreeLicenseResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_granted_packageids;
        break;
      }

      // repeated uint32 granted_packageids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_granted_packageids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_granted_packageids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_granted_packageids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_granted_packageids;
        if (input->ExpectTag(24)) goto parse_granted_appids;
        break;
      }

      // repeated uint32 granted_appids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_granted_appids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_granted_appids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_granted_appids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_granted_appids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRequestFreeLicenseResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  // repeated uint32 granted_packageids = 2;
  for (int i = 0; i < this->granted_packageids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->granted_packageids(i), output);
  }

  // repeated uint32 granted_appids = 3;
  for (int i = 0; i < this->granted_appids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->granted_appids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientRequestFreeLicenseResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 eresult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  // repeated uint32 granted_packageids = 2;
  for (int i = 0; i < this->granted_packageids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->granted_packageids(i), target);
  }

  // repeated uint32 granted_appids = 3;
  for (int i = 0; i < this->granted_appids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->granted_appids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientRequestFreeLicenseResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

  }
  // repeated uint32 granted_packageids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->granted_packageids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->granted_packageids(i));
    }
    total_size += 1 * this->granted_packageids_size() + data_size;
  }

  // repeated uint32 granted_appids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->granted_appids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->granted_appids(i));
    }
    total_size += 1 * this->granted_appids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestFreeLicenseResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientRequestFreeLicenseResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientRequestFreeLicenseResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientRequestFreeLicenseResponse::MergeFrom(const CMsgClientRequestFreeLicenseResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  granted_packageids_.MergeFrom(from.granted_packageids_);
  granted_appids_.MergeFrom(from.granted_appids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientRequestFreeLicenseResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRequestFreeLicenseResponse::CopyFrom(const CMsgClientRequestFreeLicenseResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestFreeLicenseResponse::IsInitialized() const {

  return true;
}

void CMsgClientRequestFreeLicenseResponse::Swap(CMsgClientRequestFreeLicenseResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    granted_packageids_.Swap(&other->granted_packageids_);
    granted_appids_.Swap(&other->granted_appids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientRequestFreeLicenseResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientRequestFreeLicenseResponse_descriptor_;
  metadata.reflection = CMsgClientRequestFreeLicenseResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDRMDownloadRequestWithCrashData::kDownloadFlagsFieldNumber;
const int CMsgDRMDownloadRequestWithCrashData::kDownloadTypesKnownFieldNumber;
const int CMsgDRMDownloadRequestWithCrashData::kGuidDrmFieldNumber;
const int CMsgDRMDownloadRequestWithCrashData::kGuidSplitFieldNumber;
const int CMsgDRMDownloadRequestWithCrashData::kGuidMergeFieldNumber;
const int CMsgDRMDownloadRequestWithCrashData::kModuleNameFieldNumber;
const int CMsgDRMDownloadRequestWithCrashData::kModulePathFieldNumber;
const int CMsgDRMDownloadRequestWithCrashData::kCrashDataFieldNumber;
#endif  // !_MSC_VER

CMsgDRMDownloadRequestWithCrashData::CMsgDRMDownloadRequestWithCrashData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgDRMDownloadRequestWithCrashData::InitAsDefaultInstance() {
}

CMsgDRMDownloadRequestWithCrashData::CMsgDRMDownloadRequestWithCrashData(const CMsgDRMDownloadRequestWithCrashData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDRMDownloadRequestWithCrashData::SharedCtor() {
  _cached_size_ = 0;
  download_flags_ = 0u;
  download_types_known_ = 0u;
  guid_drm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guid_split_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guid_merge_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  module_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  module_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  crash_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDRMDownloadRequestWithCrashData::~CMsgDRMDownloadRequestWithCrashData() {
  SharedDtor();
}

void CMsgDRMDownloadRequestWithCrashData::SharedDtor() {
  if (guid_drm_ != &::google::protobuf::internal::kEmptyString) {
    delete guid_drm_;
  }
  if (guid_split_ != &::google::protobuf::internal::kEmptyString) {
    delete guid_split_;
  }
  if (guid_merge_ != &::google::protobuf::internal::kEmptyString) {
    delete guid_merge_;
  }
  if (module_name_ != &::google::protobuf::internal::kEmptyString) {
    delete module_name_;
  }
  if (module_path_ != &::google::protobuf::internal::kEmptyString) {
    delete module_path_;
  }
  if (crash_data_ != &::google::protobuf::internal::kEmptyString) {
    delete crash_data_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDRMDownloadRequestWithCrashData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDRMDownloadRequestWithCrashData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDRMDownloadRequestWithCrashData_descriptor_;
}

const CMsgDRMDownloadRequestWithCrashData& CMsgDRMDownloadRequestWithCrashData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgDRMDownloadRequestWithCrashData* CMsgDRMDownloadRequestWithCrashData::default_instance_ = NULL;

CMsgDRMDownloadRequestWithCrashData* CMsgDRMDownloadRequestWithCrashData::New() const {
  return new CMsgDRMDownloadRequestWithCrashData;
}

void CMsgDRMDownloadRequestWithCrashData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    download_flags_ = 0u;
    download_types_known_ = 0u;
    if (has_guid_drm()) {
      if (guid_drm_ != &::google::protobuf::internal::kEmptyString) {
        guid_drm_->clear();
      }
    }
    if (has_guid_split()) {
      if (guid_split_ != &::google::protobuf::internal::kEmptyString) {
        guid_split_->clear();
      }
    }
    if (has_guid_merge()) {
      if (guid_merge_ != &::google::protobuf::internal::kEmptyString) {
        guid_merge_->clear();
      }
    }
    if (has_module_name()) {
      if (module_name_ != &::google::protobuf::internal::kEmptyString) {
        module_name_->clear();
      }
    }
    if (has_module_path()) {
      if (module_path_ != &::google::protobuf::internal::kEmptyString) {
        module_path_->clear();
      }
    }
    if (has_crash_data()) {
      if (crash_data_ != &::google::protobuf::internal::kEmptyString) {
        crash_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDRMDownloadRequestWithCrashData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 download_flags = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &download_flags_)));
          set_has_download_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_download_types_known;
        break;
      }

      // optional uint32 download_types_known = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_download_types_known:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &download_types_known_)));
          set_has_download_types_known();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_guid_drm;
        break;
      }

      // optional bytes guid_drm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guid_drm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_guid_drm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_guid_split;
        break;
      }

      // optional bytes guid_split = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guid_split:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_guid_split()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_guid_merge;
        break;
      }

      // optional bytes guid_merge = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guid_merge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_guid_merge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_module_name;
        break;
      }

      // optional string module_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_module_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->module_name().data(), this->module_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_module_path;
        break;
      }

      // optional string module_path = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_module_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->module_path().data(), this->module_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_crash_data;
        break;
      }

      // optional bytes crash_data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_crash_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_crash_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDRMDownloadRequestWithCrashData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 download_flags = 1;
  if (has_download_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->download_flags(), output);
  }

  // optional uint32 download_types_known = 2;
  if (has_download_types_known()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->download_types_known(), output);
  }

  // optional bytes guid_drm = 3;
  if (has_guid_drm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->guid_drm(), output);
  }

  // optional bytes guid_split = 4;
  if (has_guid_split()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->guid_split(), output);
  }

  // optional bytes guid_merge = 5;
  if (has_guid_merge()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->guid_merge(), output);
  }

  // optional string module_name = 6;
  if (has_module_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->module_name().data(), this->module_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->module_name(), output);
  }

  // optional string module_path = 7;
  if (has_module_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->module_path().data(), this->module_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->module_path(), output);
  }

  // optional bytes crash_data = 8;
  if (has_crash_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->crash_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgDRMDownloadRequestWithCrashData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 download_flags = 1;
  if (has_download_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->download_flags(), target);
  }

  // optional uint32 download_types_known = 2;
  if (has_download_types_known()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->download_types_known(), target);
  }

  // optional bytes guid_drm = 3;
  if (has_guid_drm()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->guid_drm(), target);
  }

  // optional bytes guid_split = 4;
  if (has_guid_split()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->guid_split(), target);
  }

  // optional bytes guid_merge = 5;
  if (has_guid_merge()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->guid_merge(), target);
  }

  // optional string module_name = 6;
  if (has_module_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->module_name().data(), this->module_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->module_name(), target);
  }

  // optional string module_path = 7;
  if (has_module_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->module_path().data(), this->module_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->module_path(), target);
  }

  // optional bytes crash_data = 8;
  if (has_crash_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->crash_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgDRMDownloadRequestWithCrashData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 download_flags = 1;
    if (has_download_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->download_flags());
    }

    // optional uint32 download_types_known = 2;
    if (has_download_types_known()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->download_types_known());
    }

    // optional bytes guid_drm = 3;
    if (has_guid_drm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->guid_drm());
    }

    // optional bytes guid_split = 4;
    if (has_guid_split()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->guid_split());
    }

    // optional bytes guid_merge = 5;
    if (has_guid_merge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->guid_merge());
    }

    // optional string module_name = 6;
    if (has_module_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->module_name());
    }

    // optional string module_path = 7;
    if (has_module_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->module_path());
    }

    // optional bytes crash_data = 8;
    if (has_crash_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->crash_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDRMDownloadRequestWithCrashData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDRMDownloadRequestWithCrashData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDRMDownloadRequestWithCrashData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDRMDownloadRequestWithCrashData::MergeFrom(const CMsgDRMDownloadRequestWithCrashData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_download_flags()) {
      set_download_flags(from.download_flags());
    }
    if (from.has_download_types_known()) {
      set_download_types_known(from.download_types_known());
    }
    if (from.has_guid_drm()) {
      set_guid_drm(from.guid_drm());
    }
    if (from.has_guid_split()) {
      set_guid_split(from.guid_split());
    }
    if (from.has_guid_merge()) {
      set_guid_merge(from.guid_merge());
    }
    if (from.has_module_name()) {
      set_module_name(from.module_name());
    }
    if (from.has_module_path()) {
      set_module_path(from.module_path());
    }
    if (from.has_crash_data()) {
      set_crash_data(from.crash_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDRMDownloadRequestWithCrashData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDRMDownloadRequestWithCrashData::CopyFrom(const CMsgDRMDownloadRequestWithCrashData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDRMDownloadRequestWithCrashData::IsInitialized() const {

  return true;
}

void CMsgDRMDownloadRequestWithCrashData::Swap(CMsgDRMDownloadRequestWithCrashData* other) {
  if (other != this) {
    std::swap(download_flags_, other->download_flags_);
    std::swap(download_types_known_, other->download_types_known_);
    std::swap(guid_drm_, other->guid_drm_);
    std::swap(guid_split_, other->guid_split_);
    std::swap(guid_merge_, other->guid_merge_);
    std::swap(module_name_, other->module_name_);
    std::swap(module_path_, other->module_path_);
    std::swap(crash_data_, other->crash_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDRMDownloadRequestWithCrashData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDRMDownloadRequestWithCrashData_descriptor_;
  metadata.reflection = CMsgDRMDownloadRequestWithCrashData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDRMDownloadResponse::kEresultFieldNumber;
const int CMsgDRMDownloadResponse::kAppIdFieldNumber;
const int CMsgDRMDownloadResponse::kBlobDownloadTypeFieldNumber;
const int CMsgDRMDownloadResponse::kMergeGuidFieldNumber;
const int CMsgDRMDownloadResponse::kDownloadFileDfsIpFieldNumber;
const int CMsgDRMDownloadResponse::kDownloadFileDfsPortFieldNumber;
const int CMsgDRMDownloadResponse::kDownloadFileUrlFieldNumber;
const int CMsgDRMDownloadResponse::kModulePathFieldNumber;
#endif  // !_MSC_VER

CMsgDRMDownloadResponse::CMsgDRMDownloadResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgDRMDownloadResponse::InitAsDefaultInstance() {
}

CMsgDRMDownloadResponse::CMsgDRMDownloadResponse(const CMsgDRMDownloadResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDRMDownloadResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2u;
  app_id_ = 0u;
  blob_download_type_ = 0u;
  merge_guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  download_file_dfs_ip_ = 0u;
  download_file_dfs_port_ = 0u;
  download_file_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  module_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDRMDownloadResponse::~CMsgDRMDownloadResponse() {
  SharedDtor();
}

void CMsgDRMDownloadResponse::SharedDtor() {
  if (merge_guid_ != &::google::protobuf::internal::kEmptyString) {
    delete merge_guid_;
  }
  if (download_file_url_ != &::google::protobuf::internal::kEmptyString) {
    delete download_file_url_;
  }
  if (module_path_ != &::google::protobuf::internal::kEmptyString) {
    delete module_path_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDRMDownloadResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDRMDownloadResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDRMDownloadResponse_descriptor_;
}

const CMsgDRMDownloadResponse& CMsgDRMDownloadResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgDRMDownloadResponse* CMsgDRMDownloadResponse::default_instance_ = NULL;

CMsgDRMDownloadResponse* CMsgDRMDownloadResponse::New() const {
  return new CMsgDRMDownloadResponse;
}

void CMsgDRMDownloadResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2u;
    app_id_ = 0u;
    blob_download_type_ = 0u;
    if (has_merge_guid()) {
      if (merge_guid_ != &::google::protobuf::internal::kEmptyString) {
        merge_guid_->clear();
      }
    }
    download_file_dfs_ip_ = 0u;
    download_file_dfs_port_ = 0u;
    if (has_download_file_url()) {
      if (download_file_url_ != &::google::protobuf::internal::kEmptyString) {
        download_file_url_->clear();
      }
    }
    if (has_module_path()) {
      if (module_path_ != &::google::protobuf::internal::kEmptyString) {
        module_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDRMDownloadResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_app_id;
        break;
      }

      // optional uint32 app_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_blob_download_type;
        break;
      }

      // optional uint32 blob_download_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blob_download_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blob_download_type_)));
          set_has_blob_download_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_merge_guid;
        break;
      }

      // optional bytes merge_guid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_merge_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_merge_guid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_download_file_dfs_ip;
        break;
      }

      // optional uint32 download_file_dfs_ip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_download_file_dfs_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &download_file_dfs_ip_)));
          set_has_download_file_dfs_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_download_file_dfs_port;
        break;
      }

      // optional uint32 download_file_dfs_port = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_download_file_dfs_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &download_file_dfs_port_)));
          set_has_download_file_dfs_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_download_file_url;
        break;
      }

      // optional string download_file_url = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_download_file_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_download_file_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->download_file_url().data(), this->download_file_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_module_path;
        break;
      }

      // optional string module_path = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_module_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->module_path().data(), this->module_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDRMDownloadResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  // optional uint32 app_id = 2;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->app_id(), output);
  }

  // optional uint32 blob_download_type = 3;
  if (has_blob_download_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->blob_download_type(), output);
  }

  // optional bytes merge_guid = 4;
  if (has_merge_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->merge_guid(), output);
  }

  // optional uint32 download_file_dfs_ip = 5;
  if (has_download_file_dfs_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->download_file_dfs_ip(), output);
  }

  // optional uint32 download_file_dfs_port = 6;
  if (has_download_file_dfs_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->download_file_dfs_port(), output);
  }

  // optional string download_file_url = 7;
  if (has_download_file_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->download_file_url().data(), this->download_file_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->download_file_url(), output);
  }

  // optional string module_path = 8;
  if (has_module_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->module_path().data(), this->module_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->module_path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgDRMDownloadResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 eresult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  // optional uint32 app_id = 2;
  if (has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->app_id(), target);
  }

  // optional uint32 blob_download_type = 3;
  if (has_blob_download_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->blob_download_type(), target);
  }

  // optional bytes merge_guid = 4;
  if (has_merge_guid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->merge_guid(), target);
  }

  // optional uint32 download_file_dfs_ip = 5;
  if (has_download_file_dfs_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->download_file_dfs_ip(), target);
  }

  // optional uint32 download_file_dfs_port = 6;
  if (has_download_file_dfs_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->download_file_dfs_port(), target);
  }

  // optional string download_file_url = 7;
  if (has_download_file_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->download_file_url().data(), this->download_file_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->download_file_url(), target);
  }

  // optional string module_path = 8;
  if (has_module_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->module_path().data(), this->module_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->module_path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgDRMDownloadResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

    // optional uint32 app_id = 2;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 blob_download_type = 3;
    if (has_blob_download_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blob_download_type());
    }

    // optional bytes merge_guid = 4;
    if (has_merge_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->merge_guid());
    }

    // optional uint32 download_file_dfs_ip = 5;
    if (has_download_file_dfs_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->download_file_dfs_ip());
    }

    // optional uint32 download_file_dfs_port = 6;
    if (has_download_file_dfs_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->download_file_dfs_port());
    }

    // optional string download_file_url = 7;
    if (has_download_file_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->download_file_url());
    }

    // optional string module_path = 8;
    if (has_module_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->module_path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDRMDownloadResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDRMDownloadResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDRMDownloadResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDRMDownloadResponse::MergeFrom(const CMsgDRMDownloadResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_blob_download_type()) {
      set_blob_download_type(from.blob_download_type());
    }
    if (from.has_merge_guid()) {
      set_merge_guid(from.merge_guid());
    }
    if (from.has_download_file_dfs_ip()) {
      set_download_file_dfs_ip(from.download_file_dfs_ip());
    }
    if (from.has_download_file_dfs_port()) {
      set_download_file_dfs_port(from.download_file_dfs_port());
    }
    if (from.has_download_file_url()) {
      set_download_file_url(from.download_file_url());
    }
    if (from.has_module_path()) {
      set_module_path(from.module_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDRMDownloadResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDRMDownloadResponse::CopyFrom(const CMsgDRMDownloadResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDRMDownloadResponse::IsInitialized() const {

  return true;
}

void CMsgDRMDownloadResponse::Swap(CMsgDRMDownloadResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(app_id_, other->app_id_);
    std::swap(blob_download_type_, other->blob_download_type_);
    std::swap(merge_guid_, other->merge_guid_);
    std::swap(download_file_dfs_ip_, other->download_file_dfs_ip_);
    std::swap(download_file_dfs_port_, other->download_file_dfs_port_);
    std::swap(download_file_url_, other->download_file_url_);
    std::swap(module_path_, other->module_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDRMDownloadResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDRMDownloadResponse_descriptor_;
  metadata.reflection = CMsgDRMDownloadResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDRMFinalResult::kEResultFieldNumber;
const int CMsgDRMFinalResult::kAppIdFieldNumber;
const int CMsgDRMFinalResult::kBlobDownloadTypeFieldNumber;
const int CMsgDRMFinalResult::kErrorDetailFieldNumber;
const int CMsgDRMFinalResult::kMergeGuidFieldNumber;
const int CMsgDRMFinalResult::kDownloadFileDfsIpFieldNumber;
const int CMsgDRMFinalResult::kDownloadFileDfsPortFieldNumber;
const int CMsgDRMFinalResult::kDownloadFileUrlFieldNumber;
#endif  // !_MSC_VER

CMsgDRMFinalResult::CMsgDRMFinalResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgDRMFinalResult::InitAsDefaultInstance() {
}

CMsgDRMFinalResult::CMsgDRMFinalResult(const CMsgDRMFinalResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDRMFinalResult::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2u;
  app_id_ = 0u;
  blob_download_type_ = 0u;
  error_detail_ = 0u;
  merge_guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  download_file_dfs_ip_ = 0u;
  download_file_dfs_port_ = 0u;
  download_file_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDRMFinalResult::~CMsgDRMFinalResult() {
  SharedDtor();
}

void CMsgDRMFinalResult::SharedDtor() {
  if (merge_guid_ != &::google::protobuf::internal::kEmptyString) {
    delete merge_guid_;
  }
  if (download_file_url_ != &::google::protobuf::internal::kEmptyString) {
    delete download_file_url_;
  }
  if (this != default_instance_) {
  }
}

void CMsgDRMFinalResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDRMFinalResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDRMFinalResult_descriptor_;
}

const CMsgDRMFinalResult& CMsgDRMFinalResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgDRMFinalResult* CMsgDRMFinalResult::default_instance_ = NULL;

CMsgDRMFinalResult* CMsgDRMFinalResult::New() const {
  return new CMsgDRMFinalResult;
}

void CMsgDRMFinalResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2u;
    app_id_ = 0u;
    blob_download_type_ = 0u;
    error_detail_ = 0u;
    if (has_merge_guid()) {
      if (merge_guid_ != &::google::protobuf::internal::kEmptyString) {
        merge_guid_->clear();
      }
    }
    download_file_dfs_ip_ = 0u;
    download_file_dfs_port_ = 0u;
    if (has_download_file_url()) {
      if (download_file_url_ != &::google::protobuf::internal::kEmptyString) {
        download_file_url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDRMFinalResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eResult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_app_id;
        break;
      }

      // optional uint32 app_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_blob_download_type;
        break;
      }

      // optional uint32 blob_download_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blob_download_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blob_download_type_)));
          set_has_blob_download_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_error_detail;
        break;
      }

      // optional uint32 error_detail = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_detail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_detail_)));
          set_has_error_detail();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_merge_guid;
        break;
      }

      // optional bytes merge_guid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_merge_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_merge_guid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_download_file_dfs_ip;
        break;
      }

      // optional uint32 download_file_dfs_ip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_download_file_dfs_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &download_file_dfs_ip_)));
          set_has_download_file_dfs_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_download_file_dfs_port;
        break;
      }

      // optional uint32 download_file_dfs_port = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_download_file_dfs_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &download_file_dfs_port_)));
          set_has_download_file_dfs_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_download_file_url;
        break;
      }

      // optional string download_file_url = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_download_file_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_download_file_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->download_file_url().data(), this->download_file_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDRMFinalResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eResult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  // optional uint32 app_id = 2;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->app_id(), output);
  }

  // optional uint32 blob_download_type = 3;
  if (has_blob_download_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->blob_download_type(), output);
  }

  // optional uint32 error_detail = 4;
  if (has_error_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->error_detail(), output);
  }

  // optional bytes merge_guid = 5;
  if (has_merge_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->merge_guid(), output);
  }

  // optional uint32 download_file_dfs_ip = 6;
  if (has_download_file_dfs_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->download_file_dfs_ip(), output);
  }

  // optional uint32 download_file_dfs_port = 7;
  if (has_download_file_dfs_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->download_file_dfs_port(), output);
  }

  // optional string download_file_url = 8;
  if (has_download_file_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->download_file_url().data(), this->download_file_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->download_file_url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgDRMFinalResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 eResult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  // optional uint32 app_id = 2;
  if (has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->app_id(), target);
  }

  // optional uint32 blob_download_type = 3;
  if (has_blob_download_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->blob_download_type(), target);
  }

  // optional uint32 error_detail = 4;
  if (has_error_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->error_detail(), target);
  }

  // optional bytes merge_guid = 5;
  if (has_merge_guid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->merge_guid(), target);
  }

  // optional uint32 download_file_dfs_ip = 6;
  if (has_download_file_dfs_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->download_file_dfs_ip(), target);
  }

  // optional uint32 download_file_dfs_port = 7;
  if (has_download_file_dfs_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->download_file_dfs_port(), target);
  }

  // optional string download_file_url = 8;
  if (has_download_file_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->download_file_url().data(), this->download_file_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->download_file_url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgDRMFinalResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eResult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

    // optional uint32 app_id = 2;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 blob_download_type = 3;
    if (has_blob_download_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blob_download_type());
    }

    // optional uint32 error_detail = 4;
    if (has_error_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_detail());
    }

    // optional bytes merge_guid = 5;
    if (has_merge_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->merge_guid());
    }

    // optional uint32 download_file_dfs_ip = 6;
    if (has_download_file_dfs_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->download_file_dfs_ip());
    }

    // optional uint32 download_file_dfs_port = 7;
    if (has_download_file_dfs_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->download_file_dfs_port());
    }

    // optional string download_file_url = 8;
    if (has_download_file_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->download_file_url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDRMFinalResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDRMFinalResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDRMFinalResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDRMFinalResult::MergeFrom(const CMsgDRMFinalResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_blob_download_type()) {
      set_blob_download_type(from.blob_download_type());
    }
    if (from.has_error_detail()) {
      set_error_detail(from.error_detail());
    }
    if (from.has_merge_guid()) {
      set_merge_guid(from.merge_guid());
    }
    if (from.has_download_file_dfs_ip()) {
      set_download_file_dfs_ip(from.download_file_dfs_ip());
    }
    if (from.has_download_file_dfs_port()) {
      set_download_file_dfs_port(from.download_file_dfs_port());
    }
    if (from.has_download_file_url()) {
      set_download_file_url(from.download_file_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDRMFinalResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDRMFinalResult::CopyFrom(const CMsgDRMFinalResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDRMFinalResult::IsInitialized() const {

  return true;
}

void CMsgDRMFinalResult::Swap(CMsgDRMFinalResult* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(app_id_, other->app_id_);
    std::swap(blob_download_type_, other->blob_download_type_);
    std::swap(error_detail_, other->error_detail_);
    std::swap(merge_guid_, other->merge_guid_);
    std::swap(download_file_dfs_ip_, other->download_file_dfs_ip_);
    std::swap(download_file_dfs_port_, other->download_file_dfs_port_);
    std::swap(download_file_url_, other->download_file_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDRMFinalResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDRMFinalResult_descriptor_;
  metadata.reflection = CMsgDRMFinalResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientDPCheckSpecialSurvey::kSurveyIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientDPCheckSpecialSurvey::CMsgClientDPCheckSpecialSurvey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientDPCheckSpecialSurvey::InitAsDefaultInstance() {
}

CMsgClientDPCheckSpecialSurvey::CMsgClientDPCheckSpecialSurvey(const CMsgClientDPCheckSpecialSurvey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientDPCheckSpecialSurvey::SharedCtor() {
  _cached_size_ = 0;
  survey_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientDPCheckSpecialSurvey::~CMsgClientDPCheckSpecialSurvey() {
  SharedDtor();
}

void CMsgClientDPCheckSpecialSurvey::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientDPCheckSpecialSurvey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientDPCheckSpecialSurvey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientDPCheckSpecialSurvey_descriptor_;
}

const CMsgClientDPCheckSpecialSurvey& CMsgClientDPCheckSpecialSurvey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientDPCheckSpecialSurvey* CMsgClientDPCheckSpecialSurvey::default_instance_ = NULL;

CMsgClientDPCheckSpecialSurvey* CMsgClientDPCheckSpecialSurvey::New() const {
  return new CMsgClientDPCheckSpecialSurvey;
}

void CMsgClientDPCheckSpecialSurvey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    survey_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientDPCheckSpecialSurvey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 survey_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &survey_id_)));
          set_has_survey_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientDPCheckSpecialSurvey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 survey_id = 1;
  if (has_survey_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->survey_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientDPCheckSpecialSurvey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 survey_id = 1;
  if (has_survey_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->survey_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientDPCheckSpecialSurvey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 survey_id = 1;
    if (has_survey_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->survey_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientDPCheckSpecialSurvey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientDPCheckSpecialSurvey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientDPCheckSpecialSurvey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientDPCheckSpecialSurvey::MergeFrom(const CMsgClientDPCheckSpecialSurvey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_survey_id()) {
      set_survey_id(from.survey_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientDPCheckSpecialSurvey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientDPCheckSpecialSurvey::CopyFrom(const CMsgClientDPCheckSpecialSurvey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientDPCheckSpecialSurvey::IsInitialized() const {

  return true;
}

void CMsgClientDPCheckSpecialSurvey::Swap(CMsgClientDPCheckSpecialSurvey* other) {
  if (other != this) {
    std::swap(survey_id_, other->survey_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientDPCheckSpecialSurvey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientDPCheckSpecialSurvey_descriptor_;
  metadata.reflection = CMsgClientDPCheckSpecialSurvey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientDPCheckSpecialSurveyResponse::kEResultFieldNumber;
const int CMsgClientDPCheckSpecialSurveyResponse::kStateFieldNumber;
const int CMsgClientDPCheckSpecialSurveyResponse::kNameFieldNumber;
const int CMsgClientDPCheckSpecialSurveyResponse::kCustomUrlFieldNumber;
const int CMsgClientDPCheckSpecialSurveyResponse::kIncludeSoftwareFieldNumber;
const int CMsgClientDPCheckSpecialSurveyResponse::kTokenFieldNumber;
#endif  // !_MSC_VER

CMsgClientDPCheckSpecialSurveyResponse::CMsgClientDPCheckSpecialSurveyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientDPCheckSpecialSurveyResponse::InitAsDefaultInstance() {
}

CMsgClientDPCheckSpecialSurveyResponse::CMsgClientDPCheckSpecialSurveyResponse(const CMsgClientDPCheckSpecialSurveyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientDPCheckSpecialSurveyResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2u;
  state_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  custom_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  include_software_ = false;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientDPCheckSpecialSurveyResponse::~CMsgClientDPCheckSpecialSurveyResponse() {
  SharedDtor();
}

void CMsgClientDPCheckSpecialSurveyResponse::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (custom_url_ != &::google::protobuf::internal::kEmptyString) {
    delete custom_url_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientDPCheckSpecialSurveyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientDPCheckSpecialSurveyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientDPCheckSpecialSurveyResponse_descriptor_;
}

const CMsgClientDPCheckSpecialSurveyResponse& CMsgClientDPCheckSpecialSurveyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientDPCheckSpecialSurveyResponse* CMsgClientDPCheckSpecialSurveyResponse::default_instance_ = NULL;

CMsgClientDPCheckSpecialSurveyResponse* CMsgClientDPCheckSpecialSurveyResponse::New() const {
  return new CMsgClientDPCheckSpecialSurveyResponse;
}

void CMsgClientDPCheckSpecialSurveyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2u;
    state_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_custom_url()) {
      if (custom_url_ != &::google::protobuf::internal::kEmptyString) {
        custom_url_->clear();
      }
    }
    include_software_ = false;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientDPCheckSpecialSurveyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eResult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional uint32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_custom_url;
        break;
      }

      // optional string custom_url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_custom_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->custom_url().data(), this->custom_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_include_software;
        break;
      }

      // optional bool include_software = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_include_software:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_software_)));
          set_has_include_software();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_token;
        break;
      }

      // optional bytes token = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientDPCheckSpecialSurveyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eResult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional string custom_url = 4;
  if (has_custom_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custom_url().data(), this->custom_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->custom_url(), output);
  }

  // optional bool include_software = 5;
  if (has_include_software()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->include_software(), output);
  }

  // optional bytes token = 6;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientDPCheckSpecialSurveyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 eResult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string custom_url = 4;
  if (has_custom_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custom_url().data(), this->custom_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->custom_url(), target);
  }

  // optional bool include_software = 5;
  if (has_include_software()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->include_software(), target);
  }

  // optional bytes token = 6;
  if (has_token()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientDPCheckSpecialSurveyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eResult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

    // optional uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string custom_url = 4;
    if (has_custom_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_url());
    }

    // optional bool include_software = 5;
    if (has_include_software()) {
      total_size += 1 + 1;
    }

    // optional bytes token = 6;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientDPCheckSpecialSurveyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientDPCheckSpecialSurveyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientDPCheckSpecialSurveyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientDPCheckSpecialSurveyResponse::MergeFrom(const CMsgClientDPCheckSpecialSurveyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_custom_url()) {
      set_custom_url(from.custom_url());
    }
    if (from.has_include_software()) {
      set_include_software(from.include_software());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientDPCheckSpecialSurveyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientDPCheckSpecialSurveyResponse::CopyFrom(const CMsgClientDPCheckSpecialSurveyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientDPCheckSpecialSurveyResponse::IsInitialized() const {

  return true;
}

void CMsgClientDPCheckSpecialSurveyResponse::Swap(CMsgClientDPCheckSpecialSurveyResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(state_, other->state_);
    std::swap(name_, other->name_);
    std::swap(custom_url_, other->custom_url_);
    std::swap(include_software_, other->include_software_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientDPCheckSpecialSurveyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientDPCheckSpecialSurveyResponse_descriptor_;
  metadata.reflection = CMsgClientDPCheckSpecialSurveyResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientDPSendSpecialSurveyResponse::kSurveyIdFieldNumber;
const int CMsgClientDPSendSpecialSurveyResponse::kDataFieldNumber;
#endif  // !_MSC_VER

CMsgClientDPSendSpecialSurveyResponse::CMsgClientDPSendSpecialSurveyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientDPSendSpecialSurveyResponse::InitAsDefaultInstance() {
}

CMsgClientDPSendSpecialSurveyResponse::CMsgClientDPSendSpecialSurveyResponse(const CMsgClientDPSendSpecialSurveyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientDPSendSpecialSurveyResponse::SharedCtor() {
  _cached_size_ = 0;
  survey_id_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientDPSendSpecialSurveyResponse::~CMsgClientDPSendSpecialSurveyResponse() {
  SharedDtor();
}

void CMsgClientDPSendSpecialSurveyResponse::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientDPSendSpecialSurveyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientDPSendSpecialSurveyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientDPSendSpecialSurveyResponse_descriptor_;
}

const CMsgClientDPSendSpecialSurveyResponse& CMsgClientDPSendSpecialSurveyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientDPSendSpecialSurveyResponse* CMsgClientDPSendSpecialSurveyResponse::default_instance_ = NULL;

CMsgClientDPSendSpecialSurveyResponse* CMsgClientDPSendSpecialSurveyResponse::New() const {
  return new CMsgClientDPSendSpecialSurveyResponse;
}

void CMsgClientDPSendSpecialSurveyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    survey_id_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientDPSendSpecialSurveyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 survey_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &survey_id_)));
          set_has_survey_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientDPSendSpecialSurveyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 survey_id = 1;
  if (has_survey_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->survey_id(), output);
  }

  // optional bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientDPSendSpecialSurveyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 survey_id = 1;
  if (has_survey_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->survey_id(), target);
  }

  // optional bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientDPSendSpecialSurveyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 survey_id = 1;
    if (has_survey_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->survey_id());
    }

    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientDPSendSpecialSurveyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientDPSendSpecialSurveyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientDPSendSpecialSurveyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientDPSendSpecialSurveyResponse::MergeFrom(const CMsgClientDPSendSpecialSurveyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_survey_id()) {
      set_survey_id(from.survey_id());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientDPSendSpecialSurveyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientDPSendSpecialSurveyResponse::CopyFrom(const CMsgClientDPSendSpecialSurveyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientDPSendSpecialSurveyResponse::IsInitialized() const {

  return true;
}

void CMsgClientDPSendSpecialSurveyResponse::Swap(CMsgClientDPSendSpecialSurveyResponse* other) {
  if (other != this) {
    std::swap(survey_id_, other->survey_id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientDPSendSpecialSurveyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientDPSendSpecialSurveyResponse_descriptor_;
  metadata.reflection = CMsgClientDPSendSpecialSurveyResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientDPSendSpecialSurveyResponseReply::kEResultFieldNumber;
const int CMsgClientDPSendSpecialSurveyResponseReply::kTokenFieldNumber;
#endif  // !_MSC_VER

CMsgClientDPSendSpecialSurveyResponseReply::CMsgClientDPSendSpecialSurveyResponseReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientDPSendSpecialSurveyResponseReply::InitAsDefaultInstance() {
}

CMsgClientDPSendSpecialSurveyResponseReply::CMsgClientDPSendSpecialSurveyResponseReply(const CMsgClientDPSendSpecialSurveyResponseReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientDPSendSpecialSurveyResponseReply::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientDPSendSpecialSurveyResponseReply::~CMsgClientDPSendSpecialSurveyResponseReply() {
  SharedDtor();
}

void CMsgClientDPSendSpecialSurveyResponseReply::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientDPSendSpecialSurveyResponseReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientDPSendSpecialSurveyResponseReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientDPSendSpecialSurveyResponseReply_descriptor_;
}

const CMsgClientDPSendSpecialSurveyResponseReply& CMsgClientDPSendSpecialSurveyResponseReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientDPSendSpecialSurveyResponseReply* CMsgClientDPSendSpecialSurveyResponseReply::default_instance_ = NULL;

CMsgClientDPSendSpecialSurveyResponseReply* CMsgClientDPSendSpecialSurveyResponseReply::New() const {
  return new CMsgClientDPSendSpecialSurveyResponseReply;
}

void CMsgClientDPSendSpecialSurveyResponseReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2u;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientDPSendSpecialSurveyResponseReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eResult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional bytes token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientDPSendSpecialSurveyResponseReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eResult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  // optional bytes token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientDPSendSpecialSurveyResponseReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 eResult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  // optional bytes token = 2;
  if (has_token()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientDPSendSpecialSurveyResponseReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eResult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

    // optional bytes token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientDPSendSpecialSurveyResponseReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientDPSendSpecialSurveyResponseReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientDPSendSpecialSurveyResponseReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientDPSendSpecialSurveyResponseReply::MergeFrom(const CMsgClientDPSendSpecialSurveyResponseReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientDPSendSpecialSurveyResponseReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientDPSendSpecialSurveyResponseReply::CopyFrom(const CMsgClientDPSendSpecialSurveyResponseReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientDPSendSpecialSurveyResponseReply::IsInitialized() const {

  return true;
}

void CMsgClientDPSendSpecialSurveyResponseReply::Swap(CMsgClientDPSendSpecialSurveyResponseReply* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientDPSendSpecialSurveyResponseReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientDPSendSpecialSurveyResponseReply_descriptor_;
  metadata.reflection = CMsgClientDPSendSpecialSurveyResponseReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRequestForgottenPasswordEmail::kAccountNameFieldNumber;
const int CMsgClientRequestForgottenPasswordEmail::kPasswordTriedFieldNumber;
#endif  // !_MSC_VER

CMsgClientRequestForgottenPasswordEmail::CMsgClientRequestForgottenPasswordEmail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientRequestForgottenPasswordEmail::InitAsDefaultInstance() {
}

CMsgClientRequestForgottenPasswordEmail::CMsgClientRequestForgottenPasswordEmail(const CMsgClientRequestForgottenPasswordEmail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRequestForgottenPasswordEmail::SharedCtor() {
  _cached_size_ = 0;
  account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_tried_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRequestForgottenPasswordEmail::~CMsgClientRequestForgottenPasswordEmail() {
  SharedDtor();
}

void CMsgClientRequestForgottenPasswordEmail::SharedDtor() {
  if (account_name_ != &::google::protobuf::internal::kEmptyString) {
    delete account_name_;
  }
  if (password_tried_ != &::google::protobuf::internal::kEmptyString) {
    delete password_tried_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientRequestForgottenPasswordEmail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRequestForgottenPasswordEmail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientRequestForgottenPasswordEmail_descriptor_;
}

const CMsgClientRequestForgottenPasswordEmail& CMsgClientRequestForgottenPasswordEmail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientRequestForgottenPasswordEmail* CMsgClientRequestForgottenPasswordEmail::default_instance_ = NULL;

CMsgClientRequestForgottenPasswordEmail* CMsgClientRequestForgottenPasswordEmail::New() const {
  return new CMsgClientRequestForgottenPasswordEmail;
}

void CMsgClientRequestForgottenPasswordEmail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account_name()) {
      if (account_name_ != &::google::protobuf::internal::kEmptyString) {
        account_name_->clear();
      }
    }
    if (has_password_tried()) {
      if (password_tried_ != &::google::protobuf::internal::kEmptyString) {
        password_tried_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientRequestForgottenPasswordEmail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account_name().data(), this->account_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password_tried;
        break;
      }

      // optional string password_tried = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password_tried:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password_tried()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password_tried().data(), this->password_tried().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRequestForgottenPasswordEmail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account_name = 1;
  if (has_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account_name(), output);
  }

  // optional string password_tried = 2;
  if (has_password_tried()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password_tried().data(), this->password_tried().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password_tried(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientRequestForgottenPasswordEmail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account_name = 1;
  if (has_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account_name(), target);
  }

  // optional string password_tried = 2;
  if (has_password_tried()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password_tried().data(), this->password_tried().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password_tried(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientRequestForgottenPasswordEmail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account_name = 1;
    if (has_account_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name());
    }

    // optional string password_tried = 2;
    if (has_password_tried()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password_tried());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestForgottenPasswordEmail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientRequestForgottenPasswordEmail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientRequestForgottenPasswordEmail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientRequestForgottenPasswordEmail::MergeFrom(const CMsgClientRequestForgottenPasswordEmail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_name()) {
      set_account_name(from.account_name());
    }
    if (from.has_password_tried()) {
      set_password_tried(from.password_tried());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientRequestForgottenPasswordEmail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRequestForgottenPasswordEmail::CopyFrom(const CMsgClientRequestForgottenPasswordEmail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestForgottenPasswordEmail::IsInitialized() const {

  return true;
}

void CMsgClientRequestForgottenPasswordEmail::Swap(CMsgClientRequestForgottenPasswordEmail* other) {
  if (other != this) {
    std::swap(account_name_, other->account_name_);
    std::swap(password_tried_, other->password_tried_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientRequestForgottenPasswordEmail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientRequestForgottenPasswordEmail_descriptor_;
  metadata.reflection = CMsgClientRequestForgottenPasswordEmail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRequestForgottenPasswordEmailResponse::kEResultFieldNumber;
const int CMsgClientRequestForgottenPasswordEmailResponse::kUseSecretQuestionFieldNumber;
#endif  // !_MSC_VER

CMsgClientRequestForgottenPasswordEmailResponse::CMsgClientRequestForgottenPasswordEmailResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientRequestForgottenPasswordEmailResponse::InitAsDefaultInstance() {
}

CMsgClientRequestForgottenPasswordEmailResponse::CMsgClientRequestForgottenPasswordEmailResponse(const CMsgClientRequestForgottenPasswordEmailResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRequestForgottenPasswordEmailResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 0u;
  use_secret_question_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRequestForgottenPasswordEmailResponse::~CMsgClientRequestForgottenPasswordEmailResponse() {
  SharedDtor();
}

void CMsgClientRequestForgottenPasswordEmailResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientRequestForgottenPasswordEmailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRequestForgottenPasswordEmailResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientRequestForgottenPasswordEmailResponse_descriptor_;
}

const CMsgClientRequestForgottenPasswordEmailResponse& CMsgClientRequestForgottenPasswordEmailResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientRequestForgottenPasswordEmailResponse* CMsgClientRequestForgottenPasswordEmailResponse::default_instance_ = NULL;

CMsgClientRequestForgottenPasswordEmailResponse* CMsgClientRequestForgottenPasswordEmailResponse::New() const {
  return new CMsgClientRequestForgottenPasswordEmailResponse;
}

void CMsgClientRequestForgottenPasswordEmailResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 0u;
    use_secret_question_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientRequestForgottenPasswordEmailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_use_secret_question;
        break;
      }

      // optional bool use_secret_question = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_secret_question:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_secret_question_)));
          set_has_use_secret_question();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRequestForgottenPasswordEmailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eResult = 1;
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  // optional bool use_secret_question = 2;
  if (has_use_secret_question()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->use_secret_question(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientRequestForgottenPasswordEmailResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 eResult = 1;
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  // optional bool use_secret_question = 2;
  if (has_use_secret_question()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->use_secret_question(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientRequestForgottenPasswordEmailResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eResult = 1;
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

    // optional bool use_secret_question = 2;
    if (has_use_secret_question()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestForgottenPasswordEmailResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientRequestForgottenPasswordEmailResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientRequestForgottenPasswordEmailResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientRequestForgottenPasswordEmailResponse::MergeFrom(const CMsgClientRequestForgottenPasswordEmailResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_use_secret_question()) {
      set_use_secret_question(from.use_secret_question());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientRequestForgottenPasswordEmailResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRequestForgottenPasswordEmailResponse::CopyFrom(const CMsgClientRequestForgottenPasswordEmailResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestForgottenPasswordEmailResponse::IsInitialized() const {

  return true;
}

void CMsgClientRequestForgottenPasswordEmailResponse::Swap(CMsgClientRequestForgottenPasswordEmailResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(use_secret_question_, other->use_secret_question_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientRequestForgottenPasswordEmailResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientRequestForgottenPasswordEmailResponse_descriptor_;
  metadata.reflection = CMsgClientRequestForgottenPasswordEmailResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientItemAnnouncements_UnseenItem::kAppidFieldNumber;
const int CMsgClientItemAnnouncements_UnseenItem::kContextIdFieldNumber;
const int CMsgClientItemAnnouncements_UnseenItem::kAssetIdFieldNumber;
const int CMsgClientItemAnnouncements_UnseenItem::kAmountFieldNumber;
const int CMsgClientItemAnnouncements_UnseenItem::kRtime32GainedFieldNumber;
const int CMsgClientItemAnnouncements_UnseenItem::kSourceAppidFieldNumber;
#endif  // !_MSC_VER

CMsgClientItemAnnouncements_UnseenItem::CMsgClientItemAnnouncements_UnseenItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientItemAnnouncements_UnseenItem::InitAsDefaultInstance() {
}

CMsgClientItemAnnouncements_UnseenItem::CMsgClientItemAnnouncements_UnseenItem(const CMsgClientItemAnnouncements_UnseenItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientItemAnnouncements_UnseenItem::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
  context_id_ = GOOGLE_ULONGLONG(0);
  asset_id_ = GOOGLE_ULONGLONG(0);
  amount_ = GOOGLE_ULONGLONG(0);
  rtime32_gained_ = 0u;
  source_appid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientItemAnnouncements_UnseenItem::~CMsgClientItemAnnouncements_UnseenItem() {
  SharedDtor();
}

void CMsgClientItemAnnouncements_UnseenItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientItemAnnouncements_UnseenItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientItemAnnouncements_UnseenItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientItemAnnouncements_UnseenItem_descriptor_;
}

const CMsgClientItemAnnouncements_UnseenItem& CMsgClientItemAnnouncements_UnseenItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientItemAnnouncements_UnseenItem* CMsgClientItemAnnouncements_UnseenItem::default_instance_ = NULL;

CMsgClientItemAnnouncements_UnseenItem* CMsgClientItemAnnouncements_UnseenItem::New() const {
  return new CMsgClientItemAnnouncements_UnseenItem;
}

void CMsgClientItemAnnouncements_UnseenItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0u;
    context_id_ = GOOGLE_ULONGLONG(0);
    asset_id_ = GOOGLE_ULONGLONG(0);
    amount_ = GOOGLE_ULONGLONG(0);
    rtime32_gained_ = 0u;
    source_appid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientItemAnnouncements_UnseenItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_context_id;
        break;
      }

      // optional uint64 context_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_context_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &context_id_)));
          set_has_context_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_asset_id;
        break;
      }

      // optional uint64 asset_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_asset_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &asset_id_)));
          set_has_asset_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_rtime32_gained;
        break;
      }

      // optional fixed32 rtime32_gained = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rtime32_gained:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &rtime32_gained_)));
          set_has_rtime32_gained();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_source_appid;
        break;
      }

      // optional uint32 source_appid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_appid_)));
          set_has_source_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientItemAnnouncements_UnseenItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint64 context_id = 2;
  if (has_context_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->context_id(), output);
  }

  // optional uint64 asset_id = 3;
  if (has_asset_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->asset_id(), output);
  }

  // optional uint64 amount = 4;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->amount(), output);
  }

  // optional fixed32 rtime32_gained = 5;
  if (has_rtime32_gained()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->rtime32_gained(), output);
  }

  // optional uint32 source_appid = 6;
  if (has_source_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->source_appid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientItemAnnouncements_UnseenItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 appid = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint64 context_id = 2;
  if (has_context_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->context_id(), target);
  }

  // optional uint64 asset_id = 3;
  if (has_asset_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->asset_id(), target);
  }

  // optional uint64 amount = 4;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->amount(), target);
  }

  // optional fixed32 rtime32_gained = 5;
  if (has_rtime32_gained()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->rtime32_gained(), target);
  }

  // optional uint32 source_appid = 6;
  if (has_source_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->source_appid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientItemAnnouncements_UnseenItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint64 context_id = 2;
    if (has_context_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->context_id());
    }

    // optional uint64 asset_id = 3;
    if (has_asset_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->asset_id());
    }

    // optional uint64 amount = 4;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional fixed32 rtime32_gained = 5;
    if (has_rtime32_gained()) {
      total_size += 1 + 4;
    }

    // optional uint32 source_appid = 6;
    if (has_source_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_appid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientItemAnnouncements_UnseenItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientItemAnnouncements_UnseenItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientItemAnnouncements_UnseenItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientItemAnnouncements_UnseenItem::MergeFrom(const CMsgClientItemAnnouncements_UnseenItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_context_id()) {
      set_context_id(from.context_id());
    }
    if (from.has_asset_id()) {
      set_asset_id(from.asset_id());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_rtime32_gained()) {
      set_rtime32_gained(from.rtime32_gained());
    }
    if (from.has_source_appid()) {
      set_source_appid(from.source_appid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientItemAnnouncements_UnseenItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientItemAnnouncements_UnseenItem::CopyFrom(const CMsgClientItemAnnouncements_UnseenItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientItemAnnouncements_UnseenItem::IsInitialized() const {

  return true;
}

void CMsgClientItemAnnouncements_UnseenItem::Swap(CMsgClientItemAnnouncements_UnseenItem* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(context_id_, other->context_id_);
    std::swap(asset_id_, other->asset_id_);
    std::swap(amount_, other->amount_);
    std::swap(rtime32_gained_, other->rtime32_gained_);
    std::swap(source_appid_, other->source_appid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientItemAnnouncements_UnseenItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientItemAnnouncements_UnseenItem_descriptor_;
  metadata.reflection = CMsgClientItemAnnouncements_UnseenItem_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientItemAnnouncements::kCountNewItemsFieldNumber;
const int CMsgClientItemAnnouncements::kUnseenItemsFieldNumber;
#endif  // !_MSC_VER

CMsgClientItemAnnouncements::CMsgClientItemAnnouncements()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientItemAnnouncements::InitAsDefaultInstance() {
}

CMsgClientItemAnnouncements::CMsgClientItemAnnouncements(const CMsgClientItemAnnouncements& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientItemAnnouncements::SharedCtor() {
  _cached_size_ = 0;
  count_new_items_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientItemAnnouncements::~CMsgClientItemAnnouncements() {
  SharedDtor();
}

void CMsgClientItemAnnouncements::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientItemAnnouncements::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientItemAnnouncements::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientItemAnnouncements_descriptor_;
}

const CMsgClientItemAnnouncements& CMsgClientItemAnnouncements::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientItemAnnouncements* CMsgClientItemAnnouncements::default_instance_ = NULL;

CMsgClientItemAnnouncements* CMsgClientItemAnnouncements::New() const {
  return new CMsgClientItemAnnouncements;
}

void CMsgClientItemAnnouncements::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_new_items_ = 0u;
  }
  unseen_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientItemAnnouncements::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 count_new_items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_new_items_)));
          set_has_count_new_items();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_unseen_items;
        break;
      }

      // repeated .CMsgClientItemAnnouncements.UnseenItem unseen_items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unseen_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unseen_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_unseen_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientItemAnnouncements::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 count_new_items = 1;
  if (has_count_new_items()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count_new_items(), output);
  }

  // repeated .CMsgClientItemAnnouncements.UnseenItem unseen_items = 2;
  for (int i = 0; i < this->unseen_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->unseen_items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientItemAnnouncements::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 count_new_items = 1;
  if (has_count_new_items()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count_new_items(), target);
  }

  // repeated .CMsgClientItemAnnouncements.UnseenItem unseen_items = 2;
  for (int i = 0; i < this->unseen_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->unseen_items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientItemAnnouncements::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 count_new_items = 1;
    if (has_count_new_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_new_items());
    }

  }
  // repeated .CMsgClientItemAnnouncements.UnseenItem unseen_items = 2;
  total_size += 1 * this->unseen_items_size();
  for (int i = 0; i < this->unseen_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unseen_items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientItemAnnouncements::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientItemAnnouncements* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientItemAnnouncements*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientItemAnnouncements::MergeFrom(const CMsgClientItemAnnouncements& from) {
  GOOGLE_CHECK_NE(&from, this);
  unseen_items_.MergeFrom(from.unseen_items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count_new_items()) {
      set_count_new_items(from.count_new_items());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientItemAnnouncements::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientItemAnnouncements::CopyFrom(const CMsgClientItemAnnouncements& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientItemAnnouncements::IsInitialized() const {

  return true;
}

void CMsgClientItemAnnouncements::Swap(CMsgClientItemAnnouncements* other) {
  if (other != this) {
    std::swap(count_new_items_, other->count_new_items_);
    unseen_items_.Swap(&other->unseen_items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientItemAnnouncements::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientItemAnnouncements_descriptor_;
  metadata.reflection = CMsgClientItemAnnouncements_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgClientRequestItemAnnouncements::CMsgClientRequestItemAnnouncements()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientRequestItemAnnouncements::InitAsDefaultInstance() {
}

CMsgClientRequestItemAnnouncements::CMsgClientRequestItemAnnouncements(const CMsgClientRequestItemAnnouncements& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRequestItemAnnouncements::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRequestItemAnnouncements::~CMsgClientRequestItemAnnouncements() {
  SharedDtor();
}

void CMsgClientRequestItemAnnouncements::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientRequestItemAnnouncements::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRequestItemAnnouncements::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientRequestItemAnnouncements_descriptor_;
}

const CMsgClientRequestItemAnnouncements& CMsgClientRequestItemAnnouncements::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientRequestItemAnnouncements* CMsgClientRequestItemAnnouncements::default_instance_ = NULL;

CMsgClientRequestItemAnnouncements* CMsgClientRequestItemAnnouncements::New() const {
  return new CMsgClientRequestItemAnnouncements;
}

void CMsgClientRequestItemAnnouncements::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientRequestItemAnnouncements::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgClientRequestItemAnnouncements::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientRequestItemAnnouncements::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientRequestItemAnnouncements::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestItemAnnouncements::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientRequestItemAnnouncements* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientRequestItemAnnouncements*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientRequestItemAnnouncements::MergeFrom(const CMsgClientRequestItemAnnouncements& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientRequestItemAnnouncements::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRequestItemAnnouncements::CopyFrom(const CMsgClientRequestItemAnnouncements& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestItemAnnouncements::IsInitialized() const {

  return true;
}

void CMsgClientRequestItemAnnouncements::Swap(CMsgClientRequestItemAnnouncements* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientRequestItemAnnouncements::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientRequestItemAnnouncements_descriptor_;
  metadata.reflection = CMsgClientRequestItemAnnouncements_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUserNotifications_Notification::kUserNotificationTypeFieldNumber;
const int CMsgClientUserNotifications_Notification::kCountFieldNumber;
#endif  // !_MSC_VER

CMsgClientUserNotifications_Notification::CMsgClientUserNotifications_Notification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientUserNotifications_Notification::InitAsDefaultInstance() {
}

CMsgClientUserNotifications_Notification::CMsgClientUserNotifications_Notification(const CMsgClientUserNotifications_Notification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUserNotifications_Notification::SharedCtor() {
  _cached_size_ = 0;
  user_notification_type_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUserNotifications_Notification::~CMsgClientUserNotifications_Notification() {
  SharedDtor();
}

void CMsgClientUserNotifications_Notification::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientUserNotifications_Notification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUserNotifications_Notification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientUserNotifications_Notification_descriptor_;
}

const CMsgClientUserNotifications_Notification& CMsgClientUserNotifications_Notification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientUserNotifications_Notification* CMsgClientUserNotifications_Notification::default_instance_ = NULL;

CMsgClientUserNotifications_Notification* CMsgClientUserNotifications_Notification::New() const {
  return new CMsgClientUserNotifications_Notification;
}

void CMsgClientUserNotifications_Notification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_notification_type_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientUserNotifications_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 user_notification_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_notification_type_)));
          set_has_user_notification_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUserNotifications_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 user_notification_type = 1;
  if (has_user_notification_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_notification_type(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientUserNotifications_Notification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 user_notification_type = 1;
  if (has_user_notification_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_notification_type(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientUserNotifications_Notification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 user_notification_type = 1;
    if (has_user_notification_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_notification_type());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUserNotifications_Notification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientUserNotifications_Notification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientUserNotifications_Notification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientUserNotifications_Notification::MergeFrom(const CMsgClientUserNotifications_Notification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_notification_type()) {
      set_user_notification_type(from.user_notification_type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientUserNotifications_Notification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUserNotifications_Notification::CopyFrom(const CMsgClientUserNotifications_Notification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUserNotifications_Notification::IsInitialized() const {

  return true;
}

void CMsgClientUserNotifications_Notification::Swap(CMsgClientUserNotifications_Notification* other) {
  if (other != this) {
    std::swap(user_notification_type_, other->user_notification_type_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientUserNotifications_Notification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientUserNotifications_Notification_descriptor_;
  metadata.reflection = CMsgClientUserNotifications_Notification_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientUserNotifications::kNotificationsFieldNumber;
#endif  // !_MSC_VER

CMsgClientUserNotifications::CMsgClientUserNotifications()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientUserNotifications::InitAsDefaultInstance() {
}

CMsgClientUserNotifications::CMsgClientUserNotifications(const CMsgClientUserNotifications& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUserNotifications::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUserNotifications::~CMsgClientUserNotifications() {
  SharedDtor();
}

void CMsgClientUserNotifications::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientUserNotifications::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUserNotifications::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientUserNotifications_descriptor_;
}

const CMsgClientUserNotifications& CMsgClientUserNotifications::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientUserNotifications* CMsgClientUserNotifications::default_instance_ = NULL;

CMsgClientUserNotifications* CMsgClientUserNotifications::New() const {
  return new CMsgClientUserNotifications;
}

void CMsgClientUserNotifications::Clear() {
  notifications_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientUserNotifications::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgClientUserNotifications.Notification notifications = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notifications:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_notifications()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_notifications;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUserNotifications::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgClientUserNotifications.Notification notifications = 1;
  for (int i = 0; i < this->notifications_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->notifications(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientUserNotifications::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgClientUserNotifications.Notification notifications = 1;
  for (int i = 0; i < this->notifications_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->notifications(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientUserNotifications::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgClientUserNotifications.Notification notifications = 1;
  total_size += 1 * this->notifications_size();
  for (int i = 0; i < this->notifications_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->notifications(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUserNotifications::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientUserNotifications* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientUserNotifications*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientUserNotifications::MergeFrom(const CMsgClientUserNotifications& from) {
  GOOGLE_CHECK_NE(&from, this);
  notifications_.MergeFrom(from.notifications_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientUserNotifications::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUserNotifications::CopyFrom(const CMsgClientUserNotifications& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUserNotifications::IsInitialized() const {

  return true;
}

void CMsgClientUserNotifications::Swap(CMsgClientUserNotifications* other) {
  if (other != this) {
    notifications_.Swap(&other->notifications_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientUserNotifications::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientUserNotifications_descriptor_;
  metadata.reflection = CMsgClientUserNotifications_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientCommentNotifications::kCountNewCommentsFieldNumber;
const int CMsgClientCommentNotifications::kCountNewCommentsOwnerFieldNumber;
const int CMsgClientCommentNotifications::kCountNewCommentsSubscriptionsFieldNumber;
#endif  // !_MSC_VER

CMsgClientCommentNotifications::CMsgClientCommentNotifications()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientCommentNotifications::InitAsDefaultInstance() {
}

CMsgClientCommentNotifications::CMsgClientCommentNotifications(const CMsgClientCommentNotifications& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientCommentNotifications::SharedCtor() {
  _cached_size_ = 0;
  count_new_comments_ = 0u;
  count_new_comments_owner_ = 0u;
  count_new_comments_subscriptions_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientCommentNotifications::~CMsgClientCommentNotifications() {
  SharedDtor();
}

void CMsgClientCommentNotifications::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientCommentNotifications::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientCommentNotifications::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientCommentNotifications_descriptor_;
}

const CMsgClientCommentNotifications& CMsgClientCommentNotifications::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientCommentNotifications* CMsgClientCommentNotifications::default_instance_ = NULL;

CMsgClientCommentNotifications* CMsgClientCommentNotifications::New() const {
  return new CMsgClientCommentNotifications;
}

void CMsgClientCommentNotifications::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_new_comments_ = 0u;
    count_new_comments_owner_ = 0u;
    count_new_comments_subscriptions_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientCommentNotifications::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 count_new_comments = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_new_comments_)));
          set_has_count_new_comments();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count_new_comments_owner;
        break;
      }

      // optional uint32 count_new_comments_owner = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_new_comments_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_new_comments_owner_)));
          set_has_count_new_comments_owner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count_new_comments_subscriptions;
        break;
      }

      // optional uint32 count_new_comments_subscriptions = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_new_comments_subscriptions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_new_comments_subscriptions_)));
          set_has_count_new_comments_subscriptions();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientCommentNotifications::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 count_new_comments = 1;
  if (has_count_new_comments()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count_new_comments(), output);
  }

  // optional uint32 count_new_comments_owner = 2;
  if (has_count_new_comments_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count_new_comments_owner(), output);
  }

  // optional uint32 count_new_comments_subscriptions = 3;
  if (has_count_new_comments_subscriptions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count_new_comments_subscriptions(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientCommentNotifications::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 count_new_comments = 1;
  if (has_count_new_comments()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count_new_comments(), target);
  }

  // optional uint32 count_new_comments_owner = 2;
  if (has_count_new_comments_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count_new_comments_owner(), target);
  }

  // optional uint32 count_new_comments_subscriptions = 3;
  if (has_count_new_comments_subscriptions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count_new_comments_subscriptions(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientCommentNotifications::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 count_new_comments = 1;
    if (has_count_new_comments()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_new_comments());
    }

    // optional uint32 count_new_comments_owner = 2;
    if (has_count_new_comments_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_new_comments_owner());
    }

    // optional uint32 count_new_comments_subscriptions = 3;
    if (has_count_new_comments_subscriptions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_new_comments_subscriptions());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientCommentNotifications::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientCommentNotifications* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientCommentNotifications*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientCommentNotifications::MergeFrom(const CMsgClientCommentNotifications& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count_new_comments()) {
      set_count_new_comments(from.count_new_comments());
    }
    if (from.has_count_new_comments_owner()) {
      set_count_new_comments_owner(from.count_new_comments_owner());
    }
    if (from.has_count_new_comments_subscriptions()) {
      set_count_new_comments_subscriptions(from.count_new_comments_subscriptions());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientCommentNotifications::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientCommentNotifications::CopyFrom(const CMsgClientCommentNotifications& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientCommentNotifications::IsInitialized() const {

  return true;
}

void CMsgClientCommentNotifications::Swap(CMsgClientCommentNotifications* other) {
  if (other != this) {
    std::swap(count_new_comments_, other->count_new_comments_);
    std::swap(count_new_comments_owner_, other->count_new_comments_owner_);
    std::swap(count_new_comments_subscriptions_, other->count_new_comments_subscriptions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientCommentNotifications::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientCommentNotifications_descriptor_;
  metadata.reflection = CMsgClientCommentNotifications_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgClientRequestCommentNotifications::CMsgClientRequestCommentNotifications()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientRequestCommentNotifications::InitAsDefaultInstance() {
}

CMsgClientRequestCommentNotifications::CMsgClientRequestCommentNotifications(const CMsgClientRequestCommentNotifications& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRequestCommentNotifications::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRequestCommentNotifications::~CMsgClientRequestCommentNotifications() {
  SharedDtor();
}

void CMsgClientRequestCommentNotifications::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientRequestCommentNotifications::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRequestCommentNotifications::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientRequestCommentNotifications_descriptor_;
}

const CMsgClientRequestCommentNotifications& CMsgClientRequestCommentNotifications::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientRequestCommentNotifications* CMsgClientRequestCommentNotifications::default_instance_ = NULL;

CMsgClientRequestCommentNotifications* CMsgClientRequestCommentNotifications::New() const {
  return new CMsgClientRequestCommentNotifications;
}

void CMsgClientRequestCommentNotifications::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientRequestCommentNotifications::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgClientRequestCommentNotifications::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientRequestCommentNotifications::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientRequestCommentNotifications::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestCommentNotifications::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientRequestCommentNotifications* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientRequestCommentNotifications*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientRequestCommentNotifications::MergeFrom(const CMsgClientRequestCommentNotifications& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientRequestCommentNotifications::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRequestCommentNotifications::CopyFrom(const CMsgClientRequestCommentNotifications& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestCommentNotifications::IsInitialized() const {

  return true;
}

void CMsgClientRequestCommentNotifications::Swap(CMsgClientRequestCommentNotifications* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientRequestCommentNotifications::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientRequestCommentNotifications_descriptor_;
  metadata.reflection = CMsgClientRequestCommentNotifications_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientOfflineMessageNotification::kOfflineMessagesFieldNumber;
const int CMsgClientOfflineMessageNotification::kFriendsWithOfflineMessagesFieldNumber;
#endif  // !_MSC_VER

CMsgClientOfflineMessageNotification::CMsgClientOfflineMessageNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientOfflineMessageNotification::InitAsDefaultInstance() {
}

CMsgClientOfflineMessageNotification::CMsgClientOfflineMessageNotification(const CMsgClientOfflineMessageNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientOfflineMessageNotification::SharedCtor() {
  _cached_size_ = 0;
  offline_messages_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientOfflineMessageNotification::~CMsgClientOfflineMessageNotification() {
  SharedDtor();
}

void CMsgClientOfflineMessageNotification::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientOfflineMessageNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientOfflineMessageNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientOfflineMessageNotification_descriptor_;
}

const CMsgClientOfflineMessageNotification& CMsgClientOfflineMessageNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientOfflineMessageNotification* CMsgClientOfflineMessageNotification::default_instance_ = NULL;

CMsgClientOfflineMessageNotification* CMsgClientOfflineMessageNotification::New() const {
  return new CMsgClientOfflineMessageNotification;
}

void CMsgClientOfflineMessageNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    offline_messages_ = 0u;
  }
  friends_with_offline_messages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientOfflineMessageNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 offline_messages = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offline_messages_)));
          set_has_offline_messages();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_friends_with_offline_messages;
        break;
      }

      // repeated uint32 friends_with_offline_messages = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friends_with_offline_messages:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_friends_with_offline_messages())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_friends_with_offline_messages())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_friends_with_offline_messages;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientOfflineMessageNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 offline_messages = 1;
  if (has_offline_messages()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->offline_messages(), output);
  }

  // repeated uint32 friends_with_offline_messages = 2;
  for (int i = 0; i < this->friends_with_offline_messages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->friends_with_offline_messages(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientOfflineMessageNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 offline_messages = 1;
  if (has_offline_messages()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->offline_messages(), target);
  }

  // repeated uint32 friends_with_offline_messages = 2;
  for (int i = 0; i < this->friends_with_offline_messages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->friends_with_offline_messages(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientOfflineMessageNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 offline_messages = 1;
    if (has_offline_messages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offline_messages());
    }

  }
  // repeated uint32 friends_with_offline_messages = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->friends_with_offline_messages_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->friends_with_offline_messages(i));
    }
    total_size += 1 * this->friends_with_offline_messages_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientOfflineMessageNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientOfflineMessageNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientOfflineMessageNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientOfflineMessageNotification::MergeFrom(const CMsgClientOfflineMessageNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_with_offline_messages_.MergeFrom(from.friends_with_offline_messages_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offline_messages()) {
      set_offline_messages(from.offline_messages());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientOfflineMessageNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientOfflineMessageNotification::CopyFrom(const CMsgClientOfflineMessageNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientOfflineMessageNotification::IsInitialized() const {

  return true;
}

void CMsgClientOfflineMessageNotification::Swap(CMsgClientOfflineMessageNotification* other) {
  if (other != this) {
    std::swap(offline_messages_, other->offline_messages_);
    friends_with_offline_messages_.Swap(&other->friends_with_offline_messages_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientOfflineMessageNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientOfflineMessageNotification_descriptor_;
  metadata.reflection = CMsgClientOfflineMessageNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgClientRequestOfflineMessageCount::CMsgClientRequestOfflineMessageCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientRequestOfflineMessageCount::InitAsDefaultInstance() {
}

CMsgClientRequestOfflineMessageCount::CMsgClientRequestOfflineMessageCount(const CMsgClientRequestOfflineMessageCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRequestOfflineMessageCount::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRequestOfflineMessageCount::~CMsgClientRequestOfflineMessageCount() {
  SharedDtor();
}

void CMsgClientRequestOfflineMessageCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientRequestOfflineMessageCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRequestOfflineMessageCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientRequestOfflineMessageCount_descriptor_;
}

const CMsgClientRequestOfflineMessageCount& CMsgClientRequestOfflineMessageCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientRequestOfflineMessageCount* CMsgClientRequestOfflineMessageCount::default_instance_ = NULL;

CMsgClientRequestOfflineMessageCount* CMsgClientRequestOfflineMessageCount::New() const {
  return new CMsgClientRequestOfflineMessageCount;
}

void CMsgClientRequestOfflineMessageCount::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientRequestOfflineMessageCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgClientRequestOfflineMessageCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientRequestOfflineMessageCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientRequestOfflineMessageCount::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestOfflineMessageCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientRequestOfflineMessageCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientRequestOfflineMessageCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientRequestOfflineMessageCount::MergeFrom(const CMsgClientRequestOfflineMessageCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientRequestOfflineMessageCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRequestOfflineMessageCount::CopyFrom(const CMsgClientRequestOfflineMessageCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestOfflineMessageCount::IsInitialized() const {

  return true;
}

void CMsgClientRequestOfflineMessageCount::Swap(CMsgClientRequestOfflineMessageCount* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientRequestOfflineMessageCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientRequestOfflineMessageCount_descriptor_;
  metadata.reflection = CMsgClientRequestOfflineMessageCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientChatGetFriendMessageHistory::kSteamidFieldNumber;
#endif  // !_MSC_VER

CMsgClientChatGetFriendMessageHistory::CMsgClientChatGetFriendMessageHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientChatGetFriendMessageHistory::InitAsDefaultInstance() {
}

CMsgClientChatGetFriendMessageHistory::CMsgClientChatGetFriendMessageHistory(const CMsgClientChatGetFriendMessageHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientChatGetFriendMessageHistory::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientChatGetFriendMessageHistory::~CMsgClientChatGetFriendMessageHistory() {
  SharedDtor();
}

void CMsgClientChatGetFriendMessageHistory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientChatGetFriendMessageHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientChatGetFriendMessageHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientChatGetFriendMessageHistory_descriptor_;
}

const CMsgClientChatGetFriendMessageHistory& CMsgClientChatGetFriendMessageHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientChatGetFriendMessageHistory* CMsgClientChatGetFriendMessageHistory::default_instance_ = NULL;

CMsgClientChatGetFriendMessageHistory* CMsgClientChatGetFriendMessageHistory::New() const {
  return new CMsgClientChatGetFriendMessageHistory;
}

void CMsgClientChatGetFriendMessageHistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientChatGetFriendMessageHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientChatGetFriendMessageHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientChatGetFriendMessageHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientChatGetFriendMessageHistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientChatGetFriendMessageHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientChatGetFriendMessageHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientChatGetFriendMessageHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientChatGetFriendMessageHistory::MergeFrom(const CMsgClientChatGetFriendMessageHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientChatGetFriendMessageHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientChatGetFriendMessageHistory::CopyFrom(const CMsgClientChatGetFriendMessageHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientChatGetFriendMessageHistory::IsInitialized() const {

  return true;
}

void CMsgClientChatGetFriendMessageHistory::Swap(CMsgClientChatGetFriendMessageHistory* other) {
  if (other != this) {
    std::swap(steamid_, other->steamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientChatGetFriendMessageHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientChatGetFriendMessageHistory_descriptor_;
  metadata.reflection = CMsgClientChatGetFriendMessageHistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::kAccountidFieldNumber;
const int CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::kTimestampFieldNumber;
const int CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::kMessageFieldNumber;
const int CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::kUnreadFieldNumber;
#endif  // !_MSC_VER

CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::InitAsDefaultInstance() {
}

CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage(const CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  timestamp_ = 0u;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unread_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::~CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage() {
  SharedDtor();
}

void CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage_descriptor_;
}

const CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage& CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage* CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::default_instance_ = NULL;

CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage* CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::New() const {
  return new CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage;
}

void CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
    timestamp_ = 0u;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    unread_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional uint32 timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_message;
        break;
      }

      // optional string message = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_unread;
        break;
      }

      // optional bool unread = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unread:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unread_)));
          set_has_unread();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional uint32 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestamp(), output);
  }

  // optional string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->message(), output);
  }

  // optional bool unread = 4;
  if (has_unread()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->unread(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // optional uint32 timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timestamp(), target);
  }

  // optional string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  // optional bool unread = 4;
  if (has_unread()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->unread(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional uint32 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional string message = 3;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional bool unread = 4;
    if (has_unread()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::MergeFrom(const CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_unread()) {
      set_unread(from.unread());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::CopyFrom(const CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::IsInitialized() const {

  return true;
}

void CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::Swap(CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(message_, other->message_);
    std::swap(unread_, other->unread_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage_descriptor_;
  metadata.reflection = CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientChatGetFriendMessageHistoryResponse::kSteamidFieldNumber;
const int CMsgClientChatGetFriendMessageHistoryResponse::kSuccessFieldNumber;
const int CMsgClientChatGetFriendMessageHistoryResponse::kMessagesFieldNumber;
#endif  // !_MSC_VER

CMsgClientChatGetFriendMessageHistoryResponse::CMsgClientChatGetFriendMessageHistoryResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientChatGetFriendMessageHistoryResponse::InitAsDefaultInstance() {
}

CMsgClientChatGetFriendMessageHistoryResponse::CMsgClientChatGetFriendMessageHistoryResponse(const CMsgClientChatGetFriendMessageHistoryResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientChatGetFriendMessageHistoryResponse::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  success_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientChatGetFriendMessageHistoryResponse::~CMsgClientChatGetFriendMessageHistoryResponse() {
  SharedDtor();
}

void CMsgClientChatGetFriendMessageHistoryResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientChatGetFriendMessageHistoryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientChatGetFriendMessageHistoryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientChatGetFriendMessageHistoryResponse_descriptor_;
}

const CMsgClientChatGetFriendMessageHistoryResponse& CMsgClientChatGetFriendMessageHistoryResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientChatGetFriendMessageHistoryResponse* CMsgClientChatGetFriendMessageHistoryResponse::default_instance_ = NULL;

CMsgClientChatGetFriendMessageHistoryResponse* CMsgClientChatGetFriendMessageHistoryResponse::New() const {
  return new CMsgClientChatGetFriendMessageHistoryResponse;
}

void CMsgClientChatGetFriendMessageHistoryResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_ = GOOGLE_ULONGLONG(0);
    success_ = 0u;
  }
  messages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientChatGetFriendMessageHistoryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_success;
        break;
      }

      // optional uint32 success = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_messages;
        break;
      }

      // repeated .CMsgClientChatGetFriendMessageHistoryResponse.FriendMessage messages = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_messages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_messages;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientChatGetFriendMessageHistoryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint32 success = 2;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->success(), output);
  }

  // repeated .CMsgClientChatGetFriendMessageHistoryResponse.FriendMessage messages = 3;
  for (int i = 0; i < this->messages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->messages(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientChatGetFriendMessageHistoryResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint32 success = 2;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->success(), target);
  }

  // repeated .CMsgClientChatGetFriendMessageHistoryResponse.FriendMessage messages = 3;
  for (int i = 0; i < this->messages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->messages(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientChatGetFriendMessageHistoryResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint32 success = 2;
    if (has_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->success());
    }

  }
  // repeated .CMsgClientChatGetFriendMessageHistoryResponse.FriendMessage messages = 3;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messages(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientChatGetFriendMessageHistoryResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientChatGetFriendMessageHistoryResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientChatGetFriendMessageHistoryResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientChatGetFriendMessageHistoryResponse::MergeFrom(const CMsgClientChatGetFriendMessageHistoryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  messages_.MergeFrom(from.messages_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientChatGetFriendMessageHistoryResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientChatGetFriendMessageHistoryResponse::CopyFrom(const CMsgClientChatGetFriendMessageHistoryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientChatGetFriendMessageHistoryResponse::IsInitialized() const {

  return true;
}

void CMsgClientChatGetFriendMessageHistoryResponse::Swap(CMsgClientChatGetFriendMessageHistoryResponse* other) {
  if (other != this) {
    std::swap(steamid_, other->steamid_);
    std::swap(success_, other->success_);
    messages_.Swap(&other->messages_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientChatGetFriendMessageHistoryResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientChatGetFriendMessageHistoryResponse_descriptor_;
  metadata.reflection = CMsgClientChatGetFriendMessageHistoryResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgClientChatGetFriendMessageHistoryForOfflineMessages::CMsgClientChatGetFriendMessageHistoryForOfflineMessages()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientChatGetFriendMessageHistoryForOfflineMessages::InitAsDefaultInstance() {
}

CMsgClientChatGetFriendMessageHistoryForOfflineMessages::CMsgClientChatGetFriendMessageHistoryForOfflineMessages(const CMsgClientChatGetFriendMessageHistoryForOfflineMessages& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientChatGetFriendMessageHistoryForOfflineMessages::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientChatGetFriendMessageHistoryForOfflineMessages::~CMsgClientChatGetFriendMessageHistoryForOfflineMessages() {
  SharedDtor();
}

void CMsgClientChatGetFriendMessageHistoryForOfflineMessages::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientChatGetFriendMessageHistoryForOfflineMessages::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientChatGetFriendMessageHistoryForOfflineMessages::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientChatGetFriendMessageHistoryForOfflineMessages_descriptor_;
}

const CMsgClientChatGetFriendMessageHistoryForOfflineMessages& CMsgClientChatGetFriendMessageHistoryForOfflineMessages::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientChatGetFriendMessageHistoryForOfflineMessages* CMsgClientChatGetFriendMessageHistoryForOfflineMessages::default_instance_ = NULL;

CMsgClientChatGetFriendMessageHistoryForOfflineMessages* CMsgClientChatGetFriendMessageHistoryForOfflineMessages::New() const {
  return new CMsgClientChatGetFriendMessageHistoryForOfflineMessages;
}

void CMsgClientChatGetFriendMessageHistoryForOfflineMessages::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientChatGetFriendMessageHistoryForOfflineMessages::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgClientChatGetFriendMessageHistoryForOfflineMessages::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientChatGetFriendMessageHistoryForOfflineMessages::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientChatGetFriendMessageHistoryForOfflineMessages::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientChatGetFriendMessageHistoryForOfflineMessages::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientChatGetFriendMessageHistoryForOfflineMessages* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientChatGetFriendMessageHistoryForOfflineMessages*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientChatGetFriendMessageHistoryForOfflineMessages::MergeFrom(const CMsgClientChatGetFriendMessageHistoryForOfflineMessages& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientChatGetFriendMessageHistoryForOfflineMessages::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientChatGetFriendMessageHistoryForOfflineMessages::CopyFrom(const CMsgClientChatGetFriendMessageHistoryForOfflineMessages& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientChatGetFriendMessageHistoryForOfflineMessages::IsInitialized() const {

  return true;
}

void CMsgClientChatGetFriendMessageHistoryForOfflineMessages::Swap(CMsgClientChatGetFriendMessageHistoryForOfflineMessages* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientChatGetFriendMessageHistoryForOfflineMessages::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientChatGetFriendMessageHistoryForOfflineMessages_descriptor_;
  metadata.reflection = CMsgClientChatGetFriendMessageHistoryForOfflineMessages_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientFSGetFriendsSteamLevels::kAccountidsFieldNumber;
#endif  // !_MSC_VER

CMsgClientFSGetFriendsSteamLevels::CMsgClientFSGetFriendsSteamLevels()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientFSGetFriendsSteamLevels::InitAsDefaultInstance() {
}

CMsgClientFSGetFriendsSteamLevels::CMsgClientFSGetFriendsSteamLevels(const CMsgClientFSGetFriendsSteamLevels& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientFSGetFriendsSteamLevels::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientFSGetFriendsSteamLevels::~CMsgClientFSGetFriendsSteamLevels() {
  SharedDtor();
}

void CMsgClientFSGetFriendsSteamLevels::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientFSGetFriendsSteamLevels::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientFSGetFriendsSteamLevels::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientFSGetFriendsSteamLevels_descriptor_;
}

const CMsgClientFSGetFriendsSteamLevels& CMsgClientFSGetFriendsSteamLevels::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientFSGetFriendsSteamLevels* CMsgClientFSGetFriendsSteamLevels::default_instance_ = NULL;

CMsgClientFSGetFriendsSteamLevels* CMsgClientFSGetFriendsSteamLevels::New() const {
  return new CMsgClientFSGetFriendsSteamLevels;
}

void CMsgClientFSGetFriendsSteamLevels::Clear() {
  accountids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientFSGetFriendsSteamLevels::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 accountids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_accountids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_accountids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_accountids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientFSGetFriendsSteamLevels::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 accountids = 1;
  for (int i = 0; i < this->accountids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->accountids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientFSGetFriendsSteamLevels::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 accountids = 1;
  for (int i = 0; i < this->accountids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->accountids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientFSGetFriendsSteamLevels::ByteSize() const {
  int total_size = 0;

  // repeated uint32 accountids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->accountids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->accountids(i));
    }
    total_size += 1 * this->accountids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientFSGetFriendsSteamLevels::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientFSGetFriendsSteamLevels* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientFSGetFriendsSteamLevels*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientFSGetFriendsSteamLevels::MergeFrom(const CMsgClientFSGetFriendsSteamLevels& from) {
  GOOGLE_CHECK_NE(&from, this);
  accountids_.MergeFrom(from.accountids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientFSGetFriendsSteamLevels::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientFSGetFriendsSteamLevels::CopyFrom(const CMsgClientFSGetFriendsSteamLevels& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFSGetFriendsSteamLevels::IsInitialized() const {

  return true;
}

void CMsgClientFSGetFriendsSteamLevels::Swap(CMsgClientFSGetFriendsSteamLevels* other) {
  if (other != this) {
    accountids_.Swap(&other->accountids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientFSGetFriendsSteamLevels::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientFSGetFriendsSteamLevels_descriptor_;
  metadata.reflection = CMsgClientFSGetFriendsSteamLevels_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientFSGetFriendsSteamLevelsResponse_Friend::kAccountidFieldNumber;
const int CMsgClientFSGetFriendsSteamLevelsResponse_Friend::kLevelFieldNumber;
#endif  // !_MSC_VER

CMsgClientFSGetFriendsSteamLevelsResponse_Friend::CMsgClientFSGetFriendsSteamLevelsResponse_Friend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientFSGetFriendsSteamLevelsResponse_Friend::InitAsDefaultInstance() {
}

CMsgClientFSGetFriendsSteamLevelsResponse_Friend::CMsgClientFSGetFriendsSteamLevelsResponse_Friend(const CMsgClientFSGetFriendsSteamLevelsResponse_Friend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientFSGetFriendsSteamLevelsResponse_Friend::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientFSGetFriendsSteamLevelsResponse_Friend::~CMsgClientFSGetFriendsSteamLevelsResponse_Friend() {
  SharedDtor();
}

void CMsgClientFSGetFriendsSteamLevelsResponse_Friend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientFSGetFriendsSteamLevelsResponse_Friend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientFSGetFriendsSteamLevelsResponse_Friend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientFSGetFriendsSteamLevelsResponse_Friend_descriptor_;
}

const CMsgClientFSGetFriendsSteamLevelsResponse_Friend& CMsgClientFSGetFriendsSteamLevelsResponse_Friend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientFSGetFriendsSteamLevelsResponse_Friend* CMsgClientFSGetFriendsSteamLevelsResponse_Friend::default_instance_ = NULL;

CMsgClientFSGetFriendsSteamLevelsResponse_Friend* CMsgClientFSGetFriendsSteamLevelsResponse_Friend::New() const {
  return new CMsgClientFSGetFriendsSteamLevelsResponse_Friend;
}

void CMsgClientFSGetFriendsSteamLevelsResponse_Friend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientFSGetFriendsSteamLevelsResponse_Friend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientFSGetFriendsSteamLevelsResponse_Friend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientFSGetFriendsSteamLevelsResponse_Friend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientFSGetFriendsSteamLevelsResponse_Friend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientFSGetFriendsSteamLevelsResponse_Friend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientFSGetFriendsSteamLevelsResponse_Friend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientFSGetFriendsSteamLevelsResponse_Friend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientFSGetFriendsSteamLevelsResponse_Friend::MergeFrom(const CMsgClientFSGetFriendsSteamLevelsResponse_Friend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientFSGetFriendsSteamLevelsResponse_Friend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientFSGetFriendsSteamLevelsResponse_Friend::CopyFrom(const CMsgClientFSGetFriendsSteamLevelsResponse_Friend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFSGetFriendsSteamLevelsResponse_Friend::IsInitialized() const {

  return true;
}

void CMsgClientFSGetFriendsSteamLevelsResponse_Friend::Swap(CMsgClientFSGetFriendsSteamLevelsResponse_Friend* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientFSGetFriendsSteamLevelsResponse_Friend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientFSGetFriendsSteamLevelsResponse_Friend_descriptor_;
  metadata.reflection = CMsgClientFSGetFriendsSteamLevelsResponse_Friend_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientFSGetFriendsSteamLevelsResponse::kFriendsFieldNumber;
#endif  // !_MSC_VER

CMsgClientFSGetFriendsSteamLevelsResponse::CMsgClientFSGetFriendsSteamLevelsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientFSGetFriendsSteamLevelsResponse::InitAsDefaultInstance() {
}

CMsgClientFSGetFriendsSteamLevelsResponse::CMsgClientFSGetFriendsSteamLevelsResponse(const CMsgClientFSGetFriendsSteamLevelsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientFSGetFriendsSteamLevelsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientFSGetFriendsSteamLevelsResponse::~CMsgClientFSGetFriendsSteamLevelsResponse() {
  SharedDtor();
}

void CMsgClientFSGetFriendsSteamLevelsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientFSGetFriendsSteamLevelsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientFSGetFriendsSteamLevelsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientFSGetFriendsSteamLevelsResponse_descriptor_;
}

const CMsgClientFSGetFriendsSteamLevelsResponse& CMsgClientFSGetFriendsSteamLevelsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientFSGetFriendsSteamLevelsResponse* CMsgClientFSGetFriendsSteamLevelsResponse::default_instance_ = NULL;

CMsgClientFSGetFriendsSteamLevelsResponse* CMsgClientFSGetFriendsSteamLevelsResponse::New() const {
  return new CMsgClientFSGetFriendsSteamLevelsResponse;
}

void CMsgClientFSGetFriendsSteamLevelsResponse::Clear() {
  friends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientFSGetFriendsSteamLevelsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgClientFSGetFriendsSteamLevelsResponse.Friend friends = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_friends;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientFSGetFriendsSteamLevelsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgClientFSGetFriendsSteamLevelsResponse.Friend friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friends(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientFSGetFriendsSteamLevelsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgClientFSGetFriendsSteamLevelsResponse.Friend friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friends(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientFSGetFriendsSteamLevelsResponse::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgClientFSGetFriendsSteamLevelsResponse.Friend friends = 1;
  total_size += 1 * this->friends_size();
  for (int i = 0; i < this->friends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friends(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientFSGetFriendsSteamLevelsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientFSGetFriendsSteamLevelsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientFSGetFriendsSteamLevelsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientFSGetFriendsSteamLevelsResponse::MergeFrom(const CMsgClientFSGetFriendsSteamLevelsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_.MergeFrom(from.friends_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientFSGetFriendsSteamLevelsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientFSGetFriendsSteamLevelsResponse::CopyFrom(const CMsgClientFSGetFriendsSteamLevelsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFSGetFriendsSteamLevelsResponse::IsInitialized() const {

  return true;
}

void CMsgClientFSGetFriendsSteamLevelsResponse::Swap(CMsgClientFSGetFriendsSteamLevelsResponse* other) {
  if (other != this) {
    friends_.Swap(&other->friends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientFSGetFriendsSteamLevelsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientFSGetFriendsSteamLevelsResponse_descriptor_;
  metadata.reflection = CMsgClientFSGetFriendsSteamLevelsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientEmailAddrInfo::kEmailAddressFieldNumber;
const int CMsgClientEmailAddrInfo::kEmailIsValidatedFieldNumber;
const int CMsgClientEmailAddrInfo::kEmailValidationChangedFieldNumber;
const int CMsgClientEmailAddrInfo::kCredentialChangeRequiresCodeFieldNumber;
const int CMsgClientEmailAddrInfo::kPasswordOrSecretqaChangeRequiresCodeFieldNumber;
const int CMsgClientEmailAddrInfo::kRemindUserAboutEmailFieldNumber;
#endif  // !_MSC_VER

CMsgClientEmailAddrInfo::CMsgClientEmailAddrInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientEmailAddrInfo::InitAsDefaultInstance() {
}

CMsgClientEmailAddrInfo::CMsgClientEmailAddrInfo(const CMsgClientEmailAddrInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientEmailAddrInfo::SharedCtor() {
  _cached_size_ = 0;
  email_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  email_is_validated_ = false;
  email_validation_changed_ = false;
  credential_change_requires_code_ = false;
  password_or_secretqa_change_requires_code_ = false;
  remind_user_about_email_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientEmailAddrInfo::~CMsgClientEmailAddrInfo() {
  SharedDtor();
}

void CMsgClientEmailAddrInfo::SharedDtor() {
  if (email_address_ != &::google::protobuf::internal::kEmptyString) {
    delete email_address_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientEmailAddrInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientEmailAddrInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientEmailAddrInfo_descriptor_;
}

const CMsgClientEmailAddrInfo& CMsgClientEmailAddrInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientEmailAddrInfo* CMsgClientEmailAddrInfo::default_instance_ = NULL;

CMsgClientEmailAddrInfo* CMsgClientEmailAddrInfo::New() const {
  return new CMsgClientEmailAddrInfo;
}

void CMsgClientEmailAddrInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_email_address()) {
      if (email_address_ != &::google::protobuf::internal::kEmptyString) {
        email_address_->clear();
      }
    }
    email_is_validated_ = false;
    email_validation_changed_ = false;
    credential_change_requires_code_ = false;
    password_or_secretqa_change_requires_code_ = false;
    remind_user_about_email_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientEmailAddrInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string email_address = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email_address().data(), this->email_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_email_is_validated;
        break;
      }

      // optional bool email_is_validated = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_email_is_validated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &email_is_validated_)));
          set_has_email_is_validated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_email_validation_changed;
        break;
      }

      // optional bool email_validation_changed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_email_validation_changed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &email_validation_changed_)));
          set_has_email_validation_changed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_credential_change_requires_code;
        break;
      }

      // optional bool credential_change_requires_code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_credential_change_requires_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &credential_change_requires_code_)));
          set_has_credential_change_requires_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_password_or_secretqa_change_requires_code;
        break;
      }

      // optional bool password_or_secretqa_change_requires_code = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_password_or_secretqa_change_requires_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &password_or_secretqa_change_requires_code_)));
          set_has_password_or_secretqa_change_requires_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_remind_user_about_email;
        break;
      }

      // optional bool remind_user_about_email = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remind_user_about_email:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &remind_user_about_email_)));
          set_has_remind_user_about_email();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientEmailAddrInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string email_address = 1;
  if (has_email_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email_address().data(), this->email_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->email_address(), output);
  }

  // optional bool email_is_validated = 2;
  if (has_email_is_validated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->email_is_validated(), output);
  }

  // optional bool email_validation_changed = 3;
  if (has_email_validation_changed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->email_validation_changed(), output);
  }

  // optional bool credential_change_requires_code = 4;
  if (has_credential_change_requires_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->credential_change_requires_code(), output);
  }

  // optional bool password_or_secretqa_change_requires_code = 5;
  if (has_password_or_secretqa_change_requires_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->password_or_secretqa_change_requires_code(), output);
  }

  // optional bool remind_user_about_email = 6;
  if (has_remind_user_about_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->remind_user_about_email(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientEmailAddrInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string email_address = 1;
  if (has_email_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email_address().data(), this->email_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->email_address(), target);
  }

  // optional bool email_is_validated = 2;
  if (has_email_is_validated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->email_is_validated(), target);
  }

  // optional bool email_validation_changed = 3;
  if (has_email_validation_changed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->email_validation_changed(), target);
  }

  // optional bool credential_change_requires_code = 4;
  if (has_credential_change_requires_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->credential_change_requires_code(), target);
  }

  // optional bool password_or_secretqa_change_requires_code = 5;
  if (has_password_or_secretqa_change_requires_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->password_or_secretqa_change_requires_code(), target);
  }

  // optional bool remind_user_about_email = 6;
  if (has_remind_user_about_email()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->remind_user_about_email(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientEmailAddrInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string email_address = 1;
    if (has_email_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email_address());
    }

    // optional bool email_is_validated = 2;
    if (has_email_is_validated()) {
      total_size += 1 + 1;
    }

    // optional bool email_validation_changed = 3;
    if (has_email_validation_changed()) {
      total_size += 1 + 1;
    }

    // optional bool credential_change_requires_code = 4;
    if (has_credential_change_requires_code()) {
      total_size += 1 + 1;
    }

    // optional bool password_or_secretqa_change_requires_code = 5;
    if (has_password_or_secretqa_change_requires_code()) {
      total_size += 1 + 1;
    }

    // optional bool remind_user_about_email = 6;
    if (has_remind_user_about_email()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientEmailAddrInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientEmailAddrInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientEmailAddrInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientEmailAddrInfo::MergeFrom(const CMsgClientEmailAddrInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_email_address()) {
      set_email_address(from.email_address());
    }
    if (from.has_email_is_validated()) {
      set_email_is_validated(from.email_is_validated());
    }
    if (from.has_email_validation_changed()) {
      set_email_validation_changed(from.email_validation_changed());
    }
    if (from.has_credential_change_requires_code()) {
      set_credential_change_requires_code(from.credential_change_requires_code());
    }
    if (from.has_password_or_secretqa_change_requires_code()) {
      set_password_or_secretqa_change_requires_code(from.password_or_secretqa_change_requires_code());
    }
    if (from.has_remind_user_about_email()) {
      set_remind_user_about_email(from.remind_user_about_email());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientEmailAddrInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientEmailAddrInfo::CopyFrom(const CMsgClientEmailAddrInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientEmailAddrInfo::IsInitialized() const {

  return true;
}

void CMsgClientEmailAddrInfo::Swap(CMsgClientEmailAddrInfo* other) {
  if (other != this) {
    std::swap(email_address_, other->email_address_);
    std::swap(email_is_validated_, other->email_is_validated_);
    std::swap(email_validation_changed_, other->email_validation_changed_);
    std::swap(credential_change_requires_code_, other->credential_change_requires_code_);
    std::swap(password_or_secretqa_change_requires_code_, other->password_or_secretqa_change_requires_code_);
    std::swap(remind_user_about_email_, other->remind_user_about_email_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientEmailAddrInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientEmailAddrInfo_descriptor_;
  metadata.reflection = CMsgClientEmailAddrInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgCREItemVoteSummary_PublishedFileId::kPublishedFileIdFieldNumber;
#endif  // !_MSC_VER

CMsgCREItemVoteSummary_PublishedFileId::CMsgCREItemVoteSummary_PublishedFileId()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgCREItemVoteSummary_PublishedFileId::InitAsDefaultInstance() {
}

CMsgCREItemVoteSummary_PublishedFileId::CMsgCREItemVoteSummary_PublishedFileId(const CMsgCREItemVoteSummary_PublishedFileId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgCREItemVoteSummary_PublishedFileId::SharedCtor() {
  _cached_size_ = 0;
  published_file_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCREItemVoteSummary_PublishedFileId::~CMsgCREItemVoteSummary_PublishedFileId() {
  SharedDtor();
}

void CMsgCREItemVoteSummary_PublishedFileId::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgCREItemVoteSummary_PublishedFileId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgCREItemVoteSummary_PublishedFileId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgCREItemVoteSummary_PublishedFileId_descriptor_;
}

const CMsgCREItemVoteSummary_PublishedFileId& CMsgCREItemVoteSummary_PublishedFileId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgCREItemVoteSummary_PublishedFileId* CMsgCREItemVoteSummary_PublishedFileId::default_instance_ = NULL;

CMsgCREItemVoteSummary_PublishedFileId* CMsgCREItemVoteSummary_PublishedFileId::New() const {
  return new CMsgCREItemVoteSummary_PublishedFileId;
}

void CMsgCREItemVoteSummary_PublishedFileId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    published_file_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgCREItemVoteSummary_PublishedFileId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 published_file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &published_file_id_)));
          set_has_published_file_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgCREItemVoteSummary_PublishedFileId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 published_file_id = 1;
  if (has_published_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->published_file_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgCREItemVoteSummary_PublishedFileId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 published_file_id = 1;
  if (has_published_file_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->published_file_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgCREItemVoteSummary_PublishedFileId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 published_file_id = 1;
    if (has_published_file_id()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCREItemVoteSummary_PublishedFileId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgCREItemVoteSummary_PublishedFileId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgCREItemVoteSummary_PublishedFileId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgCREItemVoteSummary_PublishedFileId::MergeFrom(const CMsgCREItemVoteSummary_PublishedFileId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_published_file_id()) {
      set_published_file_id(from.published_file_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgCREItemVoteSummary_PublishedFileId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCREItemVoteSummary_PublishedFileId::CopyFrom(const CMsgCREItemVoteSummary_PublishedFileId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCREItemVoteSummary_PublishedFileId::IsInitialized() const {

  return true;
}

void CMsgCREItemVoteSummary_PublishedFileId::Swap(CMsgCREItemVoteSummary_PublishedFileId* other) {
  if (other != this) {
    std::swap(published_file_id_, other->published_file_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgCREItemVoteSummary_PublishedFileId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgCREItemVoteSummary_PublishedFileId_descriptor_;
  metadata.reflection = CMsgCREItemVoteSummary_PublishedFileId_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgCREItemVoteSummary::kPublishedFileIdsFieldNumber;
#endif  // !_MSC_VER

CMsgCREItemVoteSummary::CMsgCREItemVoteSummary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgCREItemVoteSummary::InitAsDefaultInstance() {
}

CMsgCREItemVoteSummary::CMsgCREItemVoteSummary(const CMsgCREItemVoteSummary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgCREItemVoteSummary::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCREItemVoteSummary::~CMsgCREItemVoteSummary() {
  SharedDtor();
}

void CMsgCREItemVoteSummary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgCREItemVoteSummary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgCREItemVoteSummary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgCREItemVoteSummary_descriptor_;
}

const CMsgCREItemVoteSummary& CMsgCREItemVoteSummary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgCREItemVoteSummary* CMsgCREItemVoteSummary::default_instance_ = NULL;

CMsgCREItemVoteSummary* CMsgCREItemVoteSummary::New() const {
  return new CMsgCREItemVoteSummary;
}

void CMsgCREItemVoteSummary::Clear() {
  published_file_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgCREItemVoteSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgCREItemVoteSummary.PublishedFileId published_file_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_published_file_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_published_file_ids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_published_file_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgCREItemVoteSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgCREItemVoteSummary.PublishedFileId published_file_ids = 1;
  for (int i = 0; i < this->published_file_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->published_file_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgCREItemVoteSummary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgCREItemVoteSummary.PublishedFileId published_file_ids = 1;
  for (int i = 0; i < this->published_file_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->published_file_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgCREItemVoteSummary::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgCREItemVoteSummary.PublishedFileId published_file_ids = 1;
  total_size += 1 * this->published_file_ids_size();
  for (int i = 0; i < this->published_file_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->published_file_ids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCREItemVoteSummary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgCREItemVoteSummary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgCREItemVoteSummary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgCREItemVoteSummary::MergeFrom(const CMsgCREItemVoteSummary& from) {
  GOOGLE_CHECK_NE(&from, this);
  published_file_ids_.MergeFrom(from.published_file_ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgCREItemVoteSummary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCREItemVoteSummary::CopyFrom(const CMsgCREItemVoteSummary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCREItemVoteSummary::IsInitialized() const {

  return true;
}

void CMsgCREItemVoteSummary::Swap(CMsgCREItemVoteSummary* other) {
  if (other != this) {
    published_file_ids_.Swap(&other->published_file_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgCREItemVoteSummary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgCREItemVoteSummary_descriptor_;
  metadata.reflection = CMsgCREItemVoteSummary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgCREItemVoteSummaryResponse_ItemVoteSummary::kPublishedFileIdFieldNumber;
const int CMsgCREItemVoteSummaryResponse_ItemVoteSummary::kVotesForFieldNumber;
const int CMsgCREItemVoteSummaryResponse_ItemVoteSummary::kVotesAgainstFieldNumber;
const int CMsgCREItemVoteSummaryResponse_ItemVoteSummary::kReportsFieldNumber;
const int CMsgCREItemVoteSummaryResponse_ItemVoteSummary::kScoreFieldNumber;
#endif  // !_MSC_VER

CMsgCREItemVoteSummaryResponse_ItemVoteSummary::CMsgCREItemVoteSummaryResponse_ItemVoteSummary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgCREItemVoteSummaryResponse_ItemVoteSummary::InitAsDefaultInstance() {
}

CMsgCREItemVoteSummaryResponse_ItemVoteSummary::CMsgCREItemVoteSummaryResponse_ItemVoteSummary(const CMsgCREItemVoteSummaryResponse_ItemVoteSummary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgCREItemVoteSummaryResponse_ItemVoteSummary::SharedCtor() {
  _cached_size_ = 0;
  published_file_id_ = GOOGLE_ULONGLONG(0);
  votes_for_ = 0;
  votes_against_ = 0;
  reports_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCREItemVoteSummaryResponse_ItemVoteSummary::~CMsgCREItemVoteSummaryResponse_ItemVoteSummary() {
  SharedDtor();
}

void CMsgCREItemVoteSummaryResponse_ItemVoteSummary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgCREItemVoteSummaryResponse_ItemVoteSummary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgCREItemVoteSummaryResponse_ItemVoteSummary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgCREItemVoteSummaryResponse_ItemVoteSummary_descriptor_;
}

const CMsgCREItemVoteSummaryResponse_ItemVoteSummary& CMsgCREItemVoteSummaryResponse_ItemVoteSummary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgCREItemVoteSummaryResponse_ItemVoteSummary* CMsgCREItemVoteSummaryResponse_ItemVoteSummary::default_instance_ = NULL;

CMsgCREItemVoteSummaryResponse_ItemVoteSummary* CMsgCREItemVoteSummaryResponse_ItemVoteSummary::New() const {
  return new CMsgCREItemVoteSummaryResponse_ItemVoteSummary;
}

void CMsgCREItemVoteSummaryResponse_ItemVoteSummary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    published_file_id_ = GOOGLE_ULONGLONG(0);
    votes_for_ = 0;
    votes_against_ = 0;
    reports_ = 0;
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgCREItemVoteSummaryResponse_ItemVoteSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 published_file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &published_file_id_)));
          set_has_published_file_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_votes_for;
        break;
      }

      // optional int32 votes_for = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_votes_for:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &votes_for_)));
          set_has_votes_for();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_votes_against;
        break;
      }

      // optional int32 votes_against = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_votes_against:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &votes_against_)));
          set_has_votes_against();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reports;
        break;
      }

      // optional int32 reports = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reports:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reports_)));
          set_has_reports();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_score;
        break;
      }

      // optional float score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgCREItemVoteSummaryResponse_ItemVoteSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 published_file_id = 1;
  if (has_published_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->published_file_id(), output);
  }

  // optional int32 votes_for = 2;
  if (has_votes_for()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->votes_for(), output);
  }

  // optional int32 votes_against = 3;
  if (has_votes_against()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->votes_against(), output);
  }

  // optional int32 reports = 4;
  if (has_reports()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reports(), output);
  }

  // optional float score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgCREItemVoteSummaryResponse_ItemVoteSummary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 published_file_id = 1;
  if (has_published_file_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->published_file_id(), target);
  }

  // optional int32 votes_for = 2;
  if (has_votes_for()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->votes_for(), target);
  }

  // optional int32 votes_against = 3;
  if (has_votes_against()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->votes_against(), target);
  }

  // optional int32 reports = 4;
  if (has_reports()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reports(), target);
  }

  // optional float score = 5;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgCREItemVoteSummaryResponse_ItemVoteSummary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 published_file_id = 1;
    if (has_published_file_id()) {
      total_size += 1 + 8;
    }

    // optional int32 votes_for = 2;
    if (has_votes_for()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->votes_for());
    }

    // optional int32 votes_against = 3;
    if (has_votes_against()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->votes_against());
    }

    // optional int32 reports = 4;
    if (has_reports()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reports());
    }

    // optional float score = 5;
    if (has_score()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCREItemVoteSummaryResponse_ItemVoteSummary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgCREItemVoteSummaryResponse_ItemVoteSummary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgCREItemVoteSummaryResponse_ItemVoteSummary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgCREItemVoteSummaryResponse_ItemVoteSummary::MergeFrom(const CMsgCREItemVoteSummaryResponse_ItemVoteSummary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_published_file_id()) {
      set_published_file_id(from.published_file_id());
    }
    if (from.has_votes_for()) {
      set_votes_for(from.votes_for());
    }
    if (from.has_votes_against()) {
      set_votes_against(from.votes_against());
    }
    if (from.has_reports()) {
      set_reports(from.reports());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgCREItemVoteSummaryResponse_ItemVoteSummary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCREItemVoteSummaryResponse_ItemVoteSummary::CopyFrom(const CMsgCREItemVoteSummaryResponse_ItemVoteSummary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCREItemVoteSummaryResponse_ItemVoteSummary::IsInitialized() const {

  return true;
}

void CMsgCREItemVoteSummaryResponse_ItemVoteSummary::Swap(CMsgCREItemVoteSummaryResponse_ItemVoteSummary* other) {
  if (other != this) {
    std::swap(published_file_id_, other->published_file_id_);
    std::swap(votes_for_, other->votes_for_);
    std::swap(votes_against_, other->votes_against_);
    std::swap(reports_, other->reports_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgCREItemVoteSummaryResponse_ItemVoteSummary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgCREItemVoteSummaryResponse_ItemVoteSummary_descriptor_;
  metadata.reflection = CMsgCREItemVoteSummaryResponse_ItemVoteSummary_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgCREItemVoteSummaryResponse::kEresultFieldNumber;
const int CMsgCREItemVoteSummaryResponse::kItemVoteSummariesFieldNumber;
#endif  // !_MSC_VER

CMsgCREItemVoteSummaryResponse::CMsgCREItemVoteSummaryResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgCREItemVoteSummaryResponse::InitAsDefaultInstance() {
}

CMsgCREItemVoteSummaryResponse::CMsgCREItemVoteSummaryResponse(const CMsgCREItemVoteSummaryResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgCREItemVoteSummaryResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCREItemVoteSummaryResponse::~CMsgCREItemVoteSummaryResponse() {
  SharedDtor();
}

void CMsgCREItemVoteSummaryResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgCREItemVoteSummaryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgCREItemVoteSummaryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgCREItemVoteSummaryResponse_descriptor_;
}

const CMsgCREItemVoteSummaryResponse& CMsgCREItemVoteSummaryResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgCREItemVoteSummaryResponse* CMsgCREItemVoteSummaryResponse::default_instance_ = NULL;

CMsgCREItemVoteSummaryResponse* CMsgCREItemVoteSummaryResponse::New() const {
  return new CMsgCREItemVoteSummaryResponse;
}

void CMsgCREItemVoteSummaryResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
  }
  item_vote_summaries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgCREItemVoteSummaryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_vote_summaries;
        break;
      }

      // repeated .CMsgCREItemVoteSummaryResponse.ItemVoteSummary item_vote_summaries = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_vote_summaries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_vote_summaries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_vote_summaries;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgCREItemVoteSummaryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // repeated .CMsgCREItemVoteSummaryResponse.ItemVoteSummary item_vote_summaries = 2;
  for (int i = 0; i < this->item_vote_summaries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_vote_summaries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgCREItemVoteSummaryResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // repeated .CMsgCREItemVoteSummaryResponse.ItemVoteSummary item_vote_summaries = 2;
  for (int i = 0; i < this->item_vote_summaries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_vote_summaries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgCREItemVoteSummaryResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  // repeated .CMsgCREItemVoteSummaryResponse.ItemVoteSummary item_vote_summaries = 2;
  total_size += 1 * this->item_vote_summaries_size();
  for (int i = 0; i < this->item_vote_summaries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_vote_summaries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCREItemVoteSummaryResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgCREItemVoteSummaryResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgCREItemVoteSummaryResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgCREItemVoteSummaryResponse::MergeFrom(const CMsgCREItemVoteSummaryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_vote_summaries_.MergeFrom(from.item_vote_summaries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgCREItemVoteSummaryResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCREItemVoteSummaryResponse::CopyFrom(const CMsgCREItemVoteSummaryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCREItemVoteSummaryResponse::IsInitialized() const {

  return true;
}

void CMsgCREItemVoteSummaryResponse::Swap(CMsgCREItemVoteSummaryResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    item_vote_summaries_.Swap(&other->item_vote_summaries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgCREItemVoteSummaryResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgCREItemVoteSummaryResponse_descriptor_;
  metadata.reflection = CMsgCREItemVoteSummaryResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgCREUpdateUserPublishedItemVote::kPublishedFileIdFieldNumber;
const int CMsgCREUpdateUserPublishedItemVote::kVoteUpFieldNumber;
#endif  // !_MSC_VER

CMsgCREUpdateUserPublishedItemVote::CMsgCREUpdateUserPublishedItemVote()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgCREUpdateUserPublishedItemVote::InitAsDefaultInstance() {
}

CMsgCREUpdateUserPublishedItemVote::CMsgCREUpdateUserPublishedItemVote(const CMsgCREUpdateUserPublishedItemVote& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgCREUpdateUserPublishedItemVote::SharedCtor() {
  _cached_size_ = 0;
  published_file_id_ = GOOGLE_ULONGLONG(0);
  vote_up_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCREUpdateUserPublishedItemVote::~CMsgCREUpdateUserPublishedItemVote() {
  SharedDtor();
}

void CMsgCREUpdateUserPublishedItemVote::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgCREUpdateUserPublishedItemVote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgCREUpdateUserPublishedItemVote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgCREUpdateUserPublishedItemVote_descriptor_;
}

const CMsgCREUpdateUserPublishedItemVote& CMsgCREUpdateUserPublishedItemVote::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgCREUpdateUserPublishedItemVote* CMsgCREUpdateUserPublishedItemVote::default_instance_ = NULL;

CMsgCREUpdateUserPublishedItemVote* CMsgCREUpdateUserPublishedItemVote::New() const {
  return new CMsgCREUpdateUserPublishedItemVote;
}

void CMsgCREUpdateUserPublishedItemVote::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    published_file_id_ = GOOGLE_ULONGLONG(0);
    vote_up_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgCREUpdateUserPublishedItemVote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 published_file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &published_file_id_)));
          set_has_published_file_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vote_up;
        break;
      }

      // optional bool vote_up = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vote_up:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vote_up_)));
          set_has_vote_up();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgCREUpdateUserPublishedItemVote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 published_file_id = 1;
  if (has_published_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->published_file_id(), output);
  }

  // optional bool vote_up = 2;
  if (has_vote_up()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->vote_up(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgCREUpdateUserPublishedItemVote::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 published_file_id = 1;
  if (has_published_file_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->published_file_id(), target);
  }

  // optional bool vote_up = 2;
  if (has_vote_up()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->vote_up(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgCREUpdateUserPublishedItemVote::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 published_file_id = 1;
    if (has_published_file_id()) {
      total_size += 1 + 8;
    }

    // optional bool vote_up = 2;
    if (has_vote_up()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCREUpdateUserPublishedItemVote::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgCREUpdateUserPublishedItemVote* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgCREUpdateUserPublishedItemVote*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgCREUpdateUserPublishedItemVote::MergeFrom(const CMsgCREUpdateUserPublishedItemVote& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_published_file_id()) {
      set_published_file_id(from.published_file_id());
    }
    if (from.has_vote_up()) {
      set_vote_up(from.vote_up());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgCREUpdateUserPublishedItemVote::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCREUpdateUserPublishedItemVote::CopyFrom(const CMsgCREUpdateUserPublishedItemVote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCREUpdateUserPublishedItemVote::IsInitialized() const {

  return true;
}

void CMsgCREUpdateUserPublishedItemVote::Swap(CMsgCREUpdateUserPublishedItemVote* other) {
  if (other != this) {
    std::swap(published_file_id_, other->published_file_id_);
    std::swap(vote_up_, other->vote_up_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgCREUpdateUserPublishedItemVote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgCREUpdateUserPublishedItemVote_descriptor_;
  metadata.reflection = CMsgCREUpdateUserPublishedItemVote_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgCREUpdateUserPublishedItemVoteResponse::kEresultFieldNumber;
#endif  // !_MSC_VER

CMsgCREUpdateUserPublishedItemVoteResponse::CMsgCREUpdateUserPublishedItemVoteResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgCREUpdateUserPublishedItemVoteResponse::InitAsDefaultInstance() {
}

CMsgCREUpdateUserPublishedItemVoteResponse::CMsgCREUpdateUserPublishedItemVoteResponse(const CMsgCREUpdateUserPublishedItemVoteResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgCREUpdateUserPublishedItemVoteResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCREUpdateUserPublishedItemVoteResponse::~CMsgCREUpdateUserPublishedItemVoteResponse() {
  SharedDtor();
}

void CMsgCREUpdateUserPublishedItemVoteResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgCREUpdateUserPublishedItemVoteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgCREUpdateUserPublishedItemVoteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgCREUpdateUserPublishedItemVoteResponse_descriptor_;
}

const CMsgCREUpdateUserPublishedItemVoteResponse& CMsgCREUpdateUserPublishedItemVoteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgCREUpdateUserPublishedItemVoteResponse* CMsgCREUpdateUserPublishedItemVoteResponse::default_instance_ = NULL;

CMsgCREUpdateUserPublishedItemVoteResponse* CMsgCREUpdateUserPublishedItemVoteResponse::New() const {
  return new CMsgCREUpdateUserPublishedItemVoteResponse;
}

void CMsgCREUpdateUserPublishedItemVoteResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgCREUpdateUserPublishedItemVoteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgCREUpdateUserPublishedItemVoteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgCREUpdateUserPublishedItemVoteResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgCREUpdateUserPublishedItemVoteResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCREUpdateUserPublishedItemVoteResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgCREUpdateUserPublishedItemVoteResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgCREUpdateUserPublishedItemVoteResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgCREUpdateUserPublishedItemVoteResponse::MergeFrom(const CMsgCREUpdateUserPublishedItemVoteResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgCREUpdateUserPublishedItemVoteResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCREUpdateUserPublishedItemVoteResponse::CopyFrom(const CMsgCREUpdateUserPublishedItemVoteResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCREUpdateUserPublishedItemVoteResponse::IsInitialized() const {

  return true;
}

void CMsgCREUpdateUserPublishedItemVoteResponse::Swap(CMsgCREUpdateUserPublishedItemVoteResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgCREUpdateUserPublishedItemVoteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgCREUpdateUserPublishedItemVoteResponse_descriptor_;
  metadata.reflection = CMsgCREUpdateUserPublishedItemVoteResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::kPublishedFileIdFieldNumber;
#endif  // !_MSC_VER

CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::InitAsDefaultInstance() {
}

CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId(const CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::SharedCtor() {
  _cached_size_ = 0;
  published_file_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::~CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId() {
  SharedDtor();
}

void CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId_descriptor_;
}

const CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId& CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId* CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::default_instance_ = NULL;

CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId* CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::New() const {
  return new CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId;
}

void CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    published_file_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 published_file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &published_file_id_)));
          set_has_published_file_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 published_file_id = 1;
  if (has_published_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->published_file_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 published_file_id = 1;
  if (has_published_file_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->published_file_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 published_file_id = 1;
    if (has_published_file_id()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::MergeFrom(const CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_published_file_id()) {
      set_published_file_id(from.published_file_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::CopyFrom(const CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::IsInitialized() const {

  return true;
}

void CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::Swap(CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId* other) {
  if (other != this) {
    std::swap(published_file_id_, other->published_file_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId_descriptor_;
  metadata.reflection = CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgCREGetUserPublishedItemVoteDetails::kPublishedFileIdsFieldNumber;
#endif  // !_MSC_VER

CMsgCREGetUserPublishedItemVoteDetails::CMsgCREGetUserPublishedItemVoteDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgCREGetUserPublishedItemVoteDetails::InitAsDefaultInstance() {
}

CMsgCREGetUserPublishedItemVoteDetails::CMsgCREGetUserPublishedItemVoteDetails(const CMsgCREGetUserPublishedItemVoteDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgCREGetUserPublishedItemVoteDetails::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCREGetUserPublishedItemVoteDetails::~CMsgCREGetUserPublishedItemVoteDetails() {
  SharedDtor();
}

void CMsgCREGetUserPublishedItemVoteDetails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgCREGetUserPublishedItemVoteDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgCREGetUserPublishedItemVoteDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgCREGetUserPublishedItemVoteDetails_descriptor_;
}

const CMsgCREGetUserPublishedItemVoteDetails& CMsgCREGetUserPublishedItemVoteDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgCREGetUserPublishedItemVoteDetails* CMsgCREGetUserPublishedItemVoteDetails::default_instance_ = NULL;

CMsgCREGetUserPublishedItemVoteDetails* CMsgCREGetUserPublishedItemVoteDetails::New() const {
  return new CMsgCREGetUserPublishedItemVoteDetails;
}

void CMsgCREGetUserPublishedItemVoteDetails::Clear() {
  published_file_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgCREGetUserPublishedItemVoteDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgCREGetUserPublishedItemVoteDetails.PublishedFileId published_file_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_published_file_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_published_file_ids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_published_file_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgCREGetUserPublishedItemVoteDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgCREGetUserPublishedItemVoteDetails.PublishedFileId published_file_ids = 1;
  for (int i = 0; i < this->published_file_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->published_file_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgCREGetUserPublishedItemVoteDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgCREGetUserPublishedItemVoteDetails.PublishedFileId published_file_ids = 1;
  for (int i = 0; i < this->published_file_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->published_file_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgCREGetUserPublishedItemVoteDetails::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgCREGetUserPublishedItemVoteDetails.PublishedFileId published_file_ids = 1;
  total_size += 1 * this->published_file_ids_size();
  for (int i = 0; i < this->published_file_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->published_file_ids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCREGetUserPublishedItemVoteDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgCREGetUserPublishedItemVoteDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgCREGetUserPublishedItemVoteDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgCREGetUserPublishedItemVoteDetails::MergeFrom(const CMsgCREGetUserPublishedItemVoteDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  published_file_ids_.MergeFrom(from.published_file_ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgCREGetUserPublishedItemVoteDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCREGetUserPublishedItemVoteDetails::CopyFrom(const CMsgCREGetUserPublishedItemVoteDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCREGetUserPublishedItemVoteDetails::IsInitialized() const {

  return true;
}

void CMsgCREGetUserPublishedItemVoteDetails::Swap(CMsgCREGetUserPublishedItemVoteDetails* other) {
  if (other != this) {
    published_file_ids_.Swap(&other->published_file_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgCREGetUserPublishedItemVoteDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgCREGetUserPublishedItemVoteDetails_descriptor_;
  metadata.reflection = CMsgCREGetUserPublishedItemVoteDetails_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::kPublishedFileIdFieldNumber;
const int CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::kVoteFieldNumber;
#endif  // !_MSC_VER

CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::InitAsDefaultInstance() {
}

CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail(const CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::SharedCtor() {
  _cached_size_ = 0;
  published_file_id_ = GOOGLE_ULONGLONG(0);
  vote_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::~CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail() {
  SharedDtor();
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail_descriptor_;
}

const CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail& CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail* CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::default_instance_ = NULL;

CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail* CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::New() const {
  return new CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail;
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    published_file_id_ = GOOGLE_ULONGLONG(0);
    vote_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 published_file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &published_file_id_)));
          set_has_published_file_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vote;
        break;
      }

      // optional int32 vote = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vote:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vote_)));
          set_has_vote();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 published_file_id = 1;
  if (has_published_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->published_file_id(), output);
  }

  // optional int32 vote = 2 [default = 0];
  if (has_vote()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vote(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 published_file_id = 1;
  if (has_published_file_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->published_file_id(), target);
  }

  // optional int32 vote = 2 [default = 0];
  if (has_vote()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vote(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 published_file_id = 1;
    if (has_published_file_id()) {
      total_size += 1 + 8;
    }

    // optional int32 vote = 2 [default = 0];
    if (has_vote()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vote());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::MergeFrom(const CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_published_file_id()) {
      set_published_file_id(from.published_file_id());
    }
    if (from.has_vote()) {
      set_vote(from.vote());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::CopyFrom(const CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::IsInitialized() const {

  return true;
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::Swap(CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail* other) {
  if (other != this) {
    std::swap(published_file_id_, other->published_file_id_);
    std::swap(vote_, other->vote_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail_descriptor_;
  metadata.reflection = CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgCREGetUserPublishedItemVoteDetailsResponse::kEresultFieldNumber;
const int CMsgCREGetUserPublishedItemVoteDetailsResponse::kUserItemVoteDetailsFieldNumber;
#endif  // !_MSC_VER

CMsgCREGetUserPublishedItemVoteDetailsResponse::CMsgCREGetUserPublishedItemVoteDetailsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse::InitAsDefaultInstance() {
}

CMsgCREGetUserPublishedItemVoteDetailsResponse::CMsgCREGetUserPublishedItemVoteDetailsResponse(const CMsgCREGetUserPublishedItemVoteDetailsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCREGetUserPublishedItemVoteDetailsResponse::~CMsgCREGetUserPublishedItemVoteDetailsResponse() {
  SharedDtor();
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgCREGetUserPublishedItemVoteDetailsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgCREGetUserPublishedItemVoteDetailsResponse_descriptor_;
}

const CMsgCREGetUserPublishedItemVoteDetailsResponse& CMsgCREGetUserPublishedItemVoteDetailsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgCREGetUserPublishedItemVoteDetailsResponse* CMsgCREGetUserPublishedItemVoteDetailsResponse::default_instance_ = NULL;

CMsgCREGetUserPublishedItemVoteDetailsResponse* CMsgCREGetUserPublishedItemVoteDetailsResponse::New() const {
  return new CMsgCREGetUserPublishedItemVoteDetailsResponse;
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
  }
  user_item_vote_details_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgCREGetUserPublishedItemVoteDetailsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_item_vote_details;
        break;
      }

      // repeated .CMsgCREGetUserPublishedItemVoteDetailsResponse.UserItemVoteDetail user_item_vote_details = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_item_vote_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_item_vote_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_item_vote_details;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // repeated .CMsgCREGetUserPublishedItemVoteDetailsResponse.UserItemVoteDetail user_item_vote_details = 2;
  for (int i = 0; i < this->user_item_vote_details_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_item_vote_details(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgCREGetUserPublishedItemVoteDetailsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // repeated .CMsgCREGetUserPublishedItemVoteDetailsResponse.UserItemVoteDetail user_item_vote_details = 2;
  for (int i = 0; i < this->user_item_vote_details_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_item_vote_details(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgCREGetUserPublishedItemVoteDetailsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  // repeated .CMsgCREGetUserPublishedItemVoteDetailsResponse.UserItemVoteDetail user_item_vote_details = 2;
  total_size += 1 * this->user_item_vote_details_size();
  for (int i = 0; i < this->user_item_vote_details_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_item_vote_details(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgCREGetUserPublishedItemVoteDetailsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgCREGetUserPublishedItemVoteDetailsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse::MergeFrom(const CMsgCREGetUserPublishedItemVoteDetailsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_item_vote_details_.MergeFrom(from.user_item_vote_details_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse::CopyFrom(const CMsgCREGetUserPublishedItemVoteDetailsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCREGetUserPublishedItemVoteDetailsResponse::IsInitialized() const {

  return true;
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse::Swap(CMsgCREGetUserPublishedItemVoteDetailsResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    user_item_vote_details_.Swap(&other->user_item_vote_details_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgCREGetUserPublishedItemVoteDetailsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgCREGetUserPublishedItemVoteDetailsResponse_descriptor_;
  metadata.reflection = CMsgCREGetUserPublishedItemVoteDetailsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgFSGetFollowerCount::kSteamIdFieldNumber;
#endif  // !_MSC_VER

CMsgFSGetFollowerCount::CMsgFSGetFollowerCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgFSGetFollowerCount::InitAsDefaultInstance() {
}

CMsgFSGetFollowerCount::CMsgFSGetFollowerCount(const CMsgFSGetFollowerCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgFSGetFollowerCount::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgFSGetFollowerCount::~CMsgFSGetFollowerCount() {
  SharedDtor();
}

void CMsgFSGetFollowerCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgFSGetFollowerCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgFSGetFollowerCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgFSGetFollowerCount_descriptor_;
}

const CMsgFSGetFollowerCount& CMsgFSGetFollowerCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgFSGetFollowerCount* CMsgFSGetFollowerCount::default_instance_ = NULL;

CMsgFSGetFollowerCount* CMsgFSGetFollowerCount::New() const {
  return new CMsgFSGetFollowerCount;
}

void CMsgFSGetFollowerCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgFSGetFollowerCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgFSGetFollowerCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgFSGetFollowerCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgFSGetFollowerCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgFSGetFollowerCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgFSGetFollowerCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgFSGetFollowerCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgFSGetFollowerCount::MergeFrom(const CMsgFSGetFollowerCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgFSGetFollowerCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFSGetFollowerCount::CopyFrom(const CMsgFSGetFollowerCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFSGetFollowerCount::IsInitialized() const {

  return true;
}

void CMsgFSGetFollowerCount::Swap(CMsgFSGetFollowerCount* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgFSGetFollowerCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgFSGetFollowerCount_descriptor_;
  metadata.reflection = CMsgFSGetFollowerCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgFSGetFollowerCountResponse::kEresultFieldNumber;
const int CMsgFSGetFollowerCountResponse::kCountFieldNumber;
#endif  // !_MSC_VER

CMsgFSGetFollowerCountResponse::CMsgFSGetFollowerCountResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgFSGetFollowerCountResponse::InitAsDefaultInstance() {
}

CMsgFSGetFollowerCountResponse::CMsgFSGetFollowerCountResponse(const CMsgFSGetFollowerCountResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgFSGetFollowerCountResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgFSGetFollowerCountResponse::~CMsgFSGetFollowerCountResponse() {
  SharedDtor();
}

void CMsgFSGetFollowerCountResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgFSGetFollowerCountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgFSGetFollowerCountResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgFSGetFollowerCountResponse_descriptor_;
}

const CMsgFSGetFollowerCountResponse& CMsgFSGetFollowerCountResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgFSGetFollowerCountResponse* CMsgFSGetFollowerCountResponse::default_instance_ = NULL;

CMsgFSGetFollowerCountResponse* CMsgFSGetFollowerCountResponse::New() const {
  return new CMsgFSGetFollowerCountResponse;
}

void CMsgFSGetFollowerCountResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgFSGetFollowerCountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgFSGetFollowerCountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional int32 count = 2 [default = 0];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgFSGetFollowerCountResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional int32 count = 2 [default = 0];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgFSGetFollowerCountResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional int32 count = 2 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgFSGetFollowerCountResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgFSGetFollowerCountResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgFSGetFollowerCountResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgFSGetFollowerCountResponse::MergeFrom(const CMsgFSGetFollowerCountResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgFSGetFollowerCountResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFSGetFollowerCountResponse::CopyFrom(const CMsgFSGetFollowerCountResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFSGetFollowerCountResponse::IsInitialized() const {

  return true;
}

void CMsgFSGetFollowerCountResponse::Swap(CMsgFSGetFollowerCountResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgFSGetFollowerCountResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgFSGetFollowerCountResponse_descriptor_;
  metadata.reflection = CMsgFSGetFollowerCountResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgFSGetIsFollowing::kSteamIdFieldNumber;
#endif  // !_MSC_VER

CMsgFSGetIsFollowing::CMsgFSGetIsFollowing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgFSGetIsFollowing::InitAsDefaultInstance() {
}

CMsgFSGetIsFollowing::CMsgFSGetIsFollowing(const CMsgFSGetIsFollowing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgFSGetIsFollowing::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgFSGetIsFollowing::~CMsgFSGetIsFollowing() {
  SharedDtor();
}

void CMsgFSGetIsFollowing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgFSGetIsFollowing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgFSGetIsFollowing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgFSGetIsFollowing_descriptor_;
}

const CMsgFSGetIsFollowing& CMsgFSGetIsFollowing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgFSGetIsFollowing* CMsgFSGetIsFollowing::default_instance_ = NULL;

CMsgFSGetIsFollowing* CMsgFSGetIsFollowing::New() const {
  return new CMsgFSGetIsFollowing;
}

void CMsgFSGetIsFollowing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgFSGetIsFollowing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgFSGetIsFollowing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgFSGetIsFollowing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgFSGetIsFollowing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgFSGetIsFollowing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgFSGetIsFollowing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgFSGetIsFollowing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgFSGetIsFollowing::MergeFrom(const CMsgFSGetIsFollowing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgFSGetIsFollowing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFSGetIsFollowing::CopyFrom(const CMsgFSGetIsFollowing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFSGetIsFollowing::IsInitialized() const {

  return true;
}

void CMsgFSGetIsFollowing::Swap(CMsgFSGetIsFollowing* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgFSGetIsFollowing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgFSGetIsFollowing_descriptor_;
  metadata.reflection = CMsgFSGetIsFollowing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgFSGetIsFollowingResponse::kEresultFieldNumber;
const int CMsgFSGetIsFollowingResponse::kIsFollowingFieldNumber;
#endif  // !_MSC_VER

CMsgFSGetIsFollowingResponse::CMsgFSGetIsFollowingResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgFSGetIsFollowingResponse::InitAsDefaultInstance() {
}

CMsgFSGetIsFollowingResponse::CMsgFSGetIsFollowingResponse(const CMsgFSGetIsFollowingResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgFSGetIsFollowingResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  is_following_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgFSGetIsFollowingResponse::~CMsgFSGetIsFollowingResponse() {
  SharedDtor();
}

void CMsgFSGetIsFollowingResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgFSGetIsFollowingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgFSGetIsFollowingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgFSGetIsFollowingResponse_descriptor_;
}

const CMsgFSGetIsFollowingResponse& CMsgFSGetIsFollowingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgFSGetIsFollowingResponse* CMsgFSGetIsFollowingResponse::default_instance_ = NULL;

CMsgFSGetIsFollowingResponse* CMsgFSGetIsFollowingResponse::New() const {
  return new CMsgFSGetIsFollowingResponse;
}

void CMsgFSGetIsFollowingResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    is_following_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgFSGetIsFollowingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_following;
        break;
      }

      // optional bool is_following = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_following:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_following_)));
          set_has_is_following();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgFSGetIsFollowingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional bool is_following = 2 [default = false];
  if (has_is_following()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_following(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgFSGetIsFollowingResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional bool is_following = 2 [default = false];
  if (has_is_following()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_following(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgFSGetIsFollowingResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional bool is_following = 2 [default = false];
    if (has_is_following()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgFSGetIsFollowingResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgFSGetIsFollowingResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgFSGetIsFollowingResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgFSGetIsFollowingResponse::MergeFrom(const CMsgFSGetIsFollowingResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_is_following()) {
      set_is_following(from.is_following());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgFSGetIsFollowingResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFSGetIsFollowingResponse::CopyFrom(const CMsgFSGetIsFollowingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFSGetIsFollowingResponse::IsInitialized() const {

  return true;
}

void CMsgFSGetIsFollowingResponse::Swap(CMsgFSGetIsFollowingResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(is_following_, other->is_following_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgFSGetIsFollowingResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgFSGetIsFollowingResponse_descriptor_;
  metadata.reflection = CMsgFSGetIsFollowingResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgFSEnumerateFollowingList::kStartIndexFieldNumber;
#endif  // !_MSC_VER

CMsgFSEnumerateFollowingList::CMsgFSEnumerateFollowingList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgFSEnumerateFollowingList::InitAsDefaultInstance() {
}

CMsgFSEnumerateFollowingList::CMsgFSEnumerateFollowingList(const CMsgFSEnumerateFollowingList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgFSEnumerateFollowingList::SharedCtor() {
  _cached_size_ = 0;
  start_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgFSEnumerateFollowingList::~CMsgFSEnumerateFollowingList() {
  SharedDtor();
}

void CMsgFSEnumerateFollowingList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgFSEnumerateFollowingList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgFSEnumerateFollowingList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgFSEnumerateFollowingList_descriptor_;
}

const CMsgFSEnumerateFollowingList& CMsgFSEnumerateFollowingList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgFSEnumerateFollowingList* CMsgFSEnumerateFollowingList::default_instance_ = NULL;

CMsgFSEnumerateFollowingList* CMsgFSEnumerateFollowingList::New() const {
  return new CMsgFSEnumerateFollowingList;
}

void CMsgFSEnumerateFollowingList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    start_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgFSEnumerateFollowingList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 start_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_index_)));
          set_has_start_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgFSEnumerateFollowingList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 start_index = 1;
  if (has_start_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->start_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgFSEnumerateFollowingList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 start_index = 1;
  if (has_start_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->start_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgFSEnumerateFollowingList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 start_index = 1;
    if (has_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgFSEnumerateFollowingList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgFSEnumerateFollowingList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgFSEnumerateFollowingList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgFSEnumerateFollowingList::MergeFrom(const CMsgFSEnumerateFollowingList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_index()) {
      set_start_index(from.start_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgFSEnumerateFollowingList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFSEnumerateFollowingList::CopyFrom(const CMsgFSEnumerateFollowingList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFSEnumerateFollowingList::IsInitialized() const {

  return true;
}

void CMsgFSEnumerateFollowingList::Swap(CMsgFSEnumerateFollowingList* other) {
  if (other != this) {
    std::swap(start_index_, other->start_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgFSEnumerateFollowingList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgFSEnumerateFollowingList_descriptor_;
  metadata.reflection = CMsgFSEnumerateFollowingList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgFSEnumerateFollowingListResponse::kEresultFieldNumber;
const int CMsgFSEnumerateFollowingListResponse::kTotalResultsFieldNumber;
const int CMsgFSEnumerateFollowingListResponse::kSteamIdsFieldNumber;
#endif  // !_MSC_VER

CMsgFSEnumerateFollowingListResponse::CMsgFSEnumerateFollowingListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgFSEnumerateFollowingListResponse::InitAsDefaultInstance() {
}

CMsgFSEnumerateFollowingListResponse::CMsgFSEnumerateFollowingListResponse(const CMsgFSEnumerateFollowingListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgFSEnumerateFollowingListResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  total_results_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgFSEnumerateFollowingListResponse::~CMsgFSEnumerateFollowingListResponse() {
  SharedDtor();
}

void CMsgFSEnumerateFollowingListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgFSEnumerateFollowingListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgFSEnumerateFollowingListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgFSEnumerateFollowingListResponse_descriptor_;
}

const CMsgFSEnumerateFollowingListResponse& CMsgFSEnumerateFollowingListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgFSEnumerateFollowingListResponse* CMsgFSEnumerateFollowingListResponse::default_instance_ = NULL;

CMsgFSEnumerateFollowingListResponse* CMsgFSEnumerateFollowingListResponse::New() const {
  return new CMsgFSEnumerateFollowingListResponse;
}

void CMsgFSEnumerateFollowingListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    total_results_ = 0;
  }
  steam_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgFSEnumerateFollowingListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_results;
        break;
      }

      // optional int32 total_results = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_results:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_results_)));
          set_has_total_results();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_steam_ids;
        break;
      }

      // repeated fixed64 steam_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 25, input, this->mutable_steam_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_steam_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_steam_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgFSEnumerateFollowingListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional int32 total_results = 2;
  if (has_total_results()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_results(), output);
  }

  // repeated fixed64 steam_ids = 3;
  for (int i = 0; i < this->steam_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      3, this->steam_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgFSEnumerateFollowingListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional int32 total_results = 2;
  if (has_total_results()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_results(), target);
  }

  // repeated fixed64 steam_ids = 3;
  for (int i = 0; i < this->steam_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(3, this->steam_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgFSEnumerateFollowingListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional int32 total_results = 2;
    if (has_total_results()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_results());
    }

  }
  // repeated fixed64 steam_ids = 3;
  {
    int data_size = 0;
    data_size = 8 * this->steam_ids_size();
    total_size += 1 * this->steam_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgFSEnumerateFollowingListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgFSEnumerateFollowingListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgFSEnumerateFollowingListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgFSEnumerateFollowingListResponse::MergeFrom(const CMsgFSEnumerateFollowingListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  steam_ids_.MergeFrom(from.steam_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_total_results()) {
      set_total_results(from.total_results());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgFSEnumerateFollowingListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFSEnumerateFollowingListResponse::CopyFrom(const CMsgFSEnumerateFollowingListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFSEnumerateFollowingListResponse::IsInitialized() const {

  return true;
}

void CMsgFSEnumerateFollowingListResponse::Swap(CMsgFSEnumerateFollowingListResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(total_results_, other->total_results_);
    steam_ids_.Swap(&other->steam_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgFSEnumerateFollowingListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgFSEnumerateFollowingListResponse_descriptor_;
  metadata.reflection = CMsgFSEnumerateFollowingListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDPGetNumberOfCurrentPlayers::kAppidFieldNumber;
#endif  // !_MSC_VER

CMsgDPGetNumberOfCurrentPlayers::CMsgDPGetNumberOfCurrentPlayers()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgDPGetNumberOfCurrentPlayers::InitAsDefaultInstance() {
}

CMsgDPGetNumberOfCurrentPlayers::CMsgDPGetNumberOfCurrentPlayers(const CMsgDPGetNumberOfCurrentPlayers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDPGetNumberOfCurrentPlayers::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDPGetNumberOfCurrentPlayers::~CMsgDPGetNumberOfCurrentPlayers() {
  SharedDtor();
}

void CMsgDPGetNumberOfCurrentPlayers::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDPGetNumberOfCurrentPlayers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDPGetNumberOfCurrentPlayers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDPGetNumberOfCurrentPlayers_descriptor_;
}

const CMsgDPGetNumberOfCurrentPlayers& CMsgDPGetNumberOfCurrentPlayers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgDPGetNumberOfCurrentPlayers* CMsgDPGetNumberOfCurrentPlayers::default_instance_ = NULL;

CMsgDPGetNumberOfCurrentPlayers* CMsgDPGetNumberOfCurrentPlayers::New() const {
  return new CMsgDPGetNumberOfCurrentPlayers;
}

void CMsgDPGetNumberOfCurrentPlayers::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDPGetNumberOfCurrentPlayers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDPGetNumberOfCurrentPlayers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgDPGetNumberOfCurrentPlayers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 appid = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgDPGetNumberOfCurrentPlayers::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDPGetNumberOfCurrentPlayers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDPGetNumberOfCurrentPlayers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDPGetNumberOfCurrentPlayers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDPGetNumberOfCurrentPlayers::MergeFrom(const CMsgDPGetNumberOfCurrentPlayers& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDPGetNumberOfCurrentPlayers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDPGetNumberOfCurrentPlayers::CopyFrom(const CMsgDPGetNumberOfCurrentPlayers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDPGetNumberOfCurrentPlayers::IsInitialized() const {

  return true;
}

void CMsgDPGetNumberOfCurrentPlayers::Swap(CMsgDPGetNumberOfCurrentPlayers* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDPGetNumberOfCurrentPlayers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDPGetNumberOfCurrentPlayers_descriptor_;
  metadata.reflection = CMsgDPGetNumberOfCurrentPlayers_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDPGetNumberOfCurrentPlayersResponse::kEresultFieldNumber;
const int CMsgDPGetNumberOfCurrentPlayersResponse::kPlayerCountFieldNumber;
#endif  // !_MSC_VER

CMsgDPGetNumberOfCurrentPlayersResponse::CMsgDPGetNumberOfCurrentPlayersResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgDPGetNumberOfCurrentPlayersResponse::InitAsDefaultInstance() {
}

CMsgDPGetNumberOfCurrentPlayersResponse::CMsgDPGetNumberOfCurrentPlayersResponse(const CMsgDPGetNumberOfCurrentPlayersResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDPGetNumberOfCurrentPlayersResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  player_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDPGetNumberOfCurrentPlayersResponse::~CMsgDPGetNumberOfCurrentPlayersResponse() {
  SharedDtor();
}

void CMsgDPGetNumberOfCurrentPlayersResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgDPGetNumberOfCurrentPlayersResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDPGetNumberOfCurrentPlayersResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgDPGetNumberOfCurrentPlayersResponse_descriptor_;
}

const CMsgDPGetNumberOfCurrentPlayersResponse& CMsgDPGetNumberOfCurrentPlayersResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgDPGetNumberOfCurrentPlayersResponse* CMsgDPGetNumberOfCurrentPlayersResponse::default_instance_ = NULL;

CMsgDPGetNumberOfCurrentPlayersResponse* CMsgDPGetNumberOfCurrentPlayersResponse::New() const {
  return new CMsgDPGetNumberOfCurrentPlayersResponse;
}

void CMsgDPGetNumberOfCurrentPlayersResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    player_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgDPGetNumberOfCurrentPlayersResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_count;
        break;
      }

      // optional int32 player_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_count_)));
          set_has_player_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDPGetNumberOfCurrentPlayersResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional int32 player_count = 2;
  if (has_player_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgDPGetNumberOfCurrentPlayersResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional int32 player_count = 2;
  if (has_player_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgDPGetNumberOfCurrentPlayersResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional int32 player_count = 2;
    if (has_player_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDPGetNumberOfCurrentPlayersResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgDPGetNumberOfCurrentPlayersResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgDPGetNumberOfCurrentPlayersResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgDPGetNumberOfCurrentPlayersResponse::MergeFrom(const CMsgDPGetNumberOfCurrentPlayersResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_player_count()) {
      set_player_count(from.player_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgDPGetNumberOfCurrentPlayersResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDPGetNumberOfCurrentPlayersResponse::CopyFrom(const CMsgDPGetNumberOfCurrentPlayersResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDPGetNumberOfCurrentPlayersResponse::IsInitialized() const {

  return true;
}

void CMsgDPGetNumberOfCurrentPlayersResponse::Swap(CMsgDPGetNumberOfCurrentPlayersResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(player_count_, other->player_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgDPGetNumberOfCurrentPlayersResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgDPGetNumberOfCurrentPlayersResponse_descriptor_;
  metadata.reflection = CMsgDPGetNumberOfCurrentPlayersResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientFriendUserStatusPublished::kFriendSteamidFieldNumber;
const int CMsgClientFriendUserStatusPublished::kAppidFieldNumber;
const int CMsgClientFriendUserStatusPublished::kStatusTextFieldNumber;
#endif  // !_MSC_VER

CMsgClientFriendUserStatusPublished::CMsgClientFriendUserStatusPublished()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientFriendUserStatusPublished::InitAsDefaultInstance() {
}

CMsgClientFriendUserStatusPublished::CMsgClientFriendUserStatusPublished(const CMsgClientFriendUserStatusPublished& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientFriendUserStatusPublished::SharedCtor() {
  _cached_size_ = 0;
  friend_steamid_ = GOOGLE_ULONGLONG(0);
  appid_ = 0u;
  status_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientFriendUserStatusPublished::~CMsgClientFriendUserStatusPublished() {
  SharedDtor();
}

void CMsgClientFriendUserStatusPublished::SharedDtor() {
  if (status_text_ != &::google::protobuf::internal::kEmptyString) {
    delete status_text_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientFriendUserStatusPublished::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientFriendUserStatusPublished::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientFriendUserStatusPublished_descriptor_;
}

const CMsgClientFriendUserStatusPublished& CMsgClientFriendUserStatusPublished::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientFriendUserStatusPublished* CMsgClientFriendUserStatusPublished::default_instance_ = NULL;

CMsgClientFriendUserStatusPublished* CMsgClientFriendUserStatusPublished::New() const {
  return new CMsgClientFriendUserStatusPublished;
}

void CMsgClientFriendUserStatusPublished::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friend_steamid_ = GOOGLE_ULONGLONG(0);
    appid_ = 0u;
    if (has_status_text()) {
      if (status_text_ != &::google::protobuf::internal::kEmptyString) {
        status_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientFriendUserStatusPublished::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 friend_steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &friend_steamid_)));
          set_has_friend_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_appid;
        break;
      }

      // optional uint32 appid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_status_text;
        break;
      }

      // optional string status_text = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->status_text().data(), this->status_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientFriendUserStatusPublished::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 friend_steamid = 1;
  if (has_friend_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->friend_steamid(), output);
  }

  // optional uint32 appid = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  // optional string status_text = 3;
  if (has_status_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->status_text().data(), this->status_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->status_text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientFriendUserStatusPublished::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 friend_steamid = 1;
  if (has_friend_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->friend_steamid(), target);
  }

  // optional uint32 appid = 2;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  // optional string status_text = 3;
  if (has_status_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->status_text().data(), this->status_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->status_text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientFriendUserStatusPublished::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 friend_steamid = 1;
    if (has_friend_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional string status_text = 3;
    if (has_status_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status_text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientFriendUserStatusPublished::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientFriendUserStatusPublished* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientFriendUserStatusPublished*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientFriendUserStatusPublished::MergeFrom(const CMsgClientFriendUserStatusPublished& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friend_steamid()) {
      set_friend_steamid(from.friend_steamid());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_status_text()) {
      set_status_text(from.status_text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientFriendUserStatusPublished::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientFriendUserStatusPublished::CopyFrom(const CMsgClientFriendUserStatusPublished& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendUserStatusPublished::IsInitialized() const {

  return true;
}

void CMsgClientFriendUserStatusPublished::Swap(CMsgClientFriendUserStatusPublished* other) {
  if (other != this) {
    std::swap(friend_steamid_, other->friend_steamid_);
    std::swap(appid_, other->appid_);
    std::swap(status_text_, other->status_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientFriendUserStatusPublished::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientFriendUserStatusPublished_descriptor_;
  metadata.reflection = CMsgClientFriendUserStatusPublished_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientServiceMethodLegacy::kMethodNameFieldNumber;
const int CMsgClientServiceMethodLegacy::kSerializedMethodFieldNumber;
const int CMsgClientServiceMethodLegacy::kIsNotificationFieldNumber;
#endif  // !_MSC_VER

CMsgClientServiceMethodLegacy::CMsgClientServiceMethodLegacy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientServiceMethodLegacy::InitAsDefaultInstance() {
}

CMsgClientServiceMethodLegacy::CMsgClientServiceMethodLegacy(const CMsgClientServiceMethodLegacy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientServiceMethodLegacy::SharedCtor() {
  _cached_size_ = 0;
  method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serialized_method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_notification_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientServiceMethodLegacy::~CMsgClientServiceMethodLegacy() {
  SharedDtor();
}

void CMsgClientServiceMethodLegacy::SharedDtor() {
  if (method_name_ != &::google::protobuf::internal::kEmptyString) {
    delete method_name_;
  }
  if (serialized_method_ != &::google::protobuf::internal::kEmptyString) {
    delete serialized_method_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientServiceMethodLegacy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientServiceMethodLegacy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientServiceMethodLegacy_descriptor_;
}

const CMsgClientServiceMethodLegacy& CMsgClientServiceMethodLegacy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientServiceMethodLegacy* CMsgClientServiceMethodLegacy::default_instance_ = NULL;

CMsgClientServiceMethodLegacy* CMsgClientServiceMethodLegacy::New() const {
  return new CMsgClientServiceMethodLegacy;
}

void CMsgClientServiceMethodLegacy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_method_name()) {
      if (method_name_ != &::google::protobuf::internal::kEmptyString) {
        method_name_->clear();
      }
    }
    if (has_serialized_method()) {
      if (serialized_method_ != &::google::protobuf::internal::kEmptyString) {
        serialized_method_->clear();
      }
    }
    is_notification_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientServiceMethodLegacy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string method_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->method_name().data(), this->method_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_serialized_method;
        break;
      }

      // optional bytes serialized_method = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serialized_method:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized_method()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_notification;
        break;
      }

      // optional bool is_notification = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_notification:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_notification_)));
          set_has_is_notification();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientServiceMethodLegacy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string method_name = 1;
  if (has_method_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->method_name().data(), this->method_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->method_name(), output);
  }

  // optional bytes serialized_method = 2;
  if (has_serialized_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->serialized_method(), output);
  }

  // optional bool is_notification = 3;
  if (has_is_notification()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_notification(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientServiceMethodLegacy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string method_name = 1;
  if (has_method_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->method_name().data(), this->method_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->method_name(), target);
  }

  // optional bytes serialized_method = 2;
  if (has_serialized_method()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->serialized_method(), target);
  }

  // optional bool is_notification = 3;
  if (has_is_notification()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_notification(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientServiceMethodLegacy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string method_name = 1;
    if (has_method_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method_name());
    }

    // optional bytes serialized_method = 2;
    if (has_serialized_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialized_method());
    }

    // optional bool is_notification = 3;
    if (has_is_notification()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientServiceMethodLegacy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientServiceMethodLegacy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientServiceMethodLegacy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientServiceMethodLegacy::MergeFrom(const CMsgClientServiceMethodLegacy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_method_name()) {
      set_method_name(from.method_name());
    }
    if (from.has_serialized_method()) {
      set_serialized_method(from.serialized_method());
    }
    if (from.has_is_notification()) {
      set_is_notification(from.is_notification());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientServiceMethodLegacy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientServiceMethodLegacy::CopyFrom(const CMsgClientServiceMethodLegacy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientServiceMethodLegacy::IsInitialized() const {

  return true;
}

void CMsgClientServiceMethodLegacy::Swap(CMsgClientServiceMethodLegacy* other) {
  if (other != this) {
    std::swap(method_name_, other->method_name_);
    std::swap(serialized_method_, other->serialized_method_);
    std::swap(is_notification_, other->is_notification_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientServiceMethodLegacy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientServiceMethodLegacy_descriptor_;
  metadata.reflection = CMsgClientServiceMethodLegacy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientServiceMethodLegacyResponse::kMethodNameFieldNumber;
const int CMsgClientServiceMethodLegacyResponse::kSerializedMethodResponseFieldNumber;
#endif  // !_MSC_VER

CMsgClientServiceMethodLegacyResponse::CMsgClientServiceMethodLegacyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientServiceMethodLegacyResponse::InitAsDefaultInstance() {
}

CMsgClientServiceMethodLegacyResponse::CMsgClientServiceMethodLegacyResponse(const CMsgClientServiceMethodLegacyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientServiceMethodLegacyResponse::SharedCtor() {
  _cached_size_ = 0;
  method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serialized_method_response_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientServiceMethodLegacyResponse::~CMsgClientServiceMethodLegacyResponse() {
  SharedDtor();
}

void CMsgClientServiceMethodLegacyResponse::SharedDtor() {
  if (method_name_ != &::google::protobuf::internal::kEmptyString) {
    delete method_name_;
  }
  if (serialized_method_response_ != &::google::protobuf::internal::kEmptyString) {
    delete serialized_method_response_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientServiceMethodLegacyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientServiceMethodLegacyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientServiceMethodLegacyResponse_descriptor_;
}

const CMsgClientServiceMethodLegacyResponse& CMsgClientServiceMethodLegacyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientServiceMethodLegacyResponse* CMsgClientServiceMethodLegacyResponse::default_instance_ = NULL;

CMsgClientServiceMethodLegacyResponse* CMsgClientServiceMethodLegacyResponse::New() const {
  return new CMsgClientServiceMethodLegacyResponse;
}

void CMsgClientServiceMethodLegacyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_method_name()) {
      if (method_name_ != &::google::protobuf::internal::kEmptyString) {
        method_name_->clear();
      }
    }
    if (has_serialized_method_response()) {
      if (serialized_method_response_ != &::google::protobuf::internal::kEmptyString) {
        serialized_method_response_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientServiceMethodLegacyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string method_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->method_name().data(), this->method_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_serialized_method_response;
        break;
      }

      // optional bytes serialized_method_response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serialized_method_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized_method_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientServiceMethodLegacyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string method_name = 1;
  if (has_method_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->method_name().data(), this->method_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->method_name(), output);
  }

  // optional bytes serialized_method_response = 2;
  if (has_serialized_method_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->serialized_method_response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientServiceMethodLegacyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string method_name = 1;
  if (has_method_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->method_name().data(), this->method_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->method_name(), target);
  }

  // optional bytes serialized_method_response = 2;
  if (has_serialized_method_response()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->serialized_method_response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientServiceMethodLegacyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string method_name = 1;
    if (has_method_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method_name());
    }

    // optional bytes serialized_method_response = 2;
    if (has_serialized_method_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialized_method_response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientServiceMethodLegacyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientServiceMethodLegacyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientServiceMethodLegacyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientServiceMethodLegacyResponse::MergeFrom(const CMsgClientServiceMethodLegacyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_method_name()) {
      set_method_name(from.method_name());
    }
    if (from.has_serialized_method_response()) {
      set_serialized_method_response(from.serialized_method_response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientServiceMethodLegacyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientServiceMethodLegacyResponse::CopyFrom(const CMsgClientServiceMethodLegacyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientServiceMethodLegacyResponse::IsInitialized() const {

  return true;
}

void CMsgClientServiceMethodLegacyResponse::Swap(CMsgClientServiceMethodLegacyResponse* other) {
  if (other != this) {
    std::swap(method_name_, other->method_name_);
    std::swap(serialized_method_response_, other->serialized_method_response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientServiceMethodLegacyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientServiceMethodLegacyResponse_descriptor_;
  metadata.reflection = CMsgClientServiceMethodLegacyResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUIMode::kUimodeFieldNumber;
const int CMsgClientUIMode::kChatModeFieldNumber;
#endif  // !_MSC_VER

CMsgClientUIMode::CMsgClientUIMode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientUIMode::InitAsDefaultInstance() {
}

CMsgClientUIMode::CMsgClientUIMode(const CMsgClientUIMode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUIMode::SharedCtor() {
  _cached_size_ = 0;
  uimode_ = 0u;
  chat_mode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUIMode::~CMsgClientUIMode() {
  SharedDtor();
}

void CMsgClientUIMode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientUIMode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUIMode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientUIMode_descriptor_;
}

const CMsgClientUIMode& CMsgClientUIMode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientUIMode* CMsgClientUIMode::default_instance_ = NULL;

CMsgClientUIMode* CMsgClientUIMode::New() const {
  return new CMsgClientUIMode;
}

void CMsgClientUIMode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uimode_ = 0u;
    chat_mode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientUIMode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uimode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uimode_)));
          set_has_uimode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chat_mode;
        break;
      }

      // optional uint32 chat_mode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chat_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chat_mode_)));
          set_has_chat_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUIMode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uimode = 1;
  if (has_uimode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uimode(), output);
  }

  // optional uint32 chat_mode = 2;
  if (has_chat_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->chat_mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientUIMode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uimode = 1;
  if (has_uimode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uimode(), target);
  }

  // optional uint32 chat_mode = 2;
  if (has_chat_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->chat_mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientUIMode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uimode = 1;
    if (has_uimode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uimode());
    }

    // optional uint32 chat_mode = 2;
    if (has_chat_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chat_mode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUIMode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientUIMode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientUIMode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientUIMode::MergeFrom(const CMsgClientUIMode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uimode()) {
      set_uimode(from.uimode());
    }
    if (from.has_chat_mode()) {
      set_chat_mode(from.chat_mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientUIMode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUIMode::CopyFrom(const CMsgClientUIMode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUIMode::IsInitialized() const {

  return true;
}

void CMsgClientUIMode::Swap(CMsgClientUIMode* other) {
  if (other != this) {
    std::swap(uimode_, other->uimode_);
    std::swap(chat_mode_, other->chat_mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientUIMode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientUIMode_descriptor_;
  metadata.reflection = CMsgClientUIMode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientVanityURLChangedNotification::kVanityUrlFieldNumber;
#endif  // !_MSC_VER

CMsgClientVanityURLChangedNotification::CMsgClientVanityURLChangedNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientVanityURLChangedNotification::InitAsDefaultInstance() {
}

CMsgClientVanityURLChangedNotification::CMsgClientVanityURLChangedNotification(const CMsgClientVanityURLChangedNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientVanityURLChangedNotification::SharedCtor() {
  _cached_size_ = 0;
  vanity_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientVanityURLChangedNotification::~CMsgClientVanityURLChangedNotification() {
  SharedDtor();
}

void CMsgClientVanityURLChangedNotification::SharedDtor() {
  if (vanity_url_ != &::google::protobuf::internal::kEmptyString) {
    delete vanity_url_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientVanityURLChangedNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientVanityURLChangedNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientVanityURLChangedNotification_descriptor_;
}

const CMsgClientVanityURLChangedNotification& CMsgClientVanityURLChangedNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientVanityURLChangedNotification* CMsgClientVanityURLChangedNotification::default_instance_ = NULL;

CMsgClientVanityURLChangedNotification* CMsgClientVanityURLChangedNotification::New() const {
  return new CMsgClientVanityURLChangedNotification;
}

void CMsgClientVanityURLChangedNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_vanity_url()) {
      if (vanity_url_ != &::google::protobuf::internal::kEmptyString) {
        vanity_url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientVanityURLChangedNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string vanity_url = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vanity_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vanity_url().data(), this->vanity_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientVanityURLChangedNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string vanity_url = 1;
  if (has_vanity_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vanity_url().data(), this->vanity_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->vanity_url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientVanityURLChangedNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string vanity_url = 1;
  if (has_vanity_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vanity_url().data(), this->vanity_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->vanity_url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientVanityURLChangedNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string vanity_url = 1;
    if (has_vanity_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vanity_url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientVanityURLChangedNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientVanityURLChangedNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientVanityURLChangedNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientVanityURLChangedNotification::MergeFrom(const CMsgClientVanityURLChangedNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vanity_url()) {
      set_vanity_url(from.vanity_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientVanityURLChangedNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientVanityURLChangedNotification::CopyFrom(const CMsgClientVanityURLChangedNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientVanityURLChangedNotification::IsInitialized() const {

  return true;
}

void CMsgClientVanityURLChangedNotification::Swap(CMsgClientVanityURLChangedNotification* other) {
  if (other != this) {
    std::swap(vanity_url_, other->vanity_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientVanityURLChangedNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientVanityURLChangedNotification_descriptor_;
  metadata.reflection = CMsgClientVanityURLChangedNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientAuthorizeLocalDeviceRequest::kDeviceDescriptionFieldNumber;
const int CMsgClientAuthorizeLocalDeviceRequest::kOwnerAccountIdFieldNumber;
const int CMsgClientAuthorizeLocalDeviceRequest::kLocalDeviceTokenFieldNumber;
#endif  // !_MSC_VER

CMsgClientAuthorizeLocalDeviceRequest::CMsgClientAuthorizeLocalDeviceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientAuthorizeLocalDeviceRequest::InitAsDefaultInstance() {
}

CMsgClientAuthorizeLocalDeviceRequest::CMsgClientAuthorizeLocalDeviceRequest(const CMsgClientAuthorizeLocalDeviceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientAuthorizeLocalDeviceRequest::SharedCtor() {
  _cached_size_ = 0;
  device_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  owner_account_id_ = 0u;
  local_device_token_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientAuthorizeLocalDeviceRequest::~CMsgClientAuthorizeLocalDeviceRequest() {
  SharedDtor();
}

void CMsgClientAuthorizeLocalDeviceRequest::SharedDtor() {
  if (device_description_ != &::google::protobuf::internal::kEmptyString) {
    delete device_description_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientAuthorizeLocalDeviceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientAuthorizeLocalDeviceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientAuthorizeLocalDeviceRequest_descriptor_;
}

const CMsgClientAuthorizeLocalDeviceRequest& CMsgClientAuthorizeLocalDeviceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientAuthorizeLocalDeviceRequest* CMsgClientAuthorizeLocalDeviceRequest::default_instance_ = NULL;

CMsgClientAuthorizeLocalDeviceRequest* CMsgClientAuthorizeLocalDeviceRequest::New() const {
  return new CMsgClientAuthorizeLocalDeviceRequest;
}

void CMsgClientAuthorizeLocalDeviceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device_description()) {
      if (device_description_ != &::google::protobuf::internal::kEmptyString) {
        device_description_->clear();
      }
    }
    owner_account_id_ = 0u;
    local_device_token_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientAuthorizeLocalDeviceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_description = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_description().data(), this->device_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_owner_account_id;
        break;
      }

      // optional uint32 owner_account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_owner_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_account_id_)));
          set_has_owner_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_local_device_token;
        break;
      }

      // optional uint64 local_device_token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_local_device_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &local_device_token_)));
          set_has_local_device_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientAuthorizeLocalDeviceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string device_description = 1;
  if (has_device_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_description().data(), this->device_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device_description(), output);
  }

  // optional uint32 owner_account_id = 2;
  if (has_owner_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->owner_account_id(), output);
  }

  // optional uint64 local_device_token = 3;
  if (has_local_device_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->local_device_token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientAuthorizeLocalDeviceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string device_description = 1;
  if (has_device_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_description().data(), this->device_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_description(), target);
  }

  // optional uint32 owner_account_id = 2;
  if (has_owner_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->owner_account_id(), target);
  }

  // optional uint64 local_device_token = 3;
  if (has_local_device_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->local_device_token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientAuthorizeLocalDeviceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string device_description = 1;
    if (has_device_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_description());
    }

    // optional uint32 owner_account_id = 2;
    if (has_owner_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_account_id());
    }

    // optional uint64 local_device_token = 3;
    if (has_local_device_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->local_device_token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAuthorizeLocalDeviceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientAuthorizeLocalDeviceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientAuthorizeLocalDeviceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientAuthorizeLocalDeviceRequest::MergeFrom(const CMsgClientAuthorizeLocalDeviceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_description()) {
      set_device_description(from.device_description());
    }
    if (from.has_owner_account_id()) {
      set_owner_account_id(from.owner_account_id());
    }
    if (from.has_local_device_token()) {
      set_local_device_token(from.local_device_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientAuthorizeLocalDeviceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAuthorizeLocalDeviceRequest::CopyFrom(const CMsgClientAuthorizeLocalDeviceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAuthorizeLocalDeviceRequest::IsInitialized() const {

  return true;
}

void CMsgClientAuthorizeLocalDeviceRequest::Swap(CMsgClientAuthorizeLocalDeviceRequest* other) {
  if (other != this) {
    std::swap(device_description_, other->device_description_);
    std::swap(owner_account_id_, other->owner_account_id_);
    std::swap(local_device_token_, other->local_device_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientAuthorizeLocalDeviceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientAuthorizeLocalDeviceRequest_descriptor_;
  metadata.reflection = CMsgClientAuthorizeLocalDeviceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientAuthorizeLocalDevice::kEresultFieldNumber;
const int CMsgClientAuthorizeLocalDevice::kOwnerAccountIdFieldNumber;
const int CMsgClientAuthorizeLocalDevice::kAuthedDeviceTokenFieldNumber;
#endif  // !_MSC_VER

CMsgClientAuthorizeLocalDevice::CMsgClientAuthorizeLocalDevice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientAuthorizeLocalDevice::InitAsDefaultInstance() {
}

CMsgClientAuthorizeLocalDevice::CMsgClientAuthorizeLocalDevice(const CMsgClientAuthorizeLocalDevice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientAuthorizeLocalDevice::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  owner_account_id_ = 0u;
  authed_device_token_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientAuthorizeLocalDevice::~CMsgClientAuthorizeLocalDevice() {
  SharedDtor();
}

void CMsgClientAuthorizeLocalDevice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientAuthorizeLocalDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientAuthorizeLocalDevice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientAuthorizeLocalDevice_descriptor_;
}

const CMsgClientAuthorizeLocalDevice& CMsgClientAuthorizeLocalDevice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientAuthorizeLocalDevice* CMsgClientAuthorizeLocalDevice::default_instance_ = NULL;

CMsgClientAuthorizeLocalDevice* CMsgClientAuthorizeLocalDevice::New() const {
  return new CMsgClientAuthorizeLocalDevice;
}

void CMsgClientAuthorizeLocalDevice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    owner_account_id_ = 0u;
    authed_device_token_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientAuthorizeLocalDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_owner_account_id;
        break;
      }

      // optional uint32 owner_account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_owner_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_account_id_)));
          set_has_owner_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_authed_device_token;
        break;
      }

      // optional uint64 authed_device_token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_authed_device_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &authed_device_token_)));
          set_has_authed_device_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientAuthorizeLocalDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional uint32 owner_account_id = 2;
  if (has_owner_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->owner_account_id(), output);
  }

  // optional uint64 authed_device_token = 3;
  if (has_authed_device_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->authed_device_token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientAuthorizeLocalDevice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional uint32 owner_account_id = 2;
  if (has_owner_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->owner_account_id(), target);
  }

  // optional uint64 authed_device_token = 3;
  if (has_authed_device_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->authed_device_token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientAuthorizeLocalDevice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional uint32 owner_account_id = 2;
    if (has_owner_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_account_id());
    }

    // optional uint64 authed_device_token = 3;
    if (has_authed_device_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->authed_device_token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAuthorizeLocalDevice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientAuthorizeLocalDevice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientAuthorizeLocalDevice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientAuthorizeLocalDevice::MergeFrom(const CMsgClientAuthorizeLocalDevice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_owner_account_id()) {
      set_owner_account_id(from.owner_account_id());
    }
    if (from.has_authed_device_token()) {
      set_authed_device_token(from.authed_device_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientAuthorizeLocalDevice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAuthorizeLocalDevice::CopyFrom(const CMsgClientAuthorizeLocalDevice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAuthorizeLocalDevice::IsInitialized() const {

  return true;
}

void CMsgClientAuthorizeLocalDevice::Swap(CMsgClientAuthorizeLocalDevice* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(owner_account_id_, other->owner_account_id_);
    std::swap(authed_device_token_, other->authed_device_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientAuthorizeLocalDevice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientAuthorizeLocalDevice_descriptor_;
  metadata.reflection = CMsgClientAuthorizeLocalDevice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientAuthorizeLocalDeviceNotification::kEresultFieldNumber;
const int CMsgClientAuthorizeLocalDeviceNotification::kOwnerAccountIdFieldNumber;
const int CMsgClientAuthorizeLocalDeviceNotification::kLocalDeviceTokenFieldNumber;
#endif  // !_MSC_VER

CMsgClientAuthorizeLocalDeviceNotification::CMsgClientAuthorizeLocalDeviceNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientAuthorizeLocalDeviceNotification::InitAsDefaultInstance() {
}

CMsgClientAuthorizeLocalDeviceNotification::CMsgClientAuthorizeLocalDeviceNotification(const CMsgClientAuthorizeLocalDeviceNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientAuthorizeLocalDeviceNotification::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  owner_account_id_ = 0u;
  local_device_token_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientAuthorizeLocalDeviceNotification::~CMsgClientAuthorizeLocalDeviceNotification() {
  SharedDtor();
}

void CMsgClientAuthorizeLocalDeviceNotification::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientAuthorizeLocalDeviceNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientAuthorizeLocalDeviceNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientAuthorizeLocalDeviceNotification_descriptor_;
}

const CMsgClientAuthorizeLocalDeviceNotification& CMsgClientAuthorizeLocalDeviceNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientAuthorizeLocalDeviceNotification* CMsgClientAuthorizeLocalDeviceNotification::default_instance_ = NULL;

CMsgClientAuthorizeLocalDeviceNotification* CMsgClientAuthorizeLocalDeviceNotification::New() const {
  return new CMsgClientAuthorizeLocalDeviceNotification;
}

void CMsgClientAuthorizeLocalDeviceNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    owner_account_id_ = 0u;
    local_device_token_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientAuthorizeLocalDeviceNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_owner_account_id;
        break;
      }

      // optional uint32 owner_account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_owner_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_account_id_)));
          set_has_owner_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_local_device_token;
        break;
      }

      // optional uint64 local_device_token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_local_device_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &local_device_token_)));
          set_has_local_device_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientAuthorizeLocalDeviceNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional uint32 owner_account_id = 2;
  if (has_owner_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->owner_account_id(), output);
  }

  // optional uint64 local_device_token = 3;
  if (has_local_device_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->local_device_token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientAuthorizeLocalDeviceNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional uint32 owner_account_id = 2;
  if (has_owner_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->owner_account_id(), target);
  }

  // optional uint64 local_device_token = 3;
  if (has_local_device_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->local_device_token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientAuthorizeLocalDeviceNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional uint32 owner_account_id = 2;
    if (has_owner_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_account_id());
    }

    // optional uint64 local_device_token = 3;
    if (has_local_device_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->local_device_token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAuthorizeLocalDeviceNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientAuthorizeLocalDeviceNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientAuthorizeLocalDeviceNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientAuthorizeLocalDeviceNotification::MergeFrom(const CMsgClientAuthorizeLocalDeviceNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_owner_account_id()) {
      set_owner_account_id(from.owner_account_id());
    }
    if (from.has_local_device_token()) {
      set_local_device_token(from.local_device_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientAuthorizeLocalDeviceNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAuthorizeLocalDeviceNotification::CopyFrom(const CMsgClientAuthorizeLocalDeviceNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAuthorizeLocalDeviceNotification::IsInitialized() const {

  return true;
}

void CMsgClientAuthorizeLocalDeviceNotification::Swap(CMsgClientAuthorizeLocalDeviceNotification* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(owner_account_id_, other->owner_account_id_);
    std::swap(local_device_token_, other->local_device_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientAuthorizeLocalDeviceNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientAuthorizeLocalDeviceNotification_descriptor_;
  metadata.reflection = CMsgClientAuthorizeLocalDeviceNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientDeauthorizeDeviceRequest::kDeauthorizationAccountIdFieldNumber;
const int CMsgClientDeauthorizeDeviceRequest::kDeauthorizationDeviceTokenFieldNumber;
#endif  // !_MSC_VER

CMsgClientDeauthorizeDeviceRequest::CMsgClientDeauthorizeDeviceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientDeauthorizeDeviceRequest::InitAsDefaultInstance() {
}

CMsgClientDeauthorizeDeviceRequest::CMsgClientDeauthorizeDeviceRequest(const CMsgClientDeauthorizeDeviceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientDeauthorizeDeviceRequest::SharedCtor() {
  _cached_size_ = 0;
  deauthorization_account_id_ = 0u;
  deauthorization_device_token_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientDeauthorizeDeviceRequest::~CMsgClientDeauthorizeDeviceRequest() {
  SharedDtor();
}

void CMsgClientDeauthorizeDeviceRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientDeauthorizeDeviceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientDeauthorizeDeviceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientDeauthorizeDeviceRequest_descriptor_;
}

const CMsgClientDeauthorizeDeviceRequest& CMsgClientDeauthorizeDeviceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientDeauthorizeDeviceRequest* CMsgClientDeauthorizeDeviceRequest::default_instance_ = NULL;

CMsgClientDeauthorizeDeviceRequest* CMsgClientDeauthorizeDeviceRequest::New() const {
  return new CMsgClientDeauthorizeDeviceRequest;
}

void CMsgClientDeauthorizeDeviceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    deauthorization_account_id_ = 0u;
    deauthorization_device_token_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientDeauthorizeDeviceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deauthorization_account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deauthorization_account_id_)));
          set_has_deauthorization_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_deauthorization_device_token;
        break;
      }

      // optional uint64 deauthorization_device_token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deauthorization_device_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &deauthorization_device_token_)));
          set_has_deauthorization_device_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientDeauthorizeDeviceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 deauthorization_account_id = 1;
  if (has_deauthorization_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deauthorization_account_id(), output);
  }

  // optional uint64 deauthorization_device_token = 2;
  if (has_deauthorization_device_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->deauthorization_device_token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientDeauthorizeDeviceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 deauthorization_account_id = 1;
  if (has_deauthorization_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deauthorization_account_id(), target);
  }

  // optional uint64 deauthorization_device_token = 2;
  if (has_deauthorization_device_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->deauthorization_device_token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientDeauthorizeDeviceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 deauthorization_account_id = 1;
    if (has_deauthorization_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deauthorization_account_id());
    }

    // optional uint64 deauthorization_device_token = 2;
    if (has_deauthorization_device_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->deauthorization_device_token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientDeauthorizeDeviceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientDeauthorizeDeviceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientDeauthorizeDeviceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientDeauthorizeDeviceRequest::MergeFrom(const CMsgClientDeauthorizeDeviceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deauthorization_account_id()) {
      set_deauthorization_account_id(from.deauthorization_account_id());
    }
    if (from.has_deauthorization_device_token()) {
      set_deauthorization_device_token(from.deauthorization_device_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientDeauthorizeDeviceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientDeauthorizeDeviceRequest::CopyFrom(const CMsgClientDeauthorizeDeviceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientDeauthorizeDeviceRequest::IsInitialized() const {

  return true;
}

void CMsgClientDeauthorizeDeviceRequest::Swap(CMsgClientDeauthorizeDeviceRequest* other) {
  if (other != this) {
    std::swap(deauthorization_account_id_, other->deauthorization_account_id_);
    std::swap(deauthorization_device_token_, other->deauthorization_device_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientDeauthorizeDeviceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientDeauthorizeDeviceRequest_descriptor_;
  metadata.reflection = CMsgClientDeauthorizeDeviceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientDeauthorizeDevice::kEresultFieldNumber;
const int CMsgClientDeauthorizeDevice::kDeauthorizationAccountIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientDeauthorizeDevice::CMsgClientDeauthorizeDevice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientDeauthorizeDevice::InitAsDefaultInstance() {
}

CMsgClientDeauthorizeDevice::CMsgClientDeauthorizeDevice(const CMsgClientDeauthorizeDevice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientDeauthorizeDevice::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  deauthorization_account_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientDeauthorizeDevice::~CMsgClientDeauthorizeDevice() {
  SharedDtor();
}

void CMsgClientDeauthorizeDevice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientDeauthorizeDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientDeauthorizeDevice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientDeauthorizeDevice_descriptor_;
}

const CMsgClientDeauthorizeDevice& CMsgClientDeauthorizeDevice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientDeauthorizeDevice* CMsgClientDeauthorizeDevice::default_instance_ = NULL;

CMsgClientDeauthorizeDevice* CMsgClientDeauthorizeDevice::New() const {
  return new CMsgClientDeauthorizeDevice;
}

void CMsgClientDeauthorizeDevice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    deauthorization_account_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientDeauthorizeDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_deauthorization_account_id;
        break;
      }

      // optional uint32 deauthorization_account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deauthorization_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deauthorization_account_id_)));
          set_has_deauthorization_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientDeauthorizeDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional uint32 deauthorization_account_id = 2;
  if (has_deauthorization_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->deauthorization_account_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientDeauthorizeDevice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional uint32 deauthorization_account_id = 2;
  if (has_deauthorization_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->deauthorization_account_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientDeauthorizeDevice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional uint32 deauthorization_account_id = 2;
    if (has_deauthorization_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deauthorization_account_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientDeauthorizeDevice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientDeauthorizeDevice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientDeauthorizeDevice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientDeauthorizeDevice::MergeFrom(const CMsgClientDeauthorizeDevice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_deauthorization_account_id()) {
      set_deauthorization_account_id(from.deauthorization_account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientDeauthorizeDevice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientDeauthorizeDevice::CopyFrom(const CMsgClientDeauthorizeDevice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientDeauthorizeDevice::IsInitialized() const {

  return true;
}

void CMsgClientDeauthorizeDevice::Swap(CMsgClientDeauthorizeDevice* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(deauthorization_account_id_, other->deauthorization_account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientDeauthorizeDevice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientDeauthorizeDevice_descriptor_;
  metadata.reflection = CMsgClientDeauthorizeDevice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUseLocalDeviceAuthorizations_DeviceToken::kOwnerAccountIdFieldNumber;
const int CMsgClientUseLocalDeviceAuthorizations_DeviceToken::kTokenIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientUseLocalDeviceAuthorizations_DeviceToken::CMsgClientUseLocalDeviceAuthorizations_DeviceToken()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientUseLocalDeviceAuthorizations_DeviceToken::InitAsDefaultInstance() {
}

CMsgClientUseLocalDeviceAuthorizations_DeviceToken::CMsgClientUseLocalDeviceAuthorizations_DeviceToken(const CMsgClientUseLocalDeviceAuthorizations_DeviceToken& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUseLocalDeviceAuthorizations_DeviceToken::SharedCtor() {
  _cached_size_ = 0;
  owner_account_id_ = 0u;
  token_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUseLocalDeviceAuthorizations_DeviceToken::~CMsgClientUseLocalDeviceAuthorizations_DeviceToken() {
  SharedDtor();
}

void CMsgClientUseLocalDeviceAuthorizations_DeviceToken::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientUseLocalDeviceAuthorizations_DeviceToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUseLocalDeviceAuthorizations_DeviceToken::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientUseLocalDeviceAuthorizations_DeviceToken_descriptor_;
}

const CMsgClientUseLocalDeviceAuthorizations_DeviceToken& CMsgClientUseLocalDeviceAuthorizations_DeviceToken::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientUseLocalDeviceAuthorizations_DeviceToken* CMsgClientUseLocalDeviceAuthorizations_DeviceToken::default_instance_ = NULL;

CMsgClientUseLocalDeviceAuthorizations_DeviceToken* CMsgClientUseLocalDeviceAuthorizations_DeviceToken::New() const {
  return new CMsgClientUseLocalDeviceAuthorizations_DeviceToken;
}

void CMsgClientUseLocalDeviceAuthorizations_DeviceToken::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    owner_account_id_ = 0u;
    token_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientUseLocalDeviceAuthorizations_DeviceToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 owner_account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_account_id_)));
          set_has_owner_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_token_id;
        break;
      }

      // optional uint64 token_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_token_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &token_id_)));
          set_has_token_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUseLocalDeviceAuthorizations_DeviceToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 owner_account_id = 1;
  if (has_owner_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->owner_account_id(), output);
  }

  // optional uint64 token_id = 2;
  if (has_token_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->token_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientUseLocalDeviceAuthorizations_DeviceToken::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 owner_account_id = 1;
  if (has_owner_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->owner_account_id(), target);
  }

  // optional uint64 token_id = 2;
  if (has_token_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->token_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientUseLocalDeviceAuthorizations_DeviceToken::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 owner_account_id = 1;
    if (has_owner_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_account_id());
    }

    // optional uint64 token_id = 2;
    if (has_token_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->token_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUseLocalDeviceAuthorizations_DeviceToken::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientUseLocalDeviceAuthorizations_DeviceToken* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientUseLocalDeviceAuthorizations_DeviceToken*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientUseLocalDeviceAuthorizations_DeviceToken::MergeFrom(const CMsgClientUseLocalDeviceAuthorizations_DeviceToken& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_owner_account_id()) {
      set_owner_account_id(from.owner_account_id());
    }
    if (from.has_token_id()) {
      set_token_id(from.token_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientUseLocalDeviceAuthorizations_DeviceToken::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUseLocalDeviceAuthorizations_DeviceToken::CopyFrom(const CMsgClientUseLocalDeviceAuthorizations_DeviceToken& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUseLocalDeviceAuthorizations_DeviceToken::IsInitialized() const {

  return true;
}

void CMsgClientUseLocalDeviceAuthorizations_DeviceToken::Swap(CMsgClientUseLocalDeviceAuthorizations_DeviceToken* other) {
  if (other != this) {
    std::swap(owner_account_id_, other->owner_account_id_);
    std::swap(token_id_, other->token_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientUseLocalDeviceAuthorizations_DeviceToken::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientUseLocalDeviceAuthorizations_DeviceToken_descriptor_;
  metadata.reflection = CMsgClientUseLocalDeviceAuthorizations_DeviceToken_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientUseLocalDeviceAuthorizations::kAuthorizationAccountIdFieldNumber;
const int CMsgClientUseLocalDeviceAuthorizations::kDeviceTokensFieldNumber;
#endif  // !_MSC_VER

CMsgClientUseLocalDeviceAuthorizations::CMsgClientUseLocalDeviceAuthorizations()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientUseLocalDeviceAuthorizations::InitAsDefaultInstance() {
}

CMsgClientUseLocalDeviceAuthorizations::CMsgClientUseLocalDeviceAuthorizations(const CMsgClientUseLocalDeviceAuthorizations& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUseLocalDeviceAuthorizations::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUseLocalDeviceAuthorizations::~CMsgClientUseLocalDeviceAuthorizations() {
  SharedDtor();
}

void CMsgClientUseLocalDeviceAuthorizations::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientUseLocalDeviceAuthorizations::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientUseLocalDeviceAuthorizations::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientUseLocalDeviceAuthorizations_descriptor_;
}

const CMsgClientUseLocalDeviceAuthorizations& CMsgClientUseLocalDeviceAuthorizations::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientUseLocalDeviceAuthorizations* CMsgClientUseLocalDeviceAuthorizations::default_instance_ = NULL;

CMsgClientUseLocalDeviceAuthorizations* CMsgClientUseLocalDeviceAuthorizations::New() const {
  return new CMsgClientUseLocalDeviceAuthorizations;
}

void CMsgClientUseLocalDeviceAuthorizations::Clear() {
  authorization_account_id_.Clear();
  device_tokens_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientUseLocalDeviceAuthorizations::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 authorization_account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_authorization_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_authorization_account_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_authorization_account_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_authorization_account_id;
        if (input->ExpectTag(18)) goto parse_device_tokens;
        break;
      }

      // repeated .CMsgClientUseLocalDeviceAuthorizations.DeviceToken device_tokens = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_tokens:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_device_tokens()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_device_tokens;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUseLocalDeviceAuthorizations::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 authorization_account_id = 1;
  for (int i = 0; i < this->authorization_account_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->authorization_account_id(i), output);
  }

  // repeated .CMsgClientUseLocalDeviceAuthorizations.DeviceToken device_tokens = 2;
  for (int i = 0; i < this->device_tokens_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->device_tokens(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientUseLocalDeviceAuthorizations::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 authorization_account_id = 1;
  for (int i = 0; i < this->authorization_account_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->authorization_account_id(i), target);
  }

  // repeated .CMsgClientUseLocalDeviceAuthorizations.DeviceToken device_tokens = 2;
  for (int i = 0; i < this->device_tokens_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->device_tokens(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientUseLocalDeviceAuthorizations::ByteSize() const {
  int total_size = 0;

  // repeated uint32 authorization_account_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->authorization_account_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->authorization_account_id(i));
    }
    total_size += 1 * this->authorization_account_id_size() + data_size;
  }

  // repeated .CMsgClientUseLocalDeviceAuthorizations.DeviceToken device_tokens = 2;
  total_size += 1 * this->device_tokens_size();
  for (int i = 0; i < this->device_tokens_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->device_tokens(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUseLocalDeviceAuthorizations::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientUseLocalDeviceAuthorizations* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientUseLocalDeviceAuthorizations*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientUseLocalDeviceAuthorizations::MergeFrom(const CMsgClientUseLocalDeviceAuthorizations& from) {
  GOOGLE_CHECK_NE(&from, this);
  authorization_account_id_.MergeFrom(from.authorization_account_id_);
  device_tokens_.MergeFrom(from.device_tokens_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientUseLocalDeviceAuthorizations::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientUseLocalDeviceAuthorizations::CopyFrom(const CMsgClientUseLocalDeviceAuthorizations& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUseLocalDeviceAuthorizations::IsInitialized() const {

  return true;
}

void CMsgClientUseLocalDeviceAuthorizations::Swap(CMsgClientUseLocalDeviceAuthorizations* other) {
  if (other != this) {
    authorization_account_id_.Swap(&other->authorization_account_id_);
    device_tokens_.Swap(&other->device_tokens_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientUseLocalDeviceAuthorizations::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientUseLocalDeviceAuthorizations_descriptor_;
  metadata.reflection = CMsgClientUseLocalDeviceAuthorizations_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgClientGetAuthorizedDevices::CMsgClientGetAuthorizedDevices()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientGetAuthorizedDevices::InitAsDefaultInstance() {
}

CMsgClientGetAuthorizedDevices::CMsgClientGetAuthorizedDevices(const CMsgClientGetAuthorizedDevices& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGetAuthorizedDevices::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGetAuthorizedDevices::~CMsgClientGetAuthorizedDevices() {
  SharedDtor();
}

void CMsgClientGetAuthorizedDevices::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientGetAuthorizedDevices::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientGetAuthorizedDevices::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientGetAuthorizedDevices_descriptor_;
}

const CMsgClientGetAuthorizedDevices& CMsgClientGetAuthorizedDevices::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientGetAuthorizedDevices* CMsgClientGetAuthorizedDevices::default_instance_ = NULL;

CMsgClientGetAuthorizedDevices* CMsgClientGetAuthorizedDevices::New() const {
  return new CMsgClientGetAuthorizedDevices;
}

void CMsgClientGetAuthorizedDevices::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientGetAuthorizedDevices::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgClientGetAuthorizedDevices::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientGetAuthorizedDevices::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientGetAuthorizedDevices::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetAuthorizedDevices::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientGetAuthorizedDevices* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientGetAuthorizedDevices*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientGetAuthorizedDevices::MergeFrom(const CMsgClientGetAuthorizedDevices& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientGetAuthorizedDevices::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetAuthorizedDevices::CopyFrom(const CMsgClientGetAuthorizedDevices& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetAuthorizedDevices::IsInitialized() const {

  return true;
}

void CMsgClientGetAuthorizedDevices::Swap(CMsgClientGetAuthorizedDevices* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientGetAuthorizedDevices::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientGetAuthorizedDevices_descriptor_;
  metadata.reflection = CMsgClientGetAuthorizedDevices_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::kAuthDeviceTokenFieldNumber;
const int CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::kDeviceNameFieldNumber;
const int CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::kLastAccessTimeFieldNumber;
const int CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::kBorrowerIdFieldNumber;
const int CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::kIsPendingFieldNumber;
const int CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::kAppPlayedFieldNumber;
#endif  // !_MSC_VER

CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::InitAsDefaultInstance() {
}

CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice(const CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::SharedCtor() {
  _cached_size_ = 0;
  auth_device_token_ = GOOGLE_ULONGLONG(0);
  device_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  last_access_time_ = 0u;
  borrower_id_ = 0u;
  is_pending_ = false;
  app_played_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::~CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice() {
  SharedDtor();
}

void CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::SharedDtor() {
  if (device_name_ != &::google::protobuf::internal::kEmptyString) {
    delete device_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice_descriptor_;
}

const CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice& CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice* CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::default_instance_ = NULL;

CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice* CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::New() const {
  return new CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice;
}

void CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    auth_device_token_ = GOOGLE_ULONGLONG(0);
    if (has_device_name()) {
      if (device_name_ != &::google::protobuf::internal::kEmptyString) {
        device_name_->clear();
      }
    }
    last_access_time_ = 0u;
    borrower_id_ = 0u;
    is_pending_ = false;
    app_played_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 auth_device_token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &auth_device_token_)));
          set_has_auth_device_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_device_name;
        break;
      }

      // optional string device_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_name().data(), this->device_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_access_time;
        break;
      }

      // optional uint32 last_access_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_access_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_access_time_)));
          set_has_last_access_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_borrower_id;
        break;
      }

      // optional uint32 borrower_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_borrower_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &borrower_id_)));
          set_has_borrower_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_pending;
        break;
      }

      // optional bool is_pending = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_pending:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pending_)));
          set_has_is_pending();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_app_played;
        break;
      }

      // optional uint32 app_played = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_played:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_played_)));
          set_has_app_played();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 auth_device_token = 1;
  if (has_auth_device_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->auth_device_token(), output);
  }

  // optional string device_name = 2;
  if (has_device_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->device_name(), output);
  }

  // optional uint32 last_access_time = 3;
  if (has_last_access_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->last_access_time(), output);
  }

  // optional uint32 borrower_id = 4;
  if (has_borrower_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->borrower_id(), output);
  }

  // optional bool is_pending = 5;
  if (has_is_pending()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_pending(), output);
  }

  // optional uint32 app_played = 6;
  if (has_app_played()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->app_played(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 auth_device_token = 1;
  if (has_auth_device_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->auth_device_token(), target);
  }

  // optional string device_name = 2;
  if (has_device_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->device_name(), target);
  }

  // optional uint32 last_access_time = 3;
  if (has_last_access_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->last_access_time(), target);
  }

  // optional uint32 borrower_id = 4;
  if (has_borrower_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->borrower_id(), target);
  }

  // optional bool is_pending = 5;
  if (has_is_pending()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_pending(), target);
  }

  // optional uint32 app_played = 6;
  if (has_app_played()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->app_played(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 auth_device_token = 1;
    if (has_auth_device_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->auth_device_token());
    }

    // optional string device_name = 2;
    if (has_device_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_name());
    }

    // optional uint32 last_access_time = 3;
    if (has_last_access_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_access_time());
    }

    // optional uint32 borrower_id = 4;
    if (has_borrower_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->borrower_id());
    }

    // optional bool is_pending = 5;
    if (has_is_pending()) {
      total_size += 1 + 1;
    }

    // optional uint32 app_played = 6;
    if (has_app_played()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_played());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::MergeFrom(const CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_auth_device_token()) {
      set_auth_device_token(from.auth_device_token());
    }
    if (from.has_device_name()) {
      set_device_name(from.device_name());
    }
    if (from.has_last_access_time()) {
      set_last_access_time(from.last_access_time());
    }
    if (from.has_borrower_id()) {
      set_borrower_id(from.borrower_id());
    }
    if (from.has_is_pending()) {
      set_is_pending(from.is_pending());
    }
    if (from.has_app_played()) {
      set_app_played(from.app_played());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::CopyFrom(const CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::IsInitialized() const {

  return true;
}

void CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::Swap(CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice* other) {
  if (other != this) {
    std::swap(auth_device_token_, other->auth_device_token_);
    std::swap(device_name_, other->device_name_);
    std::swap(last_access_time_, other->last_access_time_);
    std::swap(borrower_id_, other->borrower_id_);
    std::swap(is_pending_, other->is_pending_);
    std::swap(app_played_, other->app_played_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice_descriptor_;
  metadata.reflection = CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientGetAuthorizedDevicesResponse::kEresultFieldNumber;
const int CMsgClientGetAuthorizedDevicesResponse::kAuthorizedDeviceFieldNumber;
#endif  // !_MSC_VER

CMsgClientGetAuthorizedDevicesResponse::CMsgClientGetAuthorizedDevicesResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientGetAuthorizedDevicesResponse::InitAsDefaultInstance() {
}

CMsgClientGetAuthorizedDevicesResponse::CMsgClientGetAuthorizedDevicesResponse(const CMsgClientGetAuthorizedDevicesResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGetAuthorizedDevicesResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGetAuthorizedDevicesResponse::~CMsgClientGetAuthorizedDevicesResponse() {
  SharedDtor();
}

void CMsgClientGetAuthorizedDevicesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientGetAuthorizedDevicesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientGetAuthorizedDevicesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientGetAuthorizedDevicesResponse_descriptor_;
}

const CMsgClientGetAuthorizedDevicesResponse& CMsgClientGetAuthorizedDevicesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientGetAuthorizedDevicesResponse* CMsgClientGetAuthorizedDevicesResponse::default_instance_ = NULL;

CMsgClientGetAuthorizedDevicesResponse* CMsgClientGetAuthorizedDevicesResponse::New() const {
  return new CMsgClientGetAuthorizedDevicesResponse;
}

void CMsgClientGetAuthorizedDevicesResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
  }
  authorized_device_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientGetAuthorizedDevicesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_authorized_device;
        break;
      }

      // repeated .CMsgClientGetAuthorizedDevicesResponse.AuthorizedDevice authorized_device = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_authorized_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_authorized_device()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_authorized_device;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientGetAuthorizedDevicesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // repeated .CMsgClientGetAuthorizedDevicesResponse.AuthorizedDevice authorized_device = 2;
  for (int i = 0; i < this->authorized_device_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->authorized_device(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientGetAuthorizedDevicesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // repeated .CMsgClientGetAuthorizedDevicesResponse.AuthorizedDevice authorized_device = 2;
  for (int i = 0; i < this->authorized_device_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->authorized_device(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientGetAuthorizedDevicesResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  // repeated .CMsgClientGetAuthorizedDevicesResponse.AuthorizedDevice authorized_device = 2;
  total_size += 1 * this->authorized_device_size();
  for (int i = 0; i < this->authorized_device_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->authorized_device(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetAuthorizedDevicesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientGetAuthorizedDevicesResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientGetAuthorizedDevicesResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientGetAuthorizedDevicesResponse::MergeFrom(const CMsgClientGetAuthorizedDevicesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  authorized_device_.MergeFrom(from.authorized_device_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientGetAuthorizedDevicesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetAuthorizedDevicesResponse::CopyFrom(const CMsgClientGetAuthorizedDevicesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetAuthorizedDevicesResponse::IsInitialized() const {

  return true;
}

void CMsgClientGetAuthorizedDevicesResponse::Swap(CMsgClientGetAuthorizedDevicesResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    authorized_device_.Swap(&other->authorized_device_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientGetAuthorizedDevicesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientGetAuthorizedDevicesResponse_descriptor_;
  metadata.reflection = CMsgClientGetAuthorizedDevicesResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientSharedLibraryLockStatus_LockedLibrary::kOwnerIdFieldNumber;
const int CMsgClientSharedLibraryLockStatus_LockedLibrary::kLockedByFieldNumber;
#endif  // !_MSC_VER

CMsgClientSharedLibraryLockStatus_LockedLibrary::CMsgClientSharedLibraryLockStatus_LockedLibrary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientSharedLibraryLockStatus_LockedLibrary::InitAsDefaultInstance() {
}

CMsgClientSharedLibraryLockStatus_LockedLibrary::CMsgClientSharedLibraryLockStatus_LockedLibrary(const CMsgClientSharedLibraryLockStatus_LockedLibrary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientSharedLibraryLockStatus_LockedLibrary::SharedCtor() {
  _cached_size_ = 0;
  owner_id_ = 0u;
  locked_by_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientSharedLibraryLockStatus_LockedLibrary::~CMsgClientSharedLibraryLockStatus_LockedLibrary() {
  SharedDtor();
}

void CMsgClientSharedLibraryLockStatus_LockedLibrary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientSharedLibraryLockStatus_LockedLibrary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientSharedLibraryLockStatus_LockedLibrary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientSharedLibraryLockStatus_LockedLibrary_descriptor_;
}

const CMsgClientSharedLibraryLockStatus_LockedLibrary& CMsgClientSharedLibraryLockStatus_LockedLibrary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientSharedLibraryLockStatus_LockedLibrary* CMsgClientSharedLibraryLockStatus_LockedLibrary::default_instance_ = NULL;

CMsgClientSharedLibraryLockStatus_LockedLibrary* CMsgClientSharedLibraryLockStatus_LockedLibrary::New() const {
  return new CMsgClientSharedLibraryLockStatus_LockedLibrary;
}

void CMsgClientSharedLibraryLockStatus_LockedLibrary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    owner_id_ = 0u;
    locked_by_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientSharedLibraryLockStatus_LockedLibrary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 owner_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_id_)));
          set_has_owner_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_locked_by;
        break;
      }

      // optional uint32 locked_by = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_locked_by:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &locked_by_)));
          set_has_locked_by();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientSharedLibraryLockStatus_LockedLibrary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 owner_id = 1;
  if (has_owner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->owner_id(), output);
  }

  // optional uint32 locked_by = 2;
  if (has_locked_by()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->locked_by(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientSharedLibraryLockStatus_LockedLibrary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 owner_id = 1;
  if (has_owner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->owner_id(), target);
  }

  // optional uint32 locked_by = 2;
  if (has_locked_by()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->locked_by(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientSharedLibraryLockStatus_LockedLibrary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 owner_id = 1;
    if (has_owner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_id());
    }

    // optional uint32 locked_by = 2;
    if (has_locked_by()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->locked_by());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientSharedLibraryLockStatus_LockedLibrary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientSharedLibraryLockStatus_LockedLibrary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientSharedLibraryLockStatus_LockedLibrary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientSharedLibraryLockStatus_LockedLibrary::MergeFrom(const CMsgClientSharedLibraryLockStatus_LockedLibrary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_owner_id()) {
      set_owner_id(from.owner_id());
    }
    if (from.has_locked_by()) {
      set_locked_by(from.locked_by());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientSharedLibraryLockStatus_LockedLibrary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSharedLibraryLockStatus_LockedLibrary::CopyFrom(const CMsgClientSharedLibraryLockStatus_LockedLibrary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSharedLibraryLockStatus_LockedLibrary::IsInitialized() const {

  return true;
}

void CMsgClientSharedLibraryLockStatus_LockedLibrary::Swap(CMsgClientSharedLibraryLockStatus_LockedLibrary* other) {
  if (other != this) {
    std::swap(owner_id_, other->owner_id_);
    std::swap(locked_by_, other->locked_by_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientSharedLibraryLockStatus_LockedLibrary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientSharedLibraryLockStatus_LockedLibrary_descriptor_;
  metadata.reflection = CMsgClientSharedLibraryLockStatus_LockedLibrary_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientSharedLibraryLockStatus::kLockedLibraryFieldNumber;
const int CMsgClientSharedLibraryLockStatus::kOwnLibraryLockedByFieldNumber;
#endif  // !_MSC_VER

CMsgClientSharedLibraryLockStatus::CMsgClientSharedLibraryLockStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientSharedLibraryLockStatus::InitAsDefaultInstance() {
}

CMsgClientSharedLibraryLockStatus::CMsgClientSharedLibraryLockStatus(const CMsgClientSharedLibraryLockStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientSharedLibraryLockStatus::SharedCtor() {
  _cached_size_ = 0;
  own_library_locked_by_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientSharedLibraryLockStatus::~CMsgClientSharedLibraryLockStatus() {
  SharedDtor();
}

void CMsgClientSharedLibraryLockStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientSharedLibraryLockStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientSharedLibraryLockStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientSharedLibraryLockStatus_descriptor_;
}

const CMsgClientSharedLibraryLockStatus& CMsgClientSharedLibraryLockStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientSharedLibraryLockStatus* CMsgClientSharedLibraryLockStatus::default_instance_ = NULL;

CMsgClientSharedLibraryLockStatus* CMsgClientSharedLibraryLockStatus::New() const {
  return new CMsgClientSharedLibraryLockStatus;
}

void CMsgClientSharedLibraryLockStatus::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    own_library_locked_by_ = 0u;
  }
  locked_library_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientSharedLibraryLockStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgClientSharedLibraryLockStatus.LockedLibrary locked_library = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_locked_library:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_locked_library()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_locked_library;
        if (input->ExpectTag(16)) goto parse_own_library_locked_by;
        break;
      }

      // optional uint32 own_library_locked_by = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_own_library_locked_by:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &own_library_locked_by_)));
          set_has_own_library_locked_by();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientSharedLibraryLockStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgClientSharedLibraryLockStatus.LockedLibrary locked_library = 1;
  for (int i = 0; i < this->locked_library_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->locked_library(i), output);
  }

  // optional uint32 own_library_locked_by = 2;
  if (has_own_library_locked_by()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->own_library_locked_by(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientSharedLibraryLockStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgClientSharedLibraryLockStatus.LockedLibrary locked_library = 1;
  for (int i = 0; i < this->locked_library_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->locked_library(i), target);
  }

  // optional uint32 own_library_locked_by = 2;
  if (has_own_library_locked_by()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->own_library_locked_by(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientSharedLibraryLockStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 own_library_locked_by = 2;
    if (has_own_library_locked_by()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->own_library_locked_by());
    }

  }
  // repeated .CMsgClientSharedLibraryLockStatus.LockedLibrary locked_library = 1;
  total_size += 1 * this->locked_library_size();
  for (int i = 0; i < this->locked_library_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->locked_library(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientSharedLibraryLockStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientSharedLibraryLockStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientSharedLibraryLockStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientSharedLibraryLockStatus::MergeFrom(const CMsgClientSharedLibraryLockStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  locked_library_.MergeFrom(from.locked_library_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_own_library_locked_by()) {
      set_own_library_locked_by(from.own_library_locked_by());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientSharedLibraryLockStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSharedLibraryLockStatus::CopyFrom(const CMsgClientSharedLibraryLockStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSharedLibraryLockStatus::IsInitialized() const {

  return true;
}

void CMsgClientSharedLibraryLockStatus::Swap(CMsgClientSharedLibraryLockStatus* other) {
  if (other != this) {
    locked_library_.Swap(&other->locked_library_);
    std::swap(own_library_locked_by_, other->own_library_locked_by_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientSharedLibraryLockStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientSharedLibraryLockStatus_descriptor_;
  metadata.reflection = CMsgClientSharedLibraryLockStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientSharedLibraryStopPlaying_StopApp::kAppIdFieldNumber;
const int CMsgClientSharedLibraryStopPlaying_StopApp::kOwnerIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientSharedLibraryStopPlaying_StopApp::CMsgClientSharedLibraryStopPlaying_StopApp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientSharedLibraryStopPlaying_StopApp::InitAsDefaultInstance() {
}

CMsgClientSharedLibraryStopPlaying_StopApp::CMsgClientSharedLibraryStopPlaying_StopApp(const CMsgClientSharedLibraryStopPlaying_StopApp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientSharedLibraryStopPlaying_StopApp::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  owner_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientSharedLibraryStopPlaying_StopApp::~CMsgClientSharedLibraryStopPlaying_StopApp() {
  SharedDtor();
}

void CMsgClientSharedLibraryStopPlaying_StopApp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientSharedLibraryStopPlaying_StopApp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientSharedLibraryStopPlaying_StopApp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientSharedLibraryStopPlaying_StopApp_descriptor_;
}

const CMsgClientSharedLibraryStopPlaying_StopApp& CMsgClientSharedLibraryStopPlaying_StopApp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientSharedLibraryStopPlaying_StopApp* CMsgClientSharedLibraryStopPlaying_StopApp::default_instance_ = NULL;

CMsgClientSharedLibraryStopPlaying_StopApp* CMsgClientSharedLibraryStopPlaying_StopApp::New() const {
  return new CMsgClientSharedLibraryStopPlaying_StopApp;
}

void CMsgClientSharedLibraryStopPlaying_StopApp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    owner_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientSharedLibraryStopPlaying_StopApp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_owner_id;
        break;
      }

      // optional uint32 owner_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_owner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_id_)));
          set_has_owner_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientSharedLibraryStopPlaying_StopApp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional uint32 owner_id = 2;
  if (has_owner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->owner_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientSharedLibraryStopPlaying_StopApp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional uint32 owner_id = 2;
  if (has_owner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->owner_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientSharedLibraryStopPlaying_StopApp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 owner_id = 2;
    if (has_owner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientSharedLibraryStopPlaying_StopApp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientSharedLibraryStopPlaying_StopApp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientSharedLibraryStopPlaying_StopApp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientSharedLibraryStopPlaying_StopApp::MergeFrom(const CMsgClientSharedLibraryStopPlaying_StopApp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_owner_id()) {
      set_owner_id(from.owner_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientSharedLibraryStopPlaying_StopApp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSharedLibraryStopPlaying_StopApp::CopyFrom(const CMsgClientSharedLibraryStopPlaying_StopApp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSharedLibraryStopPlaying_StopApp::IsInitialized() const {

  return true;
}

void CMsgClientSharedLibraryStopPlaying_StopApp::Swap(CMsgClientSharedLibraryStopPlaying_StopApp* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(owner_id_, other->owner_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientSharedLibraryStopPlaying_StopApp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientSharedLibraryStopPlaying_StopApp_descriptor_;
  metadata.reflection = CMsgClientSharedLibraryStopPlaying_StopApp_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientSharedLibraryStopPlaying::kSecondsLeftFieldNumber;
const int CMsgClientSharedLibraryStopPlaying::kStopAppsFieldNumber;
#endif  // !_MSC_VER

CMsgClientSharedLibraryStopPlaying::CMsgClientSharedLibraryStopPlaying()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientSharedLibraryStopPlaying::InitAsDefaultInstance() {
}

CMsgClientSharedLibraryStopPlaying::CMsgClientSharedLibraryStopPlaying(const CMsgClientSharedLibraryStopPlaying& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientSharedLibraryStopPlaying::SharedCtor() {
  _cached_size_ = 0;
  seconds_left_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientSharedLibraryStopPlaying::~CMsgClientSharedLibraryStopPlaying() {
  SharedDtor();
}

void CMsgClientSharedLibraryStopPlaying::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientSharedLibraryStopPlaying::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientSharedLibraryStopPlaying::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientSharedLibraryStopPlaying_descriptor_;
}

const CMsgClientSharedLibraryStopPlaying& CMsgClientSharedLibraryStopPlaying::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientSharedLibraryStopPlaying* CMsgClientSharedLibraryStopPlaying::default_instance_ = NULL;

CMsgClientSharedLibraryStopPlaying* CMsgClientSharedLibraryStopPlaying::New() const {
  return new CMsgClientSharedLibraryStopPlaying;
}

void CMsgClientSharedLibraryStopPlaying::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seconds_left_ = 0;
  }
  stop_apps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientSharedLibraryStopPlaying::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seconds_left = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seconds_left_)));
          set_has_seconds_left();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stop_apps;
        break;
      }

      // repeated .CMsgClientSharedLibraryStopPlaying.StopApp stop_apps = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stop_apps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stop_apps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stop_apps;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientSharedLibraryStopPlaying::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seconds_left = 1;
  if (has_seconds_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seconds_left(), output);
  }

  // repeated .CMsgClientSharedLibraryStopPlaying.StopApp stop_apps = 2;
  for (int i = 0; i < this->stop_apps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stop_apps(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientSharedLibraryStopPlaying::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seconds_left = 1;
  if (has_seconds_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seconds_left(), target);
  }

  // repeated .CMsgClientSharedLibraryStopPlaying.StopApp stop_apps = 2;
  for (int i = 0; i < this->stop_apps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stop_apps(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientSharedLibraryStopPlaying::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seconds_left = 1;
    if (has_seconds_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seconds_left());
    }

  }
  // repeated .CMsgClientSharedLibraryStopPlaying.StopApp stop_apps = 2;
  total_size += 1 * this->stop_apps_size();
  for (int i = 0; i < this->stop_apps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stop_apps(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientSharedLibraryStopPlaying::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientSharedLibraryStopPlaying* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientSharedLibraryStopPlaying*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientSharedLibraryStopPlaying::MergeFrom(const CMsgClientSharedLibraryStopPlaying& from) {
  GOOGLE_CHECK_NE(&from, this);
  stop_apps_.MergeFrom(from.stop_apps_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seconds_left()) {
      set_seconds_left(from.seconds_left());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientSharedLibraryStopPlaying::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSharedLibraryStopPlaying::CopyFrom(const CMsgClientSharedLibraryStopPlaying& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSharedLibraryStopPlaying::IsInitialized() const {

  return true;
}

void CMsgClientSharedLibraryStopPlaying::Swap(CMsgClientSharedLibraryStopPlaying* other) {
  if (other != this) {
    std::swap(seconds_left_, other->seconds_left_);
    stop_apps_.Swap(&other->stop_apps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientSharedLibraryStopPlaying::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientSharedLibraryStopPlaying_descriptor_;
  metadata.reflection = CMsgClientSharedLibraryStopPlaying_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientServiceCall::kSysidRoutingFieldNumber;
const int CMsgClientServiceCall::kCallHandleFieldNumber;
const int CMsgClientServiceCall::kModuleCrcFieldNumber;
const int CMsgClientServiceCall::kModuleHashFieldNumber;
const int CMsgClientServiceCall::kFunctionIdFieldNumber;
const int CMsgClientServiceCall::kCubOutputMaxFieldNumber;
const int CMsgClientServiceCall::kFlagsFieldNumber;
const int CMsgClientServiceCall::kCallparameterFieldNumber;
const int CMsgClientServiceCall::kPingOnlyFieldNumber;
const int CMsgClientServiceCall::kMaxOutstandingCallsFieldNumber;
const int CMsgClientServiceCall::kAppIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientServiceCall::CMsgClientServiceCall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientServiceCall::InitAsDefaultInstance() {
}

CMsgClientServiceCall::CMsgClientServiceCall(const CMsgClientServiceCall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientServiceCall::SharedCtor() {
  _cached_size_ = 0;
  sysid_routing_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  call_handle_ = 0u;
  module_crc_ = 0u;
  module_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  function_id_ = 0u;
  cub_output_max_ = 0u;
  flags_ = 0u;
  callparameter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ping_only_ = false;
  max_outstanding_calls_ = 0u;
  app_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientServiceCall::~CMsgClientServiceCall() {
  SharedDtor();
}

void CMsgClientServiceCall::SharedDtor() {
  if (sysid_routing_ != &::google::protobuf::internal::kEmptyString) {
    delete sysid_routing_;
  }
  if (module_hash_ != &::google::protobuf::internal::kEmptyString) {
    delete module_hash_;
  }
  if (callparameter_ != &::google::protobuf::internal::kEmptyString) {
    delete callparameter_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientServiceCall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientServiceCall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientServiceCall_descriptor_;
}

const CMsgClientServiceCall& CMsgClientServiceCall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientServiceCall* CMsgClientServiceCall::default_instance_ = NULL;

CMsgClientServiceCall* CMsgClientServiceCall::New() const {
  return new CMsgClientServiceCall;
}

void CMsgClientServiceCall::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sysid_routing()) {
      if (sysid_routing_ != &::google::protobuf::internal::kEmptyString) {
        sysid_routing_->clear();
      }
    }
    call_handle_ = 0u;
    module_crc_ = 0u;
    if (has_module_hash()) {
      if (module_hash_ != &::google::protobuf::internal::kEmptyString) {
        module_hash_->clear();
      }
    }
    function_id_ = 0u;
    cub_output_max_ = 0u;
    flags_ = 0u;
    if (has_callparameter()) {
      if (callparameter_ != &::google::protobuf::internal::kEmptyString) {
        callparameter_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ping_only_ = false;
    max_outstanding_calls_ = 0u;
    app_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientServiceCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes sysid_routing = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sysid_routing()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_call_handle;
        break;
      }

      // optional uint32 call_handle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_call_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &call_handle_)));
          set_has_call_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_module_crc;
        break;
      }

      // optional uint32 module_crc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_module_crc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &module_crc_)));
          set_has_module_crc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_module_hash;
        break;
      }

      // optional bytes module_hash = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_module_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_module_hash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_function_id;
        break;
      }

      // optional uint32 function_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_function_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &function_id_)));
          set_has_function_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cub_output_max;
        break;
      }

      // optional uint32 cub_output_max = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cub_output_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cub_output_max_)));
          set_has_cub_output_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_callparameter;
        break;
      }

      // optional bytes callparameter = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_callparameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_callparameter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ping_only;
        break;
      }

      // optional bool ping_only = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ping_only_)));
          set_has_ping_only();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_max_outstanding_calls;
        break;
      }

      // optional uint32 max_outstanding_calls = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_outstanding_calls:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_outstanding_calls_)));
          set_has_max_outstanding_calls();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_app_id;
        break;
      }

      // optional uint32 app_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientServiceCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes sysid_routing = 1;
  if (has_sysid_routing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->sysid_routing(), output);
  }

  // optional uint32 call_handle = 2;
  if (has_call_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->call_handle(), output);
  }

  // optional uint32 module_crc = 3;
  if (has_module_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->module_crc(), output);
  }

  // optional bytes module_hash = 4;
  if (has_module_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->module_hash(), output);
  }

  // optional uint32 function_id = 5;
  if (has_function_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->function_id(), output);
  }

  // optional uint32 cub_output_max = 6;
  if (has_cub_output_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->cub_output_max(), output);
  }

  // optional uint32 flags = 7;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->flags(), output);
  }

  // optional bytes callparameter = 8;
  if (has_callparameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->callparameter(), output);
  }

  // optional bool ping_only = 9;
  if (has_ping_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->ping_only(), output);
  }

  // optional uint32 max_outstanding_calls = 10;
  if (has_max_outstanding_calls()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->max_outstanding_calls(), output);
  }

  // optional uint32 app_id = 11;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->app_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientServiceCall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes sysid_routing = 1;
  if (has_sysid_routing()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->sysid_routing(), target);
  }

  // optional uint32 call_handle = 2;
  if (has_call_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->call_handle(), target);
  }

  // optional uint32 module_crc = 3;
  if (has_module_crc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->module_crc(), target);
  }

  // optional bytes module_hash = 4;
  if (has_module_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->module_hash(), target);
  }

  // optional uint32 function_id = 5;
  if (has_function_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->function_id(), target);
  }

  // optional uint32 cub_output_max = 6;
  if (has_cub_output_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->cub_output_max(), target);
  }

  // optional uint32 flags = 7;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->flags(), target);
  }

  // optional bytes callparameter = 8;
  if (has_callparameter()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->callparameter(), target);
  }

  // optional bool ping_only = 9;
  if (has_ping_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->ping_only(), target);
  }

  // optional uint32 max_outstanding_calls = 10;
  if (has_max_outstanding_calls()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->max_outstanding_calls(), target);
  }

  // optional uint32 app_id = 11;
  if (has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->app_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientServiceCall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes sysid_routing = 1;
    if (has_sysid_routing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sysid_routing());
    }

    // optional uint32 call_handle = 2;
    if (has_call_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->call_handle());
    }

    // optional uint32 module_crc = 3;
    if (has_module_crc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->module_crc());
    }

    // optional bytes module_hash = 4;
    if (has_module_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->module_hash());
    }

    // optional uint32 function_id = 5;
    if (has_function_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->function_id());
    }

    // optional uint32 cub_output_max = 6;
    if (has_cub_output_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cub_output_max());
    }

    // optional uint32 flags = 7;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional bytes callparameter = 8;
    if (has_callparameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->callparameter());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool ping_only = 9;
    if (has_ping_only()) {
      total_size += 1 + 1;
    }

    // optional uint32 max_outstanding_calls = 10;
    if (has_max_outstanding_calls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_outstanding_calls());
    }

    // optional uint32 app_id = 11;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientServiceCall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientServiceCall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientServiceCall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientServiceCall::MergeFrom(const CMsgClientServiceCall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sysid_routing()) {
      set_sysid_routing(from.sysid_routing());
    }
    if (from.has_call_handle()) {
      set_call_handle(from.call_handle());
    }
    if (from.has_module_crc()) {
      set_module_crc(from.module_crc());
    }
    if (from.has_module_hash()) {
      set_module_hash(from.module_hash());
    }
    if (from.has_function_id()) {
      set_function_id(from.function_id());
    }
    if (from.has_cub_output_max()) {
      set_cub_output_max(from.cub_output_max());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_callparameter()) {
      set_callparameter(from.callparameter());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ping_only()) {
      set_ping_only(from.ping_only());
    }
    if (from.has_max_outstanding_calls()) {
      set_max_outstanding_calls(from.max_outstanding_calls());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientServiceCall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientServiceCall::CopyFrom(const CMsgClientServiceCall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientServiceCall::IsInitialized() const {

  return true;
}

void CMsgClientServiceCall::Swap(CMsgClientServiceCall* other) {
  if (other != this) {
    std::swap(sysid_routing_, other->sysid_routing_);
    std::swap(call_handle_, other->call_handle_);
    std::swap(module_crc_, other->module_crc_);
    std::swap(module_hash_, other->module_hash_);
    std::swap(function_id_, other->function_id_);
    std::swap(cub_output_max_, other->cub_output_max_);
    std::swap(flags_, other->flags_);
    std::swap(callparameter_, other->callparameter_);
    std::swap(ping_only_, other->ping_only_);
    std::swap(max_outstanding_calls_, other->max_outstanding_calls_);
    std::swap(app_id_, other->app_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientServiceCall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientServiceCall_descriptor_;
  metadata.reflection = CMsgClientServiceCall_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientServiceModule::kModuleCrcFieldNumber;
const int CMsgClientServiceModule::kModuleHashFieldNumber;
const int CMsgClientServiceModule::kModuleContentFieldNumber;
#endif  // !_MSC_VER

CMsgClientServiceModule::CMsgClientServiceModule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientServiceModule::InitAsDefaultInstance() {
}

CMsgClientServiceModule::CMsgClientServiceModule(const CMsgClientServiceModule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientServiceModule::SharedCtor() {
  _cached_size_ = 0;
  module_crc_ = 0u;
  module_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  module_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientServiceModule::~CMsgClientServiceModule() {
  SharedDtor();
}

void CMsgClientServiceModule::SharedDtor() {
  if (module_hash_ != &::google::protobuf::internal::kEmptyString) {
    delete module_hash_;
  }
  if (module_content_ != &::google::protobuf::internal::kEmptyString) {
    delete module_content_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientServiceModule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientServiceModule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientServiceModule_descriptor_;
}

const CMsgClientServiceModule& CMsgClientServiceModule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientServiceModule* CMsgClientServiceModule::default_instance_ = NULL;

CMsgClientServiceModule* CMsgClientServiceModule::New() const {
  return new CMsgClientServiceModule;
}

void CMsgClientServiceModule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    module_crc_ = 0u;
    if (has_module_hash()) {
      if (module_hash_ != &::google::protobuf::internal::kEmptyString) {
        module_hash_->clear();
      }
    }
    if (has_module_content()) {
      if (module_content_ != &::google::protobuf::internal::kEmptyString) {
        module_content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientServiceModule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 module_crc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &module_crc_)));
          set_has_module_crc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_module_hash;
        break;
      }

      // optional bytes module_hash = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_module_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_module_hash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_module_content;
        break;
      }

      // optional bytes module_content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_module_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_module_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientServiceModule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 module_crc = 1;
  if (has_module_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->module_crc(), output);
  }

  // optional bytes module_hash = 2;
  if (has_module_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->module_hash(), output);
  }

  // optional bytes module_content = 3;
  if (has_module_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->module_content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientServiceModule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 module_crc = 1;
  if (has_module_crc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->module_crc(), target);
  }

  // optional bytes module_hash = 2;
  if (has_module_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->module_hash(), target);
  }

  // optional bytes module_content = 3;
  if (has_module_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->module_content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientServiceModule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 module_crc = 1;
    if (has_module_crc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->module_crc());
    }

    // optional bytes module_hash = 2;
    if (has_module_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->module_hash());
    }

    // optional bytes module_content = 3;
    if (has_module_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->module_content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientServiceModule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientServiceModule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientServiceModule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientServiceModule::MergeFrom(const CMsgClientServiceModule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_module_crc()) {
      set_module_crc(from.module_crc());
    }
    if (from.has_module_hash()) {
      set_module_hash(from.module_hash());
    }
    if (from.has_module_content()) {
      set_module_content(from.module_content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientServiceModule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientServiceModule::CopyFrom(const CMsgClientServiceModule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientServiceModule::IsInitialized() const {

  return true;
}

void CMsgClientServiceModule::Swap(CMsgClientServiceModule* other) {
  if (other != this) {
    std::swap(module_crc_, other->module_crc_);
    std::swap(module_hash_, other->module_hash_);
    std::swap(module_content_, other->module_content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientServiceModule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientServiceModule_descriptor_;
  metadata.reflection = CMsgClientServiceModule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientServiceCallResponse::kSysidRoutingFieldNumber;
const int CMsgClientServiceCallResponse::kCallHandleFieldNumber;
const int CMsgClientServiceCallResponse::kModuleCrcFieldNumber;
const int CMsgClientServiceCallResponse::kModuleHashFieldNumber;
const int CMsgClientServiceCallResponse::kEcallresultFieldNumber;
const int CMsgClientServiceCallResponse::kResultContentFieldNumber;
const int CMsgClientServiceCallResponse::kOsVersionInfoFieldNumber;
const int CMsgClientServiceCallResponse::kSystemInfoFieldNumber;
const int CMsgClientServiceCallResponse::kLoadAddressFieldNumber;
const int CMsgClientServiceCallResponse::kExceptionRecordFieldNumber;
const int CMsgClientServiceCallResponse::kPortableOsVersionInfoFieldNumber;
const int CMsgClientServiceCallResponse::kPortableSystemInfoFieldNumber;
const int CMsgClientServiceCallResponse::kWasConvertedFieldNumber;
const int CMsgClientServiceCallResponse::kInternalResultFieldNumber;
const int CMsgClientServiceCallResponse::kCurrentCountFieldNumber;
const int CMsgClientServiceCallResponse::kLastCallHandleFieldNumber;
const int CMsgClientServiceCallResponse::kLastCallModuleCrcFieldNumber;
const int CMsgClientServiceCallResponse::kLastCallSysidRoutingFieldNumber;
const int CMsgClientServiceCallResponse::kLastEcallresultFieldNumber;
const int CMsgClientServiceCallResponse::kLastCallissueDeltaFieldNumber;
const int CMsgClientServiceCallResponse::kLastCallcompleteDeltaFieldNumber;
#endif  // !_MSC_VER

CMsgClientServiceCallResponse::CMsgClientServiceCallResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientServiceCallResponse::InitAsDefaultInstance() {
}

CMsgClientServiceCallResponse::CMsgClientServiceCallResponse(const CMsgClientServiceCallResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientServiceCallResponse::SharedCtor() {
  _cached_size_ = 0;
  sysid_routing_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  call_handle_ = 0u;
  module_crc_ = 0u;
  module_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ecallresult_ = 0u;
  result_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  os_version_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  system_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  load_address_ = GOOGLE_ULONGLONG(0);
  exception_record_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  portable_os_version_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  portable_system_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  was_converted_ = false;
  internal_result_ = 0u;
  current_count_ = 0u;
  last_call_handle_ = 0u;
  last_call_module_crc_ = 0u;
  last_call_sysid_routing_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  last_ecallresult_ = 0u;
  last_callissue_delta_ = 0u;
  last_callcomplete_delta_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientServiceCallResponse::~CMsgClientServiceCallResponse() {
  SharedDtor();
}

void CMsgClientServiceCallResponse::SharedDtor() {
  if (sysid_routing_ != &::google::protobuf::internal::kEmptyString) {
    delete sysid_routing_;
  }
  if (module_hash_ != &::google::protobuf::internal::kEmptyString) {
    delete module_hash_;
  }
  if (result_content_ != &::google::protobuf::internal::kEmptyString) {
    delete result_content_;
  }
  if (os_version_info_ != &::google::protobuf::internal::kEmptyString) {
    delete os_version_info_;
  }
  if (system_info_ != &::google::protobuf::internal::kEmptyString) {
    delete system_info_;
  }
  if (exception_record_ != &::google::protobuf::internal::kEmptyString) {
    delete exception_record_;
  }
  if (portable_os_version_info_ != &::google::protobuf::internal::kEmptyString) {
    delete portable_os_version_info_;
  }
  if (portable_system_info_ != &::google::protobuf::internal::kEmptyString) {
    delete portable_system_info_;
  }
  if (last_call_sysid_routing_ != &::google::protobuf::internal::kEmptyString) {
    delete last_call_sysid_routing_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientServiceCallResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientServiceCallResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientServiceCallResponse_descriptor_;
}

const CMsgClientServiceCallResponse& CMsgClientServiceCallResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientServiceCallResponse* CMsgClientServiceCallResponse::default_instance_ = NULL;

CMsgClientServiceCallResponse* CMsgClientServiceCallResponse::New() const {
  return new CMsgClientServiceCallResponse;
}

void CMsgClientServiceCallResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sysid_routing()) {
      if (sysid_routing_ != &::google::protobuf::internal::kEmptyString) {
        sysid_routing_->clear();
      }
    }
    call_handle_ = 0u;
    module_crc_ = 0u;
    if (has_module_hash()) {
      if (module_hash_ != &::google::protobuf::internal::kEmptyString) {
        module_hash_->clear();
      }
    }
    ecallresult_ = 0u;
    if (has_result_content()) {
      if (result_content_ != &::google::protobuf::internal::kEmptyString) {
        result_content_->clear();
      }
    }
    if (has_os_version_info()) {
      if (os_version_info_ != &::google::protobuf::internal::kEmptyString) {
        os_version_info_->clear();
      }
    }
    if (has_system_info()) {
      if (system_info_ != &::google::protobuf::internal::kEmptyString) {
        system_info_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    load_address_ = GOOGLE_ULONGLONG(0);
    if (has_exception_record()) {
      if (exception_record_ != &::google::protobuf::internal::kEmptyString) {
        exception_record_->clear();
      }
    }
    if (has_portable_os_version_info()) {
      if (portable_os_version_info_ != &::google::protobuf::internal::kEmptyString) {
        portable_os_version_info_->clear();
      }
    }
    if (has_portable_system_info()) {
      if (portable_system_info_ != &::google::protobuf::internal::kEmptyString) {
        portable_system_info_->clear();
      }
    }
    was_converted_ = false;
    internal_result_ = 0u;
    current_count_ = 0u;
    last_call_handle_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    last_call_module_crc_ = 0u;
    if (has_last_call_sysid_routing()) {
      if (last_call_sysid_routing_ != &::google::protobuf::internal::kEmptyString) {
        last_call_sysid_routing_->clear();
      }
    }
    last_ecallresult_ = 0u;
    last_callissue_delta_ = 0u;
    last_callcomplete_delta_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientServiceCallResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes sysid_routing = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sysid_routing()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_call_handle;
        break;
      }

      // optional uint32 call_handle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_call_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &call_handle_)));
          set_has_call_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_module_crc;
        break;
      }

      // optional uint32 module_crc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_module_crc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &module_crc_)));
          set_has_module_crc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_module_hash;
        break;
      }

      // optional bytes module_hash = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_module_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_module_hash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ecallresult;
        break;
      }

      // optional uint32 ecallresult = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ecallresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ecallresult_)));
          set_has_ecallresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_result_content;
        break;
      }

      // optional bytes result_content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_os_version_info;
        break;
      }

      // optional bytes os_version_info = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os_version_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_os_version_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_system_info;
        break;
      }

      // optional bytes system_info = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_system_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_system_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_load_address;
        break;
      }

      // optional fixed64 load_address = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_load_address:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &load_address_)));
          set_has_load_address();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_exception_record;
        break;
      }

      // optional bytes exception_record = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exception_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_exception_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_portable_os_version_info;
        break;
      }

      // optional bytes portable_os_version_info = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_portable_os_version_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_portable_os_version_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_portable_system_info;
        break;
      }

      // optional bytes portable_system_info = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_portable_system_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_portable_system_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_was_converted;
        break;
      }

      // optional bool was_converted = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_was_converted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &was_converted_)));
          set_has_was_converted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_internal_result;
        break;
      }

      // optional uint32 internal_result = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_internal_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &internal_result_)));
          set_has_internal_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_current_count;
        break;
      }

      // optional uint32 current_count = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_count_)));
          set_has_current_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_last_call_handle;
        break;
      }

      // optional uint32 last_call_handle = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_call_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_call_handle_)));
          set_has_last_call_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_last_call_module_crc;
        break;
      }

      // optional uint32 last_call_module_crc = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_call_module_crc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_call_module_crc_)));
          set_has_last_call_module_crc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_last_call_sysid_routing;
        break;
      }

      // optional bytes last_call_sysid_routing = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_call_sysid_routing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_last_call_sysid_routing()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_last_ecallresult;
        break;
      }

      // optional uint32 last_ecallresult = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_ecallresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_ecallresult_)));
          set_has_last_ecallresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_last_callissue_delta;
        break;
      }

      // optional uint32 last_callissue_delta = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_callissue_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_callissue_delta_)));
          set_has_last_callissue_delta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_last_callcomplete_delta;
        break;
      }

      // optional uint32 last_callcomplete_delta = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_callcomplete_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_callcomplete_delta_)));
          set_has_last_callcomplete_delta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientServiceCallResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes sysid_routing = 1;
  if (has_sysid_routing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->sysid_routing(), output);
  }

  // optional uint32 call_handle = 2;
  if (has_call_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->call_handle(), output);
  }

  // optional uint32 module_crc = 3;
  if (has_module_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->module_crc(), output);
  }

  // optional bytes module_hash = 4;
  if (has_module_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->module_hash(), output);
  }

  // optional uint32 ecallresult = 5;
  if (has_ecallresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ecallresult(), output);
  }

  // optional bytes result_content = 6;
  if (has_result_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->result_content(), output);
  }

  // optional bytes os_version_info = 7;
  if (has_os_version_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->os_version_info(), output);
  }

  // optional bytes system_info = 8;
  if (has_system_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->system_info(), output);
  }

  // optional fixed64 load_address = 9;
  if (has_load_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(9, this->load_address(), output);
  }

  // optional bytes exception_record = 10;
  if (has_exception_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->exception_record(), output);
  }

  // optional bytes portable_os_version_info = 11;
  if (has_portable_os_version_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->portable_os_version_info(), output);
  }

  // optional bytes portable_system_info = 12;
  if (has_portable_system_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      12, this->portable_system_info(), output);
  }

  // optional bool was_converted = 13;
  if (has_was_converted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->was_converted(), output);
  }

  // optional uint32 internal_result = 14;
  if (has_internal_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->internal_result(), output);
  }

  // optional uint32 current_count = 15;
  if (has_current_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->current_count(), output);
  }

  // optional uint32 last_call_handle = 16;
  if (has_last_call_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->last_call_handle(), output);
  }

  // optional uint32 last_call_module_crc = 17;
  if (has_last_call_module_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->last_call_module_crc(), output);
  }

  // optional bytes last_call_sysid_routing = 18;
  if (has_last_call_sysid_routing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      18, this->last_call_sysid_routing(), output);
  }

  // optional uint32 last_ecallresult = 19;
  if (has_last_ecallresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->last_ecallresult(), output);
  }

  // optional uint32 last_callissue_delta = 20;
  if (has_last_callissue_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->last_callissue_delta(), output);
  }

  // optional uint32 last_callcomplete_delta = 21;
  if (has_last_callcomplete_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->last_callcomplete_delta(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientServiceCallResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes sysid_routing = 1;
  if (has_sysid_routing()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->sysid_routing(), target);
  }

  // optional uint32 call_handle = 2;
  if (has_call_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->call_handle(), target);
  }

  // optional uint32 module_crc = 3;
  if (has_module_crc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->module_crc(), target);
  }

  // optional bytes module_hash = 4;
  if (has_module_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->module_hash(), target);
  }

  // optional uint32 ecallresult = 5;
  if (has_ecallresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ecallresult(), target);
  }

  // optional bytes result_content = 6;
  if (has_result_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->result_content(), target);
  }

  // optional bytes os_version_info = 7;
  if (has_os_version_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->os_version_info(), target);
  }

  // optional bytes system_info = 8;
  if (has_system_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->system_info(), target);
  }

  // optional fixed64 load_address = 9;
  if (has_load_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(9, this->load_address(), target);
  }

  // optional bytes exception_record = 10;
  if (has_exception_record()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->exception_record(), target);
  }

  // optional bytes portable_os_version_info = 11;
  if (has_portable_os_version_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->portable_os_version_info(), target);
  }

  // optional bytes portable_system_info = 12;
  if (has_portable_system_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->portable_system_info(), target);
  }

  // optional bool was_converted = 13;
  if (has_was_converted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->was_converted(), target);
  }

  // optional uint32 internal_result = 14;
  if (has_internal_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->internal_result(), target);
  }

  // optional uint32 current_count = 15;
  if (has_current_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->current_count(), target);
  }

  // optional uint32 last_call_handle = 16;
  if (has_last_call_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->last_call_handle(), target);
  }

  // optional uint32 last_call_module_crc = 17;
  if (has_last_call_module_crc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->last_call_module_crc(), target);
  }

  // optional bytes last_call_sysid_routing = 18;
  if (has_last_call_sysid_routing()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        18, this->last_call_sysid_routing(), target);
  }

  // optional uint32 last_ecallresult = 19;
  if (has_last_ecallresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->last_ecallresult(), target);
  }

  // optional uint32 last_callissue_delta = 20;
  if (has_last_callissue_delta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->last_callissue_delta(), target);
  }

  // optional uint32 last_callcomplete_delta = 21;
  if (has_last_callcomplete_delta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->last_callcomplete_delta(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientServiceCallResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes sysid_routing = 1;
    if (has_sysid_routing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sysid_routing());
    }

    // optional uint32 call_handle = 2;
    if (has_call_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->call_handle());
    }

    // optional uint32 module_crc = 3;
    if (has_module_crc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->module_crc());
    }

    // optional bytes module_hash = 4;
    if (has_module_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->module_hash());
    }

    // optional uint32 ecallresult = 5;
    if (has_ecallresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ecallresult());
    }

    // optional bytes result_content = 6;
    if (has_result_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result_content());
    }

    // optional bytes os_version_info = 7;
    if (has_os_version_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->os_version_info());
    }

    // optional bytes system_info = 8;
    if (has_system_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->system_info());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional fixed64 load_address = 9;
    if (has_load_address()) {
      total_size += 1 + 8;
    }

    // optional bytes exception_record = 10;
    if (has_exception_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->exception_record());
    }

    // optional bytes portable_os_version_info = 11;
    if (has_portable_os_version_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->portable_os_version_info());
    }

    // optional bytes portable_system_info = 12;
    if (has_portable_system_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->portable_system_info());
    }

    // optional bool was_converted = 13;
    if (has_was_converted()) {
      total_size += 1 + 1;
    }

    // optional uint32 internal_result = 14;
    if (has_internal_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->internal_result());
    }

    // optional uint32 current_count = 15;
    if (has_current_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_count());
    }

    // optional uint32 last_call_handle = 16;
    if (has_last_call_handle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_call_handle());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 last_call_module_crc = 17;
    if (has_last_call_module_crc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_call_module_crc());
    }

    // optional bytes last_call_sysid_routing = 18;
    if (has_last_call_sysid_routing()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->last_call_sysid_routing());
    }

    // optional uint32 last_ecallresult = 19;
    if (has_last_ecallresult()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_ecallresult());
    }

    // optional uint32 last_callissue_delta = 20;
    if (has_last_callissue_delta()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_callissue_delta());
    }

    // optional uint32 last_callcomplete_delta = 21;
    if (has_last_callcomplete_delta()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_callcomplete_delta());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientServiceCallResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientServiceCallResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientServiceCallResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientServiceCallResponse::MergeFrom(const CMsgClientServiceCallResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sysid_routing()) {
      set_sysid_routing(from.sysid_routing());
    }
    if (from.has_call_handle()) {
      set_call_handle(from.call_handle());
    }
    if (from.has_module_crc()) {
      set_module_crc(from.module_crc());
    }
    if (from.has_module_hash()) {
      set_module_hash(from.module_hash());
    }
    if (from.has_ecallresult()) {
      set_ecallresult(from.ecallresult());
    }
    if (from.has_result_content()) {
      set_result_content(from.result_content());
    }
    if (from.has_os_version_info()) {
      set_os_version_info(from.os_version_info());
    }
    if (from.has_system_info()) {
      set_system_info(from.system_info());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_load_address()) {
      set_load_address(from.load_address());
    }
    if (from.has_exception_record()) {
      set_exception_record(from.exception_record());
    }
    if (from.has_portable_os_version_info()) {
      set_portable_os_version_info(from.portable_os_version_info());
    }
    if (from.has_portable_system_info()) {
      set_portable_system_info(from.portable_system_info());
    }
    if (from.has_was_converted()) {
      set_was_converted(from.was_converted());
    }
    if (from.has_internal_result()) {
      set_internal_result(from.internal_result());
    }
    if (from.has_current_count()) {
      set_current_count(from.current_count());
    }
    if (from.has_last_call_handle()) {
      set_last_call_handle(from.last_call_handle());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_last_call_module_crc()) {
      set_last_call_module_crc(from.last_call_module_crc());
    }
    if (from.has_last_call_sysid_routing()) {
      set_last_call_sysid_routing(from.last_call_sysid_routing());
    }
    if (from.has_last_ecallresult()) {
      set_last_ecallresult(from.last_ecallresult());
    }
    if (from.has_last_callissue_delta()) {
      set_last_callissue_delta(from.last_callissue_delta());
    }
    if (from.has_last_callcomplete_delta()) {
      set_last_callcomplete_delta(from.last_callcomplete_delta());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientServiceCallResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientServiceCallResponse::CopyFrom(const CMsgClientServiceCallResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientServiceCallResponse::IsInitialized() const {

  return true;
}

void CMsgClientServiceCallResponse::Swap(CMsgClientServiceCallResponse* other) {
  if (other != this) {
    std::swap(sysid_routing_, other->sysid_routing_);
    std::swap(call_handle_, other->call_handle_);
    std::swap(module_crc_, other->module_crc_);
    std::swap(module_hash_, other->module_hash_);
    std::swap(ecallresult_, other->ecallresult_);
    std::swap(result_content_, other->result_content_);
    std::swap(os_version_info_, other->os_version_info_);
    std::swap(system_info_, other->system_info_);
    std::swap(load_address_, other->load_address_);
    std::swap(exception_record_, other->exception_record_);
    std::swap(portable_os_version_info_, other->portable_os_version_info_);
    std::swap(portable_system_info_, other->portable_system_info_);
    std::swap(was_converted_, other->was_converted_);
    std::swap(internal_result_, other->internal_result_);
    std::swap(current_count_, other->current_count_);
    std::swap(last_call_handle_, other->last_call_handle_);
    std::swap(last_call_module_crc_, other->last_call_module_crc_);
    std::swap(last_call_sysid_routing_, other->last_call_sysid_routing_);
    std::swap(last_ecallresult_, other->last_ecallresult_);
    std::swap(last_callissue_delta_, other->last_callissue_delta_);
    std::swap(last_callcomplete_delta_, other->last_callcomplete_delta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientServiceCallResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientServiceCallResponse_descriptor_;
  metadata.reflection = CMsgClientServiceCallResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgAMUnlockStreaming::CMsgAMUnlockStreaming()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgAMUnlockStreaming::InitAsDefaultInstance() {
}

CMsgAMUnlockStreaming::CMsgAMUnlockStreaming(const CMsgAMUnlockStreaming& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgAMUnlockStreaming::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgAMUnlockStreaming::~CMsgAMUnlockStreaming() {
  SharedDtor();
}

void CMsgAMUnlockStreaming::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgAMUnlockStreaming::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAMUnlockStreaming::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgAMUnlockStreaming_descriptor_;
}

const CMsgAMUnlockStreaming& CMsgAMUnlockStreaming::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgAMUnlockStreaming* CMsgAMUnlockStreaming::default_instance_ = NULL;

CMsgAMUnlockStreaming* CMsgAMUnlockStreaming::New() const {
  return new CMsgAMUnlockStreaming;
}

void CMsgAMUnlockStreaming::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgAMUnlockStreaming::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgAMUnlockStreaming::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgAMUnlockStreaming::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgAMUnlockStreaming::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAMUnlockStreaming::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgAMUnlockStreaming* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgAMUnlockStreaming*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgAMUnlockStreaming::MergeFrom(const CMsgAMUnlockStreaming& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgAMUnlockStreaming::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMUnlockStreaming::CopyFrom(const CMsgAMUnlockStreaming& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMUnlockStreaming::IsInitialized() const {

  return true;
}

void CMsgAMUnlockStreaming::Swap(CMsgAMUnlockStreaming* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgAMUnlockStreaming::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgAMUnlockStreaming_descriptor_;
  metadata.reflection = CMsgAMUnlockStreaming_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgAMUnlockStreamingResponse::kEresultFieldNumber;
const int CMsgAMUnlockStreamingResponse::kEncryptionKeyFieldNumber;
#endif  // !_MSC_VER

CMsgAMUnlockStreamingResponse::CMsgAMUnlockStreamingResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgAMUnlockStreamingResponse::InitAsDefaultInstance() {
}

CMsgAMUnlockStreamingResponse::CMsgAMUnlockStreamingResponse(const CMsgAMUnlockStreamingResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgAMUnlockStreamingResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  encryption_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgAMUnlockStreamingResponse::~CMsgAMUnlockStreamingResponse() {
  SharedDtor();
}

void CMsgAMUnlockStreamingResponse::SharedDtor() {
  if (encryption_key_ != &::google::protobuf::internal::kEmptyString) {
    delete encryption_key_;
  }
  if (this != default_instance_) {
  }
}

void CMsgAMUnlockStreamingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAMUnlockStreamingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgAMUnlockStreamingResponse_descriptor_;
}

const CMsgAMUnlockStreamingResponse& CMsgAMUnlockStreamingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgAMUnlockStreamingResponse* CMsgAMUnlockStreamingResponse::default_instance_ = NULL;

CMsgAMUnlockStreamingResponse* CMsgAMUnlockStreamingResponse::New() const {
  return new CMsgAMUnlockStreamingResponse;
}

void CMsgAMUnlockStreamingResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    if (has_encryption_key()) {
      if (encryption_key_ != &::google::protobuf::internal::kEmptyString) {
        encryption_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgAMUnlockStreamingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_encryption_key;
        break;
      }

      // optional bytes encryption_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encryption_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encryption_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgAMUnlockStreamingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional bytes encryption_key = 2;
  if (has_encryption_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->encryption_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgAMUnlockStreamingResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional bytes encryption_key = 2;
  if (has_encryption_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->encryption_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgAMUnlockStreamingResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional bytes encryption_key = 2;
    if (has_encryption_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encryption_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAMUnlockStreamingResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgAMUnlockStreamingResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgAMUnlockStreamingResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgAMUnlockStreamingResponse::MergeFrom(const CMsgAMUnlockStreamingResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_encryption_key()) {
      set_encryption_key(from.encryption_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgAMUnlockStreamingResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMUnlockStreamingResponse::CopyFrom(const CMsgAMUnlockStreamingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMUnlockStreamingResponse::IsInitialized() const {

  return true;
}

void CMsgAMUnlockStreamingResponse::Swap(CMsgAMUnlockStreamingResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(encryption_key_, other->encryption_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgAMUnlockStreamingResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgAMUnlockStreamingResponse_descriptor_;
  metadata.reflection = CMsgAMUnlockStreamingResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgAMUnlockHEVC::CMsgAMUnlockHEVC()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgAMUnlockHEVC::InitAsDefaultInstance() {
}

CMsgAMUnlockHEVC::CMsgAMUnlockHEVC(const CMsgAMUnlockHEVC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgAMUnlockHEVC::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgAMUnlockHEVC::~CMsgAMUnlockHEVC() {
  SharedDtor();
}

void CMsgAMUnlockHEVC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgAMUnlockHEVC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAMUnlockHEVC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgAMUnlockHEVC_descriptor_;
}

const CMsgAMUnlockHEVC& CMsgAMUnlockHEVC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgAMUnlockHEVC* CMsgAMUnlockHEVC::default_instance_ = NULL;

CMsgAMUnlockHEVC* CMsgAMUnlockHEVC::New() const {
  return new CMsgAMUnlockHEVC;
}

void CMsgAMUnlockHEVC::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgAMUnlockHEVC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgAMUnlockHEVC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgAMUnlockHEVC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgAMUnlockHEVC::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAMUnlockHEVC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgAMUnlockHEVC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgAMUnlockHEVC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgAMUnlockHEVC::MergeFrom(const CMsgAMUnlockHEVC& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgAMUnlockHEVC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMUnlockHEVC::CopyFrom(const CMsgAMUnlockHEVC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMUnlockHEVC::IsInitialized() const {

  return true;
}

void CMsgAMUnlockHEVC::Swap(CMsgAMUnlockHEVC* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgAMUnlockHEVC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgAMUnlockHEVC_descriptor_;
  metadata.reflection = CMsgAMUnlockHEVC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgAMUnlockHEVCResponse::kEresultFieldNumber;
#endif  // !_MSC_VER

CMsgAMUnlockHEVCResponse::CMsgAMUnlockHEVCResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgAMUnlockHEVCResponse::InitAsDefaultInstance() {
}

CMsgAMUnlockHEVCResponse::CMsgAMUnlockHEVCResponse(const CMsgAMUnlockHEVCResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgAMUnlockHEVCResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgAMUnlockHEVCResponse::~CMsgAMUnlockHEVCResponse() {
  SharedDtor();
}

void CMsgAMUnlockHEVCResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgAMUnlockHEVCResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAMUnlockHEVCResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgAMUnlockHEVCResponse_descriptor_;
}

const CMsgAMUnlockHEVCResponse& CMsgAMUnlockHEVCResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgAMUnlockHEVCResponse* CMsgAMUnlockHEVCResponse::default_instance_ = NULL;

CMsgAMUnlockHEVCResponse* CMsgAMUnlockHEVCResponse::New() const {
  return new CMsgAMUnlockHEVCResponse;
}

void CMsgAMUnlockHEVCResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgAMUnlockHEVCResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgAMUnlockHEVCResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgAMUnlockHEVCResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgAMUnlockHEVCResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAMUnlockHEVCResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgAMUnlockHEVCResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgAMUnlockHEVCResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgAMUnlockHEVCResponse::MergeFrom(const CMsgAMUnlockHEVCResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgAMUnlockHEVCResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMUnlockHEVCResponse::CopyFrom(const CMsgAMUnlockHEVCResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMUnlockHEVCResponse::IsInitialized() const {

  return true;
}

void CMsgAMUnlockHEVCResponse::Swap(CMsgAMUnlockHEVCResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgAMUnlockHEVCResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgAMUnlockHEVCResponse_descriptor_;
  metadata.reflection = CMsgAMUnlockHEVCResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientPlayingSessionState::kPlayingBlockedFieldNumber;
const int CMsgClientPlayingSessionState::kPlayingAppFieldNumber;
#endif  // !_MSC_VER

CMsgClientPlayingSessionState::CMsgClientPlayingSessionState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientPlayingSessionState::InitAsDefaultInstance() {
}

CMsgClientPlayingSessionState::CMsgClientPlayingSessionState(const CMsgClientPlayingSessionState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientPlayingSessionState::SharedCtor() {
  _cached_size_ = 0;
  playing_blocked_ = false;
  playing_app_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientPlayingSessionState::~CMsgClientPlayingSessionState() {
  SharedDtor();
}

void CMsgClientPlayingSessionState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientPlayingSessionState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientPlayingSessionState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientPlayingSessionState_descriptor_;
}

const CMsgClientPlayingSessionState& CMsgClientPlayingSessionState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientPlayingSessionState* CMsgClientPlayingSessionState::default_instance_ = NULL;

CMsgClientPlayingSessionState* CMsgClientPlayingSessionState::New() const {
  return new CMsgClientPlayingSessionState;
}

void CMsgClientPlayingSessionState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playing_blocked_ = false;
    playing_app_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientPlayingSessionState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool playing_blocked = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &playing_blocked_)));
          set_has_playing_blocked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playing_app;
        break;
      }

      // optional uint32 playing_app = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playing_app:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playing_app_)));
          set_has_playing_app();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientPlayingSessionState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool playing_blocked = 2;
  if (has_playing_blocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->playing_blocked(), output);
  }

  // optional uint32 playing_app = 3;
  if (has_playing_app()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->playing_app(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientPlayingSessionState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool playing_blocked = 2;
  if (has_playing_blocked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->playing_blocked(), target);
  }

  // optional uint32 playing_app = 3;
  if (has_playing_app()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->playing_app(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientPlayingSessionState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool playing_blocked = 2;
    if (has_playing_blocked()) {
      total_size += 1 + 1;
    }

    // optional uint32 playing_app = 3;
    if (has_playing_app()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playing_app());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientPlayingSessionState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientPlayingSessionState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientPlayingSessionState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientPlayingSessionState::MergeFrom(const CMsgClientPlayingSessionState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playing_blocked()) {
      set_playing_blocked(from.playing_blocked());
    }
    if (from.has_playing_app()) {
      set_playing_app(from.playing_app());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientPlayingSessionState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPlayingSessionState::CopyFrom(const CMsgClientPlayingSessionState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPlayingSessionState::IsInitialized() const {

  return true;
}

void CMsgClientPlayingSessionState::Swap(CMsgClientPlayingSessionState* other) {
  if (other != this) {
    std::swap(playing_blocked_, other->playing_blocked_);
    std::swap(playing_app_, other->playing_app_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientPlayingSessionState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientPlayingSessionState_descriptor_;
  metadata.reflection = CMsgClientPlayingSessionState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientKickPlayingSession::kOnlyStopGameFieldNumber;
#endif  // !_MSC_VER

CMsgClientKickPlayingSession::CMsgClientKickPlayingSession()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientKickPlayingSession::InitAsDefaultInstance() {
}

CMsgClientKickPlayingSession::CMsgClientKickPlayingSession(const CMsgClientKickPlayingSession& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientKickPlayingSession::SharedCtor() {
  _cached_size_ = 0;
  only_stop_game_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientKickPlayingSession::~CMsgClientKickPlayingSession() {
  SharedDtor();
}

void CMsgClientKickPlayingSession::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientKickPlayingSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientKickPlayingSession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientKickPlayingSession_descriptor_;
}

const CMsgClientKickPlayingSession& CMsgClientKickPlayingSession::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientKickPlayingSession* CMsgClientKickPlayingSession::default_instance_ = NULL;

CMsgClientKickPlayingSession* CMsgClientKickPlayingSession::New() const {
  return new CMsgClientKickPlayingSession;
}

void CMsgClientKickPlayingSession::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    only_stop_game_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientKickPlayingSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool only_stop_game = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_stop_game_)));
          set_has_only_stop_game();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientKickPlayingSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool only_stop_game = 1;
  if (has_only_stop_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->only_stop_game(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientKickPlayingSession::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool only_stop_game = 1;
  if (has_only_stop_game()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->only_stop_game(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientKickPlayingSession::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool only_stop_game = 1;
    if (has_only_stop_game()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientKickPlayingSession::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientKickPlayingSession* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientKickPlayingSession*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientKickPlayingSession::MergeFrom(const CMsgClientKickPlayingSession& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_only_stop_game()) {
      set_only_stop_game(from.only_stop_game());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientKickPlayingSession::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientKickPlayingSession::CopyFrom(const CMsgClientKickPlayingSession& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientKickPlayingSession::IsInitialized() const {

  return true;
}

void CMsgClientKickPlayingSession::Swap(CMsgClientKickPlayingSession* other) {
  if (other != this) {
    std::swap(only_stop_game_, other->only_stop_game_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientKickPlayingSession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientKickPlayingSession_descriptor_;
  metadata.reflection = CMsgClientKickPlayingSession_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientVoiceCallPreAuthorize::kCallerSteamidFieldNumber;
const int CMsgClientVoiceCallPreAuthorize::kReceiverSteamidFieldNumber;
const int CMsgClientVoiceCallPreAuthorize::kCallerIdFieldNumber;
const int CMsgClientVoiceCallPreAuthorize::kHangupFieldNumber;
#endif  // !_MSC_VER

CMsgClientVoiceCallPreAuthorize::CMsgClientVoiceCallPreAuthorize()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientVoiceCallPreAuthorize::InitAsDefaultInstance() {
}

CMsgClientVoiceCallPreAuthorize::CMsgClientVoiceCallPreAuthorize(const CMsgClientVoiceCallPreAuthorize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientVoiceCallPreAuthorize::SharedCtor() {
  _cached_size_ = 0;
  caller_steamid_ = GOOGLE_ULONGLONG(0);
  receiver_steamid_ = GOOGLE_ULONGLONG(0);
  caller_id_ = 0;
  hangup_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientVoiceCallPreAuthorize::~CMsgClientVoiceCallPreAuthorize() {
  SharedDtor();
}

void CMsgClientVoiceCallPreAuthorize::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientVoiceCallPreAuthorize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientVoiceCallPreAuthorize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientVoiceCallPreAuthorize_descriptor_;
}

const CMsgClientVoiceCallPreAuthorize& CMsgClientVoiceCallPreAuthorize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientVoiceCallPreAuthorize* CMsgClientVoiceCallPreAuthorize::default_instance_ = NULL;

CMsgClientVoiceCallPreAuthorize* CMsgClientVoiceCallPreAuthorize::New() const {
  return new CMsgClientVoiceCallPreAuthorize;
}

void CMsgClientVoiceCallPreAuthorize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    caller_steamid_ = GOOGLE_ULONGLONG(0);
    receiver_steamid_ = GOOGLE_ULONGLONG(0);
    caller_id_ = 0;
    hangup_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientVoiceCallPreAuthorize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 caller_steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &caller_steamid_)));
          set_has_caller_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_receiver_steamid;
        break;
      }

      // optional fixed64 receiver_steamid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_receiver_steamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &receiver_steamid_)));
          set_has_receiver_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_caller_id;
        break;
      }

      // optional int32 caller_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_caller_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &caller_id_)));
          set_has_caller_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hangup;
        break;
      }

      // optional bool hangup = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hangup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hangup_)));
          set_has_hangup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientVoiceCallPreAuthorize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 caller_steamid = 1;
  if (has_caller_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->caller_steamid(), output);
  }

  // optional fixed64 receiver_steamid = 2;
  if (has_receiver_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->receiver_steamid(), output);
  }

  // optional int32 caller_id = 3;
  if (has_caller_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->caller_id(), output);
  }

  // optional bool hangup = 4;
  if (has_hangup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->hangup(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientVoiceCallPreAuthorize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 caller_steamid = 1;
  if (has_caller_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->caller_steamid(), target);
  }

  // optional fixed64 receiver_steamid = 2;
  if (has_receiver_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->receiver_steamid(), target);
  }

  // optional int32 caller_id = 3;
  if (has_caller_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->caller_id(), target);
  }

  // optional bool hangup = 4;
  if (has_hangup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->hangup(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientVoiceCallPreAuthorize::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 caller_steamid = 1;
    if (has_caller_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 receiver_steamid = 2;
    if (has_receiver_steamid()) {
      total_size += 1 + 8;
    }

    // optional int32 caller_id = 3;
    if (has_caller_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->caller_id());
    }

    // optional bool hangup = 4;
    if (has_hangup()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientVoiceCallPreAuthorize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientVoiceCallPreAuthorize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientVoiceCallPreAuthorize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientVoiceCallPreAuthorize::MergeFrom(const CMsgClientVoiceCallPreAuthorize& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_caller_steamid()) {
      set_caller_steamid(from.caller_steamid());
    }
    if (from.has_receiver_steamid()) {
      set_receiver_steamid(from.receiver_steamid());
    }
    if (from.has_caller_id()) {
      set_caller_id(from.caller_id());
    }
    if (from.has_hangup()) {
      set_hangup(from.hangup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientVoiceCallPreAuthorize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientVoiceCallPreAuthorize::CopyFrom(const CMsgClientVoiceCallPreAuthorize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientVoiceCallPreAuthorize::IsInitialized() const {

  return true;
}

void CMsgClientVoiceCallPreAuthorize::Swap(CMsgClientVoiceCallPreAuthorize* other) {
  if (other != this) {
    std::swap(caller_steamid_, other->caller_steamid_);
    std::swap(receiver_steamid_, other->receiver_steamid_);
    std::swap(caller_id_, other->caller_id_);
    std::swap(hangup_, other->hangup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientVoiceCallPreAuthorize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientVoiceCallPreAuthorize_descriptor_;
  metadata.reflection = CMsgClientVoiceCallPreAuthorize_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientVoiceCallPreAuthorizeResponse::kCallerSteamidFieldNumber;
const int CMsgClientVoiceCallPreAuthorizeResponse::kReceiverSteamidFieldNumber;
const int CMsgClientVoiceCallPreAuthorizeResponse::kEresultFieldNumber;
const int CMsgClientVoiceCallPreAuthorizeResponse::kCallerIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientVoiceCallPreAuthorizeResponse::CMsgClientVoiceCallPreAuthorizeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientVoiceCallPreAuthorizeResponse::InitAsDefaultInstance() {
}

CMsgClientVoiceCallPreAuthorizeResponse::CMsgClientVoiceCallPreAuthorizeResponse(const CMsgClientVoiceCallPreAuthorizeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientVoiceCallPreAuthorizeResponse::SharedCtor() {
  _cached_size_ = 0;
  caller_steamid_ = GOOGLE_ULONGLONG(0);
  receiver_steamid_ = GOOGLE_ULONGLONG(0);
  eresult_ = 2;
  caller_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientVoiceCallPreAuthorizeResponse::~CMsgClientVoiceCallPreAuthorizeResponse() {
  SharedDtor();
}

void CMsgClientVoiceCallPreAuthorizeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientVoiceCallPreAuthorizeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientVoiceCallPreAuthorizeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientVoiceCallPreAuthorizeResponse_descriptor_;
}

const CMsgClientVoiceCallPreAuthorizeResponse& CMsgClientVoiceCallPreAuthorizeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgClientVoiceCallPreAuthorizeResponse* CMsgClientVoiceCallPreAuthorizeResponse::default_instance_ = NULL;

CMsgClientVoiceCallPreAuthorizeResponse* CMsgClientVoiceCallPreAuthorizeResponse::New() const {
  return new CMsgClientVoiceCallPreAuthorizeResponse;
}

void CMsgClientVoiceCallPreAuthorizeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    caller_steamid_ = GOOGLE_ULONGLONG(0);
    receiver_steamid_ = GOOGLE_ULONGLONG(0);
    eresult_ = 2;
    caller_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientVoiceCallPreAuthorizeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 caller_steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &caller_steamid_)));
          set_has_caller_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_receiver_steamid;
        break;
      }

      // optional fixed64 receiver_steamid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_receiver_steamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &receiver_steamid_)));
          set_has_receiver_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_eresult;
        break;
      }

      // optional int32 eresult = 3 [default = 2];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_caller_id;
        break;
      }

      // optional int32 caller_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_caller_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &caller_id_)));
          set_has_caller_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientVoiceCallPreAuthorizeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 caller_steamid = 1;
  if (has_caller_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->caller_steamid(), output);
  }

  // optional fixed64 receiver_steamid = 2;
  if (has_receiver_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->receiver_steamid(), output);
  }

  // optional int32 eresult = 3 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->eresult(), output);
  }

  // optional int32 caller_id = 4;
  if (has_caller_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->caller_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientVoiceCallPreAuthorizeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 caller_steamid = 1;
  if (has_caller_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->caller_steamid(), target);
  }

  // optional fixed64 receiver_steamid = 2;
  if (has_receiver_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->receiver_steamid(), target);
  }

  // optional int32 eresult = 3 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->eresult(), target);
  }

  // optional int32 caller_id = 4;
  if (has_caller_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->caller_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientVoiceCallPreAuthorizeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 caller_steamid = 1;
    if (has_caller_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 receiver_steamid = 2;
    if (has_receiver_steamid()) {
      total_size += 1 + 8;
    }

    // optional int32 eresult = 3 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional int32 caller_id = 4;
    if (has_caller_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->caller_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientVoiceCallPreAuthorizeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientVoiceCallPreAuthorizeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientVoiceCallPreAuthorizeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientVoiceCallPreAuthorizeResponse::MergeFrom(const CMsgClientVoiceCallPreAuthorizeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_caller_steamid()) {
      set_caller_steamid(from.caller_steamid());
    }
    if (from.has_receiver_steamid()) {
      set_receiver_steamid(from.receiver_steamid());
    }
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_caller_id()) {
      set_caller_id(from.caller_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientVoiceCallPreAuthorizeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientVoiceCallPreAuthorizeResponse::CopyFrom(const CMsgClientVoiceCallPreAuthorizeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientVoiceCallPreAuthorizeResponse::IsInitialized() const {

  return true;
}

void CMsgClientVoiceCallPreAuthorizeResponse::Swap(CMsgClientVoiceCallPreAuthorizeResponse* other) {
  if (other != this) {
    std::swap(caller_steamid_, other->caller_steamid_);
    std::swap(receiver_steamid_, other->receiver_steamid_);
    std::swap(eresult_, other->eresult_);
    std::swap(caller_id_, other->caller_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientVoiceCallPreAuthorizeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientVoiceCallPreAuthorizeResponse_descriptor_;
  metadata.reflection = CMsgClientVoiceCallPreAuthorizeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgBadgeCraftedNotification::kAppidFieldNumber;
const int CMsgBadgeCraftedNotification::kBadgeLevelFieldNumber;
#endif  // !_MSC_VER

CMsgBadgeCraftedNotification::CMsgBadgeCraftedNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgBadgeCraftedNotification::InitAsDefaultInstance() {
}

CMsgBadgeCraftedNotification::CMsgBadgeCraftedNotification(const CMsgBadgeCraftedNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgBadgeCraftedNotification::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
  badge_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgBadgeCraftedNotification::~CMsgBadgeCraftedNotification() {
  SharedDtor();
}

void CMsgBadgeCraftedNotification::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgBadgeCraftedNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBadgeCraftedNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgBadgeCraftedNotification_descriptor_;
}

const CMsgBadgeCraftedNotification& CMsgBadgeCraftedNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5f2_2eproto();
  return *default_instance_;
}

CMsgBadgeCraftedNotification* CMsgBadgeCraftedNotification::default_instance_ = NULL;

CMsgBadgeCraftedNotification* CMsgBadgeCraftedNotification::New() const {
  return new CMsgBadgeCraftedNotification;
}

void CMsgBadgeCraftedNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0u;
    badge_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgBadgeCraftedNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_badge_level;
        break;
      }

      // optional uint32 badge_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_badge_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &badge_level_)));
          set_has_badge_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgBadgeCraftedNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint32 badge_level = 2;
  if (has_badge_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->badge_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgBadgeCraftedNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 appid = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint32 badge_level = 2;
  if (has_badge_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->badge_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgBadgeCraftedNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 badge_level = 2;
    if (has_badge_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->badge_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBadgeCraftedNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgBadgeCraftedNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgBadgeCraftedNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgBadgeCraftedNotification::MergeFrom(const CMsgBadgeCraftedNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_badge_level()) {
      set_badge_level(from.badge_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgBadgeCraftedNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBadgeCraftedNotification::CopyFrom(const CMsgBadgeCraftedNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBadgeCraftedNotification::IsInitialized() const {

  return true;
}

void CMsgBadgeCraftedNotification::Swap(CMsgBadgeCraftedNotification* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(badge_level_, other->badge_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgBadgeCraftedNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgBadgeCraftedNotification_descriptor_;
  metadata.reflection = CMsgBadgeCraftedNotification_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

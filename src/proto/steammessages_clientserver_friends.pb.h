// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientserver_friends.proto

#ifndef PROTOBUF_steammessages_5fclientserver_5ffriends_2eproto__INCLUDED
#define PROTOBUF_steammessages_5fclientserver_5ffriends_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
void protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto();
void protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto();

class CMsgClientFriendMsg;
class CMsgClientFriendMsgIncoming;
class CMsgClientAddFriend;
class CMsgClientAddFriendResponse;
class CMsgClientRemoveFriend;
class CMsgClientHideFriend;
class CMsgClientFriendsList;
class CMsgClientFriendsList_Friend;
class CMsgClientFriendsGroupsList;
class CMsgClientFriendsGroupsList_FriendGroup;
class CMsgClientFriendsGroupsList_FriendGroupsMembership;
class CMsgClientPlayerNicknameList;
class CMsgClientPlayerNicknameList_PlayerNickname;
class CMsgClientSetPlayerNickname;
class CMsgClientSetPlayerNicknameResponse;
class CMsgClientRequestFriendData;
class CMsgClientChangeStatus;
class CMsgPersonaChangeResponse;
class CMsgClientPersonaState;
class CMsgClientPersonaState_Friend;
class CMsgClientPersonaState_Friend_ClanData;
class CMsgClientPersonaState_Friend_KV;
class CMsgClientFriendProfileInfo;
class CMsgClientFriendProfileInfoResponse;
class CMsgClientCreateFriendsGroup;
class CMsgClientCreateFriendsGroupResponse;
class CMsgClientDeleteFriendsGroup;
class CMsgClientDeleteFriendsGroupResponse;
class CMsgClientManageFriendsGroup;
class CMsgClientManageFriendsGroupResponse;
class CMsgClientAddFriendToGroup;
class CMsgClientAddFriendToGroupResponse;
class CMsgClientRemoveFriendFromGroup;
class CMsgClientRemoveFriendFromGroupResponse;
class CMsgClientGetEmoticonList;
class CMsgClientEmoticonList;
class CMsgClientEmoticonList_Emoticon;
class CMsgClientEmoticonList_Sticker;
class CMsgClientEmoticonList_Effect;

// ===================================================================

class CMsgClientFriendMsg : public ::google::protobuf::Message {
 public:
  CMsgClientFriendMsg();
  virtual ~CMsgClientFriendMsg();

  CMsgClientFriendMsg(const CMsgClientFriendMsg& from);

  inline CMsgClientFriendMsg& operator=(const CMsgClientFriendMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientFriendMsg& default_instance();

  void Swap(CMsgClientFriendMsg* other);

  // implements Message ----------------------------------------------

  CMsgClientFriendMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientFriendMsg& from);
  void MergeFrom(const CMsgClientFriendMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steamid = 1;
  inline bool has_steamid() const;
  inline void clear_steamid();
  static const int kSteamidFieldNumber = 1;
  inline ::google::protobuf::uint64 steamid() const;
  inline void set_steamid(::google::protobuf::uint64 value);

  // optional int32 chat_entry_type = 2;
  inline bool has_chat_entry_type() const;
  inline void clear_chat_entry_type();
  static const int kChatEntryTypeFieldNumber = 2;
  inline ::google::protobuf::int32 chat_entry_type() const;
  inline void set_chat_entry_type(::google::protobuf::int32 value);

  // optional bytes message = 3;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 3;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const void* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional fixed32 rtime32_server_timestamp = 4;
  inline bool has_rtime32_server_timestamp() const;
  inline void clear_rtime32_server_timestamp();
  static const int kRtime32ServerTimestampFieldNumber = 4;
  inline ::google::protobuf::uint32 rtime32_server_timestamp() const;
  inline void set_rtime32_server_timestamp(::google::protobuf::uint32 value);

  // optional bool echo_to_sender = 5;
  inline bool has_echo_to_sender() const;
  inline void clear_echo_to_sender();
  static const int kEchoToSenderFieldNumber = 5;
  inline bool echo_to_sender() const;
  inline void set_echo_to_sender(bool value);

  // @@protoc_insertion_point(class_scope:CMsgClientFriendMsg)
 private:
  inline void set_has_steamid();
  inline void clear_has_steamid();
  inline void set_has_chat_entry_type();
  inline void clear_has_chat_entry_type();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_rtime32_server_timestamp();
  inline void clear_has_rtime32_server_timestamp();
  inline void set_has_echo_to_sender();
  inline void clear_has_echo_to_sender();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 steamid_;
  ::std::string* message_;
  ::google::protobuf::int32 chat_entry_type_;
  ::google::protobuf::uint32 rtime32_server_timestamp_;
  bool echo_to_sender_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientFriendMsg* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientFriendMsgIncoming : public ::google::protobuf::Message {
 public:
  CMsgClientFriendMsgIncoming();
  virtual ~CMsgClientFriendMsgIncoming();

  CMsgClientFriendMsgIncoming(const CMsgClientFriendMsgIncoming& from);

  inline CMsgClientFriendMsgIncoming& operator=(const CMsgClientFriendMsgIncoming& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientFriendMsgIncoming& default_instance();

  void Swap(CMsgClientFriendMsgIncoming* other);

  // implements Message ----------------------------------------------

  CMsgClientFriendMsgIncoming* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientFriendMsgIncoming& from);
  void MergeFrom(const CMsgClientFriendMsgIncoming& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steamid_from = 1;
  inline bool has_steamid_from() const;
  inline void clear_steamid_from();
  static const int kSteamidFromFieldNumber = 1;
  inline ::google::protobuf::uint64 steamid_from() const;
  inline void set_steamid_from(::google::protobuf::uint64 value);

  // optional int32 chat_entry_type = 2;
  inline bool has_chat_entry_type() const;
  inline void clear_chat_entry_type();
  static const int kChatEntryTypeFieldNumber = 2;
  inline ::google::protobuf::int32 chat_entry_type() const;
  inline void set_chat_entry_type(::google::protobuf::int32 value);

  // optional bool from_limited_account = 3;
  inline bool has_from_limited_account() const;
  inline void clear_from_limited_account();
  static const int kFromLimitedAccountFieldNumber = 3;
  inline bool from_limited_account() const;
  inline void set_from_limited_account(bool value);

  // optional bytes message = 4;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 4;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const void* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional fixed32 rtime32_server_timestamp = 5;
  inline bool has_rtime32_server_timestamp() const;
  inline void clear_rtime32_server_timestamp();
  static const int kRtime32ServerTimestampFieldNumber = 5;
  inline ::google::protobuf::uint32 rtime32_server_timestamp() const;
  inline void set_rtime32_server_timestamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientFriendMsgIncoming)
 private:
  inline void set_has_steamid_from();
  inline void clear_has_steamid_from();
  inline void set_has_chat_entry_type();
  inline void clear_has_chat_entry_type();
  inline void set_has_from_limited_account();
  inline void clear_has_from_limited_account();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_rtime32_server_timestamp();
  inline void clear_has_rtime32_server_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 steamid_from_;
  ::google::protobuf::int32 chat_entry_type_;
  bool from_limited_account_;
  ::std::string* message_;
  ::google::protobuf::uint32 rtime32_server_timestamp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientFriendMsgIncoming* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientAddFriend : public ::google::protobuf::Message {
 public:
  CMsgClientAddFriend();
  virtual ~CMsgClientAddFriend();

  CMsgClientAddFriend(const CMsgClientAddFriend& from);

  inline CMsgClientAddFriend& operator=(const CMsgClientAddFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientAddFriend& default_instance();

  void Swap(CMsgClientAddFriend* other);

  // implements Message ----------------------------------------------

  CMsgClientAddFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientAddFriend& from);
  void MergeFrom(const CMsgClientAddFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steamid_to_add = 1;
  inline bool has_steamid_to_add() const;
  inline void clear_steamid_to_add();
  static const int kSteamidToAddFieldNumber = 1;
  inline ::google::protobuf::uint64 steamid_to_add() const;
  inline void set_steamid_to_add(::google::protobuf::uint64 value);

  // optional string accountname_or_email_to_add = 2;
  inline bool has_accountname_or_email_to_add() const;
  inline void clear_accountname_or_email_to_add();
  static const int kAccountnameOrEmailToAddFieldNumber = 2;
  inline const ::std::string& accountname_or_email_to_add() const;
  inline void set_accountname_or_email_to_add(const ::std::string& value);
  inline void set_accountname_or_email_to_add(const char* value);
  inline void set_accountname_or_email_to_add(const char* value, size_t size);
  inline ::std::string* mutable_accountname_or_email_to_add();
  inline ::std::string* release_accountname_or_email_to_add();
  inline void set_allocated_accountname_or_email_to_add(::std::string* accountname_or_email_to_add);

  // @@protoc_insertion_point(class_scope:CMsgClientAddFriend)
 private:
  inline void set_has_steamid_to_add();
  inline void clear_has_steamid_to_add();
  inline void set_has_accountname_or_email_to_add();
  inline void clear_has_accountname_or_email_to_add();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 steamid_to_add_;
  ::std::string* accountname_or_email_to_add_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientAddFriend* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientAddFriendResponse : public ::google::protobuf::Message {
 public:
  CMsgClientAddFriendResponse();
  virtual ~CMsgClientAddFriendResponse();

  CMsgClientAddFriendResponse(const CMsgClientAddFriendResponse& from);

  inline CMsgClientAddFriendResponse& operator=(const CMsgClientAddFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientAddFriendResponse& default_instance();

  void Swap(CMsgClientAddFriendResponse* other);

  // implements Message ----------------------------------------------

  CMsgClientAddFriendResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientAddFriendResponse& from);
  void MergeFrom(const CMsgClientAddFriendResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 eresult = 1 [default = 2];
  inline bool has_eresult() const;
  inline void clear_eresult();
  static const int kEresultFieldNumber = 1;
  inline ::google::protobuf::int32 eresult() const;
  inline void set_eresult(::google::protobuf::int32 value);

  // optional fixed64 steam_id_added = 2;
  inline bool has_steam_id_added() const;
  inline void clear_steam_id_added();
  static const int kSteamIdAddedFieldNumber = 2;
  inline ::google::protobuf::uint64 steam_id_added() const;
  inline void set_steam_id_added(::google::protobuf::uint64 value);

  // optional string persona_name_added = 3;
  inline bool has_persona_name_added() const;
  inline void clear_persona_name_added();
  static const int kPersonaNameAddedFieldNumber = 3;
  inline const ::std::string& persona_name_added() const;
  inline void set_persona_name_added(const ::std::string& value);
  inline void set_persona_name_added(const char* value);
  inline void set_persona_name_added(const char* value, size_t size);
  inline ::std::string* mutable_persona_name_added();
  inline ::std::string* release_persona_name_added();
  inline void set_allocated_persona_name_added(::std::string* persona_name_added);

  // @@protoc_insertion_point(class_scope:CMsgClientAddFriendResponse)
 private:
  inline void set_has_eresult();
  inline void clear_has_eresult();
  inline void set_has_steam_id_added();
  inline void clear_has_steam_id_added();
  inline void set_has_persona_name_added();
  inline void clear_has_persona_name_added();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 steam_id_added_;
  ::std::string* persona_name_added_;
  ::google::protobuf::int32 eresult_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientAddFriendResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientRemoveFriend : public ::google::protobuf::Message {
 public:
  CMsgClientRemoveFriend();
  virtual ~CMsgClientRemoveFriend();

  CMsgClientRemoveFriend(const CMsgClientRemoveFriend& from);

  inline CMsgClientRemoveFriend& operator=(const CMsgClientRemoveFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientRemoveFriend& default_instance();

  void Swap(CMsgClientRemoveFriend* other);

  // implements Message ----------------------------------------------

  CMsgClientRemoveFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientRemoveFriend& from);
  void MergeFrom(const CMsgClientRemoveFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 friendid = 1;
  inline bool has_friendid() const;
  inline void clear_friendid();
  static const int kFriendidFieldNumber = 1;
  inline ::google::protobuf::uint64 friendid() const;
  inline void set_friendid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgClientRemoveFriend)
 private:
  inline void set_has_friendid();
  inline void clear_has_friendid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 friendid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientRemoveFriend* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientHideFriend : public ::google::protobuf::Message {
 public:
  CMsgClientHideFriend();
  virtual ~CMsgClientHideFriend();

  CMsgClientHideFriend(const CMsgClientHideFriend& from);

  inline CMsgClientHideFriend& operator=(const CMsgClientHideFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientHideFriend& default_instance();

  void Swap(CMsgClientHideFriend* other);

  // implements Message ----------------------------------------------

  CMsgClientHideFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientHideFriend& from);
  void MergeFrom(const CMsgClientHideFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 friendid = 1;
  inline bool has_friendid() const;
  inline void clear_friendid();
  static const int kFriendidFieldNumber = 1;
  inline ::google::protobuf::uint64 friendid() const;
  inline void set_friendid(::google::protobuf::uint64 value);

  // optional bool hide = 2;
  inline bool has_hide() const;
  inline void clear_hide();
  static const int kHideFieldNumber = 2;
  inline bool hide() const;
  inline void set_hide(bool value);

  // @@protoc_insertion_point(class_scope:CMsgClientHideFriend)
 private:
  inline void set_has_friendid();
  inline void clear_has_friendid();
  inline void set_has_hide();
  inline void clear_has_hide();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 friendid_;
  bool hide_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientHideFriend* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientFriendsList_Friend : public ::google::protobuf::Message {
 public:
  CMsgClientFriendsList_Friend();
  virtual ~CMsgClientFriendsList_Friend();

  CMsgClientFriendsList_Friend(const CMsgClientFriendsList_Friend& from);

  inline CMsgClientFriendsList_Friend& operator=(const CMsgClientFriendsList_Friend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientFriendsList_Friend& default_instance();

  void Swap(CMsgClientFriendsList_Friend* other);

  // implements Message ----------------------------------------------

  CMsgClientFriendsList_Friend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientFriendsList_Friend& from);
  void MergeFrom(const CMsgClientFriendsList_Friend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 ulfriendid = 1;
  inline bool has_ulfriendid() const;
  inline void clear_ulfriendid();
  static const int kUlfriendidFieldNumber = 1;
  inline ::google::protobuf::uint64 ulfriendid() const;
  inline void set_ulfriendid(::google::protobuf::uint64 value);

  // optional uint32 efriendrelationship = 2;
  inline bool has_efriendrelationship() const;
  inline void clear_efriendrelationship();
  static const int kEfriendrelationshipFieldNumber = 2;
  inline ::google::protobuf::uint32 efriendrelationship() const;
  inline void set_efriendrelationship(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientFriendsList.Friend)
 private:
  inline void set_has_ulfriendid();
  inline void clear_has_ulfriendid();
  inline void set_has_efriendrelationship();
  inline void clear_has_efriendrelationship();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 ulfriendid_;
  ::google::protobuf::uint32 efriendrelationship_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientFriendsList_Friend* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientFriendsList : public ::google::protobuf::Message {
 public:
  CMsgClientFriendsList();
  virtual ~CMsgClientFriendsList();

  CMsgClientFriendsList(const CMsgClientFriendsList& from);

  inline CMsgClientFriendsList& operator=(const CMsgClientFriendsList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientFriendsList& default_instance();

  void Swap(CMsgClientFriendsList* other);

  // implements Message ----------------------------------------------

  CMsgClientFriendsList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientFriendsList& from);
  void MergeFrom(const CMsgClientFriendsList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgClientFriendsList_Friend Friend;

  // accessors -------------------------------------------------------

  // optional bool bincremental = 1;
  inline bool has_bincremental() const;
  inline void clear_bincremental();
  static const int kBincrementalFieldNumber = 1;
  inline bool bincremental() const;
  inline void set_bincremental(bool value);

  // repeated .CMsgClientFriendsList.Friend friends = 2;
  inline int friends_size() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 2;
  inline const ::CMsgClientFriendsList_Friend& friends(int index) const;
  inline ::CMsgClientFriendsList_Friend* mutable_friends(int index);
  inline ::CMsgClientFriendsList_Friend* add_friends();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgClientFriendsList_Friend >&
      friends() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgClientFriendsList_Friend >*
      mutable_friends();

  // optional uint32 max_friend_count = 3;
  inline bool has_max_friend_count() const;
  inline void clear_max_friend_count();
  static const int kMaxFriendCountFieldNumber = 3;
  inline ::google::protobuf::uint32 max_friend_count() const;
  inline void set_max_friend_count(::google::protobuf::uint32 value);

  // optional uint32 active_friend_count = 4;
  inline bool has_active_friend_count() const;
  inline void clear_active_friend_count();
  static const int kActiveFriendCountFieldNumber = 4;
  inline ::google::protobuf::uint32 active_friend_count() const;
  inline void set_active_friend_count(::google::protobuf::uint32 value);

  // optional bool friends_limit_hit = 5;
  inline bool has_friends_limit_hit() const;
  inline void clear_friends_limit_hit();
  static const int kFriendsLimitHitFieldNumber = 5;
  inline bool friends_limit_hit() const;
  inline void set_friends_limit_hit(bool value);

  // @@protoc_insertion_point(class_scope:CMsgClientFriendsList)
 private:
  inline void set_has_bincremental();
  inline void clear_has_bincremental();
  inline void set_has_max_friend_count();
  inline void clear_has_max_friend_count();
  inline void set_has_active_friend_count();
  inline void clear_has_active_friend_count();
  inline void set_has_friends_limit_hit();
  inline void clear_has_friends_limit_hit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CMsgClientFriendsList_Friend > friends_;
  ::google::protobuf::uint32 max_friend_count_;
  bool bincremental_;
  bool friends_limit_hit_;
  ::google::protobuf::uint32 active_friend_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientFriendsList* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientFriendsGroupsList_FriendGroup : public ::google::protobuf::Message {
 public:
  CMsgClientFriendsGroupsList_FriendGroup();
  virtual ~CMsgClientFriendsGroupsList_FriendGroup();

  CMsgClientFriendsGroupsList_FriendGroup(const CMsgClientFriendsGroupsList_FriendGroup& from);

  inline CMsgClientFriendsGroupsList_FriendGroup& operator=(const CMsgClientFriendsGroupsList_FriendGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientFriendsGroupsList_FriendGroup& default_instance();

  void Swap(CMsgClientFriendsGroupsList_FriendGroup* other);

  // implements Message ----------------------------------------------

  CMsgClientFriendsGroupsList_FriendGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientFriendsGroupsList_FriendGroup& from);
  void MergeFrom(const CMsgClientFriendsGroupsList_FriendGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 nGroupID = 1;
  inline bool has_ngroupid() const;
  inline void clear_ngroupid();
  static const int kNGroupIDFieldNumber = 1;
  inline ::google::protobuf::int32 ngroupid() const;
  inline void set_ngroupid(::google::protobuf::int32 value);

  // optional string strGroupName = 2;
  inline bool has_strgroupname() const;
  inline void clear_strgroupname();
  static const int kStrGroupNameFieldNumber = 2;
  inline const ::std::string& strgroupname() const;
  inline void set_strgroupname(const ::std::string& value);
  inline void set_strgroupname(const char* value);
  inline void set_strgroupname(const char* value, size_t size);
  inline ::std::string* mutable_strgroupname();
  inline ::std::string* release_strgroupname();
  inline void set_allocated_strgroupname(::std::string* strgroupname);

  // @@protoc_insertion_point(class_scope:CMsgClientFriendsGroupsList.FriendGroup)
 private:
  inline void set_has_ngroupid();
  inline void clear_has_ngroupid();
  inline void set_has_strgroupname();
  inline void clear_has_strgroupname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* strgroupname_;
  ::google::protobuf::int32 ngroupid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientFriendsGroupsList_FriendGroup* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientFriendsGroupsList_FriendGroupsMembership : public ::google::protobuf::Message {
 public:
  CMsgClientFriendsGroupsList_FriendGroupsMembership();
  virtual ~CMsgClientFriendsGroupsList_FriendGroupsMembership();

  CMsgClientFriendsGroupsList_FriendGroupsMembership(const CMsgClientFriendsGroupsList_FriendGroupsMembership& from);

  inline CMsgClientFriendsGroupsList_FriendGroupsMembership& operator=(const CMsgClientFriendsGroupsList_FriendGroupsMembership& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientFriendsGroupsList_FriendGroupsMembership& default_instance();

  void Swap(CMsgClientFriendsGroupsList_FriendGroupsMembership* other);

  // implements Message ----------------------------------------------

  CMsgClientFriendsGroupsList_FriendGroupsMembership* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientFriendsGroupsList_FriendGroupsMembership& from);
  void MergeFrom(const CMsgClientFriendsGroupsList_FriendGroupsMembership& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 ulSteamID = 1;
  inline bool has_ulsteamid() const;
  inline void clear_ulsteamid();
  static const int kUlSteamIDFieldNumber = 1;
  inline ::google::protobuf::uint64 ulsteamid() const;
  inline void set_ulsteamid(::google::protobuf::uint64 value);

  // optional int32 nGroupID = 2;
  inline bool has_ngroupid() const;
  inline void clear_ngroupid();
  static const int kNGroupIDFieldNumber = 2;
  inline ::google::protobuf::int32 ngroupid() const;
  inline void set_ngroupid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientFriendsGroupsList.FriendGroupsMembership)
 private:
  inline void set_has_ulsteamid();
  inline void clear_has_ulsteamid();
  inline void set_has_ngroupid();
  inline void clear_has_ngroupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 ulsteamid_;
  ::google::protobuf::int32 ngroupid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientFriendsGroupsList_FriendGroupsMembership* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientFriendsGroupsList : public ::google::protobuf::Message {
 public:
  CMsgClientFriendsGroupsList();
  virtual ~CMsgClientFriendsGroupsList();

  CMsgClientFriendsGroupsList(const CMsgClientFriendsGroupsList& from);

  inline CMsgClientFriendsGroupsList& operator=(const CMsgClientFriendsGroupsList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientFriendsGroupsList& default_instance();

  void Swap(CMsgClientFriendsGroupsList* other);

  // implements Message ----------------------------------------------

  CMsgClientFriendsGroupsList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientFriendsGroupsList& from);
  void MergeFrom(const CMsgClientFriendsGroupsList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgClientFriendsGroupsList_FriendGroup FriendGroup;
  typedef CMsgClientFriendsGroupsList_FriendGroupsMembership FriendGroupsMembership;

  // accessors -------------------------------------------------------

  // optional bool bremoval = 1;
  inline bool has_bremoval() const;
  inline void clear_bremoval();
  static const int kBremovalFieldNumber = 1;
  inline bool bremoval() const;
  inline void set_bremoval(bool value);

  // optional bool bincremental = 2;
  inline bool has_bincremental() const;
  inline void clear_bincremental();
  static const int kBincrementalFieldNumber = 2;
  inline bool bincremental() const;
  inline void set_bincremental(bool value);

  // repeated .CMsgClientFriendsGroupsList.FriendGroup friendGroups = 3;
  inline int friendgroups_size() const;
  inline void clear_friendgroups();
  static const int kFriendGroupsFieldNumber = 3;
  inline const ::CMsgClientFriendsGroupsList_FriendGroup& friendgroups(int index) const;
  inline ::CMsgClientFriendsGroupsList_FriendGroup* mutable_friendgroups(int index);
  inline ::CMsgClientFriendsGroupsList_FriendGroup* add_friendgroups();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgClientFriendsGroupsList_FriendGroup >&
      friendgroups() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgClientFriendsGroupsList_FriendGroup >*
      mutable_friendgroups();

  // repeated .CMsgClientFriendsGroupsList.FriendGroupsMembership memberships = 4;
  inline int memberships_size() const;
  inline void clear_memberships();
  static const int kMembershipsFieldNumber = 4;
  inline const ::CMsgClientFriendsGroupsList_FriendGroupsMembership& memberships(int index) const;
  inline ::CMsgClientFriendsGroupsList_FriendGroupsMembership* mutable_memberships(int index);
  inline ::CMsgClientFriendsGroupsList_FriendGroupsMembership* add_memberships();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgClientFriendsGroupsList_FriendGroupsMembership >&
      memberships() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgClientFriendsGroupsList_FriendGroupsMembership >*
      mutable_memberships();

  // @@protoc_insertion_point(class_scope:CMsgClientFriendsGroupsList)
 private:
  inline void set_has_bremoval();
  inline void clear_has_bremoval();
  inline void set_has_bincremental();
  inline void clear_has_bincremental();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CMsgClientFriendsGroupsList_FriendGroup > friendgroups_;
  ::google::protobuf::RepeatedPtrField< ::CMsgClientFriendsGroupsList_FriendGroupsMembership > memberships_;
  bool bremoval_;
  bool bincremental_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientFriendsGroupsList* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientPlayerNicknameList_PlayerNickname : public ::google::protobuf::Message {
 public:
  CMsgClientPlayerNicknameList_PlayerNickname();
  virtual ~CMsgClientPlayerNicknameList_PlayerNickname();

  CMsgClientPlayerNicknameList_PlayerNickname(const CMsgClientPlayerNicknameList_PlayerNickname& from);

  inline CMsgClientPlayerNicknameList_PlayerNickname& operator=(const CMsgClientPlayerNicknameList_PlayerNickname& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientPlayerNicknameList_PlayerNickname& default_instance();

  void Swap(CMsgClientPlayerNicknameList_PlayerNickname* other);

  // implements Message ----------------------------------------------

  CMsgClientPlayerNicknameList_PlayerNickname* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientPlayerNicknameList_PlayerNickname& from);
  void MergeFrom(const CMsgClientPlayerNicknameList_PlayerNickname& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steamid = 1;
  inline bool has_steamid() const;
  inline void clear_steamid();
  static const int kSteamidFieldNumber = 1;
  inline ::google::protobuf::uint64 steamid() const;
  inline void set_steamid(::google::protobuf::uint64 value);

  // optional string nickname = 3;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 3;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // @@protoc_insertion_point(class_scope:CMsgClientPlayerNicknameList.PlayerNickname)
 private:
  inline void set_has_steamid();
  inline void clear_has_steamid();
  inline void set_has_nickname();
  inline void clear_has_nickname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 steamid_;
  ::std::string* nickname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientPlayerNicknameList_PlayerNickname* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientPlayerNicknameList : public ::google::protobuf::Message {
 public:
  CMsgClientPlayerNicknameList();
  virtual ~CMsgClientPlayerNicknameList();

  CMsgClientPlayerNicknameList(const CMsgClientPlayerNicknameList& from);

  inline CMsgClientPlayerNicknameList& operator=(const CMsgClientPlayerNicknameList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientPlayerNicknameList& default_instance();

  void Swap(CMsgClientPlayerNicknameList* other);

  // implements Message ----------------------------------------------

  CMsgClientPlayerNicknameList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientPlayerNicknameList& from);
  void MergeFrom(const CMsgClientPlayerNicknameList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgClientPlayerNicknameList_PlayerNickname PlayerNickname;

  // accessors -------------------------------------------------------

  // optional bool removal = 1;
  inline bool has_removal() const;
  inline void clear_removal();
  static const int kRemovalFieldNumber = 1;
  inline bool removal() const;
  inline void set_removal(bool value);

  // optional bool incremental = 2;
  inline bool has_incremental() const;
  inline void clear_incremental();
  static const int kIncrementalFieldNumber = 2;
  inline bool incremental() const;
  inline void set_incremental(bool value);

  // repeated .CMsgClientPlayerNicknameList.PlayerNickname nicknames = 3;
  inline int nicknames_size() const;
  inline void clear_nicknames();
  static const int kNicknamesFieldNumber = 3;
  inline const ::CMsgClientPlayerNicknameList_PlayerNickname& nicknames(int index) const;
  inline ::CMsgClientPlayerNicknameList_PlayerNickname* mutable_nicknames(int index);
  inline ::CMsgClientPlayerNicknameList_PlayerNickname* add_nicknames();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgClientPlayerNicknameList_PlayerNickname >&
      nicknames() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgClientPlayerNicknameList_PlayerNickname >*
      mutable_nicknames();

  // @@protoc_insertion_point(class_scope:CMsgClientPlayerNicknameList)
 private:
  inline void set_has_removal();
  inline void clear_has_removal();
  inline void set_has_incremental();
  inline void clear_has_incremental();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CMsgClientPlayerNicknameList_PlayerNickname > nicknames_;
  bool removal_;
  bool incremental_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientPlayerNicknameList* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientSetPlayerNickname : public ::google::protobuf::Message {
 public:
  CMsgClientSetPlayerNickname();
  virtual ~CMsgClientSetPlayerNickname();

  CMsgClientSetPlayerNickname(const CMsgClientSetPlayerNickname& from);

  inline CMsgClientSetPlayerNickname& operator=(const CMsgClientSetPlayerNickname& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientSetPlayerNickname& default_instance();

  void Swap(CMsgClientSetPlayerNickname* other);

  // implements Message ----------------------------------------------

  CMsgClientSetPlayerNickname* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientSetPlayerNickname& from);
  void MergeFrom(const CMsgClientSetPlayerNickname& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steamid = 1;
  inline bool has_steamid() const;
  inline void clear_steamid();
  static const int kSteamidFieldNumber = 1;
  inline ::google::protobuf::uint64 steamid() const;
  inline void set_steamid(::google::protobuf::uint64 value);

  // optional string nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // @@protoc_insertion_point(class_scope:CMsgClientSetPlayerNickname)
 private:
  inline void set_has_steamid();
  inline void clear_has_steamid();
  inline void set_has_nickname();
  inline void clear_has_nickname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 steamid_;
  ::std::string* nickname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientSetPlayerNickname* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientSetPlayerNicknameResponse : public ::google::protobuf::Message {
 public:
  CMsgClientSetPlayerNicknameResponse();
  virtual ~CMsgClientSetPlayerNicknameResponse();

  CMsgClientSetPlayerNicknameResponse(const CMsgClientSetPlayerNicknameResponse& from);

  inline CMsgClientSetPlayerNicknameResponse& operator=(const CMsgClientSetPlayerNicknameResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientSetPlayerNicknameResponse& default_instance();

  void Swap(CMsgClientSetPlayerNicknameResponse* other);

  // implements Message ----------------------------------------------

  CMsgClientSetPlayerNicknameResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientSetPlayerNicknameResponse& from);
  void MergeFrom(const CMsgClientSetPlayerNicknameResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 eresult = 1;
  inline bool has_eresult() const;
  inline void clear_eresult();
  static const int kEresultFieldNumber = 1;
  inline ::google::protobuf::uint32 eresult() const;
  inline void set_eresult(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientSetPlayerNicknameResponse)
 private:
  inline void set_has_eresult();
  inline void clear_has_eresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 eresult_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientSetPlayerNicknameResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientRequestFriendData : public ::google::protobuf::Message {
 public:
  CMsgClientRequestFriendData();
  virtual ~CMsgClientRequestFriendData();

  CMsgClientRequestFriendData(const CMsgClientRequestFriendData& from);

  inline CMsgClientRequestFriendData& operator=(const CMsgClientRequestFriendData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientRequestFriendData& default_instance();

  void Swap(CMsgClientRequestFriendData* other);

  // implements Message ----------------------------------------------

  CMsgClientRequestFriendData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientRequestFriendData& from);
  void MergeFrom(const CMsgClientRequestFriendData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 persona_state_requested = 1;
  inline bool has_persona_state_requested() const;
  inline void clear_persona_state_requested();
  static const int kPersonaStateRequestedFieldNumber = 1;
  inline ::google::protobuf::uint32 persona_state_requested() const;
  inline void set_persona_state_requested(::google::protobuf::uint32 value);

  // repeated fixed64 friends = 2;
  inline int friends_size() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 2;
  inline ::google::protobuf::uint64 friends(int index) const;
  inline void set_friends(int index, ::google::protobuf::uint64 value);
  inline void add_friends(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      friends() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_friends();

  // @@protoc_insertion_point(class_scope:CMsgClientRequestFriendData)
 private:
  inline void set_has_persona_state_requested();
  inline void clear_has_persona_state_requested();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > friends_;
  ::google::protobuf::uint32 persona_state_requested_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientRequestFriendData* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientChangeStatus : public ::google::protobuf::Message {
 public:
  CMsgClientChangeStatus();
  virtual ~CMsgClientChangeStatus();

  CMsgClientChangeStatus(const CMsgClientChangeStatus& from);

  inline CMsgClientChangeStatus& operator=(const CMsgClientChangeStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientChangeStatus& default_instance();

  void Swap(CMsgClientChangeStatus* other);

  // implements Message ----------------------------------------------

  CMsgClientChangeStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientChangeStatus& from);
  void MergeFrom(const CMsgClientChangeStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 persona_state = 1;
  inline bool has_persona_state() const;
  inline void clear_persona_state();
  static const int kPersonaStateFieldNumber = 1;
  inline ::google::protobuf::uint32 persona_state() const;
  inline void set_persona_state(::google::protobuf::uint32 value);

  // optional string player_name = 2;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  inline void set_allocated_player_name(::std::string* player_name);

  // optional bool is_auto_generated_name = 3;
  inline bool has_is_auto_generated_name() const;
  inline void clear_is_auto_generated_name();
  static const int kIsAutoGeneratedNameFieldNumber = 3;
  inline bool is_auto_generated_name() const;
  inline void set_is_auto_generated_name(bool value);

  // optional bool high_priority = 4;
  inline bool has_high_priority() const;
  inline void clear_high_priority();
  static const int kHighPriorityFieldNumber = 4;
  inline bool high_priority() const;
  inline void set_high_priority(bool value);

  // optional bool persona_set_by_user = 5;
  inline bool has_persona_set_by_user() const;
  inline void clear_persona_set_by_user();
  static const int kPersonaSetByUserFieldNumber = 5;
  inline bool persona_set_by_user() const;
  inline void set_persona_set_by_user(bool value);

  // optional uint32 persona_state_flags = 6 [default = 0];
  inline bool has_persona_state_flags() const;
  inline void clear_persona_state_flags();
  static const int kPersonaStateFlagsFieldNumber = 6;
  inline ::google::protobuf::uint32 persona_state_flags() const;
  inline void set_persona_state_flags(::google::protobuf::uint32 value);

  // optional bool need_persona_response = 7;
  inline bool has_need_persona_response() const;
  inline void clear_need_persona_response();
  static const int kNeedPersonaResponseFieldNumber = 7;
  inline bool need_persona_response() const;
  inline void set_need_persona_response(bool value);

  // optional bool is_client_idle = 8;
  inline bool has_is_client_idle() const;
  inline void clear_is_client_idle();
  static const int kIsClientIdleFieldNumber = 8;
  inline bool is_client_idle() const;
  inline void set_is_client_idle(bool value);

  // @@protoc_insertion_point(class_scope:CMsgClientChangeStatus)
 private:
  inline void set_has_persona_state();
  inline void clear_has_persona_state();
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_is_auto_generated_name();
  inline void clear_has_is_auto_generated_name();
  inline void set_has_high_priority();
  inline void clear_has_high_priority();
  inline void set_has_persona_set_by_user();
  inline void clear_has_persona_set_by_user();
  inline void set_has_persona_state_flags();
  inline void clear_has_persona_state_flags();
  inline void set_has_need_persona_response();
  inline void clear_has_need_persona_response();
  inline void set_has_is_client_idle();
  inline void clear_has_is_client_idle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* player_name_;
  ::google::protobuf::uint32 persona_state_;
  bool is_auto_generated_name_;
  bool high_priority_;
  bool persona_set_by_user_;
  bool need_persona_response_;
  ::google::protobuf::uint32 persona_state_flags_;
  bool is_client_idle_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientChangeStatus* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPersonaChangeResponse : public ::google::protobuf::Message {
 public:
  CMsgPersonaChangeResponse();
  virtual ~CMsgPersonaChangeResponse();

  CMsgPersonaChangeResponse(const CMsgPersonaChangeResponse& from);

  inline CMsgPersonaChangeResponse& operator=(const CMsgPersonaChangeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPersonaChangeResponse& default_instance();

  void Swap(CMsgPersonaChangeResponse* other);

  // implements Message ----------------------------------------------

  CMsgPersonaChangeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPersonaChangeResponse& from);
  void MergeFrom(const CMsgPersonaChangeResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // optional string player_name = 2;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  inline void set_allocated_player_name(::std::string* player_name);

  // @@protoc_insertion_point(class_scope:CMsgPersonaChangeResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_player_name();
  inline void clear_has_player_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* player_name_;
  ::google::protobuf::uint32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto();

  void InitAsDefaultInstance();
  static CMsgPersonaChangeResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientPersonaState_Friend_ClanData : public ::google::protobuf::Message {
 public:
  CMsgClientPersonaState_Friend_ClanData();
  virtual ~CMsgClientPersonaState_Friend_ClanData();

  CMsgClientPersonaState_Friend_ClanData(const CMsgClientPersonaState_Friend_ClanData& from);

  inline CMsgClientPersonaState_Friend_ClanData& operator=(const CMsgClientPersonaState_Friend_ClanData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientPersonaState_Friend_ClanData& default_instance();

  void Swap(CMsgClientPersonaState_Friend_ClanData* other);

  // implements Message ----------------------------------------------

  CMsgClientPersonaState_Friend_ClanData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientPersonaState_Friend_ClanData& from);
  void MergeFrom(const CMsgClientPersonaState_Friend_ClanData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ogg_app_id = 1;
  inline bool has_ogg_app_id() const;
  inline void clear_ogg_app_id();
  static const int kOggAppIdFieldNumber = 1;
  inline ::google::protobuf::uint32 ogg_app_id() const;
  inline void set_ogg_app_id(::google::protobuf::uint32 value);

  // optional uint64 chat_group_id = 2;
  inline bool has_chat_group_id() const;
  inline void clear_chat_group_id();
  static const int kChatGroupIdFieldNumber = 2;
  inline ::google::protobuf::uint64 chat_group_id() const;
  inline void set_chat_group_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgClientPersonaState.Friend.ClanData)
 private:
  inline void set_has_ogg_app_id();
  inline void clear_has_ogg_app_id();
  inline void set_has_chat_group_id();
  inline void clear_has_chat_group_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 chat_group_id_;
  ::google::protobuf::uint32 ogg_app_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientPersonaState_Friend_ClanData* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientPersonaState_Friend_KV : public ::google::protobuf::Message {
 public:
  CMsgClientPersonaState_Friend_KV();
  virtual ~CMsgClientPersonaState_Friend_KV();

  CMsgClientPersonaState_Friend_KV(const CMsgClientPersonaState_Friend_KV& from);

  inline CMsgClientPersonaState_Friend_KV& operator=(const CMsgClientPersonaState_Friend_KV& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientPersonaState_Friend_KV& default_instance();

  void Swap(CMsgClientPersonaState_Friend_KV* other);

  // implements Message ----------------------------------------------

  CMsgClientPersonaState_Friend_KV* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientPersonaState_Friend_KV& from);
  void MergeFrom(const CMsgClientPersonaState_Friend_KV& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:CMsgClientPersonaState.Friend.KV)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientPersonaState_Friend_KV* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientPersonaState_Friend : public ::google::protobuf::Message {
 public:
  CMsgClientPersonaState_Friend();
  virtual ~CMsgClientPersonaState_Friend();

  CMsgClientPersonaState_Friend(const CMsgClientPersonaState_Friend& from);

  inline CMsgClientPersonaState_Friend& operator=(const CMsgClientPersonaState_Friend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientPersonaState_Friend& default_instance();

  void Swap(CMsgClientPersonaState_Friend* other);

  // implements Message ----------------------------------------------

  CMsgClientPersonaState_Friend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientPersonaState_Friend& from);
  void MergeFrom(const CMsgClientPersonaState_Friend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgClientPersonaState_Friend_ClanData ClanData;
  typedef CMsgClientPersonaState_Friend_KV KV;

  // accessors -------------------------------------------------------

  // optional fixed64 friendid = 1;
  inline bool has_friendid() const;
  inline void clear_friendid();
  static const int kFriendidFieldNumber = 1;
  inline ::google::protobuf::uint64 friendid() const;
  inline void set_friendid(::google::protobuf::uint64 value);

  // optional uint32 persona_state = 2;
  inline bool has_persona_state() const;
  inline void clear_persona_state();
  static const int kPersonaStateFieldNumber = 2;
  inline ::google::protobuf::uint32 persona_state() const;
  inline void set_persona_state(::google::protobuf::uint32 value);

  // optional uint32 game_played_app_id = 3;
  inline bool has_game_played_app_id() const;
  inline void clear_game_played_app_id();
  static const int kGamePlayedAppIdFieldNumber = 3;
  inline ::google::protobuf::uint32 game_played_app_id() const;
  inline void set_game_played_app_id(::google::protobuf::uint32 value);

  // optional uint32 game_server_ip = 4;
  inline bool has_game_server_ip() const;
  inline void clear_game_server_ip();
  static const int kGameServerIpFieldNumber = 4;
  inline ::google::protobuf::uint32 game_server_ip() const;
  inline void set_game_server_ip(::google::protobuf::uint32 value);

  // optional uint32 game_server_port = 5;
  inline bool has_game_server_port() const;
  inline void clear_game_server_port();
  static const int kGameServerPortFieldNumber = 5;
  inline ::google::protobuf::uint32 game_server_port() const;
  inline void set_game_server_port(::google::protobuf::uint32 value);

  // optional uint32 persona_state_flags = 6;
  inline bool has_persona_state_flags() const;
  inline void clear_persona_state_flags();
  static const int kPersonaStateFlagsFieldNumber = 6;
  inline ::google::protobuf::uint32 persona_state_flags() const;
  inline void set_persona_state_flags(::google::protobuf::uint32 value);

  // optional uint32 online_session_instances = 7;
  inline bool has_online_session_instances() const;
  inline void clear_online_session_instances();
  static const int kOnlineSessionInstancesFieldNumber = 7;
  inline ::google::protobuf::uint32 online_session_instances() const;
  inline void set_online_session_instances(::google::protobuf::uint32 value);

  // optional bool persona_set_by_user = 10;
  inline bool has_persona_set_by_user() const;
  inline void clear_persona_set_by_user();
  static const int kPersonaSetByUserFieldNumber = 10;
  inline bool persona_set_by_user() const;
  inline void set_persona_set_by_user(bool value);

  // optional string player_name = 15;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 15;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  inline void set_allocated_player_name(::std::string* player_name);

  // optional uint32 query_port = 20;
  inline bool has_query_port() const;
  inline void clear_query_port();
  static const int kQueryPortFieldNumber = 20;
  inline ::google::protobuf::uint32 query_port() const;
  inline void set_query_port(::google::protobuf::uint32 value);

  // optional fixed64 steamid_source = 25;
  inline bool has_steamid_source() const;
  inline void clear_steamid_source();
  static const int kSteamidSourceFieldNumber = 25;
  inline ::google::protobuf::uint64 steamid_source() const;
  inline void set_steamid_source(::google::protobuf::uint64 value);

  // optional bytes avatar_hash = 31;
  inline bool has_avatar_hash() const;
  inline void clear_avatar_hash();
  static const int kAvatarHashFieldNumber = 31;
  inline const ::std::string& avatar_hash() const;
  inline void set_avatar_hash(const ::std::string& value);
  inline void set_avatar_hash(const char* value);
  inline void set_avatar_hash(const void* value, size_t size);
  inline ::std::string* mutable_avatar_hash();
  inline ::std::string* release_avatar_hash();
  inline void set_allocated_avatar_hash(::std::string* avatar_hash);

  // optional uint32 last_logoff = 45;
  inline bool has_last_logoff() const;
  inline void clear_last_logoff();
  static const int kLastLogoffFieldNumber = 45;
  inline ::google::protobuf::uint32 last_logoff() const;
  inline void set_last_logoff(::google::protobuf::uint32 value);

  // optional uint32 last_logon = 46;
  inline bool has_last_logon() const;
  inline void clear_last_logon();
  static const int kLastLogonFieldNumber = 46;
  inline ::google::protobuf::uint32 last_logon() const;
  inline void set_last_logon(::google::protobuf::uint32 value);

  // optional uint32 last_seen_online = 47;
  inline bool has_last_seen_online() const;
  inline void clear_last_seen_online();
  static const int kLastSeenOnlineFieldNumber = 47;
  inline ::google::protobuf::uint32 last_seen_online() const;
  inline void set_last_seen_online(::google::protobuf::uint32 value);

  // optional uint32 clan_rank = 50;
  inline bool has_clan_rank() const;
  inline void clear_clan_rank();
  static const int kClanRankFieldNumber = 50;
  inline ::google::protobuf::uint32 clan_rank() const;
  inline void set_clan_rank(::google::protobuf::uint32 value);

  // optional string game_name = 55;
  inline bool has_game_name() const;
  inline void clear_game_name();
  static const int kGameNameFieldNumber = 55;
  inline const ::std::string& game_name() const;
  inline void set_game_name(const ::std::string& value);
  inline void set_game_name(const char* value);
  inline void set_game_name(const char* value, size_t size);
  inline ::std::string* mutable_game_name();
  inline ::std::string* release_game_name();
  inline void set_allocated_game_name(::std::string* game_name);

  // optional fixed64 gameid = 56;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 56;
  inline ::google::protobuf::uint64 gameid() const;
  inline void set_gameid(::google::protobuf::uint64 value);

  // optional bytes game_data_blob = 60;
  inline bool has_game_data_blob() const;
  inline void clear_game_data_blob();
  static const int kGameDataBlobFieldNumber = 60;
  inline const ::std::string& game_data_blob() const;
  inline void set_game_data_blob(const ::std::string& value);
  inline void set_game_data_blob(const char* value);
  inline void set_game_data_blob(const void* value, size_t size);
  inline ::std::string* mutable_game_data_blob();
  inline ::std::string* release_game_data_blob();
  inline void set_allocated_game_data_blob(::std::string* game_data_blob);

  // optional .CMsgClientPersonaState.Friend.ClanData clan_data = 64;
  inline bool has_clan_data() const;
  inline void clear_clan_data();
  static const int kClanDataFieldNumber = 64;
  inline const ::CMsgClientPersonaState_Friend_ClanData& clan_data() const;
  inline ::CMsgClientPersonaState_Friend_ClanData* mutable_clan_data();
  inline ::CMsgClientPersonaState_Friend_ClanData* release_clan_data();
  inline void set_allocated_clan_data(::CMsgClientPersonaState_Friend_ClanData* clan_data);

  // optional string clan_tag = 65;
  inline bool has_clan_tag() const;
  inline void clear_clan_tag();
  static const int kClanTagFieldNumber = 65;
  inline const ::std::string& clan_tag() const;
  inline void set_clan_tag(const ::std::string& value);
  inline void set_clan_tag(const char* value);
  inline void set_clan_tag(const char* value, size_t size);
  inline ::std::string* mutable_clan_tag();
  inline ::std::string* release_clan_tag();
  inline void set_allocated_clan_tag(::std::string* clan_tag);

  // repeated .CMsgClientPersonaState.Friend.KV rich_presence = 71;
  inline int rich_presence_size() const;
  inline void clear_rich_presence();
  static const int kRichPresenceFieldNumber = 71;
  inline const ::CMsgClientPersonaState_Friend_KV& rich_presence(int index) const;
  inline ::CMsgClientPersonaState_Friend_KV* mutable_rich_presence(int index);
  inline ::CMsgClientPersonaState_Friend_KV* add_rich_presence();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgClientPersonaState_Friend_KV >&
      rich_presence() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgClientPersonaState_Friend_KV >*
      mutable_rich_presence();

  // optional fixed64 broadcast_id = 72;
  inline bool has_broadcast_id() const;
  inline void clear_broadcast_id();
  static const int kBroadcastIdFieldNumber = 72;
  inline ::google::protobuf::uint64 broadcast_id() const;
  inline void set_broadcast_id(::google::protobuf::uint64 value);

  // optional fixed64 game_lobby_id = 73;
  inline bool has_game_lobby_id() const;
  inline void clear_game_lobby_id();
  static const int kGameLobbyIdFieldNumber = 73;
  inline ::google::protobuf::uint64 game_lobby_id() const;
  inline void set_game_lobby_id(::google::protobuf::uint64 value);

  // optional uint32 watching_broadcast_accountid = 74;
  inline bool has_watching_broadcast_accountid() const;
  inline void clear_watching_broadcast_accountid();
  static const int kWatchingBroadcastAccountidFieldNumber = 74;
  inline ::google::protobuf::uint32 watching_broadcast_accountid() const;
  inline void set_watching_broadcast_accountid(::google::protobuf::uint32 value);

  // optional uint32 watching_broadcast_appid = 75;
  inline bool has_watching_broadcast_appid() const;
  inline void clear_watching_broadcast_appid();
  static const int kWatchingBroadcastAppidFieldNumber = 75;
  inline ::google::protobuf::uint32 watching_broadcast_appid() const;
  inline void set_watching_broadcast_appid(::google::protobuf::uint32 value);

  // optional uint32 watching_broadcast_viewers = 76;
  inline bool has_watching_broadcast_viewers() const;
  inline void clear_watching_broadcast_viewers();
  static const int kWatchingBroadcastViewersFieldNumber = 76;
  inline ::google::protobuf::uint32 watching_broadcast_viewers() const;
  inline void set_watching_broadcast_viewers(::google::protobuf::uint32 value);

  // optional string watching_broadcast_title = 77;
  inline bool has_watching_broadcast_title() const;
  inline void clear_watching_broadcast_title();
  static const int kWatchingBroadcastTitleFieldNumber = 77;
  inline const ::std::string& watching_broadcast_title() const;
  inline void set_watching_broadcast_title(const ::std::string& value);
  inline void set_watching_broadcast_title(const char* value);
  inline void set_watching_broadcast_title(const char* value, size_t size);
  inline ::std::string* mutable_watching_broadcast_title();
  inline ::std::string* release_watching_broadcast_title();
  inline void set_allocated_watching_broadcast_title(::std::string* watching_broadcast_title);

  // optional bool is_community_banned = 78;
  inline bool has_is_community_banned() const;
  inline void clear_is_community_banned();
  static const int kIsCommunityBannedFieldNumber = 78;
  inline bool is_community_banned() const;
  inline void set_is_community_banned(bool value);

  // optional bool player_name_pending_review = 79;
  inline bool has_player_name_pending_review() const;
  inline void clear_player_name_pending_review();
  static const int kPlayerNamePendingReviewFieldNumber = 79;
  inline bool player_name_pending_review() const;
  inline void set_player_name_pending_review(bool value);

  // optional bool avatar_pending_review = 80;
  inline bool has_avatar_pending_review() const;
  inline void clear_avatar_pending_review();
  static const int kAvatarPendingReviewFieldNumber = 80;
  inline bool avatar_pending_review() const;
  inline void set_avatar_pending_review(bool value);

  // @@protoc_insertion_point(class_scope:CMsgClientPersonaState.Friend)
 private:
  inline void set_has_friendid();
  inline void clear_has_friendid();
  inline void set_has_persona_state();
  inline void clear_has_persona_state();
  inline void set_has_game_played_app_id();
  inline void clear_has_game_played_app_id();
  inline void set_has_game_server_ip();
  inline void clear_has_game_server_ip();
  inline void set_has_game_server_port();
  inline void clear_has_game_server_port();
  inline void set_has_persona_state_flags();
  inline void clear_has_persona_state_flags();
  inline void set_has_online_session_instances();
  inline void clear_has_online_session_instances();
  inline void set_has_persona_set_by_user();
  inline void clear_has_persona_set_by_user();
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_query_port();
  inline void clear_has_query_port();
  inline void set_has_steamid_source();
  inline void clear_has_steamid_source();
  inline void set_has_avatar_hash();
  inline void clear_has_avatar_hash();
  inline void set_has_last_logoff();
  inline void clear_has_last_logoff();
  inline void set_has_last_logon();
  inline void clear_has_last_logon();
  inline void set_has_last_seen_online();
  inline void clear_has_last_seen_online();
  inline void set_has_clan_rank();
  inline void clear_has_clan_rank();
  inline void set_has_game_name();
  inline void clear_has_game_name();
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_game_data_blob();
  inline void clear_has_game_data_blob();
  inline void set_has_clan_data();
  inline void clear_has_clan_data();
  inline void set_has_clan_tag();
  inline void clear_has_clan_tag();
  inline void set_has_broadcast_id();
  inline void clear_has_broadcast_id();
  inline void set_has_game_lobby_id();
  inline void clear_has_game_lobby_id();
  inline void set_has_watching_broadcast_accountid();
  inline void clear_has_watching_broadcast_accountid();
  inline void set_has_watching_broadcast_appid();
  inline void clear_has_watching_broadcast_appid();
  inline void set_has_watching_broadcast_viewers();
  inline void clear_has_watching_broadcast_viewers();
  inline void set_has_watching_broadcast_title();
  inline void clear_has_watching_broadcast_title();
  inline void set_has_is_community_banned();
  inline void clear_has_is_community_banned();
  inline void set_has_player_name_pending_review();
  inline void clear_has_player_name_pending_review();
  inline void set_has_avatar_pending_review();
  inline void clear_has_avatar_pending_review();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 friendid_;
  ::google::protobuf::uint32 persona_state_;
  ::google::protobuf::uint32 game_played_app_id_;
  ::google::protobuf::uint32 game_server_ip_;
  ::google::protobuf::uint32 game_server_port_;
  ::google::protobuf::uint32 persona_state_flags_;
  ::google::protobuf::uint32 online_session_instances_;
  ::std::string* player_name_;
  ::google::protobuf::uint64 steamid_source_;
  ::google::protobuf::uint32 query_port_;
  ::google::protobuf::uint32 last_logoff_;
  ::std::string* avatar_hash_;
  ::google::protobuf::uint32 last_logon_;
  ::google::protobuf::uint32 last_seen_online_;
  ::std::string* game_name_;
  ::google::protobuf::uint64 gameid_;
  ::std::string* game_data_blob_;
  ::CMsgClientPersonaState_Friend_ClanData* clan_data_;
  ::std::string* clan_tag_;
  ::google::protobuf::RepeatedPtrField< ::CMsgClientPersonaState_Friend_KV > rich_presence_;
  ::google::protobuf::uint32 clan_rank_;
  bool persona_set_by_user_;
  bool is_community_banned_;
  bool player_name_pending_review_;
  bool avatar_pending_review_;
  ::google::protobuf::uint64 broadcast_id_;
  ::google::protobuf::uint64 game_lobby_id_;
  ::google::protobuf::uint32 watching_broadcast_accountid_;
  ::google::protobuf::uint32 watching_broadcast_appid_;
  ::std::string* watching_broadcast_title_;
  ::google::protobuf::uint32 watching_broadcast_viewers_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(31 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientPersonaState_Friend* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientPersonaState : public ::google::protobuf::Message {
 public:
  CMsgClientPersonaState();
  virtual ~CMsgClientPersonaState();

  CMsgClientPersonaState(const CMsgClientPersonaState& from);

  inline CMsgClientPersonaState& operator=(const CMsgClientPersonaState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientPersonaState& default_instance();

  void Swap(CMsgClientPersonaState* other);

  // implements Message ----------------------------------------------

  CMsgClientPersonaState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientPersonaState& from);
  void MergeFrom(const CMsgClientPersonaState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgClientPersonaState_Friend Friend;

  // accessors -------------------------------------------------------

  // optional uint32 status_flags = 1;
  inline bool has_status_flags() const;
  inline void clear_status_flags();
  static const int kStatusFlagsFieldNumber = 1;
  inline ::google::protobuf::uint32 status_flags() const;
  inline void set_status_flags(::google::protobuf::uint32 value);

  // repeated .CMsgClientPersonaState.Friend friends = 2;
  inline int friends_size() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 2;
  inline const ::CMsgClientPersonaState_Friend& friends(int index) const;
  inline ::CMsgClientPersonaState_Friend* mutable_friends(int index);
  inline ::CMsgClientPersonaState_Friend* add_friends();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgClientPersonaState_Friend >&
      friends() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgClientPersonaState_Friend >*
      mutable_friends();

  // @@protoc_insertion_point(class_scope:CMsgClientPersonaState)
 private:
  inline void set_has_status_flags();
  inline void clear_has_status_flags();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CMsgClientPersonaState_Friend > friends_;
  ::google::protobuf::uint32 status_flags_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientPersonaState* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientFriendProfileInfo : public ::google::protobuf::Message {
 public:
  CMsgClientFriendProfileInfo();
  virtual ~CMsgClientFriendProfileInfo();

  CMsgClientFriendProfileInfo(const CMsgClientFriendProfileInfo& from);

  inline CMsgClientFriendProfileInfo& operator=(const CMsgClientFriendProfileInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientFriendProfileInfo& default_instance();

  void Swap(CMsgClientFriendProfileInfo* other);

  // implements Message ----------------------------------------------

  CMsgClientFriendProfileInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientFriendProfileInfo& from);
  void MergeFrom(const CMsgClientFriendProfileInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steamid_friend = 1;
  inline bool has_steamid_friend() const;
  inline void clear_steamid_friend();
  static const int kSteamidFriendFieldNumber = 1;
  inline ::google::protobuf::uint64 steamid_friend() const;
  inline void set_steamid_friend(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgClientFriendProfileInfo)
 private:
  inline void set_has_steamid_friend();
  inline void clear_has_steamid_friend();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 steamid_friend_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientFriendProfileInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientFriendProfileInfoResponse : public ::google::protobuf::Message {
 public:
  CMsgClientFriendProfileInfoResponse();
  virtual ~CMsgClientFriendProfileInfoResponse();

  CMsgClientFriendProfileInfoResponse(const CMsgClientFriendProfileInfoResponse& from);

  inline CMsgClientFriendProfileInfoResponse& operator=(const CMsgClientFriendProfileInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientFriendProfileInfoResponse& default_instance();

  void Swap(CMsgClientFriendProfileInfoResponse* other);

  // implements Message ----------------------------------------------

  CMsgClientFriendProfileInfoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientFriendProfileInfoResponse& from);
  void MergeFrom(const CMsgClientFriendProfileInfoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 eresult = 1 [default = 2];
  inline bool has_eresult() const;
  inline void clear_eresult();
  static const int kEresultFieldNumber = 1;
  inline ::google::protobuf::int32 eresult() const;
  inline void set_eresult(::google::protobuf::int32 value);

  // optional fixed64 steamid_friend = 2;
  inline bool has_steamid_friend() const;
  inline void clear_steamid_friend();
  static const int kSteamidFriendFieldNumber = 2;
  inline ::google::protobuf::uint64 steamid_friend() const;
  inline void set_steamid_friend(::google::protobuf::uint64 value);

  // optional uint32 time_created = 3;
  inline bool has_time_created() const;
  inline void clear_time_created();
  static const int kTimeCreatedFieldNumber = 3;
  inline ::google::protobuf::uint32 time_created() const;
  inline void set_time_created(::google::protobuf::uint32 value);

  // optional string real_name = 4;
  inline bool has_real_name() const;
  inline void clear_real_name();
  static const int kRealNameFieldNumber = 4;
  inline const ::std::string& real_name() const;
  inline void set_real_name(const ::std::string& value);
  inline void set_real_name(const char* value);
  inline void set_real_name(const char* value, size_t size);
  inline ::std::string* mutable_real_name();
  inline ::std::string* release_real_name();
  inline void set_allocated_real_name(::std::string* real_name);

  // optional string city_name = 5;
  inline bool has_city_name() const;
  inline void clear_city_name();
  static const int kCityNameFieldNumber = 5;
  inline const ::std::string& city_name() const;
  inline void set_city_name(const ::std::string& value);
  inline void set_city_name(const char* value);
  inline void set_city_name(const char* value, size_t size);
  inline ::std::string* mutable_city_name();
  inline ::std::string* release_city_name();
  inline void set_allocated_city_name(::std::string* city_name);

  // optional string state_name = 6;
  inline bool has_state_name() const;
  inline void clear_state_name();
  static const int kStateNameFieldNumber = 6;
  inline const ::std::string& state_name() const;
  inline void set_state_name(const ::std::string& value);
  inline void set_state_name(const char* value);
  inline void set_state_name(const char* value, size_t size);
  inline ::std::string* mutable_state_name();
  inline ::std::string* release_state_name();
  inline void set_allocated_state_name(::std::string* state_name);

  // optional string country_name = 7;
  inline bool has_country_name() const;
  inline void clear_country_name();
  static const int kCountryNameFieldNumber = 7;
  inline const ::std::string& country_name() const;
  inline void set_country_name(const ::std::string& value);
  inline void set_country_name(const char* value);
  inline void set_country_name(const char* value, size_t size);
  inline ::std::string* mutable_country_name();
  inline ::std::string* release_country_name();
  inline void set_allocated_country_name(::std::string* country_name);

  // optional string headline = 8;
  inline bool has_headline() const;
  inline void clear_headline();
  static const int kHeadlineFieldNumber = 8;
  inline const ::std::string& headline() const;
  inline void set_headline(const ::std::string& value);
  inline void set_headline(const char* value);
  inline void set_headline(const char* value, size_t size);
  inline ::std::string* mutable_headline();
  inline ::std::string* release_headline();
  inline void set_allocated_headline(::std::string* headline);

  // optional string summary = 9;
  inline bool has_summary() const;
  inline void clear_summary();
  static const int kSummaryFieldNumber = 9;
  inline const ::std::string& summary() const;
  inline void set_summary(const ::std::string& value);
  inline void set_summary(const char* value);
  inline void set_summary(const char* value, size_t size);
  inline ::std::string* mutable_summary();
  inline ::std::string* release_summary();
  inline void set_allocated_summary(::std::string* summary);

  // @@protoc_insertion_point(class_scope:CMsgClientFriendProfileInfoResponse)
 private:
  inline void set_has_eresult();
  inline void clear_has_eresult();
  inline void set_has_steamid_friend();
  inline void clear_has_steamid_friend();
  inline void set_has_time_created();
  inline void clear_has_time_created();
  inline void set_has_real_name();
  inline void clear_has_real_name();
  inline void set_has_city_name();
  inline void clear_has_city_name();
  inline void set_has_state_name();
  inline void clear_has_state_name();
  inline void set_has_country_name();
  inline void clear_has_country_name();
  inline void set_has_headline();
  inline void clear_has_headline();
  inline void set_has_summary();
  inline void clear_has_summary();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 steamid_friend_;
  ::google::protobuf::int32 eresult_;
  ::google::protobuf::uint32 time_created_;
  ::std::string* real_name_;
  ::std::string* city_name_;
  ::std::string* state_name_;
  ::std::string* country_name_;
  ::std::string* headline_;
  ::std::string* summary_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientFriendProfileInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientCreateFriendsGroup : public ::google::protobuf::Message {
 public:
  CMsgClientCreateFriendsGroup();
  virtual ~CMsgClientCreateFriendsGroup();

  CMsgClientCreateFriendsGroup(const CMsgClientCreateFriendsGroup& from);

  inline CMsgClientCreateFriendsGroup& operator=(const CMsgClientCreateFriendsGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientCreateFriendsGroup& default_instance();

  void Swap(CMsgClientCreateFriendsGroup* other);

  // implements Message ----------------------------------------------

  CMsgClientCreateFriendsGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientCreateFriendsGroup& from);
  void MergeFrom(const CMsgClientCreateFriendsGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steamid = 1;
  inline bool has_steamid() const;
  inline void clear_steamid();
  static const int kSteamidFieldNumber = 1;
  inline ::google::protobuf::uint64 steamid() const;
  inline void set_steamid(::google::protobuf::uint64 value);

  // optional string groupname = 2;
  inline bool has_groupname() const;
  inline void clear_groupname();
  static const int kGroupnameFieldNumber = 2;
  inline const ::std::string& groupname() const;
  inline void set_groupname(const ::std::string& value);
  inline void set_groupname(const char* value);
  inline void set_groupname(const char* value, size_t size);
  inline ::std::string* mutable_groupname();
  inline ::std::string* release_groupname();
  inline void set_allocated_groupname(::std::string* groupname);

  // repeated fixed64 steamid_friends = 3;
  inline int steamid_friends_size() const;
  inline void clear_steamid_friends();
  static const int kSteamidFriendsFieldNumber = 3;
  inline ::google::protobuf::uint64 steamid_friends(int index) const;
  inline void set_steamid_friends(int index, ::google::protobuf::uint64 value);
  inline void add_steamid_friends(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      steamid_friends() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_steamid_friends();

  // @@protoc_insertion_point(class_scope:CMsgClientCreateFriendsGroup)
 private:
  inline void set_has_steamid();
  inline void clear_has_steamid();
  inline void set_has_groupname();
  inline void clear_has_groupname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 steamid_;
  ::std::string* groupname_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > steamid_friends_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientCreateFriendsGroup* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientCreateFriendsGroupResponse : public ::google::protobuf::Message {
 public:
  CMsgClientCreateFriendsGroupResponse();
  virtual ~CMsgClientCreateFriendsGroupResponse();

  CMsgClientCreateFriendsGroupResponse(const CMsgClientCreateFriendsGroupResponse& from);

  inline CMsgClientCreateFriendsGroupResponse& operator=(const CMsgClientCreateFriendsGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientCreateFriendsGroupResponse& default_instance();

  void Swap(CMsgClientCreateFriendsGroupResponse* other);

  // implements Message ----------------------------------------------

  CMsgClientCreateFriendsGroupResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientCreateFriendsGroupResponse& from);
  void MergeFrom(const CMsgClientCreateFriendsGroupResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 eresult = 1;
  inline bool has_eresult() const;
  inline void clear_eresult();
  static const int kEresultFieldNumber = 1;
  inline ::google::protobuf::uint32 eresult() const;
  inline void set_eresult(::google::protobuf::uint32 value);

  // optional int32 groupid = 2;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 2;
  inline ::google::protobuf::int32 groupid() const;
  inline void set_groupid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientCreateFriendsGroupResponse)
 private:
  inline void set_has_eresult();
  inline void clear_has_eresult();
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 eresult_;
  ::google::protobuf::int32 groupid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientCreateFriendsGroupResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientDeleteFriendsGroup : public ::google::protobuf::Message {
 public:
  CMsgClientDeleteFriendsGroup();
  virtual ~CMsgClientDeleteFriendsGroup();

  CMsgClientDeleteFriendsGroup(const CMsgClientDeleteFriendsGroup& from);

  inline CMsgClientDeleteFriendsGroup& operator=(const CMsgClientDeleteFriendsGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientDeleteFriendsGroup& default_instance();

  void Swap(CMsgClientDeleteFriendsGroup* other);

  // implements Message ----------------------------------------------

  CMsgClientDeleteFriendsGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientDeleteFriendsGroup& from);
  void MergeFrom(const CMsgClientDeleteFriendsGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steamid = 1;
  inline bool has_steamid() const;
  inline void clear_steamid();
  static const int kSteamidFieldNumber = 1;
  inline ::google::protobuf::uint64 steamid() const;
  inline void set_steamid(::google::protobuf::uint64 value);

  // optional int32 groupid = 2;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 2;
  inline ::google::protobuf::int32 groupid() const;
  inline void set_groupid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientDeleteFriendsGroup)
 private:
  inline void set_has_steamid();
  inline void clear_has_steamid();
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 steamid_;
  ::google::protobuf::int32 groupid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientDeleteFriendsGroup* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientDeleteFriendsGroupResponse : public ::google::protobuf::Message {
 public:
  CMsgClientDeleteFriendsGroupResponse();
  virtual ~CMsgClientDeleteFriendsGroupResponse();

  CMsgClientDeleteFriendsGroupResponse(const CMsgClientDeleteFriendsGroupResponse& from);

  inline CMsgClientDeleteFriendsGroupResponse& operator=(const CMsgClientDeleteFriendsGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientDeleteFriendsGroupResponse& default_instance();

  void Swap(CMsgClientDeleteFriendsGroupResponse* other);

  // implements Message ----------------------------------------------

  CMsgClientDeleteFriendsGroupResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientDeleteFriendsGroupResponse& from);
  void MergeFrom(const CMsgClientDeleteFriendsGroupResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 eresult = 1;
  inline bool has_eresult() const;
  inline void clear_eresult();
  static const int kEresultFieldNumber = 1;
  inline ::google::protobuf::uint32 eresult() const;
  inline void set_eresult(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientDeleteFriendsGroupResponse)
 private:
  inline void set_has_eresult();
  inline void clear_has_eresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 eresult_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientDeleteFriendsGroupResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientManageFriendsGroup : public ::google::protobuf::Message {
 public:
  CMsgClientManageFriendsGroup();
  virtual ~CMsgClientManageFriendsGroup();

  CMsgClientManageFriendsGroup(const CMsgClientManageFriendsGroup& from);

  inline CMsgClientManageFriendsGroup& operator=(const CMsgClientManageFriendsGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientManageFriendsGroup& default_instance();

  void Swap(CMsgClientManageFriendsGroup* other);

  // implements Message ----------------------------------------------

  CMsgClientManageFriendsGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientManageFriendsGroup& from);
  void MergeFrom(const CMsgClientManageFriendsGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::int32 groupid() const;
  inline void set_groupid(::google::protobuf::int32 value);

  // optional string groupname = 2;
  inline bool has_groupname() const;
  inline void clear_groupname();
  static const int kGroupnameFieldNumber = 2;
  inline const ::std::string& groupname() const;
  inline void set_groupname(const ::std::string& value);
  inline void set_groupname(const char* value);
  inline void set_groupname(const char* value, size_t size);
  inline ::std::string* mutable_groupname();
  inline ::std::string* release_groupname();
  inline void set_allocated_groupname(::std::string* groupname);

  // repeated fixed64 steamid_friends_added = 3;
  inline int steamid_friends_added_size() const;
  inline void clear_steamid_friends_added();
  static const int kSteamidFriendsAddedFieldNumber = 3;
  inline ::google::protobuf::uint64 steamid_friends_added(int index) const;
  inline void set_steamid_friends_added(int index, ::google::protobuf::uint64 value);
  inline void add_steamid_friends_added(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      steamid_friends_added() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_steamid_friends_added();

  // repeated fixed64 steamid_friends_removed = 4;
  inline int steamid_friends_removed_size() const;
  inline void clear_steamid_friends_removed();
  static const int kSteamidFriendsRemovedFieldNumber = 4;
  inline ::google::protobuf::uint64 steamid_friends_removed(int index) const;
  inline void set_steamid_friends_removed(int index, ::google::protobuf::uint64 value);
  inline void add_steamid_friends_removed(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      steamid_friends_removed() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_steamid_friends_removed();

  // @@protoc_insertion_point(class_scope:CMsgClientManageFriendsGroup)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_groupname();
  inline void clear_has_groupname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* groupname_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > steamid_friends_added_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > steamid_friends_removed_;
  ::google::protobuf::int32 groupid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientManageFriendsGroup* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientManageFriendsGroupResponse : public ::google::protobuf::Message {
 public:
  CMsgClientManageFriendsGroupResponse();
  virtual ~CMsgClientManageFriendsGroupResponse();

  CMsgClientManageFriendsGroupResponse(const CMsgClientManageFriendsGroupResponse& from);

  inline CMsgClientManageFriendsGroupResponse& operator=(const CMsgClientManageFriendsGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientManageFriendsGroupResponse& default_instance();

  void Swap(CMsgClientManageFriendsGroupResponse* other);

  // implements Message ----------------------------------------------

  CMsgClientManageFriendsGroupResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientManageFriendsGroupResponse& from);
  void MergeFrom(const CMsgClientManageFriendsGroupResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 eresult = 1;
  inline bool has_eresult() const;
  inline void clear_eresult();
  static const int kEresultFieldNumber = 1;
  inline ::google::protobuf::uint32 eresult() const;
  inline void set_eresult(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientManageFriendsGroupResponse)
 private:
  inline void set_has_eresult();
  inline void clear_has_eresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 eresult_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientManageFriendsGroupResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientAddFriendToGroup : public ::google::protobuf::Message {
 public:
  CMsgClientAddFriendToGroup();
  virtual ~CMsgClientAddFriendToGroup();

  CMsgClientAddFriendToGroup(const CMsgClientAddFriendToGroup& from);

  inline CMsgClientAddFriendToGroup& operator=(const CMsgClientAddFriendToGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientAddFriendToGroup& default_instance();

  void Swap(CMsgClientAddFriendToGroup* other);

  // implements Message ----------------------------------------------

  CMsgClientAddFriendToGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientAddFriendToGroup& from);
  void MergeFrom(const CMsgClientAddFriendToGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::int32 groupid() const;
  inline void set_groupid(::google::protobuf::int32 value);

  // optional fixed64 steamiduser = 2;
  inline bool has_steamiduser() const;
  inline void clear_steamiduser();
  static const int kSteamiduserFieldNumber = 2;
  inline ::google::protobuf::uint64 steamiduser() const;
  inline void set_steamiduser(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgClientAddFriendToGroup)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_steamiduser();
  inline void clear_has_steamiduser();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 steamiduser_;
  ::google::protobuf::int32 groupid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientAddFriendToGroup* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientAddFriendToGroupResponse : public ::google::protobuf::Message {
 public:
  CMsgClientAddFriendToGroupResponse();
  virtual ~CMsgClientAddFriendToGroupResponse();

  CMsgClientAddFriendToGroupResponse(const CMsgClientAddFriendToGroupResponse& from);

  inline CMsgClientAddFriendToGroupResponse& operator=(const CMsgClientAddFriendToGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientAddFriendToGroupResponse& default_instance();

  void Swap(CMsgClientAddFriendToGroupResponse* other);

  // implements Message ----------------------------------------------

  CMsgClientAddFriendToGroupResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientAddFriendToGroupResponse& from);
  void MergeFrom(const CMsgClientAddFriendToGroupResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 eresult = 1;
  inline bool has_eresult() const;
  inline void clear_eresult();
  static const int kEresultFieldNumber = 1;
  inline ::google::protobuf::uint32 eresult() const;
  inline void set_eresult(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientAddFriendToGroupResponse)
 private:
  inline void set_has_eresult();
  inline void clear_has_eresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 eresult_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientAddFriendToGroupResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientRemoveFriendFromGroup : public ::google::protobuf::Message {
 public:
  CMsgClientRemoveFriendFromGroup();
  virtual ~CMsgClientRemoveFriendFromGroup();

  CMsgClientRemoveFriendFromGroup(const CMsgClientRemoveFriendFromGroup& from);

  inline CMsgClientRemoveFriendFromGroup& operator=(const CMsgClientRemoveFriendFromGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientRemoveFriendFromGroup& default_instance();

  void Swap(CMsgClientRemoveFriendFromGroup* other);

  // implements Message ----------------------------------------------

  CMsgClientRemoveFriendFromGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientRemoveFriendFromGroup& from);
  void MergeFrom(const CMsgClientRemoveFriendFromGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::int32 groupid() const;
  inline void set_groupid(::google::protobuf::int32 value);

  // optional fixed64 steamiduser = 2;
  inline bool has_steamiduser() const;
  inline void clear_steamiduser();
  static const int kSteamiduserFieldNumber = 2;
  inline ::google::protobuf::uint64 steamiduser() const;
  inline void set_steamiduser(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgClientRemoveFriendFromGroup)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_steamiduser();
  inline void clear_has_steamiduser();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 steamiduser_;
  ::google::protobuf::int32 groupid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientRemoveFriendFromGroup* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientRemoveFriendFromGroupResponse : public ::google::protobuf::Message {
 public:
  CMsgClientRemoveFriendFromGroupResponse();
  virtual ~CMsgClientRemoveFriendFromGroupResponse();

  CMsgClientRemoveFriendFromGroupResponse(const CMsgClientRemoveFriendFromGroupResponse& from);

  inline CMsgClientRemoveFriendFromGroupResponse& operator=(const CMsgClientRemoveFriendFromGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientRemoveFriendFromGroupResponse& default_instance();

  void Swap(CMsgClientRemoveFriendFromGroupResponse* other);

  // implements Message ----------------------------------------------

  CMsgClientRemoveFriendFromGroupResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientRemoveFriendFromGroupResponse& from);
  void MergeFrom(const CMsgClientRemoveFriendFromGroupResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 eresult = 1;
  inline bool has_eresult() const;
  inline void clear_eresult();
  static const int kEresultFieldNumber = 1;
  inline ::google::protobuf::uint32 eresult() const;
  inline void set_eresult(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientRemoveFriendFromGroupResponse)
 private:
  inline void set_has_eresult();
  inline void clear_has_eresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 eresult_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientRemoveFriendFromGroupResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientGetEmoticonList : public ::google::protobuf::Message {
 public:
  CMsgClientGetEmoticonList();
  virtual ~CMsgClientGetEmoticonList();

  CMsgClientGetEmoticonList(const CMsgClientGetEmoticonList& from);

  inline CMsgClientGetEmoticonList& operator=(const CMsgClientGetEmoticonList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientGetEmoticonList& default_instance();

  void Swap(CMsgClientGetEmoticonList* other);

  // implements Message ----------------------------------------------

  CMsgClientGetEmoticonList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientGetEmoticonList& from);
  void MergeFrom(const CMsgClientGetEmoticonList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgClientGetEmoticonList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientGetEmoticonList* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientEmoticonList_Emoticon : public ::google::protobuf::Message {
 public:
  CMsgClientEmoticonList_Emoticon();
  virtual ~CMsgClientEmoticonList_Emoticon();

  CMsgClientEmoticonList_Emoticon(const CMsgClientEmoticonList_Emoticon& from);

  inline CMsgClientEmoticonList_Emoticon& operator=(const CMsgClientEmoticonList_Emoticon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientEmoticonList_Emoticon& default_instance();

  void Swap(CMsgClientEmoticonList_Emoticon* other);

  // implements Message ----------------------------------------------

  CMsgClientEmoticonList_Emoticon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientEmoticonList_Emoticon& from);
  void MergeFrom(const CMsgClientEmoticonList_Emoticon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional uint32 time_last_used = 3;
  inline bool has_time_last_used() const;
  inline void clear_time_last_used();
  static const int kTimeLastUsedFieldNumber = 3;
  inline ::google::protobuf::uint32 time_last_used() const;
  inline void set_time_last_used(::google::protobuf::uint32 value);

  // optional uint32 use_count = 4;
  inline bool has_use_count() const;
  inline void clear_use_count();
  static const int kUseCountFieldNumber = 4;
  inline ::google::protobuf::uint32 use_count() const;
  inline void set_use_count(::google::protobuf::uint32 value);

  // optional uint32 time_received = 5;
  inline bool has_time_received() const;
  inline void clear_time_received();
  static const int kTimeReceivedFieldNumber = 5;
  inline ::google::protobuf::uint32 time_received() const;
  inline void set_time_received(::google::protobuf::uint32 value);

  // optional uint32 appid = 6;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 6;
  inline ::google::protobuf::uint32 appid() const;
  inline void set_appid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientEmoticonList.Emoticon)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_time_last_used();
  inline void clear_has_time_last_used();
  inline void set_has_use_count();
  inline void clear_has_use_count();
  inline void set_has_time_received();
  inline void clear_has_time_received();
  inline void set_has_appid();
  inline void clear_has_appid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::uint32 time_last_used_;
  ::google::protobuf::uint32 use_count_;
  ::google::protobuf::uint32 time_received_;
  ::google::protobuf::uint32 appid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientEmoticonList_Emoticon* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientEmoticonList_Sticker : public ::google::protobuf::Message {
 public:
  CMsgClientEmoticonList_Sticker();
  virtual ~CMsgClientEmoticonList_Sticker();

  CMsgClientEmoticonList_Sticker(const CMsgClientEmoticonList_Sticker& from);

  inline CMsgClientEmoticonList_Sticker& operator=(const CMsgClientEmoticonList_Sticker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientEmoticonList_Sticker& default_instance();

  void Swap(CMsgClientEmoticonList_Sticker* other);

  // implements Message ----------------------------------------------

  CMsgClientEmoticonList_Sticker* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientEmoticonList_Sticker& from);
  void MergeFrom(const CMsgClientEmoticonList_Sticker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional uint32 time_received = 3;
  inline bool has_time_received() const;
  inline void clear_time_received();
  static const int kTimeReceivedFieldNumber = 3;
  inline ::google::protobuf::uint32 time_received() const;
  inline void set_time_received(::google::protobuf::uint32 value);

  // optional uint32 appid = 4;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 4;
  inline ::google::protobuf::uint32 appid() const;
  inline void set_appid(::google::protobuf::uint32 value);

  // optional uint32 time_last_used = 5;
  inline bool has_time_last_used() const;
  inline void clear_time_last_used();
  static const int kTimeLastUsedFieldNumber = 5;
  inline ::google::protobuf::uint32 time_last_used() const;
  inline void set_time_last_used(::google::protobuf::uint32 value);

  // optional uint32 use_count = 6;
  inline bool has_use_count() const;
  inline void clear_use_count();
  static const int kUseCountFieldNumber = 6;
  inline ::google::protobuf::uint32 use_count() const;
  inline void set_use_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientEmoticonList.Sticker)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_time_received();
  inline void clear_has_time_received();
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_time_last_used();
  inline void clear_has_time_last_used();
  inline void set_has_use_count();
  inline void clear_has_use_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::uint32 time_received_;
  ::google::protobuf::uint32 appid_;
  ::google::protobuf::uint32 time_last_used_;
  ::google::protobuf::uint32 use_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientEmoticonList_Sticker* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientEmoticonList_Effect : public ::google::protobuf::Message {
 public:
  CMsgClientEmoticonList_Effect();
  virtual ~CMsgClientEmoticonList_Effect();

  CMsgClientEmoticonList_Effect(const CMsgClientEmoticonList_Effect& from);

  inline CMsgClientEmoticonList_Effect& operator=(const CMsgClientEmoticonList_Effect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientEmoticonList_Effect& default_instance();

  void Swap(CMsgClientEmoticonList_Effect* other);

  // implements Message ----------------------------------------------

  CMsgClientEmoticonList_Effect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientEmoticonList_Effect& from);
  void MergeFrom(const CMsgClientEmoticonList_Effect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional uint32 time_received = 3;
  inline bool has_time_received() const;
  inline void clear_time_received();
  static const int kTimeReceivedFieldNumber = 3;
  inline ::google::protobuf::uint32 time_received() const;
  inline void set_time_received(::google::protobuf::uint32 value);

  // optional bool infinite_use = 4;
  inline bool has_infinite_use() const;
  inline void clear_infinite_use();
  static const int kInfiniteUseFieldNumber = 4;
  inline bool infinite_use() const;
  inline void set_infinite_use(bool value);

  // optional uint32 appid = 5;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 5;
  inline ::google::protobuf::uint32 appid() const;
  inline void set_appid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgClientEmoticonList.Effect)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_time_received();
  inline void clear_has_time_received();
  inline void set_has_infinite_use();
  inline void clear_has_infinite_use();
  inline void set_has_appid();
  inline void clear_has_appid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::uint32 time_received_;
  bool infinite_use_;
  ::google::protobuf::uint32 appid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientEmoticonList_Effect* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClientEmoticonList : public ::google::protobuf::Message {
 public:
  CMsgClientEmoticonList();
  virtual ~CMsgClientEmoticonList();

  CMsgClientEmoticonList(const CMsgClientEmoticonList& from);

  inline CMsgClientEmoticonList& operator=(const CMsgClientEmoticonList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientEmoticonList& default_instance();

  void Swap(CMsgClientEmoticonList* other);

  // implements Message ----------------------------------------------

  CMsgClientEmoticonList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClientEmoticonList& from);
  void MergeFrom(const CMsgClientEmoticonList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgClientEmoticonList_Emoticon Emoticon;
  typedef CMsgClientEmoticonList_Sticker Sticker;
  typedef CMsgClientEmoticonList_Effect Effect;

  // accessors -------------------------------------------------------

  // repeated .CMsgClientEmoticonList.Emoticon emoticons = 1;
  inline int emoticons_size() const;
  inline void clear_emoticons();
  static const int kEmoticonsFieldNumber = 1;
  inline const ::CMsgClientEmoticonList_Emoticon& emoticons(int index) const;
  inline ::CMsgClientEmoticonList_Emoticon* mutable_emoticons(int index);
  inline ::CMsgClientEmoticonList_Emoticon* add_emoticons();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgClientEmoticonList_Emoticon >&
      emoticons() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgClientEmoticonList_Emoticon >*
      mutable_emoticons();

  // repeated .CMsgClientEmoticonList.Sticker stickers = 2;
  inline int stickers_size() const;
  inline void clear_stickers();
  static const int kStickersFieldNumber = 2;
  inline const ::CMsgClientEmoticonList_Sticker& stickers(int index) const;
  inline ::CMsgClientEmoticonList_Sticker* mutable_stickers(int index);
  inline ::CMsgClientEmoticonList_Sticker* add_stickers();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgClientEmoticonList_Sticker >&
      stickers() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgClientEmoticonList_Sticker >*
      mutable_stickers();

  // repeated .CMsgClientEmoticonList.Effect effects = 3;
  inline int effects_size() const;
  inline void clear_effects();
  static const int kEffectsFieldNumber = 3;
  inline const ::CMsgClientEmoticonList_Effect& effects(int index) const;
  inline ::CMsgClientEmoticonList_Effect* mutable_effects(int index);
  inline ::CMsgClientEmoticonList_Effect* add_effects();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgClientEmoticonList_Effect >&
      effects() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgClientEmoticonList_Effect >*
      mutable_effects();

  // @@protoc_insertion_point(class_scope:CMsgClientEmoticonList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CMsgClientEmoticonList_Emoticon > emoticons_;
  ::google::protobuf::RepeatedPtrField< ::CMsgClientEmoticonList_Sticker > stickers_;
  ::google::protobuf::RepeatedPtrField< ::CMsgClientEmoticonList_Effect > effects_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fclientserver_5ffriends_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fclientserver_5ffriends_2eproto();

  void InitAsDefaultInstance();
  static CMsgClientEmoticonList* default_instance_;
};
// ===================================================================


// ===================================================================

// CMsgClientFriendMsg

// optional fixed64 steamid = 1;
inline bool CMsgClientFriendMsg::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientFriendMsg::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientFriendMsg::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientFriendMsg::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
inline ::google::protobuf::uint64 CMsgClientFriendMsg::steamid() const {
  return steamid_;
}
inline void CMsgClientFriendMsg::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
}

// optional int32 chat_entry_type = 2;
inline bool CMsgClientFriendMsg::has_chat_entry_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientFriendMsg::set_has_chat_entry_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientFriendMsg::clear_has_chat_entry_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientFriendMsg::clear_chat_entry_type() {
  chat_entry_type_ = 0;
  clear_has_chat_entry_type();
}
inline ::google::protobuf::int32 CMsgClientFriendMsg::chat_entry_type() const {
  return chat_entry_type_;
}
inline void CMsgClientFriendMsg::set_chat_entry_type(::google::protobuf::int32 value) {
  set_has_chat_entry_type();
  chat_entry_type_ = value;
}

// optional bytes message = 3;
inline bool CMsgClientFriendMsg::has_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientFriendMsg::set_has_message() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientFriendMsg::clear_has_message() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientFriendMsg::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& CMsgClientFriendMsg::message() const {
  return *message_;
}
inline void CMsgClientFriendMsg::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void CMsgClientFriendMsg::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void CMsgClientFriendMsg::set_message(const void* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientFriendMsg::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* CMsgClientFriendMsg::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientFriendMsg::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional fixed32 rtime32_server_timestamp = 4;
inline bool CMsgClientFriendMsg::has_rtime32_server_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgClientFriendMsg::set_has_rtime32_server_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgClientFriendMsg::clear_has_rtime32_server_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgClientFriendMsg::clear_rtime32_server_timestamp() {
  rtime32_server_timestamp_ = 0u;
  clear_has_rtime32_server_timestamp();
}
inline ::google::protobuf::uint32 CMsgClientFriendMsg::rtime32_server_timestamp() const {
  return rtime32_server_timestamp_;
}
inline void CMsgClientFriendMsg::set_rtime32_server_timestamp(::google::protobuf::uint32 value) {
  set_has_rtime32_server_timestamp();
  rtime32_server_timestamp_ = value;
}

// optional bool echo_to_sender = 5;
inline bool CMsgClientFriendMsg::has_echo_to_sender() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgClientFriendMsg::set_has_echo_to_sender() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgClientFriendMsg::clear_has_echo_to_sender() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgClientFriendMsg::clear_echo_to_sender() {
  echo_to_sender_ = false;
  clear_has_echo_to_sender();
}
inline bool CMsgClientFriendMsg::echo_to_sender() const {
  return echo_to_sender_;
}
inline void CMsgClientFriendMsg::set_echo_to_sender(bool value) {
  set_has_echo_to_sender();
  echo_to_sender_ = value;
}

// -------------------------------------------------------------------

// CMsgClientFriendMsgIncoming

// optional fixed64 steamid_from = 1;
inline bool CMsgClientFriendMsgIncoming::has_steamid_from() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientFriendMsgIncoming::set_has_steamid_from() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientFriendMsgIncoming::clear_has_steamid_from() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientFriendMsgIncoming::clear_steamid_from() {
  steamid_from_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid_from();
}
inline ::google::protobuf::uint64 CMsgClientFriendMsgIncoming::steamid_from() const {
  return steamid_from_;
}
inline void CMsgClientFriendMsgIncoming::set_steamid_from(::google::protobuf::uint64 value) {
  set_has_steamid_from();
  steamid_from_ = value;
}

// optional int32 chat_entry_type = 2;
inline bool CMsgClientFriendMsgIncoming::has_chat_entry_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientFriendMsgIncoming::set_has_chat_entry_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientFriendMsgIncoming::clear_has_chat_entry_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientFriendMsgIncoming::clear_chat_entry_type() {
  chat_entry_type_ = 0;
  clear_has_chat_entry_type();
}
inline ::google::protobuf::int32 CMsgClientFriendMsgIncoming::chat_entry_type() const {
  return chat_entry_type_;
}
inline void CMsgClientFriendMsgIncoming::set_chat_entry_type(::google::protobuf::int32 value) {
  set_has_chat_entry_type();
  chat_entry_type_ = value;
}

// optional bool from_limited_account = 3;
inline bool CMsgClientFriendMsgIncoming::has_from_limited_account() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientFriendMsgIncoming::set_has_from_limited_account() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientFriendMsgIncoming::clear_has_from_limited_account() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientFriendMsgIncoming::clear_from_limited_account() {
  from_limited_account_ = false;
  clear_has_from_limited_account();
}
inline bool CMsgClientFriendMsgIncoming::from_limited_account() const {
  return from_limited_account_;
}
inline void CMsgClientFriendMsgIncoming::set_from_limited_account(bool value) {
  set_has_from_limited_account();
  from_limited_account_ = value;
}

// optional bytes message = 4;
inline bool CMsgClientFriendMsgIncoming::has_message() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgClientFriendMsgIncoming::set_has_message() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgClientFriendMsgIncoming::clear_has_message() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgClientFriendMsgIncoming::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& CMsgClientFriendMsgIncoming::message() const {
  return *message_;
}
inline void CMsgClientFriendMsgIncoming::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void CMsgClientFriendMsgIncoming::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void CMsgClientFriendMsgIncoming::set_message(const void* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientFriendMsgIncoming::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* CMsgClientFriendMsgIncoming::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientFriendMsgIncoming::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional fixed32 rtime32_server_timestamp = 5;
inline bool CMsgClientFriendMsgIncoming::has_rtime32_server_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgClientFriendMsgIncoming::set_has_rtime32_server_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgClientFriendMsgIncoming::clear_has_rtime32_server_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgClientFriendMsgIncoming::clear_rtime32_server_timestamp() {
  rtime32_server_timestamp_ = 0u;
  clear_has_rtime32_server_timestamp();
}
inline ::google::protobuf::uint32 CMsgClientFriendMsgIncoming::rtime32_server_timestamp() const {
  return rtime32_server_timestamp_;
}
inline void CMsgClientFriendMsgIncoming::set_rtime32_server_timestamp(::google::protobuf::uint32 value) {
  set_has_rtime32_server_timestamp();
  rtime32_server_timestamp_ = value;
}

// -------------------------------------------------------------------

// CMsgClientAddFriend

// optional fixed64 steamid_to_add = 1;
inline bool CMsgClientAddFriend::has_steamid_to_add() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientAddFriend::set_has_steamid_to_add() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientAddFriend::clear_has_steamid_to_add() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientAddFriend::clear_steamid_to_add() {
  steamid_to_add_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid_to_add();
}
inline ::google::protobuf::uint64 CMsgClientAddFriend::steamid_to_add() const {
  return steamid_to_add_;
}
inline void CMsgClientAddFriend::set_steamid_to_add(::google::protobuf::uint64 value) {
  set_has_steamid_to_add();
  steamid_to_add_ = value;
}

// optional string accountname_or_email_to_add = 2;
inline bool CMsgClientAddFriend::has_accountname_or_email_to_add() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientAddFriend::set_has_accountname_or_email_to_add() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientAddFriend::clear_has_accountname_or_email_to_add() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientAddFriend::clear_accountname_or_email_to_add() {
  if (accountname_or_email_to_add_ != &::google::protobuf::internal::kEmptyString) {
    accountname_or_email_to_add_->clear();
  }
  clear_has_accountname_or_email_to_add();
}
inline const ::std::string& CMsgClientAddFriend::accountname_or_email_to_add() const {
  return *accountname_or_email_to_add_;
}
inline void CMsgClientAddFriend::set_accountname_or_email_to_add(const ::std::string& value) {
  set_has_accountname_or_email_to_add();
  if (accountname_or_email_to_add_ == &::google::protobuf::internal::kEmptyString) {
    accountname_or_email_to_add_ = new ::std::string;
  }
  accountname_or_email_to_add_->assign(value);
}
inline void CMsgClientAddFriend::set_accountname_or_email_to_add(const char* value) {
  set_has_accountname_or_email_to_add();
  if (accountname_or_email_to_add_ == &::google::protobuf::internal::kEmptyString) {
    accountname_or_email_to_add_ = new ::std::string;
  }
  accountname_or_email_to_add_->assign(value);
}
inline void CMsgClientAddFriend::set_accountname_or_email_to_add(const char* value, size_t size) {
  set_has_accountname_or_email_to_add();
  if (accountname_or_email_to_add_ == &::google::protobuf::internal::kEmptyString) {
    accountname_or_email_to_add_ = new ::std::string;
  }
  accountname_or_email_to_add_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientAddFriend::mutable_accountname_or_email_to_add() {
  set_has_accountname_or_email_to_add();
  if (accountname_or_email_to_add_ == &::google::protobuf::internal::kEmptyString) {
    accountname_or_email_to_add_ = new ::std::string;
  }
  return accountname_or_email_to_add_;
}
inline ::std::string* CMsgClientAddFriend::release_accountname_or_email_to_add() {
  clear_has_accountname_or_email_to_add();
  if (accountname_or_email_to_add_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountname_or_email_to_add_;
    accountname_or_email_to_add_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientAddFriend::set_allocated_accountname_or_email_to_add(::std::string* accountname_or_email_to_add) {
  if (accountname_or_email_to_add_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_or_email_to_add_;
  }
  if (accountname_or_email_to_add) {
    set_has_accountname_or_email_to_add();
    accountname_or_email_to_add_ = accountname_or_email_to_add;
  } else {
    clear_has_accountname_or_email_to_add();
    accountname_or_email_to_add_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgClientAddFriendResponse

// optional int32 eresult = 1 [default = 2];
inline bool CMsgClientAddFriendResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientAddFriendResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientAddFriendResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientAddFriendResponse::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
inline ::google::protobuf::int32 CMsgClientAddFriendResponse::eresult() const {
  return eresult_;
}
inline void CMsgClientAddFriendResponse::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
}

// optional fixed64 steam_id_added = 2;
inline bool CMsgClientAddFriendResponse::has_steam_id_added() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientAddFriendResponse::set_has_steam_id_added() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientAddFriendResponse::clear_has_steam_id_added() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientAddFriendResponse::clear_steam_id_added() {
  steam_id_added_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id_added();
}
inline ::google::protobuf::uint64 CMsgClientAddFriendResponse::steam_id_added() const {
  return steam_id_added_;
}
inline void CMsgClientAddFriendResponse::set_steam_id_added(::google::protobuf::uint64 value) {
  set_has_steam_id_added();
  steam_id_added_ = value;
}

// optional string persona_name_added = 3;
inline bool CMsgClientAddFriendResponse::has_persona_name_added() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientAddFriendResponse::set_has_persona_name_added() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientAddFriendResponse::clear_has_persona_name_added() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientAddFriendResponse::clear_persona_name_added() {
  if (persona_name_added_ != &::google::protobuf::internal::kEmptyString) {
    persona_name_added_->clear();
  }
  clear_has_persona_name_added();
}
inline const ::std::string& CMsgClientAddFriendResponse::persona_name_added() const {
  return *persona_name_added_;
}
inline void CMsgClientAddFriendResponse::set_persona_name_added(const ::std::string& value) {
  set_has_persona_name_added();
  if (persona_name_added_ == &::google::protobuf::internal::kEmptyString) {
    persona_name_added_ = new ::std::string;
  }
  persona_name_added_->assign(value);
}
inline void CMsgClientAddFriendResponse::set_persona_name_added(const char* value) {
  set_has_persona_name_added();
  if (persona_name_added_ == &::google::protobuf::internal::kEmptyString) {
    persona_name_added_ = new ::std::string;
  }
  persona_name_added_->assign(value);
}
inline void CMsgClientAddFriendResponse::set_persona_name_added(const char* value, size_t size) {
  set_has_persona_name_added();
  if (persona_name_added_ == &::google::protobuf::internal::kEmptyString) {
    persona_name_added_ = new ::std::string;
  }
  persona_name_added_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientAddFriendResponse::mutable_persona_name_added() {
  set_has_persona_name_added();
  if (persona_name_added_ == &::google::protobuf::internal::kEmptyString) {
    persona_name_added_ = new ::std::string;
  }
  return persona_name_added_;
}
inline ::std::string* CMsgClientAddFriendResponse::release_persona_name_added() {
  clear_has_persona_name_added();
  if (persona_name_added_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = persona_name_added_;
    persona_name_added_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientAddFriendResponse::set_allocated_persona_name_added(::std::string* persona_name_added) {
  if (persona_name_added_ != &::google::protobuf::internal::kEmptyString) {
    delete persona_name_added_;
  }
  if (persona_name_added) {
    set_has_persona_name_added();
    persona_name_added_ = persona_name_added;
  } else {
    clear_has_persona_name_added();
    persona_name_added_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgClientRemoveFriend

// optional fixed64 friendid = 1;
inline bool CMsgClientRemoveFriend::has_friendid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientRemoveFriend::set_has_friendid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientRemoveFriend::clear_has_friendid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientRemoveFriend::clear_friendid() {
  friendid_ = GOOGLE_ULONGLONG(0);
  clear_has_friendid();
}
inline ::google::protobuf::uint64 CMsgClientRemoveFriend::friendid() const {
  return friendid_;
}
inline void CMsgClientRemoveFriend::set_friendid(::google::protobuf::uint64 value) {
  set_has_friendid();
  friendid_ = value;
}

// -------------------------------------------------------------------

// CMsgClientHideFriend

// optional fixed64 friendid = 1;
inline bool CMsgClientHideFriend::has_friendid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientHideFriend::set_has_friendid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientHideFriend::clear_has_friendid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientHideFriend::clear_friendid() {
  friendid_ = GOOGLE_ULONGLONG(0);
  clear_has_friendid();
}
inline ::google::protobuf::uint64 CMsgClientHideFriend::friendid() const {
  return friendid_;
}
inline void CMsgClientHideFriend::set_friendid(::google::protobuf::uint64 value) {
  set_has_friendid();
  friendid_ = value;
}

// optional bool hide = 2;
inline bool CMsgClientHideFriend::has_hide() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientHideFriend::set_has_hide() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientHideFriend::clear_has_hide() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientHideFriend::clear_hide() {
  hide_ = false;
  clear_has_hide();
}
inline bool CMsgClientHideFriend::hide() const {
  return hide_;
}
inline void CMsgClientHideFriend::set_hide(bool value) {
  set_has_hide();
  hide_ = value;
}

// -------------------------------------------------------------------

// CMsgClientFriendsList_Friend

// optional fixed64 ulfriendid = 1;
inline bool CMsgClientFriendsList_Friend::has_ulfriendid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientFriendsList_Friend::set_has_ulfriendid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientFriendsList_Friend::clear_has_ulfriendid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientFriendsList_Friend::clear_ulfriendid() {
  ulfriendid_ = GOOGLE_ULONGLONG(0);
  clear_has_ulfriendid();
}
inline ::google::protobuf::uint64 CMsgClientFriendsList_Friend::ulfriendid() const {
  return ulfriendid_;
}
inline void CMsgClientFriendsList_Friend::set_ulfriendid(::google::protobuf::uint64 value) {
  set_has_ulfriendid();
  ulfriendid_ = value;
}

// optional uint32 efriendrelationship = 2;
inline bool CMsgClientFriendsList_Friend::has_efriendrelationship() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientFriendsList_Friend::set_has_efriendrelationship() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientFriendsList_Friend::clear_has_efriendrelationship() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientFriendsList_Friend::clear_efriendrelationship() {
  efriendrelationship_ = 0u;
  clear_has_efriendrelationship();
}
inline ::google::protobuf::uint32 CMsgClientFriendsList_Friend::efriendrelationship() const {
  return efriendrelationship_;
}
inline void CMsgClientFriendsList_Friend::set_efriendrelationship(::google::protobuf::uint32 value) {
  set_has_efriendrelationship();
  efriendrelationship_ = value;
}

// -------------------------------------------------------------------

// CMsgClientFriendsList

// optional bool bincremental = 1;
inline bool CMsgClientFriendsList::has_bincremental() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientFriendsList::set_has_bincremental() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientFriendsList::clear_has_bincremental() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientFriendsList::clear_bincremental() {
  bincremental_ = false;
  clear_has_bincremental();
}
inline bool CMsgClientFriendsList::bincremental() const {
  return bincremental_;
}
inline void CMsgClientFriendsList::set_bincremental(bool value) {
  set_has_bincremental();
  bincremental_ = value;
}

// repeated .CMsgClientFriendsList.Friend friends = 2;
inline int CMsgClientFriendsList::friends_size() const {
  return friends_.size();
}
inline void CMsgClientFriendsList::clear_friends() {
  friends_.Clear();
}
inline const ::CMsgClientFriendsList_Friend& CMsgClientFriendsList::friends(int index) const {
  return friends_.Get(index);
}
inline ::CMsgClientFriendsList_Friend* CMsgClientFriendsList::mutable_friends(int index) {
  return friends_.Mutable(index);
}
inline ::CMsgClientFriendsList_Friend* CMsgClientFriendsList::add_friends() {
  return friends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgClientFriendsList_Friend >&
CMsgClientFriendsList::friends() const {
  return friends_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgClientFriendsList_Friend >*
CMsgClientFriendsList::mutable_friends() {
  return &friends_;
}

// optional uint32 max_friend_count = 3;
inline bool CMsgClientFriendsList::has_max_friend_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientFriendsList::set_has_max_friend_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientFriendsList::clear_has_max_friend_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientFriendsList::clear_max_friend_count() {
  max_friend_count_ = 0u;
  clear_has_max_friend_count();
}
inline ::google::protobuf::uint32 CMsgClientFriendsList::max_friend_count() const {
  return max_friend_count_;
}
inline void CMsgClientFriendsList::set_max_friend_count(::google::protobuf::uint32 value) {
  set_has_max_friend_count();
  max_friend_count_ = value;
}

// optional uint32 active_friend_count = 4;
inline bool CMsgClientFriendsList::has_active_friend_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgClientFriendsList::set_has_active_friend_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgClientFriendsList::clear_has_active_friend_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgClientFriendsList::clear_active_friend_count() {
  active_friend_count_ = 0u;
  clear_has_active_friend_count();
}
inline ::google::protobuf::uint32 CMsgClientFriendsList::active_friend_count() const {
  return active_friend_count_;
}
inline void CMsgClientFriendsList::set_active_friend_count(::google::protobuf::uint32 value) {
  set_has_active_friend_count();
  active_friend_count_ = value;
}

// optional bool friends_limit_hit = 5;
inline bool CMsgClientFriendsList::has_friends_limit_hit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgClientFriendsList::set_has_friends_limit_hit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgClientFriendsList::clear_has_friends_limit_hit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgClientFriendsList::clear_friends_limit_hit() {
  friends_limit_hit_ = false;
  clear_has_friends_limit_hit();
}
inline bool CMsgClientFriendsList::friends_limit_hit() const {
  return friends_limit_hit_;
}
inline void CMsgClientFriendsList::set_friends_limit_hit(bool value) {
  set_has_friends_limit_hit();
  friends_limit_hit_ = value;
}

// -------------------------------------------------------------------

// CMsgClientFriendsGroupsList_FriendGroup

// optional int32 nGroupID = 1;
inline bool CMsgClientFriendsGroupsList_FriendGroup::has_ngroupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientFriendsGroupsList_FriendGroup::set_has_ngroupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientFriendsGroupsList_FriendGroup::clear_has_ngroupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientFriendsGroupsList_FriendGroup::clear_ngroupid() {
  ngroupid_ = 0;
  clear_has_ngroupid();
}
inline ::google::protobuf::int32 CMsgClientFriendsGroupsList_FriendGroup::ngroupid() const {
  return ngroupid_;
}
inline void CMsgClientFriendsGroupsList_FriendGroup::set_ngroupid(::google::protobuf::int32 value) {
  set_has_ngroupid();
  ngroupid_ = value;
}

// optional string strGroupName = 2;
inline bool CMsgClientFriendsGroupsList_FriendGroup::has_strgroupname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientFriendsGroupsList_FriendGroup::set_has_strgroupname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientFriendsGroupsList_FriendGroup::clear_has_strgroupname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientFriendsGroupsList_FriendGroup::clear_strgroupname() {
  if (strgroupname_ != &::google::protobuf::internal::kEmptyString) {
    strgroupname_->clear();
  }
  clear_has_strgroupname();
}
inline const ::std::string& CMsgClientFriendsGroupsList_FriendGroup::strgroupname() const {
  return *strgroupname_;
}
inline void CMsgClientFriendsGroupsList_FriendGroup::set_strgroupname(const ::std::string& value) {
  set_has_strgroupname();
  if (strgroupname_ == &::google::protobuf::internal::kEmptyString) {
    strgroupname_ = new ::std::string;
  }
  strgroupname_->assign(value);
}
inline void CMsgClientFriendsGroupsList_FriendGroup::set_strgroupname(const char* value) {
  set_has_strgroupname();
  if (strgroupname_ == &::google::protobuf::internal::kEmptyString) {
    strgroupname_ = new ::std::string;
  }
  strgroupname_->assign(value);
}
inline void CMsgClientFriendsGroupsList_FriendGroup::set_strgroupname(const char* value, size_t size) {
  set_has_strgroupname();
  if (strgroupname_ == &::google::protobuf::internal::kEmptyString) {
    strgroupname_ = new ::std::string;
  }
  strgroupname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientFriendsGroupsList_FriendGroup::mutable_strgroupname() {
  set_has_strgroupname();
  if (strgroupname_ == &::google::protobuf::internal::kEmptyString) {
    strgroupname_ = new ::std::string;
  }
  return strgroupname_;
}
inline ::std::string* CMsgClientFriendsGroupsList_FriendGroup::release_strgroupname() {
  clear_has_strgroupname();
  if (strgroupname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strgroupname_;
    strgroupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientFriendsGroupsList_FriendGroup::set_allocated_strgroupname(::std::string* strgroupname) {
  if (strgroupname_ != &::google::protobuf::internal::kEmptyString) {
    delete strgroupname_;
  }
  if (strgroupname) {
    set_has_strgroupname();
    strgroupname_ = strgroupname;
  } else {
    clear_has_strgroupname();
    strgroupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgClientFriendsGroupsList_FriendGroupsMembership

// optional fixed64 ulSteamID = 1;
inline bool CMsgClientFriendsGroupsList_FriendGroupsMembership::has_ulsteamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientFriendsGroupsList_FriendGroupsMembership::set_has_ulsteamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientFriendsGroupsList_FriendGroupsMembership::clear_has_ulsteamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientFriendsGroupsList_FriendGroupsMembership::clear_ulsteamid() {
  ulsteamid_ = GOOGLE_ULONGLONG(0);
  clear_has_ulsteamid();
}
inline ::google::protobuf::uint64 CMsgClientFriendsGroupsList_FriendGroupsMembership::ulsteamid() const {
  return ulsteamid_;
}
inline void CMsgClientFriendsGroupsList_FriendGroupsMembership::set_ulsteamid(::google::protobuf::uint64 value) {
  set_has_ulsteamid();
  ulsteamid_ = value;
}

// optional int32 nGroupID = 2;
inline bool CMsgClientFriendsGroupsList_FriendGroupsMembership::has_ngroupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientFriendsGroupsList_FriendGroupsMembership::set_has_ngroupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientFriendsGroupsList_FriendGroupsMembership::clear_has_ngroupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientFriendsGroupsList_FriendGroupsMembership::clear_ngroupid() {
  ngroupid_ = 0;
  clear_has_ngroupid();
}
inline ::google::protobuf::int32 CMsgClientFriendsGroupsList_FriendGroupsMembership::ngroupid() const {
  return ngroupid_;
}
inline void CMsgClientFriendsGroupsList_FriendGroupsMembership::set_ngroupid(::google::protobuf::int32 value) {
  set_has_ngroupid();
  ngroupid_ = value;
}

// -------------------------------------------------------------------

// CMsgClientFriendsGroupsList

// optional bool bremoval = 1;
inline bool CMsgClientFriendsGroupsList::has_bremoval() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientFriendsGroupsList::set_has_bremoval() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientFriendsGroupsList::clear_has_bremoval() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientFriendsGroupsList::clear_bremoval() {
  bremoval_ = false;
  clear_has_bremoval();
}
inline bool CMsgClientFriendsGroupsList::bremoval() const {
  return bremoval_;
}
inline void CMsgClientFriendsGroupsList::set_bremoval(bool value) {
  set_has_bremoval();
  bremoval_ = value;
}

// optional bool bincremental = 2;
inline bool CMsgClientFriendsGroupsList::has_bincremental() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientFriendsGroupsList::set_has_bincremental() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientFriendsGroupsList::clear_has_bincremental() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientFriendsGroupsList::clear_bincremental() {
  bincremental_ = false;
  clear_has_bincremental();
}
inline bool CMsgClientFriendsGroupsList::bincremental() const {
  return bincremental_;
}
inline void CMsgClientFriendsGroupsList::set_bincremental(bool value) {
  set_has_bincremental();
  bincremental_ = value;
}

// repeated .CMsgClientFriendsGroupsList.FriendGroup friendGroups = 3;
inline int CMsgClientFriendsGroupsList::friendgroups_size() const {
  return friendgroups_.size();
}
inline void CMsgClientFriendsGroupsList::clear_friendgroups() {
  friendgroups_.Clear();
}
inline const ::CMsgClientFriendsGroupsList_FriendGroup& CMsgClientFriendsGroupsList::friendgroups(int index) const {
  return friendgroups_.Get(index);
}
inline ::CMsgClientFriendsGroupsList_FriendGroup* CMsgClientFriendsGroupsList::mutable_friendgroups(int index) {
  return friendgroups_.Mutable(index);
}
inline ::CMsgClientFriendsGroupsList_FriendGroup* CMsgClientFriendsGroupsList::add_friendgroups() {
  return friendgroups_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgClientFriendsGroupsList_FriendGroup >&
CMsgClientFriendsGroupsList::friendgroups() const {
  return friendgroups_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgClientFriendsGroupsList_FriendGroup >*
CMsgClientFriendsGroupsList::mutable_friendgroups() {
  return &friendgroups_;
}

// repeated .CMsgClientFriendsGroupsList.FriendGroupsMembership memberships = 4;
inline int CMsgClientFriendsGroupsList::memberships_size() const {
  return memberships_.size();
}
inline void CMsgClientFriendsGroupsList::clear_memberships() {
  memberships_.Clear();
}
inline const ::CMsgClientFriendsGroupsList_FriendGroupsMembership& CMsgClientFriendsGroupsList::memberships(int index) const {
  return memberships_.Get(index);
}
inline ::CMsgClientFriendsGroupsList_FriendGroupsMembership* CMsgClientFriendsGroupsList::mutable_memberships(int index) {
  return memberships_.Mutable(index);
}
inline ::CMsgClientFriendsGroupsList_FriendGroupsMembership* CMsgClientFriendsGroupsList::add_memberships() {
  return memberships_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgClientFriendsGroupsList_FriendGroupsMembership >&
CMsgClientFriendsGroupsList::memberships() const {
  return memberships_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgClientFriendsGroupsList_FriendGroupsMembership >*
CMsgClientFriendsGroupsList::mutable_memberships() {
  return &memberships_;
}

// -------------------------------------------------------------------

// CMsgClientPlayerNicknameList_PlayerNickname

// optional fixed64 steamid = 1;
inline bool CMsgClientPlayerNicknameList_PlayerNickname::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientPlayerNicknameList_PlayerNickname::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientPlayerNicknameList_PlayerNickname::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientPlayerNicknameList_PlayerNickname::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
inline ::google::protobuf::uint64 CMsgClientPlayerNicknameList_PlayerNickname::steamid() const {
  return steamid_;
}
inline void CMsgClientPlayerNicknameList_PlayerNickname::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
}

// optional string nickname = 3;
inline bool CMsgClientPlayerNicknameList_PlayerNickname::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientPlayerNicknameList_PlayerNickname::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientPlayerNicknameList_PlayerNickname::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientPlayerNicknameList_PlayerNickname::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& CMsgClientPlayerNicknameList_PlayerNickname::nickname() const {
  return *nickname_;
}
inline void CMsgClientPlayerNicknameList_PlayerNickname::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void CMsgClientPlayerNicknameList_PlayerNickname::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void CMsgClientPlayerNicknameList_PlayerNickname::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientPlayerNicknameList_PlayerNickname::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* CMsgClientPlayerNicknameList_PlayerNickname::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientPlayerNicknameList_PlayerNickname::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgClientPlayerNicknameList

// optional bool removal = 1;
inline bool CMsgClientPlayerNicknameList::has_removal() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientPlayerNicknameList::set_has_removal() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientPlayerNicknameList::clear_has_removal() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientPlayerNicknameList::clear_removal() {
  removal_ = false;
  clear_has_removal();
}
inline bool CMsgClientPlayerNicknameList::removal() const {
  return removal_;
}
inline void CMsgClientPlayerNicknameList::set_removal(bool value) {
  set_has_removal();
  removal_ = value;
}

// optional bool incremental = 2;
inline bool CMsgClientPlayerNicknameList::has_incremental() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientPlayerNicknameList::set_has_incremental() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientPlayerNicknameList::clear_has_incremental() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientPlayerNicknameList::clear_incremental() {
  incremental_ = false;
  clear_has_incremental();
}
inline bool CMsgClientPlayerNicknameList::incremental() const {
  return incremental_;
}
inline void CMsgClientPlayerNicknameList::set_incremental(bool value) {
  set_has_incremental();
  incremental_ = value;
}

// repeated .CMsgClientPlayerNicknameList.PlayerNickname nicknames = 3;
inline int CMsgClientPlayerNicknameList::nicknames_size() const {
  return nicknames_.size();
}
inline void CMsgClientPlayerNicknameList::clear_nicknames() {
  nicknames_.Clear();
}
inline const ::CMsgClientPlayerNicknameList_PlayerNickname& CMsgClientPlayerNicknameList::nicknames(int index) const {
  return nicknames_.Get(index);
}
inline ::CMsgClientPlayerNicknameList_PlayerNickname* CMsgClientPlayerNicknameList::mutable_nicknames(int index) {
  return nicknames_.Mutable(index);
}
inline ::CMsgClientPlayerNicknameList_PlayerNickname* CMsgClientPlayerNicknameList::add_nicknames() {
  return nicknames_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgClientPlayerNicknameList_PlayerNickname >&
CMsgClientPlayerNicknameList::nicknames() const {
  return nicknames_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgClientPlayerNicknameList_PlayerNickname >*
CMsgClientPlayerNicknameList::mutable_nicknames() {
  return &nicknames_;
}

// -------------------------------------------------------------------

// CMsgClientSetPlayerNickname

// optional fixed64 steamid = 1;
inline bool CMsgClientSetPlayerNickname::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientSetPlayerNickname::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientSetPlayerNickname::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientSetPlayerNickname::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
inline ::google::protobuf::uint64 CMsgClientSetPlayerNickname::steamid() const {
  return steamid_;
}
inline void CMsgClientSetPlayerNickname::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
}

// optional string nickname = 2;
inline bool CMsgClientSetPlayerNickname::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientSetPlayerNickname::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientSetPlayerNickname::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientSetPlayerNickname::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& CMsgClientSetPlayerNickname::nickname() const {
  return *nickname_;
}
inline void CMsgClientSetPlayerNickname::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void CMsgClientSetPlayerNickname::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void CMsgClientSetPlayerNickname::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientSetPlayerNickname::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* CMsgClientSetPlayerNickname::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientSetPlayerNickname::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgClientSetPlayerNicknameResponse

// optional uint32 eresult = 1;
inline bool CMsgClientSetPlayerNicknameResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientSetPlayerNicknameResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientSetPlayerNicknameResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientSetPlayerNicknameResponse::clear_eresult() {
  eresult_ = 0u;
  clear_has_eresult();
}
inline ::google::protobuf::uint32 CMsgClientSetPlayerNicknameResponse::eresult() const {
  return eresult_;
}
inline void CMsgClientSetPlayerNicknameResponse::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
}

// -------------------------------------------------------------------

// CMsgClientRequestFriendData

// optional uint32 persona_state_requested = 1;
inline bool CMsgClientRequestFriendData::has_persona_state_requested() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientRequestFriendData::set_has_persona_state_requested() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientRequestFriendData::clear_has_persona_state_requested() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientRequestFriendData::clear_persona_state_requested() {
  persona_state_requested_ = 0u;
  clear_has_persona_state_requested();
}
inline ::google::protobuf::uint32 CMsgClientRequestFriendData::persona_state_requested() const {
  return persona_state_requested_;
}
inline void CMsgClientRequestFriendData::set_persona_state_requested(::google::protobuf::uint32 value) {
  set_has_persona_state_requested();
  persona_state_requested_ = value;
}

// repeated fixed64 friends = 2;
inline int CMsgClientRequestFriendData::friends_size() const {
  return friends_.size();
}
inline void CMsgClientRequestFriendData::clear_friends() {
  friends_.Clear();
}
inline ::google::protobuf::uint64 CMsgClientRequestFriendData::friends(int index) const {
  return friends_.Get(index);
}
inline void CMsgClientRequestFriendData::set_friends(int index, ::google::protobuf::uint64 value) {
  friends_.Set(index, value);
}
inline void CMsgClientRequestFriendData::add_friends(::google::protobuf::uint64 value) {
  friends_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgClientRequestFriendData::friends() const {
  return friends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgClientRequestFriendData::mutable_friends() {
  return &friends_;
}

// -------------------------------------------------------------------

// CMsgClientChangeStatus

// optional uint32 persona_state = 1;
inline bool CMsgClientChangeStatus::has_persona_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientChangeStatus::set_has_persona_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientChangeStatus::clear_has_persona_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientChangeStatus::clear_persona_state() {
  persona_state_ = 0u;
  clear_has_persona_state();
}
inline ::google::protobuf::uint32 CMsgClientChangeStatus::persona_state() const {
  return persona_state_;
}
inline void CMsgClientChangeStatus::set_persona_state(::google::protobuf::uint32 value) {
  set_has_persona_state();
  persona_state_ = value;
}

// optional string player_name = 2;
inline bool CMsgClientChangeStatus::has_player_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientChangeStatus::set_has_player_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientChangeStatus::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientChangeStatus::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& CMsgClientChangeStatus::player_name() const {
  return *player_name_;
}
inline void CMsgClientChangeStatus::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void CMsgClientChangeStatus::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void CMsgClientChangeStatus::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientChangeStatus::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* CMsgClientChangeStatus::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientChangeStatus::set_allocated_player_name(::std::string* player_name) {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (player_name) {
    set_has_player_name();
    player_name_ = player_name;
  } else {
    clear_has_player_name();
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool is_auto_generated_name = 3;
inline bool CMsgClientChangeStatus::has_is_auto_generated_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientChangeStatus::set_has_is_auto_generated_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientChangeStatus::clear_has_is_auto_generated_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientChangeStatus::clear_is_auto_generated_name() {
  is_auto_generated_name_ = false;
  clear_has_is_auto_generated_name();
}
inline bool CMsgClientChangeStatus::is_auto_generated_name() const {
  return is_auto_generated_name_;
}
inline void CMsgClientChangeStatus::set_is_auto_generated_name(bool value) {
  set_has_is_auto_generated_name();
  is_auto_generated_name_ = value;
}

// optional bool high_priority = 4;
inline bool CMsgClientChangeStatus::has_high_priority() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgClientChangeStatus::set_has_high_priority() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgClientChangeStatus::clear_has_high_priority() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgClientChangeStatus::clear_high_priority() {
  high_priority_ = false;
  clear_has_high_priority();
}
inline bool CMsgClientChangeStatus::high_priority() const {
  return high_priority_;
}
inline void CMsgClientChangeStatus::set_high_priority(bool value) {
  set_has_high_priority();
  high_priority_ = value;
}

// optional bool persona_set_by_user = 5;
inline bool CMsgClientChangeStatus::has_persona_set_by_user() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgClientChangeStatus::set_has_persona_set_by_user() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgClientChangeStatus::clear_has_persona_set_by_user() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgClientChangeStatus::clear_persona_set_by_user() {
  persona_set_by_user_ = false;
  clear_has_persona_set_by_user();
}
inline bool CMsgClientChangeStatus::persona_set_by_user() const {
  return persona_set_by_user_;
}
inline void CMsgClientChangeStatus::set_persona_set_by_user(bool value) {
  set_has_persona_set_by_user();
  persona_set_by_user_ = value;
}

// optional uint32 persona_state_flags = 6 [default = 0];
inline bool CMsgClientChangeStatus::has_persona_state_flags() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgClientChangeStatus::set_has_persona_state_flags() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgClientChangeStatus::clear_has_persona_state_flags() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgClientChangeStatus::clear_persona_state_flags() {
  persona_state_flags_ = 0u;
  clear_has_persona_state_flags();
}
inline ::google::protobuf::uint32 CMsgClientChangeStatus::persona_state_flags() const {
  return persona_state_flags_;
}
inline void CMsgClientChangeStatus::set_persona_state_flags(::google::protobuf::uint32 value) {
  set_has_persona_state_flags();
  persona_state_flags_ = value;
}

// optional bool need_persona_response = 7;
inline bool CMsgClientChangeStatus::has_need_persona_response() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgClientChangeStatus::set_has_need_persona_response() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgClientChangeStatus::clear_has_need_persona_response() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgClientChangeStatus::clear_need_persona_response() {
  need_persona_response_ = false;
  clear_has_need_persona_response();
}
inline bool CMsgClientChangeStatus::need_persona_response() const {
  return need_persona_response_;
}
inline void CMsgClientChangeStatus::set_need_persona_response(bool value) {
  set_has_need_persona_response();
  need_persona_response_ = value;
}

// optional bool is_client_idle = 8;
inline bool CMsgClientChangeStatus::has_is_client_idle() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgClientChangeStatus::set_has_is_client_idle() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgClientChangeStatus::clear_has_is_client_idle() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgClientChangeStatus::clear_is_client_idle() {
  is_client_idle_ = false;
  clear_has_is_client_idle();
}
inline bool CMsgClientChangeStatus::is_client_idle() const {
  return is_client_idle_;
}
inline void CMsgClientChangeStatus::set_is_client_idle(bool value) {
  set_has_is_client_idle();
  is_client_idle_ = value;
}

// -------------------------------------------------------------------

// CMsgPersonaChangeResponse

// optional uint32 result = 1;
inline bool CMsgPersonaChangeResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPersonaChangeResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPersonaChangeResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPersonaChangeResponse::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 CMsgPersonaChangeResponse::result() const {
  return result_;
}
inline void CMsgPersonaChangeResponse::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// optional string player_name = 2;
inline bool CMsgPersonaChangeResponse::has_player_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgPersonaChangeResponse::set_has_player_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgPersonaChangeResponse::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgPersonaChangeResponse::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& CMsgPersonaChangeResponse::player_name() const {
  return *player_name_;
}
inline void CMsgPersonaChangeResponse::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void CMsgPersonaChangeResponse::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void CMsgPersonaChangeResponse::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgPersonaChangeResponse::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* CMsgPersonaChangeResponse::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgPersonaChangeResponse::set_allocated_player_name(::std::string* player_name) {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (player_name) {
    set_has_player_name();
    player_name_ = player_name;
  } else {
    clear_has_player_name();
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgClientPersonaState_Friend_ClanData

// optional uint32 ogg_app_id = 1;
inline bool CMsgClientPersonaState_Friend_ClanData::has_ogg_app_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientPersonaState_Friend_ClanData::set_has_ogg_app_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientPersonaState_Friend_ClanData::clear_has_ogg_app_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientPersonaState_Friend_ClanData::clear_ogg_app_id() {
  ogg_app_id_ = 0u;
  clear_has_ogg_app_id();
}
inline ::google::protobuf::uint32 CMsgClientPersonaState_Friend_ClanData::ogg_app_id() const {
  return ogg_app_id_;
}
inline void CMsgClientPersonaState_Friend_ClanData::set_ogg_app_id(::google::protobuf::uint32 value) {
  set_has_ogg_app_id();
  ogg_app_id_ = value;
}

// optional uint64 chat_group_id = 2;
inline bool CMsgClientPersonaState_Friend_ClanData::has_chat_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientPersonaState_Friend_ClanData::set_has_chat_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientPersonaState_Friend_ClanData::clear_has_chat_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientPersonaState_Friend_ClanData::clear_chat_group_id() {
  chat_group_id_ = GOOGLE_ULONGLONG(0);
  clear_has_chat_group_id();
}
inline ::google::protobuf::uint64 CMsgClientPersonaState_Friend_ClanData::chat_group_id() const {
  return chat_group_id_;
}
inline void CMsgClientPersonaState_Friend_ClanData::set_chat_group_id(::google::protobuf::uint64 value) {
  set_has_chat_group_id();
  chat_group_id_ = value;
}

// -------------------------------------------------------------------

// CMsgClientPersonaState_Friend_KV

// optional string key = 1;
inline bool CMsgClientPersonaState_Friend_KV::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientPersonaState_Friend_KV::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientPersonaState_Friend_KV::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientPersonaState_Friend_KV::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& CMsgClientPersonaState_Friend_KV::key() const {
  return *key_;
}
inline void CMsgClientPersonaState_Friend_KV::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void CMsgClientPersonaState_Friend_KV::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void CMsgClientPersonaState_Friend_KV::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientPersonaState_Friend_KV::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* CMsgClientPersonaState_Friend_KV::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientPersonaState_Friend_KV::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string value = 2;
inline bool CMsgClientPersonaState_Friend_KV::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientPersonaState_Friend_KV::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientPersonaState_Friend_KV::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientPersonaState_Friend_KV::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& CMsgClientPersonaState_Friend_KV::value() const {
  return *value_;
}
inline void CMsgClientPersonaState_Friend_KV::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CMsgClientPersonaState_Friend_KV::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CMsgClientPersonaState_Friend_KV::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientPersonaState_Friend_KV::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* CMsgClientPersonaState_Friend_KV::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientPersonaState_Friend_KV::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgClientPersonaState_Friend

// optional fixed64 friendid = 1;
inline bool CMsgClientPersonaState_Friend::has_friendid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientPersonaState_Friend::set_has_friendid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientPersonaState_Friend::clear_has_friendid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientPersonaState_Friend::clear_friendid() {
  friendid_ = GOOGLE_ULONGLONG(0);
  clear_has_friendid();
}
inline ::google::protobuf::uint64 CMsgClientPersonaState_Friend::friendid() const {
  return friendid_;
}
inline void CMsgClientPersonaState_Friend::set_friendid(::google::protobuf::uint64 value) {
  set_has_friendid();
  friendid_ = value;
}

// optional uint32 persona_state = 2;
inline bool CMsgClientPersonaState_Friend::has_persona_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientPersonaState_Friend::set_has_persona_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientPersonaState_Friend::clear_has_persona_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientPersonaState_Friend::clear_persona_state() {
  persona_state_ = 0u;
  clear_has_persona_state();
}
inline ::google::protobuf::uint32 CMsgClientPersonaState_Friend::persona_state() const {
  return persona_state_;
}
inline void CMsgClientPersonaState_Friend::set_persona_state(::google::protobuf::uint32 value) {
  set_has_persona_state();
  persona_state_ = value;
}

// optional uint32 game_played_app_id = 3;
inline bool CMsgClientPersonaState_Friend::has_game_played_app_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientPersonaState_Friend::set_has_game_played_app_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientPersonaState_Friend::clear_has_game_played_app_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientPersonaState_Friend::clear_game_played_app_id() {
  game_played_app_id_ = 0u;
  clear_has_game_played_app_id();
}
inline ::google::protobuf::uint32 CMsgClientPersonaState_Friend::game_played_app_id() const {
  return game_played_app_id_;
}
inline void CMsgClientPersonaState_Friend::set_game_played_app_id(::google::protobuf::uint32 value) {
  set_has_game_played_app_id();
  game_played_app_id_ = value;
}

// optional uint32 game_server_ip = 4;
inline bool CMsgClientPersonaState_Friend::has_game_server_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgClientPersonaState_Friend::set_has_game_server_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgClientPersonaState_Friend::clear_has_game_server_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgClientPersonaState_Friend::clear_game_server_ip() {
  game_server_ip_ = 0u;
  clear_has_game_server_ip();
}
inline ::google::protobuf::uint32 CMsgClientPersonaState_Friend::game_server_ip() const {
  return game_server_ip_;
}
inline void CMsgClientPersonaState_Friend::set_game_server_ip(::google::protobuf::uint32 value) {
  set_has_game_server_ip();
  game_server_ip_ = value;
}

// optional uint32 game_server_port = 5;
inline bool CMsgClientPersonaState_Friend::has_game_server_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgClientPersonaState_Friend::set_has_game_server_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgClientPersonaState_Friend::clear_has_game_server_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgClientPersonaState_Friend::clear_game_server_port() {
  game_server_port_ = 0u;
  clear_has_game_server_port();
}
inline ::google::protobuf::uint32 CMsgClientPersonaState_Friend::game_server_port() const {
  return game_server_port_;
}
inline void CMsgClientPersonaState_Friend::set_game_server_port(::google::protobuf::uint32 value) {
  set_has_game_server_port();
  game_server_port_ = value;
}

// optional uint32 persona_state_flags = 6;
inline bool CMsgClientPersonaState_Friend::has_persona_state_flags() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgClientPersonaState_Friend::set_has_persona_state_flags() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgClientPersonaState_Friend::clear_has_persona_state_flags() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgClientPersonaState_Friend::clear_persona_state_flags() {
  persona_state_flags_ = 0u;
  clear_has_persona_state_flags();
}
inline ::google::protobuf::uint32 CMsgClientPersonaState_Friend::persona_state_flags() const {
  return persona_state_flags_;
}
inline void CMsgClientPersonaState_Friend::set_persona_state_flags(::google::protobuf::uint32 value) {
  set_has_persona_state_flags();
  persona_state_flags_ = value;
}

// optional uint32 online_session_instances = 7;
inline bool CMsgClientPersonaState_Friend::has_online_session_instances() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgClientPersonaState_Friend::set_has_online_session_instances() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgClientPersonaState_Friend::clear_has_online_session_instances() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgClientPersonaState_Friend::clear_online_session_instances() {
  online_session_instances_ = 0u;
  clear_has_online_session_instances();
}
inline ::google::protobuf::uint32 CMsgClientPersonaState_Friend::online_session_instances() const {
  return online_session_instances_;
}
inline void CMsgClientPersonaState_Friend::set_online_session_instances(::google::protobuf::uint32 value) {
  set_has_online_session_instances();
  online_session_instances_ = value;
}

// optional bool persona_set_by_user = 10;
inline bool CMsgClientPersonaState_Friend::has_persona_set_by_user() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgClientPersonaState_Friend::set_has_persona_set_by_user() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgClientPersonaState_Friend::clear_has_persona_set_by_user() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgClientPersonaState_Friend::clear_persona_set_by_user() {
  persona_set_by_user_ = false;
  clear_has_persona_set_by_user();
}
inline bool CMsgClientPersonaState_Friend::persona_set_by_user() const {
  return persona_set_by_user_;
}
inline void CMsgClientPersonaState_Friend::set_persona_set_by_user(bool value) {
  set_has_persona_set_by_user();
  persona_set_by_user_ = value;
}

// optional string player_name = 15;
inline bool CMsgClientPersonaState_Friend::has_player_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgClientPersonaState_Friend::set_has_player_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgClientPersonaState_Friend::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgClientPersonaState_Friend::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& CMsgClientPersonaState_Friend::player_name() const {
  return *player_name_;
}
inline void CMsgClientPersonaState_Friend::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void CMsgClientPersonaState_Friend::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void CMsgClientPersonaState_Friend::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientPersonaState_Friend::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* CMsgClientPersonaState_Friend::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientPersonaState_Friend::set_allocated_player_name(::std::string* player_name) {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (player_name) {
    set_has_player_name();
    player_name_ = player_name;
  } else {
    clear_has_player_name();
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 query_port = 20;
inline bool CMsgClientPersonaState_Friend::has_query_port() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgClientPersonaState_Friend::set_has_query_port() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgClientPersonaState_Friend::clear_has_query_port() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgClientPersonaState_Friend::clear_query_port() {
  query_port_ = 0u;
  clear_has_query_port();
}
inline ::google::protobuf::uint32 CMsgClientPersonaState_Friend::query_port() const {
  return query_port_;
}
inline void CMsgClientPersonaState_Friend::set_query_port(::google::protobuf::uint32 value) {
  set_has_query_port();
  query_port_ = value;
}

// optional fixed64 steamid_source = 25;
inline bool CMsgClientPersonaState_Friend::has_steamid_source() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgClientPersonaState_Friend::set_has_steamid_source() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgClientPersonaState_Friend::clear_has_steamid_source() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgClientPersonaState_Friend::clear_steamid_source() {
  steamid_source_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid_source();
}
inline ::google::protobuf::uint64 CMsgClientPersonaState_Friend::steamid_source() const {
  return steamid_source_;
}
inline void CMsgClientPersonaState_Friend::set_steamid_source(::google::protobuf::uint64 value) {
  set_has_steamid_source();
  steamid_source_ = value;
}

// optional bytes avatar_hash = 31;
inline bool CMsgClientPersonaState_Friend::has_avatar_hash() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgClientPersonaState_Friend::set_has_avatar_hash() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgClientPersonaState_Friend::clear_has_avatar_hash() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgClientPersonaState_Friend::clear_avatar_hash() {
  if (avatar_hash_ != &::google::protobuf::internal::kEmptyString) {
    avatar_hash_->clear();
  }
  clear_has_avatar_hash();
}
inline const ::std::string& CMsgClientPersonaState_Friend::avatar_hash() const {
  return *avatar_hash_;
}
inline void CMsgClientPersonaState_Friend::set_avatar_hash(const ::std::string& value) {
  set_has_avatar_hash();
  if (avatar_hash_ == &::google::protobuf::internal::kEmptyString) {
    avatar_hash_ = new ::std::string;
  }
  avatar_hash_->assign(value);
}
inline void CMsgClientPersonaState_Friend::set_avatar_hash(const char* value) {
  set_has_avatar_hash();
  if (avatar_hash_ == &::google::protobuf::internal::kEmptyString) {
    avatar_hash_ = new ::std::string;
  }
  avatar_hash_->assign(value);
}
inline void CMsgClientPersonaState_Friend::set_avatar_hash(const void* value, size_t size) {
  set_has_avatar_hash();
  if (avatar_hash_ == &::google::protobuf::internal::kEmptyString) {
    avatar_hash_ = new ::std::string;
  }
  avatar_hash_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientPersonaState_Friend::mutable_avatar_hash() {
  set_has_avatar_hash();
  if (avatar_hash_ == &::google::protobuf::internal::kEmptyString) {
    avatar_hash_ = new ::std::string;
  }
  return avatar_hash_;
}
inline ::std::string* CMsgClientPersonaState_Friend::release_avatar_hash() {
  clear_has_avatar_hash();
  if (avatar_hash_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = avatar_hash_;
    avatar_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientPersonaState_Friend::set_allocated_avatar_hash(::std::string* avatar_hash) {
  if (avatar_hash_ != &::google::protobuf::internal::kEmptyString) {
    delete avatar_hash_;
  }
  if (avatar_hash) {
    set_has_avatar_hash();
    avatar_hash_ = avatar_hash;
  } else {
    clear_has_avatar_hash();
    avatar_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 last_logoff = 45;
inline bool CMsgClientPersonaState_Friend::has_last_logoff() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgClientPersonaState_Friend::set_has_last_logoff() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgClientPersonaState_Friend::clear_has_last_logoff() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgClientPersonaState_Friend::clear_last_logoff() {
  last_logoff_ = 0u;
  clear_has_last_logoff();
}
inline ::google::protobuf::uint32 CMsgClientPersonaState_Friend::last_logoff() const {
  return last_logoff_;
}
inline void CMsgClientPersonaState_Friend::set_last_logoff(::google::protobuf::uint32 value) {
  set_has_last_logoff();
  last_logoff_ = value;
}

// optional uint32 last_logon = 46;
inline bool CMsgClientPersonaState_Friend::has_last_logon() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgClientPersonaState_Friend::set_has_last_logon() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgClientPersonaState_Friend::clear_has_last_logon() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgClientPersonaState_Friend::clear_last_logon() {
  last_logon_ = 0u;
  clear_has_last_logon();
}
inline ::google::protobuf::uint32 CMsgClientPersonaState_Friend::last_logon() const {
  return last_logon_;
}
inline void CMsgClientPersonaState_Friend::set_last_logon(::google::protobuf::uint32 value) {
  set_has_last_logon();
  last_logon_ = value;
}

// optional uint32 last_seen_online = 47;
inline bool CMsgClientPersonaState_Friend::has_last_seen_online() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgClientPersonaState_Friend::set_has_last_seen_online() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgClientPersonaState_Friend::clear_has_last_seen_online() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgClientPersonaState_Friend::clear_last_seen_online() {
  last_seen_online_ = 0u;
  clear_has_last_seen_online();
}
inline ::google::protobuf::uint32 CMsgClientPersonaState_Friend::last_seen_online() const {
  return last_seen_online_;
}
inline void CMsgClientPersonaState_Friend::set_last_seen_online(::google::protobuf::uint32 value) {
  set_has_last_seen_online();
  last_seen_online_ = value;
}

// optional uint32 clan_rank = 50;
inline bool CMsgClientPersonaState_Friend::has_clan_rank() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgClientPersonaState_Friend::set_has_clan_rank() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgClientPersonaState_Friend::clear_has_clan_rank() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgClientPersonaState_Friend::clear_clan_rank() {
  clan_rank_ = 0u;
  clear_has_clan_rank();
}
inline ::google::protobuf::uint32 CMsgClientPersonaState_Friend::clan_rank() const {
  return clan_rank_;
}
inline void CMsgClientPersonaState_Friend::set_clan_rank(::google::protobuf::uint32 value) {
  set_has_clan_rank();
  clan_rank_ = value;
}

// optional string game_name = 55;
inline bool CMsgClientPersonaState_Friend::has_game_name() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgClientPersonaState_Friend::set_has_game_name() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMsgClientPersonaState_Friend::clear_has_game_name() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMsgClientPersonaState_Friend::clear_game_name() {
  if (game_name_ != &::google::protobuf::internal::kEmptyString) {
    game_name_->clear();
  }
  clear_has_game_name();
}
inline const ::std::string& CMsgClientPersonaState_Friend::game_name() const {
  return *game_name_;
}
inline void CMsgClientPersonaState_Friend::set_game_name(const ::std::string& value) {
  set_has_game_name();
  if (game_name_ == &::google::protobuf::internal::kEmptyString) {
    game_name_ = new ::std::string;
  }
  game_name_->assign(value);
}
inline void CMsgClientPersonaState_Friend::set_game_name(const char* value) {
  set_has_game_name();
  if (game_name_ == &::google::protobuf::internal::kEmptyString) {
    game_name_ = new ::std::string;
  }
  game_name_->assign(value);
}
inline void CMsgClientPersonaState_Friend::set_game_name(const char* value, size_t size) {
  set_has_game_name();
  if (game_name_ == &::google::protobuf::internal::kEmptyString) {
    game_name_ = new ::std::string;
  }
  game_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientPersonaState_Friend::mutable_game_name() {
  set_has_game_name();
  if (game_name_ == &::google::protobuf::internal::kEmptyString) {
    game_name_ = new ::std::string;
  }
  return game_name_;
}
inline ::std::string* CMsgClientPersonaState_Friend::release_game_name() {
  clear_has_game_name();
  if (game_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = game_name_;
    game_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientPersonaState_Friend::set_allocated_game_name(::std::string* game_name) {
  if (game_name_ != &::google::protobuf::internal::kEmptyString) {
    delete game_name_;
  }
  if (game_name) {
    set_has_game_name();
    game_name_ = game_name;
  } else {
    clear_has_game_name();
    game_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional fixed64 gameid = 56;
inline bool CMsgClientPersonaState_Friend::has_gameid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgClientPersonaState_Friend::set_has_gameid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMsgClientPersonaState_Friend::clear_has_gameid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMsgClientPersonaState_Friend::clear_gameid() {
  gameid_ = GOOGLE_ULONGLONG(0);
  clear_has_gameid();
}
inline ::google::protobuf::uint64 CMsgClientPersonaState_Friend::gameid() const {
  return gameid_;
}
inline void CMsgClientPersonaState_Friend::set_gameid(::google::protobuf::uint64 value) {
  set_has_gameid();
  gameid_ = value;
}

// optional bytes game_data_blob = 60;
inline bool CMsgClientPersonaState_Friend::has_game_data_blob() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMsgClientPersonaState_Friend::set_has_game_data_blob() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CMsgClientPersonaState_Friend::clear_has_game_data_blob() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CMsgClientPersonaState_Friend::clear_game_data_blob() {
  if (game_data_blob_ != &::google::protobuf::internal::kEmptyString) {
    game_data_blob_->clear();
  }
  clear_has_game_data_blob();
}
inline const ::std::string& CMsgClientPersonaState_Friend::game_data_blob() const {
  return *game_data_blob_;
}
inline void CMsgClientPersonaState_Friend::set_game_data_blob(const ::std::string& value) {
  set_has_game_data_blob();
  if (game_data_blob_ == &::google::protobuf::internal::kEmptyString) {
    game_data_blob_ = new ::std::string;
  }
  game_data_blob_->assign(value);
}
inline void CMsgClientPersonaState_Friend::set_game_data_blob(const char* value) {
  set_has_game_data_blob();
  if (game_data_blob_ == &::google::protobuf::internal::kEmptyString) {
    game_data_blob_ = new ::std::string;
  }
  game_data_blob_->assign(value);
}
inline void CMsgClientPersonaState_Friend::set_game_data_blob(const void* value, size_t size) {
  set_has_game_data_blob();
  if (game_data_blob_ == &::google::protobuf::internal::kEmptyString) {
    game_data_blob_ = new ::std::string;
  }
  game_data_blob_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientPersonaState_Friend::mutable_game_data_blob() {
  set_has_game_data_blob();
  if (game_data_blob_ == &::google::protobuf::internal::kEmptyString) {
    game_data_blob_ = new ::std::string;
  }
  return game_data_blob_;
}
inline ::std::string* CMsgClientPersonaState_Friend::release_game_data_blob() {
  clear_has_game_data_blob();
  if (game_data_blob_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = game_data_blob_;
    game_data_blob_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientPersonaState_Friend::set_allocated_game_data_blob(::std::string* game_data_blob) {
  if (game_data_blob_ != &::google::protobuf::internal::kEmptyString) {
    delete game_data_blob_;
  }
  if (game_data_blob) {
    set_has_game_data_blob();
    game_data_blob_ = game_data_blob;
  } else {
    clear_has_game_data_blob();
    game_data_blob_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .CMsgClientPersonaState.Friend.ClanData clan_data = 64;
inline bool CMsgClientPersonaState_Friend::has_clan_data() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CMsgClientPersonaState_Friend::set_has_clan_data() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CMsgClientPersonaState_Friend::clear_has_clan_data() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CMsgClientPersonaState_Friend::clear_clan_data() {
  if (clan_data_ != NULL) clan_data_->::CMsgClientPersonaState_Friend_ClanData::Clear();
  clear_has_clan_data();
}
inline const ::CMsgClientPersonaState_Friend_ClanData& CMsgClientPersonaState_Friend::clan_data() const {
  return clan_data_ != NULL ? *clan_data_ : *default_instance_->clan_data_;
}
inline ::CMsgClientPersonaState_Friend_ClanData* CMsgClientPersonaState_Friend::mutable_clan_data() {
  set_has_clan_data();
  if (clan_data_ == NULL) clan_data_ = new ::CMsgClientPersonaState_Friend_ClanData;
  return clan_data_;
}
inline ::CMsgClientPersonaState_Friend_ClanData* CMsgClientPersonaState_Friend::release_clan_data() {
  clear_has_clan_data();
  ::CMsgClientPersonaState_Friend_ClanData* temp = clan_data_;
  clan_data_ = NULL;
  return temp;
}
inline void CMsgClientPersonaState_Friend::set_allocated_clan_data(::CMsgClientPersonaState_Friend_ClanData* clan_data) {
  delete clan_data_;
  clan_data_ = clan_data;
  if (clan_data) {
    set_has_clan_data();
  } else {
    clear_has_clan_data();
  }
}

// optional string clan_tag = 65;
inline bool CMsgClientPersonaState_Friend::has_clan_tag() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CMsgClientPersonaState_Friend::set_has_clan_tag() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CMsgClientPersonaState_Friend::clear_has_clan_tag() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CMsgClientPersonaState_Friend::clear_clan_tag() {
  if (clan_tag_ != &::google::protobuf::internal::kEmptyString) {
    clan_tag_->clear();
  }
  clear_has_clan_tag();
}
inline const ::std::string& CMsgClientPersonaState_Friend::clan_tag() const {
  return *clan_tag_;
}
inline void CMsgClientPersonaState_Friend::set_clan_tag(const ::std::string& value) {
  set_has_clan_tag();
  if (clan_tag_ == &::google::protobuf::internal::kEmptyString) {
    clan_tag_ = new ::std::string;
  }
  clan_tag_->assign(value);
}
inline void CMsgClientPersonaState_Friend::set_clan_tag(const char* value) {
  set_has_clan_tag();
  if (clan_tag_ == &::google::protobuf::internal::kEmptyString) {
    clan_tag_ = new ::std::string;
  }
  clan_tag_->assign(value);
}
inline void CMsgClientPersonaState_Friend::set_clan_tag(const char* value, size_t size) {
  set_has_clan_tag();
  if (clan_tag_ == &::google::protobuf::internal::kEmptyString) {
    clan_tag_ = new ::std::string;
  }
  clan_tag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientPersonaState_Friend::mutable_clan_tag() {
  set_has_clan_tag();
  if (clan_tag_ == &::google::protobuf::internal::kEmptyString) {
    clan_tag_ = new ::std::string;
  }
  return clan_tag_;
}
inline ::std::string* CMsgClientPersonaState_Friend::release_clan_tag() {
  clear_has_clan_tag();
  if (clan_tag_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clan_tag_;
    clan_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientPersonaState_Friend::set_allocated_clan_tag(::std::string* clan_tag) {
  if (clan_tag_ != &::google::protobuf::internal::kEmptyString) {
    delete clan_tag_;
  }
  if (clan_tag) {
    set_has_clan_tag();
    clan_tag_ = clan_tag;
  } else {
    clear_has_clan_tag();
    clan_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .CMsgClientPersonaState.Friend.KV rich_presence = 71;
inline int CMsgClientPersonaState_Friend::rich_presence_size() const {
  return rich_presence_.size();
}
inline void CMsgClientPersonaState_Friend::clear_rich_presence() {
  rich_presence_.Clear();
}
inline const ::CMsgClientPersonaState_Friend_KV& CMsgClientPersonaState_Friend::rich_presence(int index) const {
  return rich_presence_.Get(index);
}
inline ::CMsgClientPersonaState_Friend_KV* CMsgClientPersonaState_Friend::mutable_rich_presence(int index) {
  return rich_presence_.Mutable(index);
}
inline ::CMsgClientPersonaState_Friend_KV* CMsgClientPersonaState_Friend::add_rich_presence() {
  return rich_presence_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgClientPersonaState_Friend_KV >&
CMsgClientPersonaState_Friend::rich_presence() const {
  return rich_presence_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgClientPersonaState_Friend_KV >*
CMsgClientPersonaState_Friend::mutable_rich_presence() {
  return &rich_presence_;
}

// optional fixed64 broadcast_id = 72;
inline bool CMsgClientPersonaState_Friend::has_broadcast_id() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CMsgClientPersonaState_Friend::set_has_broadcast_id() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CMsgClientPersonaState_Friend::clear_has_broadcast_id() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CMsgClientPersonaState_Friend::clear_broadcast_id() {
  broadcast_id_ = GOOGLE_ULONGLONG(0);
  clear_has_broadcast_id();
}
inline ::google::protobuf::uint64 CMsgClientPersonaState_Friend::broadcast_id() const {
  return broadcast_id_;
}
inline void CMsgClientPersonaState_Friend::set_broadcast_id(::google::protobuf::uint64 value) {
  set_has_broadcast_id();
  broadcast_id_ = value;
}

// optional fixed64 game_lobby_id = 73;
inline bool CMsgClientPersonaState_Friend::has_game_lobby_id() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CMsgClientPersonaState_Friend::set_has_game_lobby_id() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CMsgClientPersonaState_Friend::clear_has_game_lobby_id() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CMsgClientPersonaState_Friend::clear_game_lobby_id() {
  game_lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_game_lobby_id();
}
inline ::google::protobuf::uint64 CMsgClientPersonaState_Friend::game_lobby_id() const {
  return game_lobby_id_;
}
inline void CMsgClientPersonaState_Friend::set_game_lobby_id(::google::protobuf::uint64 value) {
  set_has_game_lobby_id();
  game_lobby_id_ = value;
}

// optional uint32 watching_broadcast_accountid = 74;
inline bool CMsgClientPersonaState_Friend::has_watching_broadcast_accountid() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CMsgClientPersonaState_Friend::set_has_watching_broadcast_accountid() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CMsgClientPersonaState_Friend::clear_has_watching_broadcast_accountid() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CMsgClientPersonaState_Friend::clear_watching_broadcast_accountid() {
  watching_broadcast_accountid_ = 0u;
  clear_has_watching_broadcast_accountid();
}
inline ::google::protobuf::uint32 CMsgClientPersonaState_Friend::watching_broadcast_accountid() const {
  return watching_broadcast_accountid_;
}
inline void CMsgClientPersonaState_Friend::set_watching_broadcast_accountid(::google::protobuf::uint32 value) {
  set_has_watching_broadcast_accountid();
  watching_broadcast_accountid_ = value;
}

// optional uint32 watching_broadcast_appid = 75;
inline bool CMsgClientPersonaState_Friend::has_watching_broadcast_appid() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CMsgClientPersonaState_Friend::set_has_watching_broadcast_appid() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CMsgClientPersonaState_Friend::clear_has_watching_broadcast_appid() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CMsgClientPersonaState_Friend::clear_watching_broadcast_appid() {
  watching_broadcast_appid_ = 0u;
  clear_has_watching_broadcast_appid();
}
inline ::google::protobuf::uint32 CMsgClientPersonaState_Friend::watching_broadcast_appid() const {
  return watching_broadcast_appid_;
}
inline void CMsgClientPersonaState_Friend::set_watching_broadcast_appid(::google::protobuf::uint32 value) {
  set_has_watching_broadcast_appid();
  watching_broadcast_appid_ = value;
}

// optional uint32 watching_broadcast_viewers = 76;
inline bool CMsgClientPersonaState_Friend::has_watching_broadcast_viewers() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CMsgClientPersonaState_Friend::set_has_watching_broadcast_viewers() {
  _has_bits_[0] |= 0x04000000u;
}
inline void CMsgClientPersonaState_Friend::clear_has_watching_broadcast_viewers() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void CMsgClientPersonaState_Friend::clear_watching_broadcast_viewers() {
  watching_broadcast_viewers_ = 0u;
  clear_has_watching_broadcast_viewers();
}
inline ::google::protobuf::uint32 CMsgClientPersonaState_Friend::watching_broadcast_viewers() const {
  return watching_broadcast_viewers_;
}
inline void CMsgClientPersonaState_Friend::set_watching_broadcast_viewers(::google::protobuf::uint32 value) {
  set_has_watching_broadcast_viewers();
  watching_broadcast_viewers_ = value;
}

// optional string watching_broadcast_title = 77;
inline bool CMsgClientPersonaState_Friend::has_watching_broadcast_title() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CMsgClientPersonaState_Friend::set_has_watching_broadcast_title() {
  _has_bits_[0] |= 0x08000000u;
}
inline void CMsgClientPersonaState_Friend::clear_has_watching_broadcast_title() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void CMsgClientPersonaState_Friend::clear_watching_broadcast_title() {
  if (watching_broadcast_title_ != &::google::protobuf::internal::kEmptyString) {
    watching_broadcast_title_->clear();
  }
  clear_has_watching_broadcast_title();
}
inline const ::std::string& CMsgClientPersonaState_Friend::watching_broadcast_title() const {
  return *watching_broadcast_title_;
}
inline void CMsgClientPersonaState_Friend::set_watching_broadcast_title(const ::std::string& value) {
  set_has_watching_broadcast_title();
  if (watching_broadcast_title_ == &::google::protobuf::internal::kEmptyString) {
    watching_broadcast_title_ = new ::std::string;
  }
  watching_broadcast_title_->assign(value);
}
inline void CMsgClientPersonaState_Friend::set_watching_broadcast_title(const char* value) {
  set_has_watching_broadcast_title();
  if (watching_broadcast_title_ == &::google::protobuf::internal::kEmptyString) {
    watching_broadcast_title_ = new ::std::string;
  }
  watching_broadcast_title_->assign(value);
}
inline void CMsgClientPersonaState_Friend::set_watching_broadcast_title(const char* value, size_t size) {
  set_has_watching_broadcast_title();
  if (watching_broadcast_title_ == &::google::protobuf::internal::kEmptyString) {
    watching_broadcast_title_ = new ::std::string;
  }
  watching_broadcast_title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientPersonaState_Friend::mutable_watching_broadcast_title() {
  set_has_watching_broadcast_title();
  if (watching_broadcast_title_ == &::google::protobuf::internal::kEmptyString) {
    watching_broadcast_title_ = new ::std::string;
  }
  return watching_broadcast_title_;
}
inline ::std::string* CMsgClientPersonaState_Friend::release_watching_broadcast_title() {
  clear_has_watching_broadcast_title();
  if (watching_broadcast_title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = watching_broadcast_title_;
    watching_broadcast_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientPersonaState_Friend::set_allocated_watching_broadcast_title(::std::string* watching_broadcast_title) {
  if (watching_broadcast_title_ != &::google::protobuf::internal::kEmptyString) {
    delete watching_broadcast_title_;
  }
  if (watching_broadcast_title) {
    set_has_watching_broadcast_title();
    watching_broadcast_title_ = watching_broadcast_title;
  } else {
    clear_has_watching_broadcast_title();
    watching_broadcast_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool is_community_banned = 78;
inline bool CMsgClientPersonaState_Friend::has_is_community_banned() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CMsgClientPersonaState_Friend::set_has_is_community_banned() {
  _has_bits_[0] |= 0x10000000u;
}
inline void CMsgClientPersonaState_Friend::clear_has_is_community_banned() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void CMsgClientPersonaState_Friend::clear_is_community_banned() {
  is_community_banned_ = false;
  clear_has_is_community_banned();
}
inline bool CMsgClientPersonaState_Friend::is_community_banned() const {
  return is_community_banned_;
}
inline void CMsgClientPersonaState_Friend::set_is_community_banned(bool value) {
  set_has_is_community_banned();
  is_community_banned_ = value;
}

// optional bool player_name_pending_review = 79;
inline bool CMsgClientPersonaState_Friend::has_player_name_pending_review() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CMsgClientPersonaState_Friend::set_has_player_name_pending_review() {
  _has_bits_[0] |= 0x20000000u;
}
inline void CMsgClientPersonaState_Friend::clear_has_player_name_pending_review() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void CMsgClientPersonaState_Friend::clear_player_name_pending_review() {
  player_name_pending_review_ = false;
  clear_has_player_name_pending_review();
}
inline bool CMsgClientPersonaState_Friend::player_name_pending_review() const {
  return player_name_pending_review_;
}
inline void CMsgClientPersonaState_Friend::set_player_name_pending_review(bool value) {
  set_has_player_name_pending_review();
  player_name_pending_review_ = value;
}

// optional bool avatar_pending_review = 80;
inline bool CMsgClientPersonaState_Friend::has_avatar_pending_review() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CMsgClientPersonaState_Friend::set_has_avatar_pending_review() {
  _has_bits_[0] |= 0x40000000u;
}
inline void CMsgClientPersonaState_Friend::clear_has_avatar_pending_review() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void CMsgClientPersonaState_Friend::clear_avatar_pending_review() {
  avatar_pending_review_ = false;
  clear_has_avatar_pending_review();
}
inline bool CMsgClientPersonaState_Friend::avatar_pending_review() const {
  return avatar_pending_review_;
}
inline void CMsgClientPersonaState_Friend::set_avatar_pending_review(bool value) {
  set_has_avatar_pending_review();
  avatar_pending_review_ = value;
}

// -------------------------------------------------------------------

// CMsgClientPersonaState

// optional uint32 status_flags = 1;
inline bool CMsgClientPersonaState::has_status_flags() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientPersonaState::set_has_status_flags() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientPersonaState::clear_has_status_flags() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientPersonaState::clear_status_flags() {
  status_flags_ = 0u;
  clear_has_status_flags();
}
inline ::google::protobuf::uint32 CMsgClientPersonaState::status_flags() const {
  return status_flags_;
}
inline void CMsgClientPersonaState::set_status_flags(::google::protobuf::uint32 value) {
  set_has_status_flags();
  status_flags_ = value;
}

// repeated .CMsgClientPersonaState.Friend friends = 2;
inline int CMsgClientPersonaState::friends_size() const {
  return friends_.size();
}
inline void CMsgClientPersonaState::clear_friends() {
  friends_.Clear();
}
inline const ::CMsgClientPersonaState_Friend& CMsgClientPersonaState::friends(int index) const {
  return friends_.Get(index);
}
inline ::CMsgClientPersonaState_Friend* CMsgClientPersonaState::mutable_friends(int index) {
  return friends_.Mutable(index);
}
inline ::CMsgClientPersonaState_Friend* CMsgClientPersonaState::add_friends() {
  return friends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgClientPersonaState_Friend >&
CMsgClientPersonaState::friends() const {
  return friends_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgClientPersonaState_Friend >*
CMsgClientPersonaState::mutable_friends() {
  return &friends_;
}

// -------------------------------------------------------------------

// CMsgClientFriendProfileInfo

// optional fixed64 steamid_friend = 1;
inline bool CMsgClientFriendProfileInfo::has_steamid_friend() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientFriendProfileInfo::set_has_steamid_friend() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientFriendProfileInfo::clear_has_steamid_friend() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientFriendProfileInfo::clear_steamid_friend() {
  steamid_friend_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid_friend();
}
inline ::google::protobuf::uint64 CMsgClientFriendProfileInfo::steamid_friend() const {
  return steamid_friend_;
}
inline void CMsgClientFriendProfileInfo::set_steamid_friend(::google::protobuf::uint64 value) {
  set_has_steamid_friend();
  steamid_friend_ = value;
}

// -------------------------------------------------------------------

// CMsgClientFriendProfileInfoResponse

// optional int32 eresult = 1 [default = 2];
inline bool CMsgClientFriendProfileInfoResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientFriendProfileInfoResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientFriendProfileInfoResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientFriendProfileInfoResponse::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
inline ::google::protobuf::int32 CMsgClientFriendProfileInfoResponse::eresult() const {
  return eresult_;
}
inline void CMsgClientFriendProfileInfoResponse::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
}

// optional fixed64 steamid_friend = 2;
inline bool CMsgClientFriendProfileInfoResponse::has_steamid_friend() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientFriendProfileInfoResponse::set_has_steamid_friend() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientFriendProfileInfoResponse::clear_has_steamid_friend() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientFriendProfileInfoResponse::clear_steamid_friend() {
  steamid_friend_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid_friend();
}
inline ::google::protobuf::uint64 CMsgClientFriendProfileInfoResponse::steamid_friend() const {
  return steamid_friend_;
}
inline void CMsgClientFriendProfileInfoResponse::set_steamid_friend(::google::protobuf::uint64 value) {
  set_has_steamid_friend();
  steamid_friend_ = value;
}

// optional uint32 time_created = 3;
inline bool CMsgClientFriendProfileInfoResponse::has_time_created() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientFriendProfileInfoResponse::set_has_time_created() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientFriendProfileInfoResponse::clear_has_time_created() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientFriendProfileInfoResponse::clear_time_created() {
  time_created_ = 0u;
  clear_has_time_created();
}
inline ::google::protobuf::uint32 CMsgClientFriendProfileInfoResponse::time_created() const {
  return time_created_;
}
inline void CMsgClientFriendProfileInfoResponse::set_time_created(::google::protobuf::uint32 value) {
  set_has_time_created();
  time_created_ = value;
}

// optional string real_name = 4;
inline bool CMsgClientFriendProfileInfoResponse::has_real_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgClientFriendProfileInfoResponse::set_has_real_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgClientFriendProfileInfoResponse::clear_has_real_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgClientFriendProfileInfoResponse::clear_real_name() {
  if (real_name_ != &::google::protobuf::internal::kEmptyString) {
    real_name_->clear();
  }
  clear_has_real_name();
}
inline const ::std::string& CMsgClientFriendProfileInfoResponse::real_name() const {
  return *real_name_;
}
inline void CMsgClientFriendProfileInfoResponse::set_real_name(const ::std::string& value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::kEmptyString) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
}
inline void CMsgClientFriendProfileInfoResponse::set_real_name(const char* value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::kEmptyString) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
}
inline void CMsgClientFriendProfileInfoResponse::set_real_name(const char* value, size_t size) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::kEmptyString) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientFriendProfileInfoResponse::mutable_real_name() {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::kEmptyString) {
    real_name_ = new ::std::string;
  }
  return real_name_;
}
inline ::std::string* CMsgClientFriendProfileInfoResponse::release_real_name() {
  clear_has_real_name();
  if (real_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = real_name_;
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientFriendProfileInfoResponse::set_allocated_real_name(::std::string* real_name) {
  if (real_name_ != &::google::protobuf::internal::kEmptyString) {
    delete real_name_;
  }
  if (real_name) {
    set_has_real_name();
    real_name_ = real_name;
  } else {
    clear_has_real_name();
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string city_name = 5;
inline bool CMsgClientFriendProfileInfoResponse::has_city_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgClientFriendProfileInfoResponse::set_has_city_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgClientFriendProfileInfoResponse::clear_has_city_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgClientFriendProfileInfoResponse::clear_city_name() {
  if (city_name_ != &::google::protobuf::internal::kEmptyString) {
    city_name_->clear();
  }
  clear_has_city_name();
}
inline const ::std::string& CMsgClientFriendProfileInfoResponse::city_name() const {
  return *city_name_;
}
inline void CMsgClientFriendProfileInfoResponse::set_city_name(const ::std::string& value) {
  set_has_city_name();
  if (city_name_ == &::google::protobuf::internal::kEmptyString) {
    city_name_ = new ::std::string;
  }
  city_name_->assign(value);
}
inline void CMsgClientFriendProfileInfoResponse::set_city_name(const char* value) {
  set_has_city_name();
  if (city_name_ == &::google::protobuf::internal::kEmptyString) {
    city_name_ = new ::std::string;
  }
  city_name_->assign(value);
}
inline void CMsgClientFriendProfileInfoResponse::set_city_name(const char* value, size_t size) {
  set_has_city_name();
  if (city_name_ == &::google::protobuf::internal::kEmptyString) {
    city_name_ = new ::std::string;
  }
  city_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientFriendProfileInfoResponse::mutable_city_name() {
  set_has_city_name();
  if (city_name_ == &::google::protobuf::internal::kEmptyString) {
    city_name_ = new ::std::string;
  }
  return city_name_;
}
inline ::std::string* CMsgClientFriendProfileInfoResponse::release_city_name() {
  clear_has_city_name();
  if (city_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = city_name_;
    city_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientFriendProfileInfoResponse::set_allocated_city_name(::std::string* city_name) {
  if (city_name_ != &::google::protobuf::internal::kEmptyString) {
    delete city_name_;
  }
  if (city_name) {
    set_has_city_name();
    city_name_ = city_name;
  } else {
    clear_has_city_name();
    city_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string state_name = 6;
inline bool CMsgClientFriendProfileInfoResponse::has_state_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgClientFriendProfileInfoResponse::set_has_state_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgClientFriendProfileInfoResponse::clear_has_state_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgClientFriendProfileInfoResponse::clear_state_name() {
  if (state_name_ != &::google::protobuf::internal::kEmptyString) {
    state_name_->clear();
  }
  clear_has_state_name();
}
inline const ::std::string& CMsgClientFriendProfileInfoResponse::state_name() const {
  return *state_name_;
}
inline void CMsgClientFriendProfileInfoResponse::set_state_name(const ::std::string& value) {
  set_has_state_name();
  if (state_name_ == &::google::protobuf::internal::kEmptyString) {
    state_name_ = new ::std::string;
  }
  state_name_->assign(value);
}
inline void CMsgClientFriendProfileInfoResponse::set_state_name(const char* value) {
  set_has_state_name();
  if (state_name_ == &::google::protobuf::internal::kEmptyString) {
    state_name_ = new ::std::string;
  }
  state_name_->assign(value);
}
inline void CMsgClientFriendProfileInfoResponse::set_state_name(const char* value, size_t size) {
  set_has_state_name();
  if (state_name_ == &::google::protobuf::internal::kEmptyString) {
    state_name_ = new ::std::string;
  }
  state_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientFriendProfileInfoResponse::mutable_state_name() {
  set_has_state_name();
  if (state_name_ == &::google::protobuf::internal::kEmptyString) {
    state_name_ = new ::std::string;
  }
  return state_name_;
}
inline ::std::string* CMsgClientFriendProfileInfoResponse::release_state_name() {
  clear_has_state_name();
  if (state_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = state_name_;
    state_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientFriendProfileInfoResponse::set_allocated_state_name(::std::string* state_name) {
  if (state_name_ != &::google::protobuf::internal::kEmptyString) {
    delete state_name_;
  }
  if (state_name) {
    set_has_state_name();
    state_name_ = state_name;
  } else {
    clear_has_state_name();
    state_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string country_name = 7;
inline bool CMsgClientFriendProfileInfoResponse::has_country_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgClientFriendProfileInfoResponse::set_has_country_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgClientFriendProfileInfoResponse::clear_has_country_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgClientFriendProfileInfoResponse::clear_country_name() {
  if (country_name_ != &::google::protobuf::internal::kEmptyString) {
    country_name_->clear();
  }
  clear_has_country_name();
}
inline const ::std::string& CMsgClientFriendProfileInfoResponse::country_name() const {
  return *country_name_;
}
inline void CMsgClientFriendProfileInfoResponse::set_country_name(const ::std::string& value) {
  set_has_country_name();
  if (country_name_ == &::google::protobuf::internal::kEmptyString) {
    country_name_ = new ::std::string;
  }
  country_name_->assign(value);
}
inline void CMsgClientFriendProfileInfoResponse::set_country_name(const char* value) {
  set_has_country_name();
  if (country_name_ == &::google::protobuf::internal::kEmptyString) {
    country_name_ = new ::std::string;
  }
  country_name_->assign(value);
}
inline void CMsgClientFriendProfileInfoResponse::set_country_name(const char* value, size_t size) {
  set_has_country_name();
  if (country_name_ == &::google::protobuf::internal::kEmptyString) {
    country_name_ = new ::std::string;
  }
  country_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientFriendProfileInfoResponse::mutable_country_name() {
  set_has_country_name();
  if (country_name_ == &::google::protobuf::internal::kEmptyString) {
    country_name_ = new ::std::string;
  }
  return country_name_;
}
inline ::std::string* CMsgClientFriendProfileInfoResponse::release_country_name() {
  clear_has_country_name();
  if (country_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = country_name_;
    country_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientFriendProfileInfoResponse::set_allocated_country_name(::std::string* country_name) {
  if (country_name_ != &::google::protobuf::internal::kEmptyString) {
    delete country_name_;
  }
  if (country_name) {
    set_has_country_name();
    country_name_ = country_name;
  } else {
    clear_has_country_name();
    country_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string headline = 8;
inline bool CMsgClientFriendProfileInfoResponse::has_headline() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgClientFriendProfileInfoResponse::set_has_headline() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgClientFriendProfileInfoResponse::clear_has_headline() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgClientFriendProfileInfoResponse::clear_headline() {
  if (headline_ != &::google::protobuf::internal::kEmptyString) {
    headline_->clear();
  }
  clear_has_headline();
}
inline const ::std::string& CMsgClientFriendProfileInfoResponse::headline() const {
  return *headline_;
}
inline void CMsgClientFriendProfileInfoResponse::set_headline(const ::std::string& value) {
  set_has_headline();
  if (headline_ == &::google::protobuf::internal::kEmptyString) {
    headline_ = new ::std::string;
  }
  headline_->assign(value);
}
inline void CMsgClientFriendProfileInfoResponse::set_headline(const char* value) {
  set_has_headline();
  if (headline_ == &::google::protobuf::internal::kEmptyString) {
    headline_ = new ::std::string;
  }
  headline_->assign(value);
}
inline void CMsgClientFriendProfileInfoResponse::set_headline(const char* value, size_t size) {
  set_has_headline();
  if (headline_ == &::google::protobuf::internal::kEmptyString) {
    headline_ = new ::std::string;
  }
  headline_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientFriendProfileInfoResponse::mutable_headline() {
  set_has_headline();
  if (headline_ == &::google::protobuf::internal::kEmptyString) {
    headline_ = new ::std::string;
  }
  return headline_;
}
inline ::std::string* CMsgClientFriendProfileInfoResponse::release_headline() {
  clear_has_headline();
  if (headline_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = headline_;
    headline_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientFriendProfileInfoResponse::set_allocated_headline(::std::string* headline) {
  if (headline_ != &::google::protobuf::internal::kEmptyString) {
    delete headline_;
  }
  if (headline) {
    set_has_headline();
    headline_ = headline;
  } else {
    clear_has_headline();
    headline_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string summary = 9;
inline bool CMsgClientFriendProfileInfoResponse::has_summary() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgClientFriendProfileInfoResponse::set_has_summary() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgClientFriendProfileInfoResponse::clear_has_summary() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgClientFriendProfileInfoResponse::clear_summary() {
  if (summary_ != &::google::protobuf::internal::kEmptyString) {
    summary_->clear();
  }
  clear_has_summary();
}
inline const ::std::string& CMsgClientFriendProfileInfoResponse::summary() const {
  return *summary_;
}
inline void CMsgClientFriendProfileInfoResponse::set_summary(const ::std::string& value) {
  set_has_summary();
  if (summary_ == &::google::protobuf::internal::kEmptyString) {
    summary_ = new ::std::string;
  }
  summary_->assign(value);
}
inline void CMsgClientFriendProfileInfoResponse::set_summary(const char* value) {
  set_has_summary();
  if (summary_ == &::google::protobuf::internal::kEmptyString) {
    summary_ = new ::std::string;
  }
  summary_->assign(value);
}
inline void CMsgClientFriendProfileInfoResponse::set_summary(const char* value, size_t size) {
  set_has_summary();
  if (summary_ == &::google::protobuf::internal::kEmptyString) {
    summary_ = new ::std::string;
  }
  summary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientFriendProfileInfoResponse::mutable_summary() {
  set_has_summary();
  if (summary_ == &::google::protobuf::internal::kEmptyString) {
    summary_ = new ::std::string;
  }
  return summary_;
}
inline ::std::string* CMsgClientFriendProfileInfoResponse::release_summary() {
  clear_has_summary();
  if (summary_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = summary_;
    summary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientFriendProfileInfoResponse::set_allocated_summary(::std::string* summary) {
  if (summary_ != &::google::protobuf::internal::kEmptyString) {
    delete summary_;
  }
  if (summary) {
    set_has_summary();
    summary_ = summary;
  } else {
    clear_has_summary();
    summary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgClientCreateFriendsGroup

// optional fixed64 steamid = 1;
inline bool CMsgClientCreateFriendsGroup::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientCreateFriendsGroup::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientCreateFriendsGroup::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientCreateFriendsGroup::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
inline ::google::protobuf::uint64 CMsgClientCreateFriendsGroup::steamid() const {
  return steamid_;
}
inline void CMsgClientCreateFriendsGroup::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
}

// optional string groupname = 2;
inline bool CMsgClientCreateFriendsGroup::has_groupname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientCreateFriendsGroup::set_has_groupname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientCreateFriendsGroup::clear_has_groupname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientCreateFriendsGroup::clear_groupname() {
  if (groupname_ != &::google::protobuf::internal::kEmptyString) {
    groupname_->clear();
  }
  clear_has_groupname();
}
inline const ::std::string& CMsgClientCreateFriendsGroup::groupname() const {
  return *groupname_;
}
inline void CMsgClientCreateFriendsGroup::set_groupname(const ::std::string& value) {
  set_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    groupname_ = new ::std::string;
  }
  groupname_->assign(value);
}
inline void CMsgClientCreateFriendsGroup::set_groupname(const char* value) {
  set_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    groupname_ = new ::std::string;
  }
  groupname_->assign(value);
}
inline void CMsgClientCreateFriendsGroup::set_groupname(const char* value, size_t size) {
  set_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    groupname_ = new ::std::string;
  }
  groupname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientCreateFriendsGroup::mutable_groupname() {
  set_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    groupname_ = new ::std::string;
  }
  return groupname_;
}
inline ::std::string* CMsgClientCreateFriendsGroup::release_groupname() {
  clear_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = groupname_;
    groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientCreateFriendsGroup::set_allocated_groupname(::std::string* groupname) {
  if (groupname_ != &::google::protobuf::internal::kEmptyString) {
    delete groupname_;
  }
  if (groupname) {
    set_has_groupname();
    groupname_ = groupname;
  } else {
    clear_has_groupname();
    groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated fixed64 steamid_friends = 3;
inline int CMsgClientCreateFriendsGroup::steamid_friends_size() const {
  return steamid_friends_.size();
}
inline void CMsgClientCreateFriendsGroup::clear_steamid_friends() {
  steamid_friends_.Clear();
}
inline ::google::protobuf::uint64 CMsgClientCreateFriendsGroup::steamid_friends(int index) const {
  return steamid_friends_.Get(index);
}
inline void CMsgClientCreateFriendsGroup::set_steamid_friends(int index, ::google::protobuf::uint64 value) {
  steamid_friends_.Set(index, value);
}
inline void CMsgClientCreateFriendsGroup::add_steamid_friends(::google::protobuf::uint64 value) {
  steamid_friends_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgClientCreateFriendsGroup::steamid_friends() const {
  return steamid_friends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgClientCreateFriendsGroup::mutable_steamid_friends() {
  return &steamid_friends_;
}

// -------------------------------------------------------------------

// CMsgClientCreateFriendsGroupResponse

// optional uint32 eresult = 1;
inline bool CMsgClientCreateFriendsGroupResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientCreateFriendsGroupResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientCreateFriendsGroupResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientCreateFriendsGroupResponse::clear_eresult() {
  eresult_ = 0u;
  clear_has_eresult();
}
inline ::google::protobuf::uint32 CMsgClientCreateFriendsGroupResponse::eresult() const {
  return eresult_;
}
inline void CMsgClientCreateFriendsGroupResponse::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
}

// optional int32 groupid = 2;
inline bool CMsgClientCreateFriendsGroupResponse::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientCreateFriendsGroupResponse::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientCreateFriendsGroupResponse::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientCreateFriendsGroupResponse::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
inline ::google::protobuf::int32 CMsgClientCreateFriendsGroupResponse::groupid() const {
  return groupid_;
}
inline void CMsgClientCreateFriendsGroupResponse::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
}

// -------------------------------------------------------------------

// CMsgClientDeleteFriendsGroup

// optional fixed64 steamid = 1;
inline bool CMsgClientDeleteFriendsGroup::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientDeleteFriendsGroup::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientDeleteFriendsGroup::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientDeleteFriendsGroup::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
inline ::google::protobuf::uint64 CMsgClientDeleteFriendsGroup::steamid() const {
  return steamid_;
}
inline void CMsgClientDeleteFriendsGroup::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
}

// optional int32 groupid = 2;
inline bool CMsgClientDeleteFriendsGroup::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientDeleteFriendsGroup::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientDeleteFriendsGroup::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientDeleteFriendsGroup::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
inline ::google::protobuf::int32 CMsgClientDeleteFriendsGroup::groupid() const {
  return groupid_;
}
inline void CMsgClientDeleteFriendsGroup::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
}

// -------------------------------------------------------------------

// CMsgClientDeleteFriendsGroupResponse

// optional uint32 eresult = 1;
inline bool CMsgClientDeleteFriendsGroupResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientDeleteFriendsGroupResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientDeleteFriendsGroupResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientDeleteFriendsGroupResponse::clear_eresult() {
  eresult_ = 0u;
  clear_has_eresult();
}
inline ::google::protobuf::uint32 CMsgClientDeleteFriendsGroupResponse::eresult() const {
  return eresult_;
}
inline void CMsgClientDeleteFriendsGroupResponse::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
}

// -------------------------------------------------------------------

// CMsgClientManageFriendsGroup

// optional int32 groupid = 1;
inline bool CMsgClientManageFriendsGroup::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientManageFriendsGroup::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientManageFriendsGroup::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientManageFriendsGroup::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
inline ::google::protobuf::int32 CMsgClientManageFriendsGroup::groupid() const {
  return groupid_;
}
inline void CMsgClientManageFriendsGroup::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
}

// optional string groupname = 2;
inline bool CMsgClientManageFriendsGroup::has_groupname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientManageFriendsGroup::set_has_groupname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientManageFriendsGroup::clear_has_groupname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientManageFriendsGroup::clear_groupname() {
  if (groupname_ != &::google::protobuf::internal::kEmptyString) {
    groupname_->clear();
  }
  clear_has_groupname();
}
inline const ::std::string& CMsgClientManageFriendsGroup::groupname() const {
  return *groupname_;
}
inline void CMsgClientManageFriendsGroup::set_groupname(const ::std::string& value) {
  set_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    groupname_ = new ::std::string;
  }
  groupname_->assign(value);
}
inline void CMsgClientManageFriendsGroup::set_groupname(const char* value) {
  set_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    groupname_ = new ::std::string;
  }
  groupname_->assign(value);
}
inline void CMsgClientManageFriendsGroup::set_groupname(const char* value, size_t size) {
  set_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    groupname_ = new ::std::string;
  }
  groupname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientManageFriendsGroup::mutable_groupname() {
  set_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    groupname_ = new ::std::string;
  }
  return groupname_;
}
inline ::std::string* CMsgClientManageFriendsGroup::release_groupname() {
  clear_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = groupname_;
    groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientManageFriendsGroup::set_allocated_groupname(::std::string* groupname) {
  if (groupname_ != &::google::protobuf::internal::kEmptyString) {
    delete groupname_;
  }
  if (groupname) {
    set_has_groupname();
    groupname_ = groupname;
  } else {
    clear_has_groupname();
    groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated fixed64 steamid_friends_added = 3;
inline int CMsgClientManageFriendsGroup::steamid_friends_added_size() const {
  return steamid_friends_added_.size();
}
inline void CMsgClientManageFriendsGroup::clear_steamid_friends_added() {
  steamid_friends_added_.Clear();
}
inline ::google::protobuf::uint64 CMsgClientManageFriendsGroup::steamid_friends_added(int index) const {
  return steamid_friends_added_.Get(index);
}
inline void CMsgClientManageFriendsGroup::set_steamid_friends_added(int index, ::google::protobuf::uint64 value) {
  steamid_friends_added_.Set(index, value);
}
inline void CMsgClientManageFriendsGroup::add_steamid_friends_added(::google::protobuf::uint64 value) {
  steamid_friends_added_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgClientManageFriendsGroup::steamid_friends_added() const {
  return steamid_friends_added_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgClientManageFriendsGroup::mutable_steamid_friends_added() {
  return &steamid_friends_added_;
}

// repeated fixed64 steamid_friends_removed = 4;
inline int CMsgClientManageFriendsGroup::steamid_friends_removed_size() const {
  return steamid_friends_removed_.size();
}
inline void CMsgClientManageFriendsGroup::clear_steamid_friends_removed() {
  steamid_friends_removed_.Clear();
}
inline ::google::protobuf::uint64 CMsgClientManageFriendsGroup::steamid_friends_removed(int index) const {
  return steamid_friends_removed_.Get(index);
}
inline void CMsgClientManageFriendsGroup::set_steamid_friends_removed(int index, ::google::protobuf::uint64 value) {
  steamid_friends_removed_.Set(index, value);
}
inline void CMsgClientManageFriendsGroup::add_steamid_friends_removed(::google::protobuf::uint64 value) {
  steamid_friends_removed_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgClientManageFriendsGroup::steamid_friends_removed() const {
  return steamid_friends_removed_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgClientManageFriendsGroup::mutable_steamid_friends_removed() {
  return &steamid_friends_removed_;
}

// -------------------------------------------------------------------

// CMsgClientManageFriendsGroupResponse

// optional uint32 eresult = 1;
inline bool CMsgClientManageFriendsGroupResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientManageFriendsGroupResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientManageFriendsGroupResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientManageFriendsGroupResponse::clear_eresult() {
  eresult_ = 0u;
  clear_has_eresult();
}
inline ::google::protobuf::uint32 CMsgClientManageFriendsGroupResponse::eresult() const {
  return eresult_;
}
inline void CMsgClientManageFriendsGroupResponse::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
}

// -------------------------------------------------------------------

// CMsgClientAddFriendToGroup

// optional int32 groupid = 1;
inline bool CMsgClientAddFriendToGroup::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientAddFriendToGroup::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientAddFriendToGroup::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientAddFriendToGroup::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
inline ::google::protobuf::int32 CMsgClientAddFriendToGroup::groupid() const {
  return groupid_;
}
inline void CMsgClientAddFriendToGroup::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
}

// optional fixed64 steamiduser = 2;
inline bool CMsgClientAddFriendToGroup::has_steamiduser() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientAddFriendToGroup::set_has_steamiduser() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientAddFriendToGroup::clear_has_steamiduser() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientAddFriendToGroup::clear_steamiduser() {
  steamiduser_ = GOOGLE_ULONGLONG(0);
  clear_has_steamiduser();
}
inline ::google::protobuf::uint64 CMsgClientAddFriendToGroup::steamiduser() const {
  return steamiduser_;
}
inline void CMsgClientAddFriendToGroup::set_steamiduser(::google::protobuf::uint64 value) {
  set_has_steamiduser();
  steamiduser_ = value;
}

// -------------------------------------------------------------------

// CMsgClientAddFriendToGroupResponse

// optional uint32 eresult = 1;
inline bool CMsgClientAddFriendToGroupResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientAddFriendToGroupResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientAddFriendToGroupResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientAddFriendToGroupResponse::clear_eresult() {
  eresult_ = 0u;
  clear_has_eresult();
}
inline ::google::protobuf::uint32 CMsgClientAddFriendToGroupResponse::eresult() const {
  return eresult_;
}
inline void CMsgClientAddFriendToGroupResponse::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
}

// -------------------------------------------------------------------

// CMsgClientRemoveFriendFromGroup

// optional int32 groupid = 1;
inline bool CMsgClientRemoveFriendFromGroup::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientRemoveFriendFromGroup::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientRemoveFriendFromGroup::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientRemoveFriendFromGroup::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
inline ::google::protobuf::int32 CMsgClientRemoveFriendFromGroup::groupid() const {
  return groupid_;
}
inline void CMsgClientRemoveFriendFromGroup::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
}

// optional fixed64 steamiduser = 2;
inline bool CMsgClientRemoveFriendFromGroup::has_steamiduser() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientRemoveFriendFromGroup::set_has_steamiduser() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientRemoveFriendFromGroup::clear_has_steamiduser() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientRemoveFriendFromGroup::clear_steamiduser() {
  steamiduser_ = GOOGLE_ULONGLONG(0);
  clear_has_steamiduser();
}
inline ::google::protobuf::uint64 CMsgClientRemoveFriendFromGroup::steamiduser() const {
  return steamiduser_;
}
inline void CMsgClientRemoveFriendFromGroup::set_steamiduser(::google::protobuf::uint64 value) {
  set_has_steamiduser();
  steamiduser_ = value;
}

// -------------------------------------------------------------------

// CMsgClientRemoveFriendFromGroupResponse

// optional uint32 eresult = 1;
inline bool CMsgClientRemoveFriendFromGroupResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientRemoveFriendFromGroupResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientRemoveFriendFromGroupResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientRemoveFriendFromGroupResponse::clear_eresult() {
  eresult_ = 0u;
  clear_has_eresult();
}
inline ::google::protobuf::uint32 CMsgClientRemoveFriendFromGroupResponse::eresult() const {
  return eresult_;
}
inline void CMsgClientRemoveFriendFromGroupResponse::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
}

// -------------------------------------------------------------------

// CMsgClientGetEmoticonList

// -------------------------------------------------------------------

// CMsgClientEmoticonList_Emoticon

// optional string name = 1;
inline bool CMsgClientEmoticonList_Emoticon::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientEmoticonList_Emoticon::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientEmoticonList_Emoticon::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientEmoticonList_Emoticon::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CMsgClientEmoticonList_Emoticon::name() const {
  return *name_;
}
inline void CMsgClientEmoticonList_Emoticon::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CMsgClientEmoticonList_Emoticon::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CMsgClientEmoticonList_Emoticon::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientEmoticonList_Emoticon::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CMsgClientEmoticonList_Emoticon::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientEmoticonList_Emoticon::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 count = 2;
inline bool CMsgClientEmoticonList_Emoticon::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientEmoticonList_Emoticon::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientEmoticonList_Emoticon::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientEmoticonList_Emoticon::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 CMsgClientEmoticonList_Emoticon::count() const {
  return count_;
}
inline void CMsgClientEmoticonList_Emoticon::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional uint32 time_last_used = 3;
inline bool CMsgClientEmoticonList_Emoticon::has_time_last_used() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientEmoticonList_Emoticon::set_has_time_last_used() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientEmoticonList_Emoticon::clear_has_time_last_used() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientEmoticonList_Emoticon::clear_time_last_used() {
  time_last_used_ = 0u;
  clear_has_time_last_used();
}
inline ::google::protobuf::uint32 CMsgClientEmoticonList_Emoticon::time_last_used() const {
  return time_last_used_;
}
inline void CMsgClientEmoticonList_Emoticon::set_time_last_used(::google::protobuf::uint32 value) {
  set_has_time_last_used();
  time_last_used_ = value;
}

// optional uint32 use_count = 4;
inline bool CMsgClientEmoticonList_Emoticon::has_use_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgClientEmoticonList_Emoticon::set_has_use_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgClientEmoticonList_Emoticon::clear_has_use_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgClientEmoticonList_Emoticon::clear_use_count() {
  use_count_ = 0u;
  clear_has_use_count();
}
inline ::google::protobuf::uint32 CMsgClientEmoticonList_Emoticon::use_count() const {
  return use_count_;
}
inline void CMsgClientEmoticonList_Emoticon::set_use_count(::google::protobuf::uint32 value) {
  set_has_use_count();
  use_count_ = value;
}

// optional uint32 time_received = 5;
inline bool CMsgClientEmoticonList_Emoticon::has_time_received() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgClientEmoticonList_Emoticon::set_has_time_received() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgClientEmoticonList_Emoticon::clear_has_time_received() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgClientEmoticonList_Emoticon::clear_time_received() {
  time_received_ = 0u;
  clear_has_time_received();
}
inline ::google::protobuf::uint32 CMsgClientEmoticonList_Emoticon::time_received() const {
  return time_received_;
}
inline void CMsgClientEmoticonList_Emoticon::set_time_received(::google::protobuf::uint32 value) {
  set_has_time_received();
  time_received_ = value;
}

// optional uint32 appid = 6;
inline bool CMsgClientEmoticonList_Emoticon::has_appid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgClientEmoticonList_Emoticon::set_has_appid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgClientEmoticonList_Emoticon::clear_has_appid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgClientEmoticonList_Emoticon::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 CMsgClientEmoticonList_Emoticon::appid() const {
  return appid_;
}
inline void CMsgClientEmoticonList_Emoticon::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
}

// -------------------------------------------------------------------

// CMsgClientEmoticonList_Sticker

// optional string name = 1;
inline bool CMsgClientEmoticonList_Sticker::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientEmoticonList_Sticker::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientEmoticonList_Sticker::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientEmoticonList_Sticker::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CMsgClientEmoticonList_Sticker::name() const {
  return *name_;
}
inline void CMsgClientEmoticonList_Sticker::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CMsgClientEmoticonList_Sticker::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CMsgClientEmoticonList_Sticker::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientEmoticonList_Sticker::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CMsgClientEmoticonList_Sticker::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientEmoticonList_Sticker::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 count = 2;
inline bool CMsgClientEmoticonList_Sticker::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientEmoticonList_Sticker::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientEmoticonList_Sticker::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientEmoticonList_Sticker::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 CMsgClientEmoticonList_Sticker::count() const {
  return count_;
}
inline void CMsgClientEmoticonList_Sticker::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional uint32 time_received = 3;
inline bool CMsgClientEmoticonList_Sticker::has_time_received() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientEmoticonList_Sticker::set_has_time_received() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientEmoticonList_Sticker::clear_has_time_received() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientEmoticonList_Sticker::clear_time_received() {
  time_received_ = 0u;
  clear_has_time_received();
}
inline ::google::protobuf::uint32 CMsgClientEmoticonList_Sticker::time_received() const {
  return time_received_;
}
inline void CMsgClientEmoticonList_Sticker::set_time_received(::google::protobuf::uint32 value) {
  set_has_time_received();
  time_received_ = value;
}

// optional uint32 appid = 4;
inline bool CMsgClientEmoticonList_Sticker::has_appid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgClientEmoticonList_Sticker::set_has_appid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgClientEmoticonList_Sticker::clear_has_appid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgClientEmoticonList_Sticker::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 CMsgClientEmoticonList_Sticker::appid() const {
  return appid_;
}
inline void CMsgClientEmoticonList_Sticker::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
}

// optional uint32 time_last_used = 5;
inline bool CMsgClientEmoticonList_Sticker::has_time_last_used() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgClientEmoticonList_Sticker::set_has_time_last_used() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgClientEmoticonList_Sticker::clear_has_time_last_used() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgClientEmoticonList_Sticker::clear_time_last_used() {
  time_last_used_ = 0u;
  clear_has_time_last_used();
}
inline ::google::protobuf::uint32 CMsgClientEmoticonList_Sticker::time_last_used() const {
  return time_last_used_;
}
inline void CMsgClientEmoticonList_Sticker::set_time_last_used(::google::protobuf::uint32 value) {
  set_has_time_last_used();
  time_last_used_ = value;
}

// optional uint32 use_count = 6;
inline bool CMsgClientEmoticonList_Sticker::has_use_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgClientEmoticonList_Sticker::set_has_use_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgClientEmoticonList_Sticker::clear_has_use_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgClientEmoticonList_Sticker::clear_use_count() {
  use_count_ = 0u;
  clear_has_use_count();
}
inline ::google::protobuf::uint32 CMsgClientEmoticonList_Sticker::use_count() const {
  return use_count_;
}
inline void CMsgClientEmoticonList_Sticker::set_use_count(::google::protobuf::uint32 value) {
  set_has_use_count();
  use_count_ = value;
}

// -------------------------------------------------------------------

// CMsgClientEmoticonList_Effect

// optional string name = 1;
inline bool CMsgClientEmoticonList_Effect::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientEmoticonList_Effect::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientEmoticonList_Effect::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientEmoticonList_Effect::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CMsgClientEmoticonList_Effect::name() const {
  return *name_;
}
inline void CMsgClientEmoticonList_Effect::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CMsgClientEmoticonList_Effect::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CMsgClientEmoticonList_Effect::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgClientEmoticonList_Effect::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CMsgClientEmoticonList_Effect::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgClientEmoticonList_Effect::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 count = 2;
inline bool CMsgClientEmoticonList_Effect::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientEmoticonList_Effect::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientEmoticonList_Effect::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientEmoticonList_Effect::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 CMsgClientEmoticonList_Effect::count() const {
  return count_;
}
inline void CMsgClientEmoticonList_Effect::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional uint32 time_received = 3;
inline bool CMsgClientEmoticonList_Effect::has_time_received() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientEmoticonList_Effect::set_has_time_received() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientEmoticonList_Effect::clear_has_time_received() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientEmoticonList_Effect::clear_time_received() {
  time_received_ = 0u;
  clear_has_time_received();
}
inline ::google::protobuf::uint32 CMsgClientEmoticonList_Effect::time_received() const {
  return time_received_;
}
inline void CMsgClientEmoticonList_Effect::set_time_received(::google::protobuf::uint32 value) {
  set_has_time_received();
  time_received_ = value;
}

// optional bool infinite_use = 4;
inline bool CMsgClientEmoticonList_Effect::has_infinite_use() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgClientEmoticonList_Effect::set_has_infinite_use() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgClientEmoticonList_Effect::clear_has_infinite_use() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgClientEmoticonList_Effect::clear_infinite_use() {
  infinite_use_ = false;
  clear_has_infinite_use();
}
inline bool CMsgClientEmoticonList_Effect::infinite_use() const {
  return infinite_use_;
}
inline void CMsgClientEmoticonList_Effect::set_infinite_use(bool value) {
  set_has_infinite_use();
  infinite_use_ = value;
}

// optional uint32 appid = 5;
inline bool CMsgClientEmoticonList_Effect::has_appid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgClientEmoticonList_Effect::set_has_appid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgClientEmoticonList_Effect::clear_has_appid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgClientEmoticonList_Effect::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 CMsgClientEmoticonList_Effect::appid() const {
  return appid_;
}
inline void CMsgClientEmoticonList_Effect::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
}

// -------------------------------------------------------------------

// CMsgClientEmoticonList

// repeated .CMsgClientEmoticonList.Emoticon emoticons = 1;
inline int CMsgClientEmoticonList::emoticons_size() const {
  return emoticons_.size();
}
inline void CMsgClientEmoticonList::clear_emoticons() {
  emoticons_.Clear();
}
inline const ::CMsgClientEmoticonList_Emoticon& CMsgClientEmoticonList::emoticons(int index) const {
  return emoticons_.Get(index);
}
inline ::CMsgClientEmoticonList_Emoticon* CMsgClientEmoticonList::mutable_emoticons(int index) {
  return emoticons_.Mutable(index);
}
inline ::CMsgClientEmoticonList_Emoticon* CMsgClientEmoticonList::add_emoticons() {
  return emoticons_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgClientEmoticonList_Emoticon >&
CMsgClientEmoticonList::emoticons() const {
  return emoticons_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgClientEmoticonList_Emoticon >*
CMsgClientEmoticonList::mutable_emoticons() {
  return &emoticons_;
}

// repeated .CMsgClientEmoticonList.Sticker stickers = 2;
inline int CMsgClientEmoticonList::stickers_size() const {
  return stickers_.size();
}
inline void CMsgClientEmoticonList::clear_stickers() {
  stickers_.Clear();
}
inline const ::CMsgClientEmoticonList_Sticker& CMsgClientEmoticonList::stickers(int index) const {
  return stickers_.Get(index);
}
inline ::CMsgClientEmoticonList_Sticker* CMsgClientEmoticonList::mutable_stickers(int index) {
  return stickers_.Mutable(index);
}
inline ::CMsgClientEmoticonList_Sticker* CMsgClientEmoticonList::add_stickers() {
  return stickers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgClientEmoticonList_Sticker >&
CMsgClientEmoticonList::stickers() const {
  return stickers_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgClientEmoticonList_Sticker >*
CMsgClientEmoticonList::mutable_stickers() {
  return &stickers_;
}

// repeated .CMsgClientEmoticonList.Effect effects = 3;
inline int CMsgClientEmoticonList::effects_size() const {
  return effects_.size();
}
inline void CMsgClientEmoticonList::clear_effects() {
  effects_.Clear();
}
inline const ::CMsgClientEmoticonList_Effect& CMsgClientEmoticonList::effects(int index) const {
  return effects_.Get(index);
}
inline ::CMsgClientEmoticonList_Effect* CMsgClientEmoticonList::mutable_effects(int index) {
  return effects_.Mutable(index);
}
inline ::CMsgClientEmoticonList_Effect* CMsgClientEmoticonList::add_effects() {
  return effects_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgClientEmoticonList_Effect >&
CMsgClientEmoticonList::effects() const {
  return effects_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgClientEmoticonList_Effect >*
CMsgClientEmoticonList::mutable_effects() {
  return &effects_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_steammessages_5fclientserver_5ffriends_2eproto__INCLUDED

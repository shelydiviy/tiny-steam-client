// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientserver_login.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_clientserver_login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgClientHeartBeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientHeartBeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientServerTimestampRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientServerTimestampRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientServerTimestampResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientServerTimestampResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientSecret_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientSecret_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientHello_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientHello_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientLogon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientLogon_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientLogonResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientLogonResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientRequestWebAPIAuthenticateUserNonce_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientRequestWebAPIAuthenticateUserNonce_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientRequestWebAPIAuthenticateUserNonceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientRequestWebAPIAuthenticateUserNonceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientLogOff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientLogOff_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientLoggedOff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientLoggedOff_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientNewLoginKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientNewLoginKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientNewLoginKeyAccepted_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientNewLoginKeyAccepted_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientAccountInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientAccountInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientChallengeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientChallengeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientChallengeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientChallengeResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_steammessages_5fclientserver_5flogin_2eproto() {
  protobuf_AddDesc_steammessages_5fclientserver_5flogin_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "steammessages_clientserver_login.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgClientHeartBeat_descriptor_ = file->message_type(0);
  static const int CMsgClientHeartBeat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHeartBeat, send_reply_),
  };
  CMsgClientHeartBeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientHeartBeat_descriptor_,
      CMsgClientHeartBeat::default_instance_,
      CMsgClientHeartBeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHeartBeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHeartBeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientHeartBeat));
  CMsgClientServerTimestampRequest_descriptor_ = file->message_type(1);
  static const int CMsgClientServerTimestampRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServerTimestampRequest, client_request_timestamp_),
  };
  CMsgClientServerTimestampRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientServerTimestampRequest_descriptor_,
      CMsgClientServerTimestampRequest::default_instance_,
      CMsgClientServerTimestampRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServerTimestampRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServerTimestampRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientServerTimestampRequest));
  CMsgClientServerTimestampResponse_descriptor_ = file->message_type(2);
  static const int CMsgClientServerTimestampResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServerTimestampResponse, client_request_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServerTimestampResponse, server_timestamp_ms_),
  };
  CMsgClientServerTimestampResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientServerTimestampResponse_descriptor_,
      CMsgClientServerTimestampResponse::default_instance_,
      CMsgClientServerTimestampResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServerTimestampResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServerTimestampResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientServerTimestampResponse));
  CMsgClientSecret_descriptor_ = file->message_type(3);
  static const int CMsgClientSecret_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSecret, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSecret, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSecret, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSecret, nonce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSecret, hmac_),
  };
  CMsgClientSecret_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientSecret_descriptor_,
      CMsgClientSecret::default_instance_,
      CMsgClientSecret_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSecret, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSecret, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientSecret));
  CMsgClientHello_descriptor_ = file->message_type(4);
  static const int CMsgClientHello_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, protocol_version_),
  };
  CMsgClientHello_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientHello_descriptor_,
      CMsgClientHello::default_instance_,
      CMsgClientHello_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientHello));
  CMsgClientLogon_descriptor_ = file->message_type(5);
  static const int CMsgClientLogon_offsets_[55] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, protocol_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, deprecated_obfustucated_private_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, cell_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, last_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, client_package_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, client_language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, client_os_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, should_remember_password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, wine_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, deprecated_10_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, obfuscated_private_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, deprecated_public_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, qos_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, client_supplied_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, public_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, machine_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, launcher_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, ui_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, chat_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, steam2_auth_ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, email_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, rtime32_account_creation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, account_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, game_server_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, login_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, was_converted_deprecated_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, anon_user_target_account_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, resolved_user_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, eresult_sentryfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, sha_sentryfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, auth_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, otp_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, otp_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, otp_identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, steam2_ticket_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, sony_psn_ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, sony_psn_service_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, create_new_psn_linked_account_if_needed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, sony_psn_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, game_server_app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, steamguard_dont_remember_computer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, machine_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, machine_name_userchosen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, country_override_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, is_steam_box_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, client_instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, two_factor_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, supports_rate_limit_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, web_logon_nonce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, priority_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, embedded_client_secret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, disable_partner_autogrants_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, is_steam_deck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, access_token_),
  };
  CMsgClientLogon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientLogon_descriptor_,
      CMsgClientLogon::default_instance_,
      CMsgClientLogon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientLogon));
  CMsgClientLogonResponse_descriptor_ = file->message_type(6);
  static const int CMsgClientLogonResponse_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, legacy_out_of_game_heartbeat_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, heartbeat_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, deprecated_public_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, rtime32_server_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, account_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, cell_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, email_domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, steam2_ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, eresult_extended_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, webapi_authenticate_user_nonce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, cell_id_ping_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, deprecated_use_pics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, vanity_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, public_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, client_supplied_steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, ip_country_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, parental_settings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, parental_setting_signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, count_loginfailures_to_migrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, count_disconnects_to_migrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, ogs_data_report_time_window_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, client_instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, force_client_update_check_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, agreement_session_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, token_id_),
  };
  CMsgClientLogonResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientLogonResponse_descriptor_,
      CMsgClientLogonResponse::default_instance_,
      CMsgClientLogonResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogonResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientLogonResponse));
  CMsgClientRequestWebAPIAuthenticateUserNonce_descriptor_ = file->message_type(7);
  static const int CMsgClientRequestWebAPIAuthenticateUserNonce_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestWebAPIAuthenticateUserNonce, token_type_),
  };
  CMsgClientRequestWebAPIAuthenticateUserNonce_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientRequestWebAPIAuthenticateUserNonce_descriptor_,
      CMsgClientRequestWebAPIAuthenticateUserNonce::default_instance_,
      CMsgClientRequestWebAPIAuthenticateUserNonce_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestWebAPIAuthenticateUserNonce, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestWebAPIAuthenticateUserNonce, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientRequestWebAPIAuthenticateUserNonce));
  CMsgClientRequestWebAPIAuthenticateUserNonceResponse_descriptor_ = file->message_type(8);
  static const int CMsgClientRequestWebAPIAuthenticateUserNonceResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestWebAPIAuthenticateUserNonceResponse, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestWebAPIAuthenticateUserNonceResponse, webapi_authenticate_user_nonce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestWebAPIAuthenticateUserNonceResponse, token_type_),
  };
  CMsgClientRequestWebAPIAuthenticateUserNonceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientRequestWebAPIAuthenticateUserNonceResponse_descriptor_,
      CMsgClientRequestWebAPIAuthenticateUserNonceResponse::default_instance_,
      CMsgClientRequestWebAPIAuthenticateUserNonceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestWebAPIAuthenticateUserNonceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestWebAPIAuthenticateUserNonceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientRequestWebAPIAuthenticateUserNonceResponse));
  CMsgClientLogOff_descriptor_ = file->message_type(9);
  static const int CMsgClientLogOff_offsets_[1] = {
  };
  CMsgClientLogOff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientLogOff_descriptor_,
      CMsgClientLogOff::default_instance_,
      CMsgClientLogOff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogOff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLogOff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientLogOff));
  CMsgClientLoggedOff_descriptor_ = file->message_type(10);
  static const int CMsgClientLoggedOff_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLoggedOff, eresult_),
  };
  CMsgClientLoggedOff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientLoggedOff_descriptor_,
      CMsgClientLoggedOff::default_instance_,
      CMsgClientLoggedOff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLoggedOff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLoggedOff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientLoggedOff));
  CMsgClientNewLoginKey_descriptor_ = file->message_type(11);
  static const int CMsgClientNewLoginKey_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientNewLoginKey, unique_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientNewLoginKey, login_key_),
  };
  CMsgClientNewLoginKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientNewLoginKey_descriptor_,
      CMsgClientNewLoginKey::default_instance_,
      CMsgClientNewLoginKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientNewLoginKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientNewLoginKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientNewLoginKey));
  CMsgClientNewLoginKeyAccepted_descriptor_ = file->message_type(12);
  static const int CMsgClientNewLoginKeyAccepted_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientNewLoginKeyAccepted, unique_id_),
  };
  CMsgClientNewLoginKeyAccepted_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientNewLoginKeyAccepted_descriptor_,
      CMsgClientNewLoginKeyAccepted::default_instance_,
      CMsgClientNewLoginKeyAccepted_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientNewLoginKeyAccepted, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientNewLoginKeyAccepted, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientNewLoginKeyAccepted));
  CMsgClientAccountInfo_descriptor_ = file->message_type(13);
  static const int CMsgClientAccountInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAccountInfo, persona_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAccountInfo, ip_country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAccountInfo, count_authed_computers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAccountInfo, account_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAccountInfo, facebook_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAccountInfo, facebook_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAccountInfo, steamguard_notify_newmachines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAccountInfo, steamguard_machine_name_user_chosen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAccountInfo, is_phone_verified_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAccountInfo, two_factor_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAccountInfo, is_phone_identifying_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAccountInfo, is_phone_needing_reverify_),
  };
  CMsgClientAccountInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientAccountInfo_descriptor_,
      CMsgClientAccountInfo::default_instance_,
      CMsgClientAccountInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAccountInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAccountInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientAccountInfo));
  CMsgClientChallengeRequest_descriptor_ = file->message_type(14);
  static const int CMsgClientChallengeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChallengeRequest, steamid_),
  };
  CMsgClientChallengeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientChallengeRequest_descriptor_,
      CMsgClientChallengeRequest::default_instance_,
      CMsgClientChallengeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChallengeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChallengeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientChallengeRequest));
  CMsgClientChallengeResponse_descriptor_ = file->message_type(15);
  static const int CMsgClientChallengeResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChallengeResponse, challenge_),
  };
  CMsgClientChallengeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientChallengeResponse_descriptor_,
      CMsgClientChallengeResponse::default_instance_,
      CMsgClientChallengeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChallengeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChallengeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientChallengeResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_steammessages_5fclientserver_5flogin_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientHeartBeat_descriptor_, &CMsgClientHeartBeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientServerTimestampRequest_descriptor_, &CMsgClientServerTimestampRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientServerTimestampResponse_descriptor_, &CMsgClientServerTimestampResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientSecret_descriptor_, &CMsgClientSecret::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientHello_descriptor_, &CMsgClientHello::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientLogon_descriptor_, &CMsgClientLogon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientLogonResponse_descriptor_, &CMsgClientLogonResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientRequestWebAPIAuthenticateUserNonce_descriptor_, &CMsgClientRequestWebAPIAuthenticateUserNonce::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientRequestWebAPIAuthenticateUserNonceResponse_descriptor_, &CMsgClientRequestWebAPIAuthenticateUserNonceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientLogOff_descriptor_, &CMsgClientLogOff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientLoggedOff_descriptor_, &CMsgClientLoggedOff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientNewLoginKey_descriptor_, &CMsgClientNewLoginKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientNewLoginKeyAccepted_descriptor_, &CMsgClientNewLoginKeyAccepted::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientAccountInfo_descriptor_, &CMsgClientAccountInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientChallengeRequest_descriptor_, &CMsgClientChallengeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientChallengeResponse_descriptor_, &CMsgClientChallengeResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_steammessages_5fclientserver_5flogin_2eproto() {
  delete CMsgClientHeartBeat::default_instance_;
  delete CMsgClientHeartBeat_reflection_;
  delete CMsgClientServerTimestampRequest::default_instance_;
  delete CMsgClientServerTimestampRequest_reflection_;
  delete CMsgClientServerTimestampResponse::default_instance_;
  delete CMsgClientServerTimestampResponse_reflection_;
  delete CMsgClientSecret::default_instance_;
  delete CMsgClientSecret_reflection_;
  delete CMsgClientHello::default_instance_;
  delete CMsgClientHello_reflection_;
  delete CMsgClientLogon::default_instance_;
  delete CMsgClientLogon_reflection_;
  delete CMsgClientLogonResponse::default_instance_;
  delete CMsgClientLogonResponse_reflection_;
  delete CMsgClientRequestWebAPIAuthenticateUserNonce::default_instance_;
  delete CMsgClientRequestWebAPIAuthenticateUserNonce_reflection_;
  delete CMsgClientRequestWebAPIAuthenticateUserNonceResponse::default_instance_;
  delete CMsgClientRequestWebAPIAuthenticateUserNonceResponse_reflection_;
  delete CMsgClientLogOff::default_instance_;
  delete CMsgClientLogOff_reflection_;
  delete CMsgClientLoggedOff::default_instance_;
  delete CMsgClientLoggedOff_reflection_;
  delete CMsgClientNewLoginKey::default_instance_;
  delete CMsgClientNewLoginKey_reflection_;
  delete CMsgClientNewLoginKeyAccepted::default_instance_;
  delete CMsgClientNewLoginKeyAccepted_reflection_;
  delete CMsgClientAccountInfo::default_instance_;
  delete CMsgClientAccountInfo_reflection_;
  delete CMsgClientChallengeRequest::default_instance_;
  delete CMsgClientChallengeRequest_reflection_;
  delete CMsgClientChallengeResponse::default_instance_;
  delete CMsgClientChallengeResponse_reflection_;
}

void protobuf_AddDesc_steammessages_5fclientserver_5flogin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_steammessages_5fbase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n&steammessages_clientserver_login.proto"
    "\032\030steammessages_base.proto\")\n\023CMsgClient"
    "HeartBeat\022\022\n\nsend_reply\030\001 \001(\010\"D\n CMsgCli"
    "entServerTimestampRequest\022 \n\030client_requ"
    "est_timestamp\030\001 \001(\004\"b\n!CMsgClientServerT"
    "imestampResponse\022 \n\030client_request_times"
    "tamp\030\001 \001(\004\022\033\n\023server_timestamp_ms\030\002 \001(\004\""
    "a\n\020CMsgClientSecret\022\017\n\007version\030\001 \001(\r\022\r\n\005"
    "appid\030\002 \001(\r\022\020\n\010deviceid\030\003 \001(\r\022\r\n\005nonce\030\004"
    " \001(\006\022\014\n\004hmac\030\005 \001(\014\"+\n\017CMsgClientHello\022\030\n"
    "\020protocol_version\030\001 \001(\r\"\253\014\n\017CMsgClientLo"
    "gon\022\030\n\020protocol_version\030\001 \001(\r\022*\n\"depreca"
    "ted_obfustucated_private_ip\030\002 \001(\r\022\017\n\007cel"
    "l_id\030\003 \001(\r\022\027\n\017last_session_id\030\004 \001(\r\022\036\n\026c"
    "lient_package_version\030\005 \001(\r\022\027\n\017client_la"
    "nguage\030\006 \001(\t\022\026\n\016client_os_type\030\007 \001(\r\022\'\n\030"
    "should_remember_password\030\010 \001(\010:\005false\022\024\n"
    "\014wine_version\030\t \001(\t\022\025\n\rdeprecated_10\030\n \001"
    "(\r\022-\n\025obfuscated_private_ip\030\013 \001(\0132\016.CMsg"
    "IPAddress\022\034\n\024deprecated_public_ip\030\024 \001(\r\022"
    "\021\n\tqos_level\030\025 \001(\r\022 \n\030client_supplied_st"
    "eam_id\030\026 \001(\006\022!\n\tpublic_ip\030\027 \001(\0132\016.CMsgIP"
    "Address\022\022\n\nmachine_id\030\036 \001(\014\022\030\n\rlauncher_"
    "type\030\037 \001(\r:\0010\022\022\n\007ui_mode\030  \001(\r:\0010\022\024\n\tcha"
    "t_mode\030! \001(\r:\0010\022\032\n\022steam2_auth_ticket\030) "
    "\001(\014\022\025\n\remail_address\030* \001(\t\022 \n\030rtime32_ac"
    "count_creation\030+ \001(\007\022\024\n\014account_name\0302 \001"
    "(\t\022\020\n\010password\0303 \001(\t\022\031\n\021game_server_toke"
    "n\0304 \001(\t\022\021\n\tlogin_key\030< \001(\t\022+\n\034was_conver"
    "ted_deprecated_msg\030F \001(\010:\005false\022%\n\035anon_"
    "user_target_account_name\030P \001(\t\022\036\n\026resolv"
    "ed_user_steam_id\030Q \001(\006\022\032\n\022eresult_sentry"
    "file\030R \001(\005\022\026\n\016sha_sentryfile\030S \001(\014\022\021\n\tau"
    "th_code\030T \001(\t\022\020\n\010otp_type\030U \001(\005\022\021\n\totp_v"
    "alue\030V \001(\r\022\026\n\016otp_identifier\030W \001(\t\022\035\n\025st"
    "eam2_ticket_request\030X \001(\010\022\027\n\017sony_psn_ti"
    "cket\030Z \001(\014\022\033\n\023sony_psn_service_id\030[ \001(\t\022"
    "6\n\'create_new_psn_linked_account_if_need"
    "ed\030\\ \001(\010:\005false\022\025\n\rsony_psn_name\030] \001(\t\022\032"
    "\n\022game_server_app_id\030^ \001(\005\022)\n!steamguard"
    "_dont_remember_computer\030_ \001(\010\022\024\n\014machine"
    "_name\030` \001(\t\022\037\n\027machine_name_userchosen\030a"
    " \001(\t\022\030\n\020country_override\030b \001(\t\022\024\n\014is_ste"
    "am_box\030c \001(\010\022\032\n\022client_instance_id\030d \001(\004"
    "\022\027\n\017two_factor_code\030e \001(\t\022$\n\034supports_ra"
    "te_limit_response\030f \001(\010\022\027\n\017web_logon_non"
    "ce\030g \001(\t\022\027\n\017priority_reason\030h \001(\005\0221\n\026emb"
    "edded_client_secret\030i \001(\0132\021.CMsgClientSe"
    "cret\022\"\n\032disable_partner_autogrants\030j \001(\010"
    "\022\025\n\ris_steam_deck\030k \001(\010\022\024\n\014access_token\030"
    "l \001(\t\"\230\006\n\027CMsgClientLogonResponse\022\022\n\007ere"
    "sult\030\001 \001(\005:\0012\022,\n$legacy_out_of_game_hear"
    "tbeat_seconds\030\002 \001(\005\022\031\n\021heartbeat_seconds"
    "\030\003 \001(\005\022\034\n\024deprecated_public_ip\030\004 \001(\r\022\033\n\023"
    "rtime32_server_time\030\005 \001(\007\022\025\n\raccount_fla"
    "gs\030\006 \001(\r\022\017\n\007cell_id\030\007 \001(\r\022\024\n\014email_domai"
    "n\030\010 \001(\t\022\025\n\rsteam2_ticket\030\t \001(\014\022\030\n\020eresul"
    "t_extended\030\n \001(\005\022&\n\036webapi_authenticate_"
    "user_nonce\030\013 \001(\t\022\036\n\026cell_id_ping_thresho"
    "ld\030\014 \001(\r\022\033\n\023deprecated_use_pics\030\r \001(\010\022\022\n"
    "\nvanity_url\030\016 \001(\t\022!\n\tpublic_ip\030\017 \001(\0132\016.C"
    "MsgIPAddress\022\037\n\027client_supplied_steamid\030"
    "\024 \001(\006\022\027\n\017ip_country_code\030\025 \001(\t\022\031\n\021parent"
    "al_settings\030\026 \001(\014\022\"\n\032parental_setting_si"
    "gnature\030\027 \001(\014\022&\n\036count_loginfailures_to_"
    "migrate\030\030 \001(\005\022$\n\034count_disconnects_to_mi"
    "grate\030\031 \001(\005\022#\n\033ogs_data_report_time_wind"
    "ow\030\032 \001(\005\022\032\n\022client_instance_id\030\033 \001(\004\022!\n\031"
    "force_client_update_check\030\034 \001(\010\022\035\n\025agree"
    "ment_session_url\030\035 \001(\t\022\020\n\010token_id\030\036 \001(\004"
    "\"F\n,CMsgClientRequestWebAPIAuthenticateU"
    "serNonce\022\026\n\ntoken_type\030\001 \001(\005:\002-1\"\212\001\n4CMs"
    "gClientRequestWebAPIAuthenticateUserNonc"
    "eResponse\022\022\n\007eresult\030\001 \001(\005:\0012\022&\n\036webapi_"
    "authenticate_user_nonce\030\013 \001(\t\022\026\n\ntoken_t"
    "ype\030\003 \001(\005:\002-1\"\022\n\020CMsgClientLogOff\")\n\023CMs"
    "gClientLoggedOff\022\022\n\007eresult\030\001 \001(\005:\0012\"=\n\025"
    "CMsgClientNewLoginKey\022\021\n\tunique_id\030\001 \001(\r"
    "\022\021\n\tlogin_key\030\002 \001(\t\"2\n\035CMsgClientNewLogi"
    "nKeyAccepted\022\021\n\tunique_id\030\001 \001(\r\"\356\002\n\025CMsg"
    "ClientAccountInfo\022\024\n\014persona_name\030\001 \001(\t\022"
    "\022\n\nip_country\030\002 \001(\t\022\036\n\026count_authed_comp"
    "uters\030\005 \001(\005\022\025\n\raccount_flags\030\007 \001(\r\022\023\n\013fa"
    "cebook_id\030\010 \001(\004\022\025\n\rfacebook_name\030\t \001(\t\022%"
    "\n\035steamguard_notify_newmachines\030\016 \001(\010\022+\n"
    "#steamguard_machine_name_user_chosen\030\017 \001"
    "(\t\022\031\n\021is_phone_verified\030\020 \001(\010\022\030\n\020two_fac"
    "tor_state\030\021 \001(\r\022\034\n\024is_phone_identifying\030"
    "\022 \001(\010\022!\n\031is_phone_needing_reverify\030\023 \001(\010"
    "\"-\n\032CMsgClientChallengeRequest\022\017\n\007steami"
    "d\030\001 \001(\006\"0\n\033CMsgClientChallengeResponse\022\021"
    "\n\tchallenge\030\001 \001(\006B\005H\001\200\001\000", 3664);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_clientserver_login.proto", &protobuf_RegisterTypes);
  CMsgClientHeartBeat::default_instance_ = new CMsgClientHeartBeat();
  CMsgClientServerTimestampRequest::default_instance_ = new CMsgClientServerTimestampRequest();
  CMsgClientServerTimestampResponse::default_instance_ = new CMsgClientServerTimestampResponse();
  CMsgClientSecret::default_instance_ = new CMsgClientSecret();
  CMsgClientHello::default_instance_ = new CMsgClientHello();
  CMsgClientLogon::default_instance_ = new CMsgClientLogon();
  CMsgClientLogonResponse::default_instance_ = new CMsgClientLogonResponse();
  CMsgClientRequestWebAPIAuthenticateUserNonce::default_instance_ = new CMsgClientRequestWebAPIAuthenticateUserNonce();
  CMsgClientRequestWebAPIAuthenticateUserNonceResponse::default_instance_ = new CMsgClientRequestWebAPIAuthenticateUserNonceResponse();
  CMsgClientLogOff::default_instance_ = new CMsgClientLogOff();
  CMsgClientLoggedOff::default_instance_ = new CMsgClientLoggedOff();
  CMsgClientNewLoginKey::default_instance_ = new CMsgClientNewLoginKey();
  CMsgClientNewLoginKeyAccepted::default_instance_ = new CMsgClientNewLoginKeyAccepted();
  CMsgClientAccountInfo::default_instance_ = new CMsgClientAccountInfo();
  CMsgClientChallengeRequest::default_instance_ = new CMsgClientChallengeRequest();
  CMsgClientChallengeResponse::default_instance_ = new CMsgClientChallengeResponse();
  CMsgClientHeartBeat::default_instance_->InitAsDefaultInstance();
  CMsgClientServerTimestampRequest::default_instance_->InitAsDefaultInstance();
  CMsgClientServerTimestampResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientSecret::default_instance_->InitAsDefaultInstance();
  CMsgClientHello::default_instance_->InitAsDefaultInstance();
  CMsgClientLogon::default_instance_->InitAsDefaultInstance();
  CMsgClientLogonResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientRequestWebAPIAuthenticateUserNonce::default_instance_->InitAsDefaultInstance();
  CMsgClientRequestWebAPIAuthenticateUserNonceResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientLogOff::default_instance_->InitAsDefaultInstance();
  CMsgClientLoggedOff::default_instance_->InitAsDefaultInstance();
  CMsgClientNewLoginKey::default_instance_->InitAsDefaultInstance();
  CMsgClientNewLoginKeyAccepted::default_instance_->InitAsDefaultInstance();
  CMsgClientAccountInfo::default_instance_->InitAsDefaultInstance();
  CMsgClientChallengeRequest::default_instance_->InitAsDefaultInstance();
  CMsgClientChallengeResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_steammessages_5fclientserver_5flogin_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_steammessages_5fclientserver_5flogin_2eproto {
  StaticDescriptorInitializer_steammessages_5fclientserver_5flogin_2eproto() {
    protobuf_AddDesc_steammessages_5fclientserver_5flogin_2eproto();
  }
} static_descriptor_initializer_steammessages_5fclientserver_5flogin_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CMsgClientHeartBeat::kSendReplyFieldNumber;
#endif  // !_MSC_VER

CMsgClientHeartBeat::CMsgClientHeartBeat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientHeartBeat::InitAsDefaultInstance() {
}

CMsgClientHeartBeat::CMsgClientHeartBeat(const CMsgClientHeartBeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientHeartBeat::SharedCtor() {
  _cached_size_ = 0;
  send_reply_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientHeartBeat::~CMsgClientHeartBeat() {
  SharedDtor();
}

void CMsgClientHeartBeat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientHeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientHeartBeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientHeartBeat_descriptor_;
}

const CMsgClientHeartBeat& CMsgClientHeartBeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5flogin_2eproto();
  return *default_instance_;
}

CMsgClientHeartBeat* CMsgClientHeartBeat::default_instance_ = NULL;

CMsgClientHeartBeat* CMsgClientHeartBeat::New() const {
  return new CMsgClientHeartBeat;
}

void CMsgClientHeartBeat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    send_reply_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientHeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool send_reply = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_reply_)));
          set_has_send_reply();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientHeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool send_reply = 1;
  if (has_send_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->send_reply(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientHeartBeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool send_reply = 1;
  if (has_send_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->send_reply(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientHeartBeat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool send_reply = 1;
    if (has_send_reply()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientHeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientHeartBeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientHeartBeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientHeartBeat::MergeFrom(const CMsgClientHeartBeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_send_reply()) {
      set_send_reply(from.send_reply());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientHeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientHeartBeat::CopyFrom(const CMsgClientHeartBeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientHeartBeat::IsInitialized() const {

  return true;
}

void CMsgClientHeartBeat::Swap(CMsgClientHeartBeat* other) {
  if (other != this) {
    std::swap(send_reply_, other->send_reply_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientHeartBeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientHeartBeat_descriptor_;
  metadata.reflection = CMsgClientHeartBeat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientServerTimestampRequest::kClientRequestTimestampFieldNumber;
#endif  // !_MSC_VER

CMsgClientServerTimestampRequest::CMsgClientServerTimestampRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientServerTimestampRequest::InitAsDefaultInstance() {
}

CMsgClientServerTimestampRequest::CMsgClientServerTimestampRequest(const CMsgClientServerTimestampRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientServerTimestampRequest::SharedCtor() {
  _cached_size_ = 0;
  client_request_timestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientServerTimestampRequest::~CMsgClientServerTimestampRequest() {
  SharedDtor();
}

void CMsgClientServerTimestampRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientServerTimestampRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientServerTimestampRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientServerTimestampRequest_descriptor_;
}

const CMsgClientServerTimestampRequest& CMsgClientServerTimestampRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5flogin_2eproto();
  return *default_instance_;
}

CMsgClientServerTimestampRequest* CMsgClientServerTimestampRequest::default_instance_ = NULL;

CMsgClientServerTimestampRequest* CMsgClientServerTimestampRequest::New() const {
  return new CMsgClientServerTimestampRequest;
}

void CMsgClientServerTimestampRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_request_timestamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientServerTimestampRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 client_request_timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &client_request_timestamp_)));
          set_has_client_request_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientServerTimestampRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 client_request_timestamp = 1;
  if (has_client_request_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->client_request_timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientServerTimestampRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 client_request_timestamp = 1;
  if (has_client_request_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->client_request_timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientServerTimestampRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 client_request_timestamp = 1;
    if (has_client_request_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->client_request_timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientServerTimestampRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientServerTimestampRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientServerTimestampRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientServerTimestampRequest::MergeFrom(const CMsgClientServerTimestampRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_request_timestamp()) {
      set_client_request_timestamp(from.client_request_timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientServerTimestampRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientServerTimestampRequest::CopyFrom(const CMsgClientServerTimestampRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientServerTimestampRequest::IsInitialized() const {

  return true;
}

void CMsgClientServerTimestampRequest::Swap(CMsgClientServerTimestampRequest* other) {
  if (other != this) {
    std::swap(client_request_timestamp_, other->client_request_timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientServerTimestampRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientServerTimestampRequest_descriptor_;
  metadata.reflection = CMsgClientServerTimestampRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientServerTimestampResponse::kClientRequestTimestampFieldNumber;
const int CMsgClientServerTimestampResponse::kServerTimestampMsFieldNumber;
#endif  // !_MSC_VER

CMsgClientServerTimestampResponse::CMsgClientServerTimestampResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientServerTimestampResponse::InitAsDefaultInstance() {
}

CMsgClientServerTimestampResponse::CMsgClientServerTimestampResponse(const CMsgClientServerTimestampResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientServerTimestampResponse::SharedCtor() {
  _cached_size_ = 0;
  client_request_timestamp_ = GOOGLE_ULONGLONG(0);
  server_timestamp_ms_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientServerTimestampResponse::~CMsgClientServerTimestampResponse() {
  SharedDtor();
}

void CMsgClientServerTimestampResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientServerTimestampResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientServerTimestampResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientServerTimestampResponse_descriptor_;
}

const CMsgClientServerTimestampResponse& CMsgClientServerTimestampResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5flogin_2eproto();
  return *default_instance_;
}

CMsgClientServerTimestampResponse* CMsgClientServerTimestampResponse::default_instance_ = NULL;

CMsgClientServerTimestampResponse* CMsgClientServerTimestampResponse::New() const {
  return new CMsgClientServerTimestampResponse;
}

void CMsgClientServerTimestampResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_request_timestamp_ = GOOGLE_ULONGLONG(0);
    server_timestamp_ms_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientServerTimestampResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 client_request_timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &client_request_timestamp_)));
          set_has_client_request_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_timestamp_ms;
        break;
      }

      // optional uint64 server_timestamp_ms = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_timestamp_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_timestamp_ms_)));
          set_has_server_timestamp_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientServerTimestampResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 client_request_timestamp = 1;
  if (has_client_request_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->client_request_timestamp(), output);
  }

  // optional uint64 server_timestamp_ms = 2;
  if (has_server_timestamp_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->server_timestamp_ms(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientServerTimestampResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 client_request_timestamp = 1;
  if (has_client_request_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->client_request_timestamp(), target);
  }

  // optional uint64 server_timestamp_ms = 2;
  if (has_server_timestamp_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->server_timestamp_ms(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientServerTimestampResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 client_request_timestamp = 1;
    if (has_client_request_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->client_request_timestamp());
    }

    // optional uint64 server_timestamp_ms = 2;
    if (has_server_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->server_timestamp_ms());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientServerTimestampResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientServerTimestampResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientServerTimestampResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientServerTimestampResponse::MergeFrom(const CMsgClientServerTimestampResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_request_timestamp()) {
      set_client_request_timestamp(from.client_request_timestamp());
    }
    if (from.has_server_timestamp_ms()) {
      set_server_timestamp_ms(from.server_timestamp_ms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientServerTimestampResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientServerTimestampResponse::CopyFrom(const CMsgClientServerTimestampResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientServerTimestampResponse::IsInitialized() const {

  return true;
}

void CMsgClientServerTimestampResponse::Swap(CMsgClientServerTimestampResponse* other) {
  if (other != this) {
    std::swap(client_request_timestamp_, other->client_request_timestamp_);
    std::swap(server_timestamp_ms_, other->server_timestamp_ms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientServerTimestampResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientServerTimestampResponse_descriptor_;
  metadata.reflection = CMsgClientServerTimestampResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientSecret::kVersionFieldNumber;
const int CMsgClientSecret::kAppidFieldNumber;
const int CMsgClientSecret::kDeviceidFieldNumber;
const int CMsgClientSecret::kNonceFieldNumber;
const int CMsgClientSecret::kHmacFieldNumber;
#endif  // !_MSC_VER

CMsgClientSecret::CMsgClientSecret()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientSecret::InitAsDefaultInstance() {
}

CMsgClientSecret::CMsgClientSecret(const CMsgClientSecret& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientSecret::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  appid_ = 0u;
  deviceid_ = 0u;
  nonce_ = GOOGLE_ULONGLONG(0);
  hmac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientSecret::~CMsgClientSecret() {
  SharedDtor();
}

void CMsgClientSecret::SharedDtor() {
  if (hmac_ != &::google::protobuf::internal::kEmptyString) {
    delete hmac_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientSecret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientSecret::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientSecret_descriptor_;
}

const CMsgClientSecret& CMsgClientSecret::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5flogin_2eproto();
  return *default_instance_;
}

CMsgClientSecret* CMsgClientSecret::default_instance_ = NULL;

CMsgClientSecret* CMsgClientSecret::New() const {
  return new CMsgClientSecret;
}

void CMsgClientSecret::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0u;
    appid_ = 0u;
    deviceid_ = 0u;
    nonce_ = GOOGLE_ULONGLONG(0);
    if (has_hmac()) {
      if (hmac_ != &::google::protobuf::internal::kEmptyString) {
        hmac_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientSecret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_appid;
        break;
      }

      // optional uint32 appid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_deviceid;
        break;
      }

      // optional uint32 deviceid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deviceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_nonce;
        break;
      }

      // optional fixed64 nonce = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_nonce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &nonce_)));
          set_has_nonce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_hmac;
        break;
      }

      // optional bytes hmac = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hmac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hmac()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientSecret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional uint32 appid = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  // optional uint32 deviceid = 3;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->deviceid(), output);
  }

  // optional fixed64 nonce = 4;
  if (has_nonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->nonce(), output);
  }

  // optional bytes hmac = 5;
  if (has_hmac()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->hmac(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientSecret::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional uint32 appid = 2;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  // optional uint32 deviceid = 3;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->deviceid(), target);
  }

  // optional fixed64 nonce = 4;
  if (has_nonce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->nonce(), target);
  }

  // optional bytes hmac = 5;
  if (has_hmac()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->hmac(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientSecret::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 appid = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 deviceid = 3;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional fixed64 nonce = 4;
    if (has_nonce()) {
      total_size += 1 + 8;
    }

    // optional bytes hmac = 5;
    if (has_hmac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hmac());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientSecret::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientSecret* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientSecret*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientSecret::MergeFrom(const CMsgClientSecret& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_nonce()) {
      set_nonce(from.nonce());
    }
    if (from.has_hmac()) {
      set_hmac(from.hmac());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientSecret::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSecret::CopyFrom(const CMsgClientSecret& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSecret::IsInitialized() const {

  return true;
}

void CMsgClientSecret::Swap(CMsgClientSecret* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(appid_, other->appid_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(nonce_, other->nonce_);
    std::swap(hmac_, other->hmac_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientSecret::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientSecret_descriptor_;
  metadata.reflection = CMsgClientSecret_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientHello::kProtocolVersionFieldNumber;
#endif  // !_MSC_VER

CMsgClientHello::CMsgClientHello()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientHello::InitAsDefaultInstance() {
}

CMsgClientHello::CMsgClientHello(const CMsgClientHello& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientHello::SharedCtor() {
  _cached_size_ = 0;
  protocol_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientHello::~CMsgClientHello() {
  SharedDtor();
}

void CMsgClientHello::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientHello::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientHello::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientHello_descriptor_;
}

const CMsgClientHello& CMsgClientHello::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5flogin_2eproto();
  return *default_instance_;
}

CMsgClientHello* CMsgClientHello::default_instance_ = NULL;

CMsgClientHello* CMsgClientHello::New() const {
  return new CMsgClientHello;
}

void CMsgClientHello::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protocol_version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientHello::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 protocol_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_version_)));
          set_has_protocol_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientHello::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 protocol_version = 1;
  if (has_protocol_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->protocol_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientHello::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 protocol_version = 1;
  if (has_protocol_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->protocol_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientHello::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 protocol_version = 1;
    if (has_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientHello::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientHello* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientHello*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientHello::MergeFrom(const CMsgClientHello& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protocol_version()) {
      set_protocol_version(from.protocol_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientHello::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientHello::CopyFrom(const CMsgClientHello& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientHello::IsInitialized() const {

  return true;
}

void CMsgClientHello::Swap(CMsgClientHello* other) {
  if (other != this) {
    std::swap(protocol_version_, other->protocol_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientHello::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientHello_descriptor_;
  metadata.reflection = CMsgClientHello_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientLogon::kProtocolVersionFieldNumber;
const int CMsgClientLogon::kDeprecatedObfustucatedPrivateIpFieldNumber;
const int CMsgClientLogon::kCellIdFieldNumber;
const int CMsgClientLogon::kLastSessionIdFieldNumber;
const int CMsgClientLogon::kClientPackageVersionFieldNumber;
const int CMsgClientLogon::kClientLanguageFieldNumber;
const int CMsgClientLogon::kClientOsTypeFieldNumber;
const int CMsgClientLogon::kShouldRememberPasswordFieldNumber;
const int CMsgClientLogon::kWineVersionFieldNumber;
const int CMsgClientLogon::kDeprecated10FieldNumber;
const int CMsgClientLogon::kObfuscatedPrivateIpFieldNumber;
const int CMsgClientLogon::kDeprecatedPublicIpFieldNumber;
const int CMsgClientLogon::kQosLevelFieldNumber;
const int CMsgClientLogon::kClientSuppliedSteamIdFieldNumber;
const int CMsgClientLogon::kPublicIpFieldNumber;
const int CMsgClientLogon::kMachineIdFieldNumber;
const int CMsgClientLogon::kLauncherTypeFieldNumber;
const int CMsgClientLogon::kUiModeFieldNumber;
const int CMsgClientLogon::kChatModeFieldNumber;
const int CMsgClientLogon::kSteam2AuthTicketFieldNumber;
const int CMsgClientLogon::kEmailAddressFieldNumber;
const int CMsgClientLogon::kRtime32AccountCreationFieldNumber;
const int CMsgClientLogon::kAccountNameFieldNumber;
const int CMsgClientLogon::kPasswordFieldNumber;
const int CMsgClientLogon::kGameServerTokenFieldNumber;
const int CMsgClientLogon::kLoginKeyFieldNumber;
const int CMsgClientLogon::kWasConvertedDeprecatedMsgFieldNumber;
const int CMsgClientLogon::kAnonUserTargetAccountNameFieldNumber;
const int CMsgClientLogon::kResolvedUserSteamIdFieldNumber;
const int CMsgClientLogon::kEresultSentryfileFieldNumber;
const int CMsgClientLogon::kShaSentryfileFieldNumber;
const int CMsgClientLogon::kAuthCodeFieldNumber;
const int CMsgClientLogon::kOtpTypeFieldNumber;
const int CMsgClientLogon::kOtpValueFieldNumber;
const int CMsgClientLogon::kOtpIdentifierFieldNumber;
const int CMsgClientLogon::kSteam2TicketRequestFieldNumber;
const int CMsgClientLogon::kSonyPsnTicketFieldNumber;
const int CMsgClientLogon::kSonyPsnServiceIdFieldNumber;
const int CMsgClientLogon::kCreateNewPsnLinkedAccountIfNeededFieldNumber;
const int CMsgClientLogon::kSonyPsnNameFieldNumber;
const int CMsgClientLogon::kGameServerAppIdFieldNumber;
const int CMsgClientLogon::kSteamguardDontRememberComputerFieldNumber;
const int CMsgClientLogon::kMachineNameFieldNumber;
const int CMsgClientLogon::kMachineNameUserchosenFieldNumber;
const int CMsgClientLogon::kCountryOverrideFieldNumber;
const int CMsgClientLogon::kIsSteamBoxFieldNumber;
const int CMsgClientLogon::kClientInstanceIdFieldNumber;
const int CMsgClientLogon::kTwoFactorCodeFieldNumber;
const int CMsgClientLogon::kSupportsRateLimitResponseFieldNumber;
const int CMsgClientLogon::kWebLogonNonceFieldNumber;
const int CMsgClientLogon::kPriorityReasonFieldNumber;
const int CMsgClientLogon::kEmbeddedClientSecretFieldNumber;
const int CMsgClientLogon::kDisablePartnerAutograntsFieldNumber;
const int CMsgClientLogon::kIsSteamDeckFieldNumber;
const int CMsgClientLogon::kAccessTokenFieldNumber;
#endif  // !_MSC_VER

CMsgClientLogon::CMsgClientLogon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientLogon::InitAsDefaultInstance() {
  obfuscated_private_ip_ = const_cast< ::CMsgIPAddress*>(&::CMsgIPAddress::default_instance());
  public_ip_ = const_cast< ::CMsgIPAddress*>(&::CMsgIPAddress::default_instance());
  embedded_client_secret_ = const_cast< ::CMsgClientSecret*>(&::CMsgClientSecret::default_instance());
}

CMsgClientLogon::CMsgClientLogon(const CMsgClientLogon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientLogon::SharedCtor() {
  _cached_size_ = 0;
  protocol_version_ = 0u;
  deprecated_obfustucated_private_ip_ = 0u;
  cell_id_ = 0u;
  last_session_id_ = 0u;
  client_package_version_ = 0u;
  client_language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  client_os_type_ = 0u;
  should_remember_password_ = false;
  wine_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deprecated_10_ = 0u;
  obfuscated_private_ip_ = NULL;
  deprecated_public_ip_ = 0u;
  qos_level_ = 0u;
  client_supplied_steam_id_ = GOOGLE_ULONGLONG(0);
  public_ip_ = NULL;
  machine_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  launcher_type_ = 0u;
  ui_mode_ = 0u;
  chat_mode_ = 0u;
  steam2_auth_ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  email_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rtime32_account_creation_ = 0u;
  account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  game_server_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  login_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  was_converted_deprecated_msg_ = false;
  anon_user_target_account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resolved_user_steam_id_ = GOOGLE_ULONGLONG(0);
  eresult_sentryfile_ = 0;
  sha_sentryfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  auth_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  otp_type_ = 0;
  otp_value_ = 0u;
  otp_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  steam2_ticket_request_ = false;
  sony_psn_ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sony_psn_service_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  create_new_psn_linked_account_if_needed_ = false;
  sony_psn_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  game_server_app_id_ = 0;
  steamguard_dont_remember_computer_ = false;
  machine_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  machine_name_userchosen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  country_override_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_steam_box_ = false;
  client_instance_id_ = GOOGLE_ULONGLONG(0);
  two_factor_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  supports_rate_limit_response_ = false;
  web_logon_nonce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  priority_reason_ = 0;
  embedded_client_secret_ = NULL;
  disable_partner_autogrants_ = false;
  is_steam_deck_ = false;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientLogon::~CMsgClientLogon() {
  SharedDtor();
}

void CMsgClientLogon::SharedDtor() {
  if (client_language_ != &::google::protobuf::internal::kEmptyString) {
    delete client_language_;
  }
  if (wine_version_ != &::google::protobuf::internal::kEmptyString) {
    delete wine_version_;
  }
  if (machine_id_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_id_;
  }
  if (steam2_auth_ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete steam2_auth_ticket_;
  }
  if (email_address_ != &::google::protobuf::internal::kEmptyString) {
    delete email_address_;
  }
  if (account_name_ != &::google::protobuf::internal::kEmptyString) {
    delete account_name_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (game_server_token_ != &::google::protobuf::internal::kEmptyString) {
    delete game_server_token_;
  }
  if (login_key_ != &::google::protobuf::internal::kEmptyString) {
    delete login_key_;
  }
  if (anon_user_target_account_name_ != &::google::protobuf::internal::kEmptyString) {
    delete anon_user_target_account_name_;
  }
  if (sha_sentryfile_ != &::google::protobuf::internal::kEmptyString) {
    delete sha_sentryfile_;
  }
  if (auth_code_ != &::google::protobuf::internal::kEmptyString) {
    delete auth_code_;
  }
  if (otp_identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete otp_identifier_;
  }
  if (sony_psn_ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete sony_psn_ticket_;
  }
  if (sony_psn_service_id_ != &::google::protobuf::internal::kEmptyString) {
    delete sony_psn_service_id_;
  }
  if (sony_psn_name_ != &::google::protobuf::internal::kEmptyString) {
    delete sony_psn_name_;
  }
  if (machine_name_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_name_;
  }
  if (machine_name_userchosen_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_name_userchosen_;
  }
  if (country_override_ != &::google::protobuf::internal::kEmptyString) {
    delete country_override_;
  }
  if (two_factor_code_ != &::google::protobuf::internal::kEmptyString) {
    delete two_factor_code_;
  }
  if (web_logon_nonce_ != &::google::protobuf::internal::kEmptyString) {
    delete web_logon_nonce_;
  }
  if (access_token_ != &::google::protobuf::internal::kEmptyString) {
    delete access_token_;
  }
  if (this != default_instance_) {
    delete obfuscated_private_ip_;
    delete public_ip_;
    delete embedded_client_secret_;
  }
}

void CMsgClientLogon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientLogon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientLogon_descriptor_;
}

const CMsgClientLogon& CMsgClientLogon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5flogin_2eproto();
  return *default_instance_;
}

CMsgClientLogon* CMsgClientLogon::default_instance_ = NULL;

CMsgClientLogon* CMsgClientLogon::New() const {
  return new CMsgClientLogon;
}

void CMsgClientLogon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protocol_version_ = 0u;
    deprecated_obfustucated_private_ip_ = 0u;
    cell_id_ = 0u;
    last_session_id_ = 0u;
    client_package_version_ = 0u;
    if (has_client_language()) {
      if (client_language_ != &::google::protobuf::internal::kEmptyString) {
        client_language_->clear();
      }
    }
    client_os_type_ = 0u;
    should_remember_password_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_wine_version()) {
      if (wine_version_ != &::google::protobuf::internal::kEmptyString) {
        wine_version_->clear();
      }
    }
    deprecated_10_ = 0u;
    if (has_obfuscated_private_ip()) {
      if (obfuscated_private_ip_ != NULL) obfuscated_private_ip_->::CMsgIPAddress::Clear();
    }
    deprecated_public_ip_ = 0u;
    qos_level_ = 0u;
    client_supplied_steam_id_ = GOOGLE_ULONGLONG(0);
    if (has_public_ip()) {
      if (public_ip_ != NULL) public_ip_->::CMsgIPAddress::Clear();
    }
    if (has_machine_id()) {
      if (machine_id_ != &::google::protobuf::internal::kEmptyString) {
        machine_id_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    launcher_type_ = 0u;
    ui_mode_ = 0u;
    chat_mode_ = 0u;
    if (has_steam2_auth_ticket()) {
      if (steam2_auth_ticket_ != &::google::protobuf::internal::kEmptyString) {
        steam2_auth_ticket_->clear();
      }
    }
    if (has_email_address()) {
      if (email_address_ != &::google::protobuf::internal::kEmptyString) {
        email_address_->clear();
      }
    }
    rtime32_account_creation_ = 0u;
    if (has_account_name()) {
      if (account_name_ != &::google::protobuf::internal::kEmptyString) {
        account_name_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_game_server_token()) {
      if (game_server_token_ != &::google::protobuf::internal::kEmptyString) {
        game_server_token_->clear();
      }
    }
    if (has_login_key()) {
      if (login_key_ != &::google::protobuf::internal::kEmptyString) {
        login_key_->clear();
      }
    }
    was_converted_deprecated_msg_ = false;
    if (has_anon_user_target_account_name()) {
      if (anon_user_target_account_name_ != &::google::protobuf::internal::kEmptyString) {
        anon_user_target_account_name_->clear();
      }
    }
    resolved_user_steam_id_ = GOOGLE_ULONGLONG(0);
    eresult_sentryfile_ = 0;
    if (has_sha_sentryfile()) {
      if (sha_sentryfile_ != &::google::protobuf::internal::kEmptyString) {
        sha_sentryfile_->clear();
      }
    }
    if (has_auth_code()) {
      if (auth_code_ != &::google::protobuf::internal::kEmptyString) {
        auth_code_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    otp_type_ = 0;
    otp_value_ = 0u;
    if (has_otp_identifier()) {
      if (otp_identifier_ != &::google::protobuf::internal::kEmptyString) {
        otp_identifier_->clear();
      }
    }
    steam2_ticket_request_ = false;
    if (has_sony_psn_ticket()) {
      if (sony_psn_ticket_ != &::google::protobuf::internal::kEmptyString) {
        sony_psn_ticket_->clear();
      }
    }
    if (has_sony_psn_service_id()) {
      if (sony_psn_service_id_ != &::google::protobuf::internal::kEmptyString) {
        sony_psn_service_id_->clear();
      }
    }
    create_new_psn_linked_account_if_needed_ = false;
    if (has_sony_psn_name()) {
      if (sony_psn_name_ != &::google::protobuf::internal::kEmptyString) {
        sony_psn_name_->clear();
      }
    }
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    game_server_app_id_ = 0;
    steamguard_dont_remember_computer_ = false;
    if (has_machine_name()) {
      if (machine_name_ != &::google::protobuf::internal::kEmptyString) {
        machine_name_->clear();
      }
    }
    if (has_machine_name_userchosen()) {
      if (machine_name_userchosen_ != &::google::protobuf::internal::kEmptyString) {
        machine_name_userchosen_->clear();
      }
    }
    if (has_country_override()) {
      if (country_override_ != &::google::protobuf::internal::kEmptyString) {
        country_override_->clear();
      }
    }
    is_steam_box_ = false;
    client_instance_id_ = GOOGLE_ULONGLONG(0);
    if (has_two_factor_code()) {
      if (two_factor_code_ != &::google::protobuf::internal::kEmptyString) {
        two_factor_code_->clear();
      }
    }
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    supports_rate_limit_response_ = false;
    if (has_web_logon_nonce()) {
      if (web_logon_nonce_ != &::google::protobuf::internal::kEmptyString) {
        web_logon_nonce_->clear();
      }
    }
    priority_reason_ = 0;
    if (has_embedded_client_secret()) {
      if (embedded_client_secret_ != NULL) embedded_client_secret_->::CMsgClientSecret::Clear();
    }
    disable_partner_autogrants_ = false;
    is_steam_deck_ = false;
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::kEmptyString) {
        access_token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientLogon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 protocol_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_version_)));
          set_has_protocol_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_deprecated_obfustucated_private_ip;
        break;
      }

      // optional uint32 deprecated_obfustucated_private_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deprecated_obfustucated_private_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deprecated_obfustucated_private_ip_)));
          set_has_deprecated_obfustucated_private_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cell_id;
        break;
      }

      // optional uint32 cell_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_session_id;
        break;
      }

      // optional uint32 last_session_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_session_id_)));
          set_has_last_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_client_package_version;
        break;
      }

      // optional uint32 client_package_version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_package_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_package_version_)));
          set_has_client_package_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_client_language;
        break;
      }

      // optional string client_language = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->client_language().data(), this->client_language().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_client_os_type;
        break;
      }

      // optional uint32 client_os_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_os_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_os_type_)));
          set_has_client_os_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_should_remember_password;
        break;
      }

      // optional bool should_remember_password = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_should_remember_password:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &should_remember_password_)));
          set_has_should_remember_password();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_wine_version;
        break;
      }

      // optional string wine_version = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wine_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wine_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wine_version().data(), this->wine_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_deprecated_10;
        break;
      }

      // optional uint32 deprecated_10 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deprecated_10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deprecated_10_)));
          set_has_deprecated_10();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_obfuscated_private_ip;
        break;
      }

      // optional .CMsgIPAddress obfuscated_private_ip = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_obfuscated_private_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_obfuscated_private_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_deprecated_public_ip;
        break;
      }

      // optional uint32 deprecated_public_ip = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deprecated_public_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deprecated_public_ip_)));
          set_has_deprecated_public_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_qos_level;
        break;
      }

      // optional uint32 qos_level = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qos_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qos_level_)));
          set_has_qos_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_client_supplied_steam_id;
        break;
      }

      // optional fixed64 client_supplied_steam_id = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_client_supplied_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &client_supplied_steam_id_)));
          set_has_client_supplied_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_public_ip;
        break;
      }

      // optional .CMsgIPAddress public_ip = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_public_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_public_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_machine_id;
        break;
      }

      // optional bytes machine_id = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_machine_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_launcher_type;
        break;
      }

      // optional uint32 launcher_type = 31 [default = 0];
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_launcher_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &launcher_type_)));
          set_has_launcher_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_ui_mode;
        break;
      }

      // optional uint32 ui_mode = 32 [default = 0];
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ui_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ui_mode_)));
          set_has_ui_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_chat_mode;
        break;
      }

      // optional uint32 chat_mode = 33 [default = 0];
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chat_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chat_mode_)));
          set_has_chat_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_steam2_auth_ticket;
        break;
      }

      // optional bytes steam2_auth_ticket = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_steam2_auth_ticket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_steam2_auth_ticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_email_address;
        break;
      }

      // optional string email_address = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email_address().data(), this->email_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(349)) goto parse_rtime32_account_creation;
        break;
      }

      // optional fixed32 rtime32_account_creation = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rtime32_account_creation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &rtime32_account_creation_)));
          set_has_rtime32_account_creation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_account_name;
        break;
      }

      // optional string account_name = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account_name().data(), this->account_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(410)) goto parse_password;
        break;
      }

      // optional string password = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(418)) goto parse_game_server_token;
        break;
      }

      // optional string game_server_token = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_server_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_server_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->game_server_token().data(), this->game_server_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_login_key;
        break;
      }

      // optional string login_key = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->login_key().data(), this->login_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_was_converted_deprecated_msg;
        break;
      }

      // optional bool was_converted_deprecated_msg = 70 [default = false];
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_was_converted_deprecated_msg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &was_converted_deprecated_msg_)));
          set_has_was_converted_deprecated_msg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(642)) goto parse_anon_user_target_account_name;
        break;
      }

      // optional string anon_user_target_account_name = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_anon_user_target_account_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_anon_user_target_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->anon_user_target_account_name().data(), this->anon_user_target_account_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(649)) goto parse_resolved_user_steam_id;
        break;
      }

      // optional fixed64 resolved_user_steam_id = 81;
      case 81: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_resolved_user_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &resolved_user_steam_id_)));
          set_has_resolved_user_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(656)) goto parse_eresult_sentryfile;
        break;
      }

      // optional int32 eresult_sentryfile = 82;
      case 82: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eresult_sentryfile:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_sentryfile_)));
          set_has_eresult_sentryfile();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(666)) goto parse_sha_sentryfile;
        break;
      }

      // optional bytes sha_sentryfile = 83;
      case 83: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sha_sentryfile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_sentryfile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(674)) goto parse_auth_code;
        break;
      }

      // optional string auth_code = 84;
      case 84: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_auth_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->auth_code().data(), this->auth_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(680)) goto parse_otp_type;
        break;
      }

      // optional int32 otp_type = 85;
      case 85: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_otp_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &otp_type_)));
          set_has_otp_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(688)) goto parse_otp_value;
        break;
      }

      // optional uint32 otp_value = 86;
      case 86: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_otp_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &otp_value_)));
          set_has_otp_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(698)) goto parse_otp_identifier;
        break;
      }

      // optional string otp_identifier = 87;
      case 87: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_otp_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_otp_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->otp_identifier().data(), this->otp_identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(704)) goto parse_steam2_ticket_request;
        break;
      }

      // optional bool steam2_ticket_request = 88;
      case 88: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_steam2_ticket_request:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &steam2_ticket_request_)));
          set_has_steam2_ticket_request();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(722)) goto parse_sony_psn_ticket;
        break;
      }

      // optional bytes sony_psn_ticket = 90;
      case 90: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sony_psn_ticket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sony_psn_ticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(730)) goto parse_sony_psn_service_id;
        break;
      }

      // optional string sony_psn_service_id = 91;
      case 91: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sony_psn_service_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sony_psn_service_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sony_psn_service_id().data(), this->sony_psn_service_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(736)) goto parse_create_new_psn_linked_account_if_needed;
        break;
      }

      // optional bool create_new_psn_linked_account_if_needed = 92 [default = false];
      case 92: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_new_psn_linked_account_if_needed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &create_new_psn_linked_account_if_needed_)));
          set_has_create_new_psn_linked_account_if_needed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(746)) goto parse_sony_psn_name;
        break;
      }

      // optional string sony_psn_name = 93;
      case 93: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sony_psn_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sony_psn_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sony_psn_name().data(), this->sony_psn_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(752)) goto parse_game_server_app_id;
        break;
      }

      // optional int32 game_server_app_id = 94;
      case 94: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_server_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_server_app_id_)));
          set_has_game_server_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(760)) goto parse_steamguard_dont_remember_computer;
        break;
      }

      // optional bool steamguard_dont_remember_computer = 95;
      case 95: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_steamguard_dont_remember_computer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &steamguard_dont_remember_computer_)));
          set_has_steamguard_dont_remember_computer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(770)) goto parse_machine_name;
        break;
      }

      // optional string machine_name = 96;
      case 96: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machine_name().data(), this->machine_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(778)) goto parse_machine_name_userchosen;
        break;
      }

      // optional string machine_name_userchosen = 97;
      case 97: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_name_userchosen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_name_userchosen()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machine_name_userchosen().data(), this->machine_name_userchosen().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(786)) goto parse_country_override;
        break;
      }

      // optional string country_override = 98;
      case 98: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_country_override:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_override()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->country_override().data(), this->country_override().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(792)) goto parse_is_steam_box;
        break;
      }

      // optional bool is_steam_box = 99;
      case 99: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_steam_box:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_steam_box_)));
          set_has_is_steam_box();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(800)) goto parse_client_instance_id;
        break;
      }

      // optional uint64 client_instance_id = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &client_instance_id_)));
          set_has_client_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(810)) goto parse_two_factor_code;
        break;
      }

      // optional string two_factor_code = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_two_factor_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_two_factor_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->two_factor_code().data(), this->two_factor_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(816)) goto parse_supports_rate_limit_response;
        break;
      }

      // optional bool supports_rate_limit_response = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_supports_rate_limit_response:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supports_rate_limit_response_)));
          set_has_supports_rate_limit_response();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(826)) goto parse_web_logon_nonce;
        break;
      }

      // optional string web_logon_nonce = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_web_logon_nonce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_web_logon_nonce()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->web_logon_nonce().data(), this->web_logon_nonce().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(832)) goto parse_priority_reason;
        break;
      }

      // optional int32 priority_reason = 104;
      case 104: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_reason_)));
          set_has_priority_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(842)) goto parse_embedded_client_secret;
        break;
      }

      // optional .CMsgClientSecret embedded_client_secret = 105;
      case 105: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_embedded_client_secret:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_embedded_client_secret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(848)) goto parse_disable_partner_autogrants;
        break;
      }

      // optional bool disable_partner_autogrants = 106;
      case 106: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disable_partner_autogrants:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_partner_autogrants_)));
          set_has_disable_partner_autogrants();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(856)) goto parse_is_steam_deck;
        break;
      }

      // optional bool is_steam_deck = 107;
      case 107: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_steam_deck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_steam_deck_)));
          set_has_is_steam_deck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(866)) goto parse_access_token;
        break;
      }

      // optional string access_token = 108;
      case 108: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_access_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientLogon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 protocol_version = 1;
  if (has_protocol_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->protocol_version(), output);
  }

  // optional uint32 deprecated_obfustucated_private_ip = 2;
  if (has_deprecated_obfustucated_private_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->deprecated_obfustucated_private_ip(), output);
  }

  // optional uint32 cell_id = 3;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cell_id(), output);
  }

  // optional uint32 last_session_id = 4;
  if (has_last_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_session_id(), output);
  }

  // optional uint32 client_package_version = 5;
  if (has_client_package_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->client_package_version(), output);
  }

  // optional string client_language = 6;
  if (has_client_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_language().data(), this->client_language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->client_language(), output);
  }

  // optional uint32 client_os_type = 7;
  if (has_client_os_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->client_os_type(), output);
  }

  // optional bool should_remember_password = 8 [default = false];
  if (has_should_remember_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->should_remember_password(), output);
  }

  // optional string wine_version = 9;
  if (has_wine_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wine_version().data(), this->wine_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->wine_version(), output);
  }

  // optional uint32 deprecated_10 = 10;
  if (has_deprecated_10()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->deprecated_10(), output);
  }

  // optional .CMsgIPAddress obfuscated_private_ip = 11;
  if (has_obfuscated_private_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->obfuscated_private_ip(), output);
  }

  // optional uint32 deprecated_public_ip = 20;
  if (has_deprecated_public_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->deprecated_public_ip(), output);
  }

  // optional uint32 qos_level = 21;
  if (has_qos_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->qos_level(), output);
  }

  // optional fixed64 client_supplied_steam_id = 22;
  if (has_client_supplied_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(22, this->client_supplied_steam_id(), output);
  }

  // optional .CMsgIPAddress public_ip = 23;
  if (has_public_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->public_ip(), output);
  }

  // optional bytes machine_id = 30;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      30, this->machine_id(), output);
  }

  // optional uint32 launcher_type = 31 [default = 0];
  if (has_launcher_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->launcher_type(), output);
  }

  // optional uint32 ui_mode = 32 [default = 0];
  if (has_ui_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->ui_mode(), output);
  }

  // optional uint32 chat_mode = 33 [default = 0];
  if (has_chat_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->chat_mode(), output);
  }

  // optional bytes steam2_auth_ticket = 41;
  if (has_steam2_auth_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      41, this->steam2_auth_ticket(), output);
  }

  // optional string email_address = 42;
  if (has_email_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email_address().data(), this->email_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      42, this->email_address(), output);
  }

  // optional fixed32 rtime32_account_creation = 43;
  if (has_rtime32_account_creation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(43, this->rtime32_account_creation(), output);
  }

  // optional string account_name = 50;
  if (has_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      50, this->account_name(), output);
  }

  // optional string password = 51;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      51, this->password(), output);
  }

  // optional string game_server_token = 52;
  if (has_game_server_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_server_token().data(), this->game_server_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      52, this->game_server_token(), output);
  }

  // optional string login_key = 60;
  if (has_login_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login_key().data(), this->login_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      60, this->login_key(), output);
  }

  // optional bool was_converted_deprecated_msg = 70 [default = false];
  if (has_was_converted_deprecated_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(70, this->was_converted_deprecated_msg(), output);
  }

  // optional string anon_user_target_account_name = 80;
  if (has_anon_user_target_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->anon_user_target_account_name().data(), this->anon_user_target_account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      80, this->anon_user_target_account_name(), output);
  }

  // optional fixed64 resolved_user_steam_id = 81;
  if (has_resolved_user_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(81, this->resolved_user_steam_id(), output);
  }

  // optional int32 eresult_sentryfile = 82;
  if (has_eresult_sentryfile()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(82, this->eresult_sentryfile(), output);
  }

  // optional bytes sha_sentryfile = 83;
  if (has_sha_sentryfile()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      83, this->sha_sentryfile(), output);
  }

  // optional string auth_code = 84;
  if (has_auth_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auth_code().data(), this->auth_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      84, this->auth_code(), output);
  }

  // optional int32 otp_type = 85;
  if (has_otp_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(85, this->otp_type(), output);
  }

  // optional uint32 otp_value = 86;
  if (has_otp_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(86, this->otp_value(), output);
  }

  // optional string otp_identifier = 87;
  if (has_otp_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->otp_identifier().data(), this->otp_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      87, this->otp_identifier(), output);
  }

  // optional bool steam2_ticket_request = 88;
  if (has_steam2_ticket_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(88, this->steam2_ticket_request(), output);
  }

  // optional bytes sony_psn_ticket = 90;
  if (has_sony_psn_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      90, this->sony_psn_ticket(), output);
  }

  // optional string sony_psn_service_id = 91;
  if (has_sony_psn_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sony_psn_service_id().data(), this->sony_psn_service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      91, this->sony_psn_service_id(), output);
  }

  // optional bool create_new_psn_linked_account_if_needed = 92 [default = false];
  if (has_create_new_psn_linked_account_if_needed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(92, this->create_new_psn_linked_account_if_needed(), output);
  }

  // optional string sony_psn_name = 93;
  if (has_sony_psn_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sony_psn_name().data(), this->sony_psn_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      93, this->sony_psn_name(), output);
  }

  // optional int32 game_server_app_id = 94;
  if (has_game_server_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(94, this->game_server_app_id(), output);
  }

  // optional bool steamguard_dont_remember_computer = 95;
  if (has_steamguard_dont_remember_computer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(95, this->steamguard_dont_remember_computer(), output);
  }

  // optional string machine_name = 96;
  if (has_machine_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_name().data(), this->machine_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      96, this->machine_name(), output);
  }

  // optional string machine_name_userchosen = 97;
  if (has_machine_name_userchosen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_name_userchosen().data(), this->machine_name_userchosen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      97, this->machine_name_userchosen(), output);
  }

  // optional string country_override = 98;
  if (has_country_override()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country_override().data(), this->country_override().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      98, this->country_override(), output);
  }

  // optional bool is_steam_box = 99;
  if (has_is_steam_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(99, this->is_steam_box(), output);
  }

  // optional uint64 client_instance_id = 100;
  if (has_client_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(100, this->client_instance_id(), output);
  }

  // optional string two_factor_code = 101;
  if (has_two_factor_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->two_factor_code().data(), this->two_factor_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      101, this->two_factor_code(), output);
  }

  // optional bool supports_rate_limit_response = 102;
  if (has_supports_rate_limit_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(102, this->supports_rate_limit_response(), output);
  }

  // optional string web_logon_nonce = 103;
  if (has_web_logon_nonce()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->web_logon_nonce().data(), this->web_logon_nonce().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      103, this->web_logon_nonce(), output);
  }

  // optional int32 priority_reason = 104;
  if (has_priority_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(104, this->priority_reason(), output);
  }

  // optional .CMsgClientSecret embedded_client_secret = 105;
  if (has_embedded_client_secret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      105, this->embedded_client_secret(), output);
  }

  // optional bool disable_partner_autogrants = 106;
  if (has_disable_partner_autogrants()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(106, this->disable_partner_autogrants(), output);
  }

  // optional bool is_steam_deck = 107;
  if (has_is_steam_deck()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(107, this->is_steam_deck(), output);
  }

  // optional string access_token = 108;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      108, this->access_token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientLogon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 protocol_version = 1;
  if (has_protocol_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->protocol_version(), target);
  }

  // optional uint32 deprecated_obfustucated_private_ip = 2;
  if (has_deprecated_obfustucated_private_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->deprecated_obfustucated_private_ip(), target);
  }

  // optional uint32 cell_id = 3;
  if (has_cell_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cell_id(), target);
  }

  // optional uint32 last_session_id = 4;
  if (has_last_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_session_id(), target);
  }

  // optional uint32 client_package_version = 5;
  if (has_client_package_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->client_package_version(), target);
  }

  // optional string client_language = 6;
  if (has_client_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_language().data(), this->client_language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->client_language(), target);
  }

  // optional uint32 client_os_type = 7;
  if (has_client_os_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->client_os_type(), target);
  }

  // optional bool should_remember_password = 8 [default = false];
  if (has_should_remember_password()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->should_remember_password(), target);
  }

  // optional string wine_version = 9;
  if (has_wine_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wine_version().data(), this->wine_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->wine_version(), target);
  }

  // optional uint32 deprecated_10 = 10;
  if (has_deprecated_10()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->deprecated_10(), target);
  }

  // optional .CMsgIPAddress obfuscated_private_ip = 11;
  if (has_obfuscated_private_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->obfuscated_private_ip(), target);
  }

  // optional uint32 deprecated_public_ip = 20;
  if (has_deprecated_public_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->deprecated_public_ip(), target);
  }

  // optional uint32 qos_level = 21;
  if (has_qos_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->qos_level(), target);
  }

  // optional fixed64 client_supplied_steam_id = 22;
  if (has_client_supplied_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(22, this->client_supplied_steam_id(), target);
  }

  // optional .CMsgIPAddress public_ip = 23;
  if (has_public_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->public_ip(), target);
  }

  // optional bytes machine_id = 30;
  if (has_machine_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        30, this->machine_id(), target);
  }

  // optional uint32 launcher_type = 31 [default = 0];
  if (has_launcher_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->launcher_type(), target);
  }

  // optional uint32 ui_mode = 32 [default = 0];
  if (has_ui_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->ui_mode(), target);
  }

  // optional uint32 chat_mode = 33 [default = 0];
  if (has_chat_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->chat_mode(), target);
  }

  // optional bytes steam2_auth_ticket = 41;
  if (has_steam2_auth_ticket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        41, this->steam2_auth_ticket(), target);
  }

  // optional string email_address = 42;
  if (has_email_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email_address().data(), this->email_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        42, this->email_address(), target);
  }

  // optional fixed32 rtime32_account_creation = 43;
  if (has_rtime32_account_creation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(43, this->rtime32_account_creation(), target);
  }

  // optional string account_name = 50;
  if (has_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        50, this->account_name(), target);
  }

  // optional string password = 51;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        51, this->password(), target);
  }

  // optional string game_server_token = 52;
  if (has_game_server_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_server_token().data(), this->game_server_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        52, this->game_server_token(), target);
  }

  // optional string login_key = 60;
  if (has_login_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login_key().data(), this->login_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        60, this->login_key(), target);
  }

  // optional bool was_converted_deprecated_msg = 70 [default = false];
  if (has_was_converted_deprecated_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(70, this->was_converted_deprecated_msg(), target);
  }

  // optional string anon_user_target_account_name = 80;
  if (has_anon_user_target_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->anon_user_target_account_name().data(), this->anon_user_target_account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        80, this->anon_user_target_account_name(), target);
  }

  // optional fixed64 resolved_user_steam_id = 81;
  if (has_resolved_user_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(81, this->resolved_user_steam_id(), target);
  }

  // optional int32 eresult_sentryfile = 82;
  if (has_eresult_sentryfile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(82, this->eresult_sentryfile(), target);
  }

  // optional bytes sha_sentryfile = 83;
  if (has_sha_sentryfile()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        83, this->sha_sentryfile(), target);
  }

  // optional string auth_code = 84;
  if (has_auth_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auth_code().data(), this->auth_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        84, this->auth_code(), target);
  }

  // optional int32 otp_type = 85;
  if (has_otp_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(85, this->otp_type(), target);
  }

  // optional uint32 otp_value = 86;
  if (has_otp_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(86, this->otp_value(), target);
  }

  // optional string otp_identifier = 87;
  if (has_otp_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->otp_identifier().data(), this->otp_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        87, this->otp_identifier(), target);
  }

  // optional bool steam2_ticket_request = 88;
  if (has_steam2_ticket_request()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(88, this->steam2_ticket_request(), target);
  }

  // optional bytes sony_psn_ticket = 90;
  if (has_sony_psn_ticket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        90, this->sony_psn_ticket(), target);
  }

  // optional string sony_psn_service_id = 91;
  if (has_sony_psn_service_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sony_psn_service_id().data(), this->sony_psn_service_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        91, this->sony_psn_service_id(), target);
  }

  // optional bool create_new_psn_linked_account_if_needed = 92 [default = false];
  if (has_create_new_psn_linked_account_if_needed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(92, this->create_new_psn_linked_account_if_needed(), target);
  }

  // optional string sony_psn_name = 93;
  if (has_sony_psn_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sony_psn_name().data(), this->sony_psn_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        93, this->sony_psn_name(), target);
  }

  // optional int32 game_server_app_id = 94;
  if (has_game_server_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(94, this->game_server_app_id(), target);
  }

  // optional bool steamguard_dont_remember_computer = 95;
  if (has_steamguard_dont_remember_computer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(95, this->steamguard_dont_remember_computer(), target);
  }

  // optional string machine_name = 96;
  if (has_machine_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_name().data(), this->machine_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        96, this->machine_name(), target);
  }

  // optional string machine_name_userchosen = 97;
  if (has_machine_name_userchosen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_name_userchosen().data(), this->machine_name_userchosen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        97, this->machine_name_userchosen(), target);
  }

  // optional string country_override = 98;
  if (has_country_override()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country_override().data(), this->country_override().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        98, this->country_override(), target);
  }

  // optional bool is_steam_box = 99;
  if (has_is_steam_box()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(99, this->is_steam_box(), target);
  }

  // optional uint64 client_instance_id = 100;
  if (has_client_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(100, this->client_instance_id(), target);
  }

  // optional string two_factor_code = 101;
  if (has_two_factor_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->two_factor_code().data(), this->two_factor_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        101, this->two_factor_code(), target);
  }

  // optional bool supports_rate_limit_response = 102;
  if (has_supports_rate_limit_response()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(102, this->supports_rate_limit_response(), target);
  }

  // optional string web_logon_nonce = 103;
  if (has_web_logon_nonce()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->web_logon_nonce().data(), this->web_logon_nonce().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        103, this->web_logon_nonce(), target);
  }

  // optional int32 priority_reason = 104;
  if (has_priority_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(104, this->priority_reason(), target);
  }

  // optional .CMsgClientSecret embedded_client_secret = 105;
  if (has_embedded_client_secret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        105, this->embedded_client_secret(), target);
  }

  // optional bool disable_partner_autogrants = 106;
  if (has_disable_partner_autogrants()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(106, this->disable_partner_autogrants(), target);
  }

  // optional bool is_steam_deck = 107;
  if (has_is_steam_deck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(107, this->is_steam_deck(), target);
  }

  // optional string access_token = 108;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        108, this->access_token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientLogon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 protocol_version = 1;
    if (has_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_version());
    }

    // optional uint32 deprecated_obfustucated_private_ip = 2;
    if (has_deprecated_obfustucated_private_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deprecated_obfustucated_private_ip());
    }

    // optional uint32 cell_id = 3;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

    // optional uint32 last_session_id = 4;
    if (has_last_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_session_id());
    }

    // optional uint32 client_package_version = 5;
    if (has_client_package_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_package_version());
    }

    // optional string client_language = 6;
    if (has_client_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_language());
    }

    // optional uint32 client_os_type = 7;
    if (has_client_os_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_os_type());
    }

    // optional bool should_remember_password = 8 [default = false];
    if (has_should_remember_password()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string wine_version = 9;
    if (has_wine_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wine_version());
    }

    // optional uint32 deprecated_10 = 10;
    if (has_deprecated_10()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deprecated_10());
    }

    // optional .CMsgIPAddress obfuscated_private_ip = 11;
    if (has_obfuscated_private_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obfuscated_private_ip());
    }

    // optional uint32 deprecated_public_ip = 20;
    if (has_deprecated_public_ip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deprecated_public_ip());
    }

    // optional uint32 qos_level = 21;
    if (has_qos_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qos_level());
    }

    // optional fixed64 client_supplied_steam_id = 22;
    if (has_client_supplied_steam_id()) {
      total_size += 2 + 8;
    }

    // optional .CMsgIPAddress public_ip = 23;
    if (has_public_ip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->public_ip());
    }

    // optional bytes machine_id = 30;
    if (has_machine_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->machine_id());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 launcher_type = 31 [default = 0];
    if (has_launcher_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->launcher_type());
    }

    // optional uint32 ui_mode = 32 [default = 0];
    if (has_ui_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ui_mode());
    }

    // optional uint32 chat_mode = 33 [default = 0];
    if (has_chat_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chat_mode());
    }

    // optional bytes steam2_auth_ticket = 41;
    if (has_steam2_auth_ticket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->steam2_auth_ticket());
    }

    // optional string email_address = 42;
    if (has_email_address()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email_address());
    }

    // optional fixed32 rtime32_account_creation = 43;
    if (has_rtime32_account_creation()) {
      total_size += 2 + 4;
    }

    // optional string account_name = 50;
    if (has_account_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name());
    }

    // optional string password = 51;
    if (has_password()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string game_server_token = 52;
    if (has_game_server_token()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_server_token());
    }

    // optional string login_key = 60;
    if (has_login_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login_key());
    }

    // optional bool was_converted_deprecated_msg = 70 [default = false];
    if (has_was_converted_deprecated_msg()) {
      total_size += 2 + 1;
    }

    // optional string anon_user_target_account_name = 80;
    if (has_anon_user_target_account_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->anon_user_target_account_name());
    }

    // optional fixed64 resolved_user_steam_id = 81;
    if (has_resolved_user_steam_id()) {
      total_size += 2 + 8;
    }

    // optional int32 eresult_sentryfile = 82;
    if (has_eresult_sentryfile()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult_sentryfile());
    }

    // optional bytes sha_sentryfile = 83;
    if (has_sha_sentryfile()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_sentryfile());
    }

    // optional string auth_code = 84;
    if (has_auth_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->auth_code());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 otp_type = 85;
    if (has_otp_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->otp_type());
    }

    // optional uint32 otp_value = 86;
    if (has_otp_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->otp_value());
    }

    // optional string otp_identifier = 87;
    if (has_otp_identifier()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->otp_identifier());
    }

    // optional bool steam2_ticket_request = 88;
    if (has_steam2_ticket_request()) {
      total_size += 2 + 1;
    }

    // optional bytes sony_psn_ticket = 90;
    if (has_sony_psn_ticket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sony_psn_ticket());
    }

    // optional string sony_psn_service_id = 91;
    if (has_sony_psn_service_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sony_psn_service_id());
    }

    // optional bool create_new_psn_linked_account_if_needed = 92 [default = false];
    if (has_create_new_psn_linked_account_if_needed()) {
      total_size += 2 + 1;
    }

    // optional string sony_psn_name = 93;
    if (has_sony_psn_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sony_psn_name());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int32 game_server_app_id = 94;
    if (has_game_server_app_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_server_app_id());
    }

    // optional bool steamguard_dont_remember_computer = 95;
    if (has_steamguard_dont_remember_computer()) {
      total_size += 2 + 1;
    }

    // optional string machine_name = 96;
    if (has_machine_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_name());
    }

    // optional string machine_name_userchosen = 97;
    if (has_machine_name_userchosen()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_name_userchosen());
    }

    // optional string country_override = 98;
    if (has_country_override()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_override());
    }

    // optional bool is_steam_box = 99;
    if (has_is_steam_box()) {
      total_size += 2 + 1;
    }

    // optional uint64 client_instance_id = 100;
    if (has_client_instance_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->client_instance_id());
    }

    // optional string two_factor_code = 101;
    if (has_two_factor_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->two_factor_code());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional bool supports_rate_limit_response = 102;
    if (has_supports_rate_limit_response()) {
      total_size += 2 + 1;
    }

    // optional string web_logon_nonce = 103;
    if (has_web_logon_nonce()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->web_logon_nonce());
    }

    // optional int32 priority_reason = 104;
    if (has_priority_reason()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority_reason());
    }

    // optional .CMsgClientSecret embedded_client_secret = 105;
    if (has_embedded_client_secret()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->embedded_client_secret());
    }

    // optional bool disable_partner_autogrants = 106;
    if (has_disable_partner_autogrants()) {
      total_size += 2 + 1;
    }

    // optional bool is_steam_deck = 107;
    if (has_is_steam_deck()) {
      total_size += 2 + 1;
    }

    // optional string access_token = 108;
    if (has_access_token()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientLogon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientLogon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientLogon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientLogon::MergeFrom(const CMsgClientLogon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protocol_version()) {
      set_protocol_version(from.protocol_version());
    }
    if (from.has_deprecated_obfustucated_private_ip()) {
      set_deprecated_obfustucated_private_ip(from.deprecated_obfustucated_private_ip());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_last_session_id()) {
      set_last_session_id(from.last_session_id());
    }
    if (from.has_client_package_version()) {
      set_client_package_version(from.client_package_version());
    }
    if (from.has_client_language()) {
      set_client_language(from.client_language());
    }
    if (from.has_client_os_type()) {
      set_client_os_type(from.client_os_type());
    }
    if (from.has_should_remember_password()) {
      set_should_remember_password(from.should_remember_password());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_wine_version()) {
      set_wine_version(from.wine_version());
    }
    if (from.has_deprecated_10()) {
      set_deprecated_10(from.deprecated_10());
    }
    if (from.has_obfuscated_private_ip()) {
      mutable_obfuscated_private_ip()->::CMsgIPAddress::MergeFrom(from.obfuscated_private_ip());
    }
    if (from.has_deprecated_public_ip()) {
      set_deprecated_public_ip(from.deprecated_public_ip());
    }
    if (from.has_qos_level()) {
      set_qos_level(from.qos_level());
    }
    if (from.has_client_supplied_steam_id()) {
      set_client_supplied_steam_id(from.client_supplied_steam_id());
    }
    if (from.has_public_ip()) {
      mutable_public_ip()->::CMsgIPAddress::MergeFrom(from.public_ip());
    }
    if (from.has_machine_id()) {
      set_machine_id(from.machine_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_launcher_type()) {
      set_launcher_type(from.launcher_type());
    }
    if (from.has_ui_mode()) {
      set_ui_mode(from.ui_mode());
    }
    if (from.has_chat_mode()) {
      set_chat_mode(from.chat_mode());
    }
    if (from.has_steam2_auth_ticket()) {
      set_steam2_auth_ticket(from.steam2_auth_ticket());
    }
    if (from.has_email_address()) {
      set_email_address(from.email_address());
    }
    if (from.has_rtime32_account_creation()) {
      set_rtime32_account_creation(from.rtime32_account_creation());
    }
    if (from.has_account_name()) {
      set_account_name(from.account_name());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_game_server_token()) {
      set_game_server_token(from.game_server_token());
    }
    if (from.has_login_key()) {
      set_login_key(from.login_key());
    }
    if (from.has_was_converted_deprecated_msg()) {
      set_was_converted_deprecated_msg(from.was_converted_deprecated_msg());
    }
    if (from.has_anon_user_target_account_name()) {
      set_anon_user_target_account_name(from.anon_user_target_account_name());
    }
    if (from.has_resolved_user_steam_id()) {
      set_resolved_user_steam_id(from.resolved_user_steam_id());
    }
    if (from.has_eresult_sentryfile()) {
      set_eresult_sentryfile(from.eresult_sentryfile());
    }
    if (from.has_sha_sentryfile()) {
      set_sha_sentryfile(from.sha_sentryfile());
    }
    if (from.has_auth_code()) {
      set_auth_code(from.auth_code());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_otp_type()) {
      set_otp_type(from.otp_type());
    }
    if (from.has_otp_value()) {
      set_otp_value(from.otp_value());
    }
    if (from.has_otp_identifier()) {
      set_otp_identifier(from.otp_identifier());
    }
    if (from.has_steam2_ticket_request()) {
      set_steam2_ticket_request(from.steam2_ticket_request());
    }
    if (from.has_sony_psn_ticket()) {
      set_sony_psn_ticket(from.sony_psn_ticket());
    }
    if (from.has_sony_psn_service_id()) {
      set_sony_psn_service_id(from.sony_psn_service_id());
    }
    if (from.has_create_new_psn_linked_account_if_needed()) {
      set_create_new_psn_linked_account_if_needed(from.create_new_psn_linked_account_if_needed());
    }
    if (from.has_sony_psn_name()) {
      set_sony_psn_name(from.sony_psn_name());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_game_server_app_id()) {
      set_game_server_app_id(from.game_server_app_id());
    }
    if (from.has_steamguard_dont_remember_computer()) {
      set_steamguard_dont_remember_computer(from.steamguard_dont_remember_computer());
    }
    if (from.has_machine_name()) {
      set_machine_name(from.machine_name());
    }
    if (from.has_machine_name_userchosen()) {
      set_machine_name_userchosen(from.machine_name_userchosen());
    }
    if (from.has_country_override()) {
      set_country_override(from.country_override());
    }
    if (from.has_is_steam_box()) {
      set_is_steam_box(from.is_steam_box());
    }
    if (from.has_client_instance_id()) {
      set_client_instance_id(from.client_instance_id());
    }
    if (from.has_two_factor_code()) {
      set_two_factor_code(from.two_factor_code());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_supports_rate_limit_response()) {
      set_supports_rate_limit_response(from.supports_rate_limit_response());
    }
    if (from.has_web_logon_nonce()) {
      set_web_logon_nonce(from.web_logon_nonce());
    }
    if (from.has_priority_reason()) {
      set_priority_reason(from.priority_reason());
    }
    if (from.has_embedded_client_secret()) {
      mutable_embedded_client_secret()->::CMsgClientSecret::MergeFrom(from.embedded_client_secret());
    }
    if (from.has_disable_partner_autogrants()) {
      set_disable_partner_autogrants(from.disable_partner_autogrants());
    }
    if (from.has_is_steam_deck()) {
      set_is_steam_deck(from.is_steam_deck());
    }
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientLogon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLogon::CopyFrom(const CMsgClientLogon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLogon::IsInitialized() const {

  return true;
}

void CMsgClientLogon::Swap(CMsgClientLogon* other) {
  if (other != this) {
    std::swap(protocol_version_, other->protocol_version_);
    std::swap(deprecated_obfustucated_private_ip_, other->deprecated_obfustucated_private_ip_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(last_session_id_, other->last_session_id_);
    std::swap(client_package_version_, other->client_package_version_);
    std::swap(client_language_, other->client_language_);
    std::swap(client_os_type_, other->client_os_type_);
    std::swap(should_remember_password_, other->should_remember_password_);
    std::swap(wine_version_, other->wine_version_);
    std::swap(deprecated_10_, other->deprecated_10_);
    std::swap(obfuscated_private_ip_, other->obfuscated_private_ip_);
    std::swap(deprecated_public_ip_, other->deprecated_public_ip_);
    std::swap(qos_level_, other->qos_level_);
    std::swap(client_supplied_steam_id_, other->client_supplied_steam_id_);
    std::swap(public_ip_, other->public_ip_);
    std::swap(machine_id_, other->machine_id_);
    std::swap(launcher_type_, other->launcher_type_);
    std::swap(ui_mode_, other->ui_mode_);
    std::swap(chat_mode_, other->chat_mode_);
    std::swap(steam2_auth_ticket_, other->steam2_auth_ticket_);
    std::swap(email_address_, other->email_address_);
    std::swap(rtime32_account_creation_, other->rtime32_account_creation_);
    std::swap(account_name_, other->account_name_);
    std::swap(password_, other->password_);
    std::swap(game_server_token_, other->game_server_token_);
    std::swap(login_key_, other->login_key_);
    std::swap(was_converted_deprecated_msg_, other->was_converted_deprecated_msg_);
    std::swap(anon_user_target_account_name_, other->anon_user_target_account_name_);
    std::swap(resolved_user_steam_id_, other->resolved_user_steam_id_);
    std::swap(eresult_sentryfile_, other->eresult_sentryfile_);
    std::swap(sha_sentryfile_, other->sha_sentryfile_);
    std::swap(auth_code_, other->auth_code_);
    std::swap(otp_type_, other->otp_type_);
    std::swap(otp_value_, other->otp_value_);
    std::swap(otp_identifier_, other->otp_identifier_);
    std::swap(steam2_ticket_request_, other->steam2_ticket_request_);
    std::swap(sony_psn_ticket_, other->sony_psn_ticket_);
    std::swap(sony_psn_service_id_, other->sony_psn_service_id_);
    std::swap(create_new_psn_linked_account_if_needed_, other->create_new_psn_linked_account_if_needed_);
    std::swap(sony_psn_name_, other->sony_psn_name_);
    std::swap(game_server_app_id_, other->game_server_app_id_);
    std::swap(steamguard_dont_remember_computer_, other->steamguard_dont_remember_computer_);
    std::swap(machine_name_, other->machine_name_);
    std::swap(machine_name_userchosen_, other->machine_name_userchosen_);
    std::swap(country_override_, other->country_override_);
    std::swap(is_steam_box_, other->is_steam_box_);
    std::swap(client_instance_id_, other->client_instance_id_);
    std::swap(two_factor_code_, other->two_factor_code_);
    std::swap(supports_rate_limit_response_, other->supports_rate_limit_response_);
    std::swap(web_logon_nonce_, other->web_logon_nonce_);
    std::swap(priority_reason_, other->priority_reason_);
    std::swap(embedded_client_secret_, other->embedded_client_secret_);
    std::swap(disable_partner_autogrants_, other->disable_partner_autogrants_);
    std::swap(is_steam_deck_, other->is_steam_deck_);
    std::swap(access_token_, other->access_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientLogon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientLogon_descriptor_;
  metadata.reflection = CMsgClientLogon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientLogonResponse::kEresultFieldNumber;
const int CMsgClientLogonResponse::kLegacyOutOfGameHeartbeatSecondsFieldNumber;
const int CMsgClientLogonResponse::kHeartbeatSecondsFieldNumber;
const int CMsgClientLogonResponse::kDeprecatedPublicIpFieldNumber;
const int CMsgClientLogonResponse::kRtime32ServerTimeFieldNumber;
const int CMsgClientLogonResponse::kAccountFlagsFieldNumber;
const int CMsgClientLogonResponse::kCellIdFieldNumber;
const int CMsgClientLogonResponse::kEmailDomainFieldNumber;
const int CMsgClientLogonResponse::kSteam2TicketFieldNumber;
const int CMsgClientLogonResponse::kEresultExtendedFieldNumber;
const int CMsgClientLogonResponse::kWebapiAuthenticateUserNonceFieldNumber;
const int CMsgClientLogonResponse::kCellIdPingThresholdFieldNumber;
const int CMsgClientLogonResponse::kDeprecatedUsePicsFieldNumber;
const int CMsgClientLogonResponse::kVanityUrlFieldNumber;
const int CMsgClientLogonResponse::kPublicIpFieldNumber;
const int CMsgClientLogonResponse::kClientSuppliedSteamidFieldNumber;
const int CMsgClientLogonResponse::kIpCountryCodeFieldNumber;
const int CMsgClientLogonResponse::kParentalSettingsFieldNumber;
const int CMsgClientLogonResponse::kParentalSettingSignatureFieldNumber;
const int CMsgClientLogonResponse::kCountLoginfailuresToMigrateFieldNumber;
const int CMsgClientLogonResponse::kCountDisconnectsToMigrateFieldNumber;
const int CMsgClientLogonResponse::kOgsDataReportTimeWindowFieldNumber;
const int CMsgClientLogonResponse::kClientInstanceIdFieldNumber;
const int CMsgClientLogonResponse::kForceClientUpdateCheckFieldNumber;
const int CMsgClientLogonResponse::kAgreementSessionUrlFieldNumber;
const int CMsgClientLogonResponse::kTokenIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientLogonResponse::CMsgClientLogonResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientLogonResponse::InitAsDefaultInstance() {
  public_ip_ = const_cast< ::CMsgIPAddress*>(&::CMsgIPAddress::default_instance());
}

CMsgClientLogonResponse::CMsgClientLogonResponse(const CMsgClientLogonResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientLogonResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  legacy_out_of_game_heartbeat_seconds_ = 0;
  heartbeat_seconds_ = 0;
  deprecated_public_ip_ = 0u;
  rtime32_server_time_ = 0u;
  account_flags_ = 0u;
  cell_id_ = 0u;
  email_domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  steam2_ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  eresult_extended_ = 0;
  webapi_authenticate_user_nonce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cell_id_ping_threshold_ = 0u;
  deprecated_use_pics_ = false;
  vanity_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  public_ip_ = NULL;
  client_supplied_steamid_ = GOOGLE_ULONGLONG(0);
  ip_country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  parental_settings_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  parental_setting_signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  count_loginfailures_to_migrate_ = 0;
  count_disconnects_to_migrate_ = 0;
  ogs_data_report_time_window_ = 0;
  client_instance_id_ = GOOGLE_ULONGLONG(0);
  force_client_update_check_ = false;
  agreement_session_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientLogonResponse::~CMsgClientLogonResponse() {
  SharedDtor();
}

void CMsgClientLogonResponse::SharedDtor() {
  if (email_domain_ != &::google::protobuf::internal::kEmptyString) {
    delete email_domain_;
  }
  if (steam2_ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete steam2_ticket_;
  }
  if (webapi_authenticate_user_nonce_ != &::google::protobuf::internal::kEmptyString) {
    delete webapi_authenticate_user_nonce_;
  }
  if (vanity_url_ != &::google::protobuf::internal::kEmptyString) {
    delete vanity_url_;
  }
  if (ip_country_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_country_code_;
  }
  if (parental_settings_ != &::google::protobuf::internal::kEmptyString) {
    delete parental_settings_;
  }
  if (parental_setting_signature_ != &::google::protobuf::internal::kEmptyString) {
    delete parental_setting_signature_;
  }
  if (agreement_session_url_ != &::google::protobuf::internal::kEmptyString) {
    delete agreement_session_url_;
  }
  if (this != default_instance_) {
    delete public_ip_;
  }
}

void CMsgClientLogonResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientLogonResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientLogonResponse_descriptor_;
}

const CMsgClientLogonResponse& CMsgClientLogonResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5flogin_2eproto();
  return *default_instance_;
}

CMsgClientLogonResponse* CMsgClientLogonResponse::default_instance_ = NULL;

CMsgClientLogonResponse* CMsgClientLogonResponse::New() const {
  return new CMsgClientLogonResponse;
}

void CMsgClientLogonResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    legacy_out_of_game_heartbeat_seconds_ = 0;
    heartbeat_seconds_ = 0;
    deprecated_public_ip_ = 0u;
    rtime32_server_time_ = 0u;
    account_flags_ = 0u;
    cell_id_ = 0u;
    if (has_email_domain()) {
      if (email_domain_ != &::google::protobuf::internal::kEmptyString) {
        email_domain_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_steam2_ticket()) {
      if (steam2_ticket_ != &::google::protobuf::internal::kEmptyString) {
        steam2_ticket_->clear();
      }
    }
    eresult_extended_ = 0;
    if (has_webapi_authenticate_user_nonce()) {
      if (webapi_authenticate_user_nonce_ != &::google::protobuf::internal::kEmptyString) {
        webapi_authenticate_user_nonce_->clear();
      }
    }
    cell_id_ping_threshold_ = 0u;
    deprecated_use_pics_ = false;
    if (has_vanity_url()) {
      if (vanity_url_ != &::google::protobuf::internal::kEmptyString) {
        vanity_url_->clear();
      }
    }
    if (has_public_ip()) {
      if (public_ip_ != NULL) public_ip_->::CMsgIPAddress::Clear();
    }
    client_supplied_steamid_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_ip_country_code()) {
      if (ip_country_code_ != &::google::protobuf::internal::kEmptyString) {
        ip_country_code_->clear();
      }
    }
    if (has_parental_settings()) {
      if (parental_settings_ != &::google::protobuf::internal::kEmptyString) {
        parental_settings_->clear();
      }
    }
    if (has_parental_setting_signature()) {
      if (parental_setting_signature_ != &::google::protobuf::internal::kEmptyString) {
        parental_setting_signature_->clear();
      }
    }
    count_loginfailures_to_migrate_ = 0;
    count_disconnects_to_migrate_ = 0;
    ogs_data_report_time_window_ = 0;
    client_instance_id_ = GOOGLE_ULONGLONG(0);
    force_client_update_check_ = false;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_agreement_session_url()) {
      if (agreement_session_url_ != &::google::protobuf::internal::kEmptyString) {
        agreement_session_url_->clear();
      }
    }
    token_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientLogonResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_legacy_out_of_game_heartbeat_seconds;
        break;
      }

      // optional int32 legacy_out_of_game_heartbeat_seconds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_legacy_out_of_game_heartbeat_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &legacy_out_of_game_heartbeat_seconds_)));
          set_has_legacy_out_of_game_heartbeat_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_heartbeat_seconds;
        break;
      }

      // optional int32 heartbeat_seconds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heartbeat_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heartbeat_seconds_)));
          set_has_heartbeat_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_deprecated_public_ip;
        break;
      }

      // optional uint32 deprecated_public_ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deprecated_public_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deprecated_public_ip_)));
          set_has_deprecated_public_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_rtime32_server_time;
        break;
      }

      // optional fixed32 rtime32_server_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rtime32_server_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &rtime32_server_time_)));
          set_has_rtime32_server_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_account_flags;
        break;
      }

      // optional uint32 account_flags = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_flags_)));
          set_has_account_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cell_id;
        break;
      }

      // optional uint32 cell_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_email_domain;
        break;
      }

      // optional string email_domain = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email_domain().data(), this->email_domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_steam2_ticket;
        break;
      }

      // optional bytes steam2_ticket = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_steam2_ticket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_steam2_ticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_eresult_extended;
        break;
      }

      // optional int32 eresult_extended = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eresult_extended:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_extended_)));
          set_has_eresult_extended();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_webapi_authenticate_user_nonce;
        break;
      }

      // optional string webapi_authenticate_user_nonce = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_webapi_authenticate_user_nonce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_webapi_authenticate_user_nonce()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->webapi_authenticate_user_nonce().data(), this->webapi_authenticate_user_nonce().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_cell_id_ping_threshold;
        break;
      }

      // optional uint32 cell_id_ping_threshold = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cell_id_ping_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_ping_threshold_)));
          set_has_cell_id_ping_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_deprecated_use_pics;
        break;
      }

      // optional bool deprecated_use_pics = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deprecated_use_pics:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deprecated_use_pics_)));
          set_has_deprecated_use_pics();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_vanity_url;
        break;
      }

      // optional string vanity_url = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vanity_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vanity_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vanity_url().data(), this->vanity_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_public_ip;
        break;
      }

      // optional .CMsgIPAddress public_ip = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_public_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_public_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_client_supplied_steamid;
        break;
      }

      // optional fixed64 client_supplied_steamid = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_client_supplied_steamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &client_supplied_steamid_)));
          set_has_client_supplied_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_ip_country_code;
        break;
      }

      // optional string ip_country_code = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip_country_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip_country_code().data(), this->ip_country_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_parental_settings;
        break;
      }

      // optional bytes parental_settings = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parental_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_parental_settings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_parental_setting_signature;
        break;
      }

      // optional bytes parental_setting_signature = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parental_setting_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_parental_setting_signature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_count_loginfailures_to_migrate;
        break;
      }

      // optional int32 count_loginfailures_to_migrate = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_loginfailures_to_migrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_loginfailures_to_migrate_)));
          set_has_count_loginfailures_to_migrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_count_disconnects_to_migrate;
        break;
      }

      // optional int32 count_disconnects_to_migrate = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_disconnects_to_migrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_disconnects_to_migrate_)));
          set_has_count_disconnects_to_migrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_ogs_data_report_time_window;
        break;
      }

      // optional int32 ogs_data_report_time_window = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ogs_data_report_time_window:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ogs_data_report_time_window_)));
          set_has_ogs_data_report_time_window();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_client_instance_id;
        break;
      }

      // optional uint64 client_instance_id = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &client_instance_id_)));
          set_has_client_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_force_client_update_check;
        break;
      }

      // optional bool force_client_update_check = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force_client_update_check:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_client_update_check_)));
          set_has_force_client_update_check();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_agreement_session_url;
        break;
      }

      // optional string agreement_session_url = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_agreement_session_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_agreement_session_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->agreement_session_url().data(), this->agreement_session_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_token_id;
        break;
      }

      // optional uint64 token_id = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_token_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &token_id_)));
          set_has_token_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientLogonResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional int32 legacy_out_of_game_heartbeat_seconds = 2;
  if (has_legacy_out_of_game_heartbeat_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->legacy_out_of_game_heartbeat_seconds(), output);
  }

  // optional int32 heartbeat_seconds = 3;
  if (has_heartbeat_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->heartbeat_seconds(), output);
  }

  // optional uint32 deprecated_public_ip = 4;
  if (has_deprecated_public_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->deprecated_public_ip(), output);
  }

  // optional fixed32 rtime32_server_time = 5;
  if (has_rtime32_server_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->rtime32_server_time(), output);
  }

  // optional uint32 account_flags = 6;
  if (has_account_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->account_flags(), output);
  }

  // optional uint32 cell_id = 7;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cell_id(), output);
  }

  // optional string email_domain = 8;
  if (has_email_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email_domain().data(), this->email_domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->email_domain(), output);
  }

  // optional bytes steam2_ticket = 9;
  if (has_steam2_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->steam2_ticket(), output);
  }

  // optional int32 eresult_extended = 10;
  if (has_eresult_extended()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->eresult_extended(), output);
  }

  // optional string webapi_authenticate_user_nonce = 11;
  if (has_webapi_authenticate_user_nonce()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->webapi_authenticate_user_nonce().data(), this->webapi_authenticate_user_nonce().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->webapi_authenticate_user_nonce(), output);
  }

  // optional uint32 cell_id_ping_threshold = 12;
  if (has_cell_id_ping_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->cell_id_ping_threshold(), output);
  }

  // optional bool deprecated_use_pics = 13;
  if (has_deprecated_use_pics()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->deprecated_use_pics(), output);
  }

  // optional string vanity_url = 14;
  if (has_vanity_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vanity_url().data(), this->vanity_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->vanity_url(), output);
  }

  // optional .CMsgIPAddress public_ip = 15;
  if (has_public_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->public_ip(), output);
  }

  // optional fixed64 client_supplied_steamid = 20;
  if (has_client_supplied_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(20, this->client_supplied_steamid(), output);
  }

  // optional string ip_country_code = 21;
  if (has_ip_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip_country_code().data(), this->ip_country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->ip_country_code(), output);
  }

  // optional bytes parental_settings = 22;
  if (has_parental_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      22, this->parental_settings(), output);
  }

  // optional bytes parental_setting_signature = 23;
  if (has_parental_setting_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      23, this->parental_setting_signature(), output);
  }

  // optional int32 count_loginfailures_to_migrate = 24;
  if (has_count_loginfailures_to_migrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->count_loginfailures_to_migrate(), output);
  }

  // optional int32 count_disconnects_to_migrate = 25;
  if (has_count_disconnects_to_migrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->count_disconnects_to_migrate(), output);
  }

  // optional int32 ogs_data_report_time_window = 26;
  if (has_ogs_data_report_time_window()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->ogs_data_report_time_window(), output);
  }

  // optional uint64 client_instance_id = 27;
  if (has_client_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(27, this->client_instance_id(), output);
  }

  // optional bool force_client_update_check = 28;
  if (has_force_client_update_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->force_client_update_check(), output);
  }

  // optional string agreement_session_url = 29;
  if (has_agreement_session_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agreement_session_url().data(), this->agreement_session_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      29, this->agreement_session_url(), output);
  }

  // optional uint64 token_id = 30;
  if (has_token_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->token_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientLogonResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional int32 legacy_out_of_game_heartbeat_seconds = 2;
  if (has_legacy_out_of_game_heartbeat_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->legacy_out_of_game_heartbeat_seconds(), target);
  }

  // optional int32 heartbeat_seconds = 3;
  if (has_heartbeat_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->heartbeat_seconds(), target);
  }

  // optional uint32 deprecated_public_ip = 4;
  if (has_deprecated_public_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->deprecated_public_ip(), target);
  }

  // optional fixed32 rtime32_server_time = 5;
  if (has_rtime32_server_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->rtime32_server_time(), target);
  }

  // optional uint32 account_flags = 6;
  if (has_account_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->account_flags(), target);
  }

  // optional uint32 cell_id = 7;
  if (has_cell_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->cell_id(), target);
  }

  // optional string email_domain = 8;
  if (has_email_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email_domain().data(), this->email_domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->email_domain(), target);
  }

  // optional bytes steam2_ticket = 9;
  if (has_steam2_ticket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->steam2_ticket(), target);
  }

  // optional int32 eresult_extended = 10;
  if (has_eresult_extended()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->eresult_extended(), target);
  }

  // optional string webapi_authenticate_user_nonce = 11;
  if (has_webapi_authenticate_user_nonce()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->webapi_authenticate_user_nonce().data(), this->webapi_authenticate_user_nonce().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->webapi_authenticate_user_nonce(), target);
  }

  // optional uint32 cell_id_ping_threshold = 12;
  if (has_cell_id_ping_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->cell_id_ping_threshold(), target);
  }

  // optional bool deprecated_use_pics = 13;
  if (has_deprecated_use_pics()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->deprecated_use_pics(), target);
  }

  // optional string vanity_url = 14;
  if (has_vanity_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vanity_url().data(), this->vanity_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->vanity_url(), target);
  }

  // optional .CMsgIPAddress public_ip = 15;
  if (has_public_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->public_ip(), target);
  }

  // optional fixed64 client_supplied_steamid = 20;
  if (has_client_supplied_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(20, this->client_supplied_steamid(), target);
  }

  // optional string ip_country_code = 21;
  if (has_ip_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip_country_code().data(), this->ip_country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->ip_country_code(), target);
  }

  // optional bytes parental_settings = 22;
  if (has_parental_settings()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        22, this->parental_settings(), target);
  }

  // optional bytes parental_setting_signature = 23;
  if (has_parental_setting_signature()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        23, this->parental_setting_signature(), target);
  }

  // optional int32 count_loginfailures_to_migrate = 24;
  if (has_count_loginfailures_to_migrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->count_loginfailures_to_migrate(), target);
  }

  // optional int32 count_disconnects_to_migrate = 25;
  if (has_count_disconnects_to_migrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->count_disconnects_to_migrate(), target);
  }

  // optional int32 ogs_data_report_time_window = 26;
  if (has_ogs_data_report_time_window()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->ogs_data_report_time_window(), target);
  }

  // optional uint64 client_instance_id = 27;
  if (has_client_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(27, this->client_instance_id(), target);
  }

  // optional bool force_client_update_check = 28;
  if (has_force_client_update_check()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->force_client_update_check(), target);
  }

  // optional string agreement_session_url = 29;
  if (has_agreement_session_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agreement_session_url().data(), this->agreement_session_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->agreement_session_url(), target);
  }

  // optional uint64 token_id = 30;
  if (has_token_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->token_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientLogonResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional int32 legacy_out_of_game_heartbeat_seconds = 2;
    if (has_legacy_out_of_game_heartbeat_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->legacy_out_of_game_heartbeat_seconds());
    }

    // optional int32 heartbeat_seconds = 3;
    if (has_heartbeat_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heartbeat_seconds());
    }

    // optional uint32 deprecated_public_ip = 4;
    if (has_deprecated_public_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deprecated_public_ip());
    }

    // optional fixed32 rtime32_server_time = 5;
    if (has_rtime32_server_time()) {
      total_size += 1 + 4;
    }

    // optional uint32 account_flags = 6;
    if (has_account_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_flags());
    }

    // optional uint32 cell_id = 7;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

    // optional string email_domain = 8;
    if (has_email_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email_domain());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes steam2_ticket = 9;
    if (has_steam2_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->steam2_ticket());
    }

    // optional int32 eresult_extended = 10;
    if (has_eresult_extended()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult_extended());
    }

    // optional string webapi_authenticate_user_nonce = 11;
    if (has_webapi_authenticate_user_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->webapi_authenticate_user_nonce());
    }

    // optional uint32 cell_id_ping_threshold = 12;
    if (has_cell_id_ping_threshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id_ping_threshold());
    }

    // optional bool deprecated_use_pics = 13;
    if (has_deprecated_use_pics()) {
      total_size += 1 + 1;
    }

    // optional string vanity_url = 14;
    if (has_vanity_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vanity_url());
    }

    // optional .CMsgIPAddress public_ip = 15;
    if (has_public_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->public_ip());
    }

    // optional fixed64 client_supplied_steamid = 20;
    if (has_client_supplied_steamid()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string ip_country_code = 21;
    if (has_ip_country_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip_country_code());
    }

    // optional bytes parental_settings = 22;
    if (has_parental_settings()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->parental_settings());
    }

    // optional bytes parental_setting_signature = 23;
    if (has_parental_setting_signature()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->parental_setting_signature());
    }

    // optional int32 count_loginfailures_to_migrate = 24;
    if (has_count_loginfailures_to_migrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_loginfailures_to_migrate());
    }

    // optional int32 count_disconnects_to_migrate = 25;
    if (has_count_disconnects_to_migrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_disconnects_to_migrate());
    }

    // optional int32 ogs_data_report_time_window = 26;
    if (has_ogs_data_report_time_window()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ogs_data_report_time_window());
    }

    // optional uint64 client_instance_id = 27;
    if (has_client_instance_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->client_instance_id());
    }

    // optional bool force_client_update_check = 28;
    if (has_force_client_update_check()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string agreement_session_url = 29;
    if (has_agreement_session_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->agreement_session_url());
    }

    // optional uint64 token_id = 30;
    if (has_token_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->token_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientLogonResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientLogonResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientLogonResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientLogonResponse::MergeFrom(const CMsgClientLogonResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_legacy_out_of_game_heartbeat_seconds()) {
      set_legacy_out_of_game_heartbeat_seconds(from.legacy_out_of_game_heartbeat_seconds());
    }
    if (from.has_heartbeat_seconds()) {
      set_heartbeat_seconds(from.heartbeat_seconds());
    }
    if (from.has_deprecated_public_ip()) {
      set_deprecated_public_ip(from.deprecated_public_ip());
    }
    if (from.has_rtime32_server_time()) {
      set_rtime32_server_time(from.rtime32_server_time());
    }
    if (from.has_account_flags()) {
      set_account_flags(from.account_flags());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_email_domain()) {
      set_email_domain(from.email_domain());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_steam2_ticket()) {
      set_steam2_ticket(from.steam2_ticket());
    }
    if (from.has_eresult_extended()) {
      set_eresult_extended(from.eresult_extended());
    }
    if (from.has_webapi_authenticate_user_nonce()) {
      set_webapi_authenticate_user_nonce(from.webapi_authenticate_user_nonce());
    }
    if (from.has_cell_id_ping_threshold()) {
      set_cell_id_ping_threshold(from.cell_id_ping_threshold());
    }
    if (from.has_deprecated_use_pics()) {
      set_deprecated_use_pics(from.deprecated_use_pics());
    }
    if (from.has_vanity_url()) {
      set_vanity_url(from.vanity_url());
    }
    if (from.has_public_ip()) {
      mutable_public_ip()->::CMsgIPAddress::MergeFrom(from.public_ip());
    }
    if (from.has_client_supplied_steamid()) {
      set_client_supplied_steamid(from.client_supplied_steamid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_ip_country_code()) {
      set_ip_country_code(from.ip_country_code());
    }
    if (from.has_parental_settings()) {
      set_parental_settings(from.parental_settings());
    }
    if (from.has_parental_setting_signature()) {
      set_parental_setting_signature(from.parental_setting_signature());
    }
    if (from.has_count_loginfailures_to_migrate()) {
      set_count_loginfailures_to_migrate(from.count_loginfailures_to_migrate());
    }
    if (from.has_count_disconnects_to_migrate()) {
      set_count_disconnects_to_migrate(from.count_disconnects_to_migrate());
    }
    if (from.has_ogs_data_report_time_window()) {
      set_ogs_data_report_time_window(from.ogs_data_report_time_window());
    }
    if (from.has_client_instance_id()) {
      set_client_instance_id(from.client_instance_id());
    }
    if (from.has_force_client_update_check()) {
      set_force_client_update_check(from.force_client_update_check());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_agreement_session_url()) {
      set_agreement_session_url(from.agreement_session_url());
    }
    if (from.has_token_id()) {
      set_token_id(from.token_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientLogonResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLogonResponse::CopyFrom(const CMsgClientLogonResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLogonResponse::IsInitialized() const {

  return true;
}

void CMsgClientLogonResponse::Swap(CMsgClientLogonResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(legacy_out_of_game_heartbeat_seconds_, other->legacy_out_of_game_heartbeat_seconds_);
    std::swap(heartbeat_seconds_, other->heartbeat_seconds_);
    std::swap(deprecated_public_ip_, other->deprecated_public_ip_);
    std::swap(rtime32_server_time_, other->rtime32_server_time_);
    std::swap(account_flags_, other->account_flags_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(email_domain_, other->email_domain_);
    std::swap(steam2_ticket_, other->steam2_ticket_);
    std::swap(eresult_extended_, other->eresult_extended_);
    std::swap(webapi_authenticate_user_nonce_, other->webapi_authenticate_user_nonce_);
    std::swap(cell_id_ping_threshold_, other->cell_id_ping_threshold_);
    std::swap(deprecated_use_pics_, other->deprecated_use_pics_);
    std::swap(vanity_url_, other->vanity_url_);
    std::swap(public_ip_, other->public_ip_);
    std::swap(client_supplied_steamid_, other->client_supplied_steamid_);
    std::swap(ip_country_code_, other->ip_country_code_);
    std::swap(parental_settings_, other->parental_settings_);
    std::swap(parental_setting_signature_, other->parental_setting_signature_);
    std::swap(count_loginfailures_to_migrate_, other->count_loginfailures_to_migrate_);
    std::swap(count_disconnects_to_migrate_, other->count_disconnects_to_migrate_);
    std::swap(ogs_data_report_time_window_, other->ogs_data_report_time_window_);
    std::swap(client_instance_id_, other->client_instance_id_);
    std::swap(force_client_update_check_, other->force_client_update_check_);
    std::swap(agreement_session_url_, other->agreement_session_url_);
    std::swap(token_id_, other->token_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientLogonResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientLogonResponse_descriptor_;
  metadata.reflection = CMsgClientLogonResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRequestWebAPIAuthenticateUserNonce::kTokenTypeFieldNumber;
#endif  // !_MSC_VER

CMsgClientRequestWebAPIAuthenticateUserNonce::CMsgClientRequestWebAPIAuthenticateUserNonce()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::InitAsDefaultInstance() {
}

CMsgClientRequestWebAPIAuthenticateUserNonce::CMsgClientRequestWebAPIAuthenticateUserNonce(const CMsgClientRequestWebAPIAuthenticateUserNonce& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::SharedCtor() {
  _cached_size_ = 0;
  token_type_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRequestWebAPIAuthenticateUserNonce::~CMsgClientRequestWebAPIAuthenticateUserNonce() {
  SharedDtor();
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRequestWebAPIAuthenticateUserNonce::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientRequestWebAPIAuthenticateUserNonce_descriptor_;
}

const CMsgClientRequestWebAPIAuthenticateUserNonce& CMsgClientRequestWebAPIAuthenticateUserNonce::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5flogin_2eproto();
  return *default_instance_;
}

CMsgClientRequestWebAPIAuthenticateUserNonce* CMsgClientRequestWebAPIAuthenticateUserNonce::default_instance_ = NULL;

CMsgClientRequestWebAPIAuthenticateUserNonce* CMsgClientRequestWebAPIAuthenticateUserNonce::New() const {
  return new CMsgClientRequestWebAPIAuthenticateUserNonce;
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    token_type_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientRequestWebAPIAuthenticateUserNonce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 token_type = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &token_type_)));
          set_has_token_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 token_type = 1 [default = -1];
  if (has_token_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->token_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientRequestWebAPIAuthenticateUserNonce::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 token_type = 1 [default = -1];
  if (has_token_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->token_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientRequestWebAPIAuthenticateUserNonce::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 token_type = 1 [default = -1];
    if (has_token_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->token_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientRequestWebAPIAuthenticateUserNonce* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientRequestWebAPIAuthenticateUserNonce*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::MergeFrom(const CMsgClientRequestWebAPIAuthenticateUserNonce& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token_type()) {
      set_token_type(from.token_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::CopyFrom(const CMsgClientRequestWebAPIAuthenticateUserNonce& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestWebAPIAuthenticateUserNonce::IsInitialized() const {

  return true;
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::Swap(CMsgClientRequestWebAPIAuthenticateUserNonce* other) {
  if (other != this) {
    std::swap(token_type_, other->token_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientRequestWebAPIAuthenticateUserNonce::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientRequestWebAPIAuthenticateUserNonce_descriptor_;
  metadata.reflection = CMsgClientRequestWebAPIAuthenticateUserNonce_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRequestWebAPIAuthenticateUserNonceResponse::kEresultFieldNumber;
const int CMsgClientRequestWebAPIAuthenticateUserNonceResponse::kWebapiAuthenticateUserNonceFieldNumber;
const int CMsgClientRequestWebAPIAuthenticateUserNonceResponse::kTokenTypeFieldNumber;
#endif  // !_MSC_VER

CMsgClientRequestWebAPIAuthenticateUserNonceResponse::CMsgClientRequestWebAPIAuthenticateUserNonceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::InitAsDefaultInstance() {
}

CMsgClientRequestWebAPIAuthenticateUserNonceResponse::CMsgClientRequestWebAPIAuthenticateUserNonceResponse(const CMsgClientRequestWebAPIAuthenticateUserNonceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  webapi_authenticate_user_nonce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_type_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRequestWebAPIAuthenticateUserNonceResponse::~CMsgClientRequestWebAPIAuthenticateUserNonceResponse() {
  SharedDtor();
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::SharedDtor() {
  if (webapi_authenticate_user_nonce_ != &::google::protobuf::internal::kEmptyString) {
    delete webapi_authenticate_user_nonce_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRequestWebAPIAuthenticateUserNonceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientRequestWebAPIAuthenticateUserNonceResponse_descriptor_;
}

const CMsgClientRequestWebAPIAuthenticateUserNonceResponse& CMsgClientRequestWebAPIAuthenticateUserNonceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5flogin_2eproto();
  return *default_instance_;
}

CMsgClientRequestWebAPIAuthenticateUserNonceResponse* CMsgClientRequestWebAPIAuthenticateUserNonceResponse::default_instance_ = NULL;

CMsgClientRequestWebAPIAuthenticateUserNonceResponse* CMsgClientRequestWebAPIAuthenticateUserNonceResponse::New() const {
  return new CMsgClientRequestWebAPIAuthenticateUserNonceResponse;
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    if (has_webapi_authenticate_user_nonce()) {
      if (webapi_authenticate_user_nonce_ != &::google::protobuf::internal::kEmptyString) {
        webapi_authenticate_user_nonce_->clear();
      }
    }
    token_type_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientRequestWebAPIAuthenticateUserNonceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_token_type;
        break;
      }

      // optional int32 token_type = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_token_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &token_type_)));
          set_has_token_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_webapi_authenticate_user_nonce;
        break;
      }

      // optional string webapi_authenticate_user_nonce = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_webapi_authenticate_user_nonce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_webapi_authenticate_user_nonce()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->webapi_authenticate_user_nonce().data(), this->webapi_authenticate_user_nonce().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional int32 token_type = 3 [default = -1];
  if (has_token_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->token_type(), output);
  }

  // optional string webapi_authenticate_user_nonce = 11;
  if (has_webapi_authenticate_user_nonce()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->webapi_authenticate_user_nonce().data(), this->webapi_authenticate_user_nonce().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->webapi_authenticate_user_nonce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientRequestWebAPIAuthenticateUserNonceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional int32 token_type = 3 [default = -1];
  if (has_token_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->token_type(), target);
  }

  // optional string webapi_authenticate_user_nonce = 11;
  if (has_webapi_authenticate_user_nonce()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->webapi_authenticate_user_nonce().data(), this->webapi_authenticate_user_nonce().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->webapi_authenticate_user_nonce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientRequestWebAPIAuthenticateUserNonceResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional string webapi_authenticate_user_nonce = 11;
    if (has_webapi_authenticate_user_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->webapi_authenticate_user_nonce());
    }

    // optional int32 token_type = 3 [default = -1];
    if (has_token_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->token_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientRequestWebAPIAuthenticateUserNonceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientRequestWebAPIAuthenticateUserNonceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::MergeFrom(const CMsgClientRequestWebAPIAuthenticateUserNonceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_webapi_authenticate_user_nonce()) {
      set_webapi_authenticate_user_nonce(from.webapi_authenticate_user_nonce());
    }
    if (from.has_token_type()) {
      set_token_type(from.token_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::CopyFrom(const CMsgClientRequestWebAPIAuthenticateUserNonceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestWebAPIAuthenticateUserNonceResponse::IsInitialized() const {

  return true;
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::Swap(CMsgClientRequestWebAPIAuthenticateUserNonceResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(webapi_authenticate_user_nonce_, other->webapi_authenticate_user_nonce_);
    std::swap(token_type_, other->token_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientRequestWebAPIAuthenticateUserNonceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientRequestWebAPIAuthenticateUserNonceResponse_descriptor_;
  metadata.reflection = CMsgClientRequestWebAPIAuthenticateUserNonceResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgClientLogOff::CMsgClientLogOff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientLogOff::InitAsDefaultInstance() {
}

CMsgClientLogOff::CMsgClientLogOff(const CMsgClientLogOff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientLogOff::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientLogOff::~CMsgClientLogOff() {
  SharedDtor();
}

void CMsgClientLogOff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientLogOff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientLogOff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientLogOff_descriptor_;
}

const CMsgClientLogOff& CMsgClientLogOff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5flogin_2eproto();
  return *default_instance_;
}

CMsgClientLogOff* CMsgClientLogOff::default_instance_ = NULL;

CMsgClientLogOff* CMsgClientLogOff::New() const {
  return new CMsgClientLogOff;
}

void CMsgClientLogOff::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientLogOff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CMsgClientLogOff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientLogOff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientLogOff::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientLogOff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientLogOff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientLogOff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientLogOff::MergeFrom(const CMsgClientLogOff& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientLogOff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLogOff::CopyFrom(const CMsgClientLogOff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLogOff::IsInitialized() const {

  return true;
}

void CMsgClientLogOff::Swap(CMsgClientLogOff* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientLogOff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientLogOff_descriptor_;
  metadata.reflection = CMsgClientLogOff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientLoggedOff::kEresultFieldNumber;
#endif  // !_MSC_VER

CMsgClientLoggedOff::CMsgClientLoggedOff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientLoggedOff::InitAsDefaultInstance() {
}

CMsgClientLoggedOff::CMsgClientLoggedOff(const CMsgClientLoggedOff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientLoggedOff::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientLoggedOff::~CMsgClientLoggedOff() {
  SharedDtor();
}

void CMsgClientLoggedOff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientLoggedOff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientLoggedOff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientLoggedOff_descriptor_;
}

const CMsgClientLoggedOff& CMsgClientLoggedOff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5flogin_2eproto();
  return *default_instance_;
}

CMsgClientLoggedOff* CMsgClientLoggedOff::default_instance_ = NULL;

CMsgClientLoggedOff* CMsgClientLoggedOff::New() const {
  return new CMsgClientLoggedOff;
}

void CMsgClientLoggedOff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientLoggedOff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientLoggedOff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientLoggedOff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientLoggedOff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientLoggedOff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientLoggedOff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientLoggedOff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientLoggedOff::MergeFrom(const CMsgClientLoggedOff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientLoggedOff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLoggedOff::CopyFrom(const CMsgClientLoggedOff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLoggedOff::IsInitialized() const {

  return true;
}

void CMsgClientLoggedOff::Swap(CMsgClientLoggedOff* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientLoggedOff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientLoggedOff_descriptor_;
  metadata.reflection = CMsgClientLoggedOff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientNewLoginKey::kUniqueIdFieldNumber;
const int CMsgClientNewLoginKey::kLoginKeyFieldNumber;
#endif  // !_MSC_VER

CMsgClientNewLoginKey::CMsgClientNewLoginKey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientNewLoginKey::InitAsDefaultInstance() {
}

CMsgClientNewLoginKey::CMsgClientNewLoginKey(const CMsgClientNewLoginKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientNewLoginKey::SharedCtor() {
  _cached_size_ = 0;
  unique_id_ = 0u;
  login_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientNewLoginKey::~CMsgClientNewLoginKey() {
  SharedDtor();
}

void CMsgClientNewLoginKey::SharedDtor() {
  if (login_key_ != &::google::protobuf::internal::kEmptyString) {
    delete login_key_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientNewLoginKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientNewLoginKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientNewLoginKey_descriptor_;
}

const CMsgClientNewLoginKey& CMsgClientNewLoginKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5flogin_2eproto();
  return *default_instance_;
}

CMsgClientNewLoginKey* CMsgClientNewLoginKey::default_instance_ = NULL;

CMsgClientNewLoginKey* CMsgClientNewLoginKey::New() const {
  return new CMsgClientNewLoginKey;
}

void CMsgClientNewLoginKey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unique_id_ = 0u;
    if (has_login_key()) {
      if (login_key_ != &::google::protobuf::internal::kEmptyString) {
        login_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientNewLoginKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 unique_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unique_id_)));
          set_has_unique_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_login_key;
        break;
      }

      // optional string login_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->login_key().data(), this->login_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientNewLoginKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 unique_id = 1;
  if (has_unique_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unique_id(), output);
  }

  // optional string login_key = 2;
  if (has_login_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login_key().data(), this->login_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->login_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientNewLoginKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 unique_id = 1;
  if (has_unique_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unique_id(), target);
  }

  // optional string login_key = 2;
  if (has_login_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login_key().data(), this->login_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->login_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientNewLoginKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 unique_id = 1;
    if (has_unique_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unique_id());
    }

    // optional string login_key = 2;
    if (has_login_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientNewLoginKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientNewLoginKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientNewLoginKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientNewLoginKey::MergeFrom(const CMsgClientNewLoginKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unique_id()) {
      set_unique_id(from.unique_id());
    }
    if (from.has_login_key()) {
      set_login_key(from.login_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientNewLoginKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientNewLoginKey::CopyFrom(const CMsgClientNewLoginKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientNewLoginKey::IsInitialized() const {

  return true;
}

void CMsgClientNewLoginKey::Swap(CMsgClientNewLoginKey* other) {
  if (other != this) {
    std::swap(unique_id_, other->unique_id_);
    std::swap(login_key_, other->login_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientNewLoginKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientNewLoginKey_descriptor_;
  metadata.reflection = CMsgClientNewLoginKey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientNewLoginKeyAccepted::kUniqueIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientNewLoginKeyAccepted::CMsgClientNewLoginKeyAccepted()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientNewLoginKeyAccepted::InitAsDefaultInstance() {
}

CMsgClientNewLoginKeyAccepted::CMsgClientNewLoginKeyAccepted(const CMsgClientNewLoginKeyAccepted& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientNewLoginKeyAccepted::SharedCtor() {
  _cached_size_ = 0;
  unique_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientNewLoginKeyAccepted::~CMsgClientNewLoginKeyAccepted() {
  SharedDtor();
}

void CMsgClientNewLoginKeyAccepted::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientNewLoginKeyAccepted::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientNewLoginKeyAccepted::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientNewLoginKeyAccepted_descriptor_;
}

const CMsgClientNewLoginKeyAccepted& CMsgClientNewLoginKeyAccepted::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5flogin_2eproto();
  return *default_instance_;
}

CMsgClientNewLoginKeyAccepted* CMsgClientNewLoginKeyAccepted::default_instance_ = NULL;

CMsgClientNewLoginKeyAccepted* CMsgClientNewLoginKeyAccepted::New() const {
  return new CMsgClientNewLoginKeyAccepted;
}

void CMsgClientNewLoginKeyAccepted::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unique_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientNewLoginKeyAccepted::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 unique_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unique_id_)));
          set_has_unique_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientNewLoginKeyAccepted::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 unique_id = 1;
  if (has_unique_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unique_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientNewLoginKeyAccepted::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 unique_id = 1;
  if (has_unique_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unique_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientNewLoginKeyAccepted::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 unique_id = 1;
    if (has_unique_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unique_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientNewLoginKeyAccepted::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientNewLoginKeyAccepted* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientNewLoginKeyAccepted*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientNewLoginKeyAccepted::MergeFrom(const CMsgClientNewLoginKeyAccepted& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unique_id()) {
      set_unique_id(from.unique_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientNewLoginKeyAccepted::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientNewLoginKeyAccepted::CopyFrom(const CMsgClientNewLoginKeyAccepted& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientNewLoginKeyAccepted::IsInitialized() const {

  return true;
}

void CMsgClientNewLoginKeyAccepted::Swap(CMsgClientNewLoginKeyAccepted* other) {
  if (other != this) {
    std::swap(unique_id_, other->unique_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientNewLoginKeyAccepted::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientNewLoginKeyAccepted_descriptor_;
  metadata.reflection = CMsgClientNewLoginKeyAccepted_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientAccountInfo::kPersonaNameFieldNumber;
const int CMsgClientAccountInfo::kIpCountryFieldNumber;
const int CMsgClientAccountInfo::kCountAuthedComputersFieldNumber;
const int CMsgClientAccountInfo::kAccountFlagsFieldNumber;
const int CMsgClientAccountInfo::kFacebookIdFieldNumber;
const int CMsgClientAccountInfo::kFacebookNameFieldNumber;
const int CMsgClientAccountInfo::kSteamguardNotifyNewmachinesFieldNumber;
const int CMsgClientAccountInfo::kSteamguardMachineNameUserChosenFieldNumber;
const int CMsgClientAccountInfo::kIsPhoneVerifiedFieldNumber;
const int CMsgClientAccountInfo::kTwoFactorStateFieldNumber;
const int CMsgClientAccountInfo::kIsPhoneIdentifyingFieldNumber;
const int CMsgClientAccountInfo::kIsPhoneNeedingReverifyFieldNumber;
#endif  // !_MSC_VER

CMsgClientAccountInfo::CMsgClientAccountInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientAccountInfo::InitAsDefaultInstance() {
}

CMsgClientAccountInfo::CMsgClientAccountInfo(const CMsgClientAccountInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientAccountInfo::SharedCtor() {
  _cached_size_ = 0;
  persona_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  count_authed_computers_ = 0;
  account_flags_ = 0u;
  facebook_id_ = GOOGLE_ULONGLONG(0);
  facebook_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  steamguard_notify_newmachines_ = false;
  steamguard_machine_name_user_chosen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_phone_verified_ = false;
  two_factor_state_ = 0u;
  is_phone_identifying_ = false;
  is_phone_needing_reverify_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientAccountInfo::~CMsgClientAccountInfo() {
  SharedDtor();
}

void CMsgClientAccountInfo::SharedDtor() {
  if (persona_name_ != &::google::protobuf::internal::kEmptyString) {
    delete persona_name_;
  }
  if (ip_country_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_country_;
  }
  if (facebook_name_ != &::google::protobuf::internal::kEmptyString) {
    delete facebook_name_;
  }
  if (steamguard_machine_name_user_chosen_ != &::google::protobuf::internal::kEmptyString) {
    delete steamguard_machine_name_user_chosen_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientAccountInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientAccountInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientAccountInfo_descriptor_;
}

const CMsgClientAccountInfo& CMsgClientAccountInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5flogin_2eproto();
  return *default_instance_;
}

CMsgClientAccountInfo* CMsgClientAccountInfo::default_instance_ = NULL;

CMsgClientAccountInfo* CMsgClientAccountInfo::New() const {
  return new CMsgClientAccountInfo;
}

void CMsgClientAccountInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_persona_name()) {
      if (persona_name_ != &::google::protobuf::internal::kEmptyString) {
        persona_name_->clear();
      }
    }
    if (has_ip_country()) {
      if (ip_country_ != &::google::protobuf::internal::kEmptyString) {
        ip_country_->clear();
      }
    }
    count_authed_computers_ = 0;
    account_flags_ = 0u;
    facebook_id_ = GOOGLE_ULONGLONG(0);
    if (has_facebook_name()) {
      if (facebook_name_ != &::google::protobuf::internal::kEmptyString) {
        facebook_name_->clear();
      }
    }
    steamguard_notify_newmachines_ = false;
    if (has_steamguard_machine_name_user_chosen()) {
      if (steamguard_machine_name_user_chosen_ != &::google::protobuf::internal::kEmptyString) {
        steamguard_machine_name_user_chosen_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    is_phone_verified_ = false;
    two_factor_state_ = 0u;
    is_phone_identifying_ = false;
    is_phone_needing_reverify_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientAccountInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string persona_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->persona_name().data(), this->persona_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip_country;
        break;
      }

      // optional string ip_country = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip_country().data(), this->ip_country().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_count_authed_computers;
        break;
      }

      // optional int32 count_authed_computers = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_authed_computers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_authed_computers_)));
          set_has_count_authed_computers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_account_flags;
        break;
      }

      // optional uint32 account_flags = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_flags_)));
          set_has_account_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_facebook_id;
        break;
      }

      // optional uint64 facebook_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_facebook_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &facebook_id_)));
          set_has_facebook_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_facebook_name;
        break;
      }

      // optional string facebook_name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facebook_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_facebook_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->facebook_name().data(), this->facebook_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_steamguard_notify_newmachines;
        break;
      }

      // optional bool steamguard_notify_newmachines = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_steamguard_notify_newmachines:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &steamguard_notify_newmachines_)));
          set_has_steamguard_notify_newmachines();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_steamguard_machine_name_user_chosen;
        break;
      }

      // optional string steamguard_machine_name_user_chosen = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_steamguard_machine_name_user_chosen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_steamguard_machine_name_user_chosen()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->steamguard_machine_name_user_chosen().data(), this->steamguard_machine_name_user_chosen().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_is_phone_verified;
        break;
      }

      // optional bool is_phone_verified = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_phone_verified:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_phone_verified_)));
          set_has_is_phone_verified();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_two_factor_state;
        break;
      }

      // optional uint32 two_factor_state = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_two_factor_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &two_factor_state_)));
          set_has_two_factor_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_is_phone_identifying;
        break;
      }

      // optional bool is_phone_identifying = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_phone_identifying:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_phone_identifying_)));
          set_has_is_phone_identifying();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_is_phone_needing_reverify;
        break;
      }

      // optional bool is_phone_needing_reverify = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_phone_needing_reverify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_phone_needing_reverify_)));
          set_has_is_phone_needing_reverify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientAccountInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string persona_name = 1;
  if (has_persona_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->persona_name(), output);
  }

  // optional string ip_country = 2;
  if (has_ip_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip_country().data(), this->ip_country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip_country(), output);
  }

  // optional int32 count_authed_computers = 5;
  if (has_count_authed_computers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->count_authed_computers(), output);
  }

  // optional uint32 account_flags = 7;
  if (has_account_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->account_flags(), output);
  }

  // optional uint64 facebook_id = 8;
  if (has_facebook_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->facebook_id(), output);
  }

  // optional string facebook_name = 9;
  if (has_facebook_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->facebook_name().data(), this->facebook_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->facebook_name(), output);
  }

  // optional bool steamguard_notify_newmachines = 14;
  if (has_steamguard_notify_newmachines()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->steamguard_notify_newmachines(), output);
  }

  // optional string steamguard_machine_name_user_chosen = 15;
  if (has_steamguard_machine_name_user_chosen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->steamguard_machine_name_user_chosen().data(), this->steamguard_machine_name_user_chosen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->steamguard_machine_name_user_chosen(), output);
  }

  // optional bool is_phone_verified = 16;
  if (has_is_phone_verified()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->is_phone_verified(), output);
  }

  // optional uint32 two_factor_state = 17;
  if (has_two_factor_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->two_factor_state(), output);
  }

  // optional bool is_phone_identifying = 18;
  if (has_is_phone_identifying()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->is_phone_identifying(), output);
  }

  // optional bool is_phone_needing_reverify = 19;
  if (has_is_phone_needing_reverify()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->is_phone_needing_reverify(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientAccountInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string persona_name = 1;
  if (has_persona_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->persona_name(), target);
  }

  // optional string ip_country = 2;
  if (has_ip_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip_country().data(), this->ip_country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip_country(), target);
  }

  // optional int32 count_authed_computers = 5;
  if (has_count_authed_computers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->count_authed_computers(), target);
  }

  // optional uint32 account_flags = 7;
  if (has_account_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->account_flags(), target);
  }

  // optional uint64 facebook_id = 8;
  if (has_facebook_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->facebook_id(), target);
  }

  // optional string facebook_name = 9;
  if (has_facebook_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->facebook_name().data(), this->facebook_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->facebook_name(), target);
  }

  // optional bool steamguard_notify_newmachines = 14;
  if (has_steamguard_notify_newmachines()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->steamguard_notify_newmachines(), target);
  }

  // optional string steamguard_machine_name_user_chosen = 15;
  if (has_steamguard_machine_name_user_chosen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->steamguard_machine_name_user_chosen().data(), this->steamguard_machine_name_user_chosen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->steamguard_machine_name_user_chosen(), target);
  }

  // optional bool is_phone_verified = 16;
  if (has_is_phone_verified()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->is_phone_verified(), target);
  }

  // optional uint32 two_factor_state = 17;
  if (has_two_factor_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->two_factor_state(), target);
  }

  // optional bool is_phone_identifying = 18;
  if (has_is_phone_identifying()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->is_phone_identifying(), target);
  }

  // optional bool is_phone_needing_reverify = 19;
  if (has_is_phone_needing_reverify()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->is_phone_needing_reverify(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientAccountInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string persona_name = 1;
    if (has_persona_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional string ip_country = 2;
    if (has_ip_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip_country());
    }

    // optional int32 count_authed_computers = 5;
    if (has_count_authed_computers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_authed_computers());
    }

    // optional uint32 account_flags = 7;
    if (has_account_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_flags());
    }

    // optional uint64 facebook_id = 8;
    if (has_facebook_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->facebook_id());
    }

    // optional string facebook_name = 9;
    if (has_facebook_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->facebook_name());
    }

    // optional bool steamguard_notify_newmachines = 14;
    if (has_steamguard_notify_newmachines()) {
      total_size += 1 + 1;
    }

    // optional string steamguard_machine_name_user_chosen = 15;
    if (has_steamguard_machine_name_user_chosen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->steamguard_machine_name_user_chosen());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool is_phone_verified = 16;
    if (has_is_phone_verified()) {
      total_size += 2 + 1;
    }

    // optional uint32 two_factor_state = 17;
    if (has_two_factor_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->two_factor_state());
    }

    // optional bool is_phone_identifying = 18;
    if (has_is_phone_identifying()) {
      total_size += 2 + 1;
    }

    // optional bool is_phone_needing_reverify = 19;
    if (has_is_phone_needing_reverify()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAccountInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientAccountInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientAccountInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientAccountInfo::MergeFrom(const CMsgClientAccountInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_persona_name()) {
      set_persona_name(from.persona_name());
    }
    if (from.has_ip_country()) {
      set_ip_country(from.ip_country());
    }
    if (from.has_count_authed_computers()) {
      set_count_authed_computers(from.count_authed_computers());
    }
    if (from.has_account_flags()) {
      set_account_flags(from.account_flags());
    }
    if (from.has_facebook_id()) {
      set_facebook_id(from.facebook_id());
    }
    if (from.has_facebook_name()) {
      set_facebook_name(from.facebook_name());
    }
    if (from.has_steamguard_notify_newmachines()) {
      set_steamguard_notify_newmachines(from.steamguard_notify_newmachines());
    }
    if (from.has_steamguard_machine_name_user_chosen()) {
      set_steamguard_machine_name_user_chosen(from.steamguard_machine_name_user_chosen());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_phone_verified()) {
      set_is_phone_verified(from.is_phone_verified());
    }
    if (from.has_two_factor_state()) {
      set_two_factor_state(from.two_factor_state());
    }
    if (from.has_is_phone_identifying()) {
      set_is_phone_identifying(from.is_phone_identifying());
    }
    if (from.has_is_phone_needing_reverify()) {
      set_is_phone_needing_reverify(from.is_phone_needing_reverify());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientAccountInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAccountInfo::CopyFrom(const CMsgClientAccountInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAccountInfo::IsInitialized() const {

  return true;
}

void CMsgClientAccountInfo::Swap(CMsgClientAccountInfo* other) {
  if (other != this) {
    std::swap(persona_name_, other->persona_name_);
    std::swap(ip_country_, other->ip_country_);
    std::swap(count_authed_computers_, other->count_authed_computers_);
    std::swap(account_flags_, other->account_flags_);
    std::swap(facebook_id_, other->facebook_id_);
    std::swap(facebook_name_, other->facebook_name_);
    std::swap(steamguard_notify_newmachines_, other->steamguard_notify_newmachines_);
    std::swap(steamguard_machine_name_user_chosen_, other->steamguard_machine_name_user_chosen_);
    std::swap(is_phone_verified_, other->is_phone_verified_);
    std::swap(two_factor_state_, other->two_factor_state_);
    std::swap(is_phone_identifying_, other->is_phone_identifying_);
    std::swap(is_phone_needing_reverify_, other->is_phone_needing_reverify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientAccountInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientAccountInfo_descriptor_;
  metadata.reflection = CMsgClientAccountInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientChallengeRequest::kSteamidFieldNumber;
#endif  // !_MSC_VER

CMsgClientChallengeRequest::CMsgClientChallengeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientChallengeRequest::InitAsDefaultInstance() {
}

CMsgClientChallengeRequest::CMsgClientChallengeRequest(const CMsgClientChallengeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientChallengeRequest::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientChallengeRequest::~CMsgClientChallengeRequest() {
  SharedDtor();
}

void CMsgClientChallengeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientChallengeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientChallengeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientChallengeRequest_descriptor_;
}

const CMsgClientChallengeRequest& CMsgClientChallengeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5flogin_2eproto();
  return *default_instance_;
}

CMsgClientChallengeRequest* CMsgClientChallengeRequest::default_instance_ = NULL;

CMsgClientChallengeRequest* CMsgClientChallengeRequest::New() const {
  return new CMsgClientChallengeRequest;
}

void CMsgClientChallengeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientChallengeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientChallengeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientChallengeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientChallengeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientChallengeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientChallengeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientChallengeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientChallengeRequest::MergeFrom(const CMsgClientChallengeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientChallengeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientChallengeRequest::CopyFrom(const CMsgClientChallengeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientChallengeRequest::IsInitialized() const {

  return true;
}

void CMsgClientChallengeRequest::Swap(CMsgClientChallengeRequest* other) {
  if (other != this) {
    std::swap(steamid_, other->steamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientChallengeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientChallengeRequest_descriptor_;
  metadata.reflection = CMsgClientChallengeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientChallengeResponse::kChallengeFieldNumber;
#endif  // !_MSC_VER

CMsgClientChallengeResponse::CMsgClientChallengeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientChallengeResponse::InitAsDefaultInstance() {
}

CMsgClientChallengeResponse::CMsgClientChallengeResponse(const CMsgClientChallengeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientChallengeResponse::SharedCtor() {
  _cached_size_ = 0;
  challenge_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientChallengeResponse::~CMsgClientChallengeResponse() {
  SharedDtor();
}

void CMsgClientChallengeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientChallengeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientChallengeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientChallengeResponse_descriptor_;
}

const CMsgClientChallengeResponse& CMsgClientChallengeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_5flogin_2eproto();
  return *default_instance_;
}

CMsgClientChallengeResponse* CMsgClientChallengeResponse::default_instance_ = NULL;

CMsgClientChallengeResponse* CMsgClientChallengeResponse::New() const {
  return new CMsgClientChallengeResponse;
}

void CMsgClientChallengeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    challenge_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientChallengeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 challenge = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &challenge_)));
          set_has_challenge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientChallengeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 challenge = 1;
  if (has_challenge()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->challenge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientChallengeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 challenge = 1;
  if (has_challenge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->challenge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientChallengeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 challenge = 1;
    if (has_challenge()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientChallengeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientChallengeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientChallengeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientChallengeResponse::MergeFrom(const CMsgClientChallengeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_challenge()) {
      set_challenge(from.challenge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientChallengeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientChallengeResponse::CopyFrom(const CMsgClientChallengeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientChallengeResponse::IsInitialized() const {

  return true;
}

void CMsgClientChallengeResponse::Swap(CMsgClientChallengeResponse* other) {
  if (other != this) {
    std::swap(challenge_, other->challenge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientChallengeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientChallengeResponse_descriptor_;
  metadata.reflection = CMsgClientChallengeResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

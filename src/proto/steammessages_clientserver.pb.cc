// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientserver.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_clientserver.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgClientRegisterAuthTicketWithCM_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientRegisterAuthTicketWithCM_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientTicketAuthComplete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientTicketAuthComplete_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientCMList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientCMList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientP2PConnectionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientP2PConnectionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientP2PConnectionFailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientP2PConnectionFailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientNetworkingCertRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientNetworkingCertRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientNetworkingCertReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientNetworkingCertReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientNetworkingMobileCertRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientNetworkingMobileCertRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientNetworkingMobileCertReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientNetworkingMobileCertReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientGetAppOwnershipTicket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientGetAppOwnershipTicket_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientGetAppOwnershipTicketResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientGetAppOwnershipTicketResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientSessionToken_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientSessionToken_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientGameConnectTokens_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientGameConnectTokens_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientGamesPlayed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientGamesPlayed_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientGamesPlayed_GamePlayed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientGamesPlayed_GamePlayed_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGSApprove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGSApprove_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGSDeny_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGSDeny_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgGSKick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgGSKick_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientAuthList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientAuthList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientAuthListAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientAuthListAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientLicenseList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientLicenseList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientLicenseList_License_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientLicenseList_License_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientIsLimitedAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientIsLimitedAccount_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientRequestedClientStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientRequestedClientStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientRequestedClientStats_StatsToSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientRequestedClientStats_StatsToSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientStat2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientStat2_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientStat2_StatDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientStat2_StatDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientInviteToGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientInviteToGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientChatInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientChatInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientConnectionStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientConnectionStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientConnectionStats_Stats_Logon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientConnectionStats_Stats_Logon_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientConnectionStats_Stats_UDP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientConnectionStats_Stats_UDP_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientConnectionStats_Stats_VConn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientConnectionStats_Stats_VConn_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientServersAvailable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientServersAvailable_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientServersAvailable_Server_Types_Available_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientServersAvailable_Server_Types_Available_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientReportOverlayDetourFailure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientReportOverlayDetourFailure_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientRequestEncryptedAppTicket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientRequestEncryptedAppTicket_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientRequestEncryptedAppTicketResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientRequestEncryptedAppTicketResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientWalletInfoUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientWalletInfoUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientAMGetClanOfficers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientAMGetClanOfficers_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientAMGetClanOfficersResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientAMGetClanOfficersResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientAMGetPersonaNameHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientAMGetPersonaNameHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientAMGetPersonaNameHistory_IdInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientAMGetPersonaNameHistory_IdInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientAMGetPersonaNameHistoryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientAMGetPersonaNameHistoryResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientDeregisterWithServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientDeregisterWithServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientClanState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientClanState_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientClanState_NameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientClanState_NameInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientClanState_UserCounts_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientClanState_UserCounts_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientClanState_Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientClanState_Event_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_steammessages_5fclientserver_2eproto() {
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "steammessages_clientserver.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgClientRegisterAuthTicketWithCM_descriptor_ = file->message_type(0);
  static const int CMsgClientRegisterAuthTicketWithCM_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRegisterAuthTicketWithCM, protocol_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRegisterAuthTicketWithCM, ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRegisterAuthTicketWithCM, client_instance_id_),
  };
  CMsgClientRegisterAuthTicketWithCM_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientRegisterAuthTicketWithCM_descriptor_,
      CMsgClientRegisterAuthTicketWithCM::default_instance_,
      CMsgClientRegisterAuthTicketWithCM_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRegisterAuthTicketWithCM, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRegisterAuthTicketWithCM, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientRegisterAuthTicketWithCM));
  CMsgClientTicketAuthComplete_descriptor_ = file->message_type(1);
  static const int CMsgClientTicketAuthComplete_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientTicketAuthComplete, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientTicketAuthComplete, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientTicketAuthComplete, estate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientTicketAuthComplete, eauth_session_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientTicketAuthComplete, deprecated_ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientTicketAuthComplete, ticket_crc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientTicketAuthComplete, ticket_sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientTicketAuthComplete, owner_steam_id_),
  };
  CMsgClientTicketAuthComplete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientTicketAuthComplete_descriptor_,
      CMsgClientTicketAuthComplete::default_instance_,
      CMsgClientTicketAuthComplete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientTicketAuthComplete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientTicketAuthComplete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientTicketAuthComplete));
  CMsgClientCMList_descriptor_ = file->message_type(2);
  static const int CMsgClientCMList_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCMList, cm_addresses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCMList, cm_ports_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCMList, cm_websocket_addresses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCMList, percent_default_to_websocket_),
  };
  CMsgClientCMList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientCMList_descriptor_,
      CMsgClientCMList::default_instance_,
      CMsgClientCMList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCMList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientCMList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientCMList));
  CMsgClientP2PConnectionInfo_descriptor_ = file->message_type(3);
  static const int CMsgClientP2PConnectionInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientP2PConnectionInfo, steam_id_dest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientP2PConnectionInfo, steam_id_src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientP2PConnectionInfo, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientP2PConnectionInfo, candidate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientP2PConnectionInfo, legacy_connection_id_src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientP2PConnectionInfo, rendezvous_),
  };
  CMsgClientP2PConnectionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientP2PConnectionInfo_descriptor_,
      CMsgClientP2PConnectionInfo::default_instance_,
      CMsgClientP2PConnectionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientP2PConnectionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientP2PConnectionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientP2PConnectionInfo));
  CMsgClientP2PConnectionFailInfo_descriptor_ = file->message_type(4);
  static const int CMsgClientP2PConnectionFailInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientP2PConnectionFailInfo, steam_id_dest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientP2PConnectionFailInfo, steam_id_src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientP2PConnectionFailInfo, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientP2PConnectionFailInfo, ep2p_session_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientP2PConnectionFailInfo, connection_id_dest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientP2PConnectionFailInfo, close_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientP2PConnectionFailInfo, close_message_),
  };
  CMsgClientP2PConnectionFailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientP2PConnectionFailInfo_descriptor_,
      CMsgClientP2PConnectionFailInfo::default_instance_,
      CMsgClientP2PConnectionFailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientP2PConnectionFailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientP2PConnectionFailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientP2PConnectionFailInfo));
  CMsgClientNetworkingCertRequest_descriptor_ = file->message_type(5);
  static const int CMsgClientNetworkingCertRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientNetworkingCertRequest, key_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientNetworkingCertRequest, app_id_),
  };
  CMsgClientNetworkingCertRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientNetworkingCertRequest_descriptor_,
      CMsgClientNetworkingCertRequest::default_instance_,
      CMsgClientNetworkingCertRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientNetworkingCertRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientNetworkingCertRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientNetworkingCertRequest));
  CMsgClientNetworkingCertReply_descriptor_ = file->message_type(6);
  static const int CMsgClientNetworkingCertReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientNetworkingCertReply, cert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientNetworkingCertReply, ca_key_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientNetworkingCertReply, ca_signature_),
  };
  CMsgClientNetworkingCertReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientNetworkingCertReply_descriptor_,
      CMsgClientNetworkingCertReply::default_instance_,
      CMsgClientNetworkingCertReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientNetworkingCertReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientNetworkingCertReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientNetworkingCertReply));
  CMsgClientNetworkingMobileCertRequest_descriptor_ = file->message_type(7);
  static const int CMsgClientNetworkingMobileCertRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientNetworkingMobileCertRequest, app_id_),
  };
  CMsgClientNetworkingMobileCertRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientNetworkingMobileCertRequest_descriptor_,
      CMsgClientNetworkingMobileCertRequest::default_instance_,
      CMsgClientNetworkingMobileCertRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientNetworkingMobileCertRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientNetworkingMobileCertRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientNetworkingMobileCertRequest));
  CMsgClientNetworkingMobileCertReply_descriptor_ = file->message_type(8);
  static const int CMsgClientNetworkingMobileCertReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientNetworkingMobileCertReply, encoded_cert_),
  };
  CMsgClientNetworkingMobileCertReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientNetworkingMobileCertReply_descriptor_,
      CMsgClientNetworkingMobileCertReply::default_instance_,
      CMsgClientNetworkingMobileCertReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientNetworkingMobileCertReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientNetworkingMobileCertReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientNetworkingMobileCertReply));
  CMsgClientGetAppOwnershipTicket_descriptor_ = file->message_type(9);
  static const int CMsgClientGetAppOwnershipTicket_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetAppOwnershipTicket, app_id_),
  };
  CMsgClientGetAppOwnershipTicket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientGetAppOwnershipTicket_descriptor_,
      CMsgClientGetAppOwnershipTicket::default_instance_,
      CMsgClientGetAppOwnershipTicket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetAppOwnershipTicket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetAppOwnershipTicket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientGetAppOwnershipTicket));
  CMsgClientGetAppOwnershipTicketResponse_descriptor_ = file->message_type(10);
  static const int CMsgClientGetAppOwnershipTicketResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetAppOwnershipTicketResponse, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetAppOwnershipTicketResponse, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetAppOwnershipTicketResponse, ticket_),
  };
  CMsgClientGetAppOwnershipTicketResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientGetAppOwnershipTicketResponse_descriptor_,
      CMsgClientGetAppOwnershipTicketResponse::default_instance_,
      CMsgClientGetAppOwnershipTicketResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetAppOwnershipTicketResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGetAppOwnershipTicketResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientGetAppOwnershipTicketResponse));
  CMsgClientSessionToken_descriptor_ = file->message_type(11);
  static const int CMsgClientSessionToken_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSessionToken, token_),
  };
  CMsgClientSessionToken_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientSessionToken_descriptor_,
      CMsgClientSessionToken::default_instance_,
      CMsgClientSessionToken_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSessionToken, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientSessionToken, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientSessionToken));
  CMsgClientGameConnectTokens_descriptor_ = file->message_type(12);
  static const int CMsgClientGameConnectTokens_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGameConnectTokens, max_tokens_to_keep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGameConnectTokens, tokens_),
  };
  CMsgClientGameConnectTokens_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientGameConnectTokens_descriptor_,
      CMsgClientGameConnectTokens::default_instance_,
      CMsgClientGameConnectTokens_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGameConnectTokens, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGameConnectTokens, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientGameConnectTokens));
  CMsgClientGamesPlayed_descriptor_ = file->message_type(13);
  static const int CMsgClientGamesPlayed_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed, games_played_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed, client_os_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed, cloud_gaming_platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed, recent_reauthentication_),
  };
  CMsgClientGamesPlayed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientGamesPlayed_descriptor_,
      CMsgClientGamesPlayed::default_instance_,
      CMsgClientGamesPlayed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientGamesPlayed));
  CMsgClientGamesPlayed_GamePlayed_descriptor_ = CMsgClientGamesPlayed_descriptor_->nested_type(0);
  static const int CMsgClientGamesPlayed_GamePlayed_offsets_[31] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, steam_id_gs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, deprecated_game_ip_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, game_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, is_secure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, game_extra_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, game_data_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, process_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, streaming_provider_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, game_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, owner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, vr_hmd_vendor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, vr_hmd_model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, launch_option_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, primary_controller_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, primary_steam_controller_serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, total_steam_controller_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, total_non_steam_controller_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, controller_workshop_file_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, launch_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, vr_hmd_runtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, game_ip_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, controller_connection_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, game_os_platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, game_build_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, compat_tool_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, compat_tool_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, compat_tool_build_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, beta_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, dlc_context_),
  };
  CMsgClientGamesPlayed_GamePlayed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientGamesPlayed_GamePlayed_descriptor_,
      CMsgClientGamesPlayed_GamePlayed::default_instance_,
      CMsgClientGamesPlayed_GamePlayed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientGamesPlayed_GamePlayed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientGamesPlayed_GamePlayed));
  CMsgGSApprove_descriptor_ = file->message_type(14);
  static const int CMsgGSApprove_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSApprove, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSApprove, owner_steam_id_),
  };
  CMsgGSApprove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGSApprove_descriptor_,
      CMsgGSApprove::default_instance_,
      CMsgGSApprove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSApprove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSApprove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGSApprove));
  CMsgGSDeny_descriptor_ = file->message_type(15);
  static const int CMsgGSDeny_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSDeny, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSDeny, edeny_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSDeny, deny_string_),
  };
  CMsgGSDeny_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGSDeny_descriptor_,
      CMsgGSDeny::default_instance_,
      CMsgGSDeny_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSDeny, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSDeny, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGSDeny));
  CMsgGSKick_descriptor_ = file->message_type(16);
  static const int CMsgGSKick_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSKick, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSKick, edeny_reason_),
  };
  CMsgGSKick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgGSKick_descriptor_,
      CMsgGSKick::default_instance_,
      CMsgGSKick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSKick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGSKick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgGSKick));
  CMsgClientAuthList_descriptor_ = file->message_type(17);
  static const int CMsgClientAuthList_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAuthList, tokens_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAuthList, last_request_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAuthList, last_request_seq_from_server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAuthList, tickets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAuthList, app_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAuthList, message_sequence_),
  };
  CMsgClientAuthList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientAuthList_descriptor_,
      CMsgClientAuthList::default_instance_,
      CMsgClientAuthList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAuthList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAuthList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientAuthList));
  CMsgClientAuthListAck_descriptor_ = file->message_type(18);
  static const int CMsgClientAuthListAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAuthListAck, ticket_crc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAuthListAck, app_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAuthListAck, message_sequence_),
  };
  CMsgClientAuthListAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientAuthListAck_descriptor_,
      CMsgClientAuthListAck::default_instance_,
      CMsgClientAuthListAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAuthListAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAuthListAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientAuthListAck));
  CMsgClientLicenseList_descriptor_ = file->message_type(19);
  static const int CMsgClientLicenseList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList, licenses_),
  };
  CMsgClientLicenseList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientLicenseList_descriptor_,
      CMsgClientLicenseList::default_instance_,
      CMsgClientLicenseList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientLicenseList));
  CMsgClientLicenseList_License_descriptor_ = CMsgClientLicenseList_descriptor_->nested_type(0);
  static const int CMsgClientLicenseList_License_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList_License, package_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList_License, time_created_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList_License, time_next_process_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList_License, minute_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList_License, minutes_used_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList_License, payment_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList_License, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList_License, purchase_country_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList_License, license_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList_License, territory_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList_License, change_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList_License, owner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList_License, initial_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList_License, initial_time_unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList_License, renewal_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList_License, renewal_time_unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList_License, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList_License, master_package_id_),
  };
  CMsgClientLicenseList_License_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientLicenseList_License_descriptor_,
      CMsgClientLicenseList_License::default_instance_,
      CMsgClientLicenseList_License_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList_License, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLicenseList_License, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientLicenseList_License));
  CMsgClientIsLimitedAccount_descriptor_ = file->message_type(20);
  static const int CMsgClientIsLimitedAccount_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientIsLimitedAccount, bis_limited_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientIsLimitedAccount, bis_community_banned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientIsLimitedAccount, bis_locked_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientIsLimitedAccount, bis_limited_account_allowed_to_invite_friends_),
  };
  CMsgClientIsLimitedAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientIsLimitedAccount_descriptor_,
      CMsgClientIsLimitedAccount::default_instance_,
      CMsgClientIsLimitedAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientIsLimitedAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientIsLimitedAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientIsLimitedAccount));
  CMsgClientRequestedClientStats_descriptor_ = file->message_type(21);
  static const int CMsgClientRequestedClientStats_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestedClientStats, stats_to_send_),
  };
  CMsgClientRequestedClientStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientRequestedClientStats_descriptor_,
      CMsgClientRequestedClientStats::default_instance_,
      CMsgClientRequestedClientStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestedClientStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestedClientStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientRequestedClientStats));
  CMsgClientRequestedClientStats_StatsToSend_descriptor_ = CMsgClientRequestedClientStats_descriptor_->nested_type(0);
  static const int CMsgClientRequestedClientStats_StatsToSend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestedClientStats_StatsToSend, client_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestedClientStats_StatsToSend, stat_aggregate_method_),
  };
  CMsgClientRequestedClientStats_StatsToSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientRequestedClientStats_StatsToSend_descriptor_,
      CMsgClientRequestedClientStats_StatsToSend::default_instance_,
      CMsgClientRequestedClientStats_StatsToSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestedClientStats_StatsToSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestedClientStats_StatsToSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientRequestedClientStats_StatsToSend));
  CMsgClientStat2_descriptor_ = file->message_type(22);
  static const int CMsgClientStat2_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStat2, stat_detail_),
  };
  CMsgClientStat2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientStat2_descriptor_,
      CMsgClientStat2::default_instance_,
      CMsgClientStat2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStat2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStat2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientStat2));
  CMsgClientStat2_StatDetail_descriptor_ = CMsgClientStat2_descriptor_->nested_type(0);
  static const int CMsgClientStat2_StatDetail_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStat2_StatDetail, client_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStat2_StatDetail, ll_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStat2_StatDetail, time_of_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStat2_StatDetail, cell_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStat2_StatDetail, depot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStat2_StatDetail, app_id_),
  };
  CMsgClientStat2_StatDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientStat2_StatDetail_descriptor_,
      CMsgClientStat2_StatDetail::default_instance_,
      CMsgClientStat2_StatDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStat2_StatDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientStat2_StatDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientStat2_StatDetail));
  CMsgClientInviteToGame_descriptor_ = file->message_type(23);
  static const int CMsgClientInviteToGame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientInviteToGame, steam_id_dest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientInviteToGame, steam_id_src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientInviteToGame, connect_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientInviteToGame, remote_play_),
  };
  CMsgClientInviteToGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientInviteToGame_descriptor_,
      CMsgClientInviteToGame::default_instance_,
      CMsgClientInviteToGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientInviteToGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientInviteToGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientInviteToGame));
  CMsgClientChatInvite_descriptor_ = file->message_type(24);
  static const int CMsgClientChatInvite_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChatInvite, steam_id_invited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChatInvite, steam_id_chat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChatInvite, steam_id_patron_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChatInvite, chatroom_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChatInvite, steam_id_friend_chat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChatInvite, chat_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChatInvite, game_id_),
  };
  CMsgClientChatInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientChatInvite_descriptor_,
      CMsgClientChatInvite::default_instance_,
      CMsgClientChatInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChatInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientChatInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientChatInvite));
  CMsgClientConnectionStats_descriptor_ = file->message_type(25);
  static const int CMsgClientConnectionStats_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats, stats_logon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats, stats_vconn_),
  };
  CMsgClientConnectionStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientConnectionStats_descriptor_,
      CMsgClientConnectionStats::default_instance_,
      CMsgClientConnectionStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientConnectionStats));
  CMsgClientConnectionStats_Stats_Logon_descriptor_ = CMsgClientConnectionStats_descriptor_->nested_type(0);
  static const int CMsgClientConnectionStats_Stats_Logon_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_Logon, connect_attempts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_Logon, connect_successes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_Logon, connect_failures_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_Logon, connections_dropped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_Logon, seconds_running_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_Logon, msec_tologonthistime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_Logon, count_bad_cms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_Logon, no_udp_connectivity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_Logon, no_tcp_connectivity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_Logon, no_websocket_443_connectivity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_Logon, no_websocket_non_443_connectivity_),
  };
  CMsgClientConnectionStats_Stats_Logon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientConnectionStats_Stats_Logon_descriptor_,
      CMsgClientConnectionStats_Stats_Logon::default_instance_,
      CMsgClientConnectionStats_Stats_Logon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_Logon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_Logon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientConnectionStats_Stats_Logon));
  CMsgClientConnectionStats_Stats_UDP_descriptor_ = CMsgClientConnectionStats_descriptor_->nested_type(1);
  static const int CMsgClientConnectionStats_Stats_UDP_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_UDP, pkts_sent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_UDP, bytes_sent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_UDP, pkts_recv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_UDP, pkts_processed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_UDP, bytes_recv_),
  };
  CMsgClientConnectionStats_Stats_UDP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientConnectionStats_Stats_UDP_descriptor_,
      CMsgClientConnectionStats_Stats_UDP::default_instance_,
      CMsgClientConnectionStats_Stats_UDP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_UDP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_UDP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientConnectionStats_Stats_UDP));
  CMsgClientConnectionStats_Stats_VConn_descriptor_ = CMsgClientConnectionStats_descriptor_->nested_type(2);
  static const int CMsgClientConnectionStats_Stats_VConn_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, connections_udp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, connections_tcp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, stats_udp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, pkts_abandoned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, conn_req_received_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, pkts_resent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, msgs_sent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, msgs_sent_failed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, msgs_recv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, datagrams_sent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, datagrams_recv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, bad_pkts_recv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, unknown_conn_pkts_recv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, missed_pkts_recv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, dup_pkts_recv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, failed_connect_challenges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, micro_sec_avg_latency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, micro_sec_min_latency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, micro_sec_max_latency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, mem_pool_msg_in_use_),
  };
  CMsgClientConnectionStats_Stats_VConn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientConnectionStats_Stats_VConn_descriptor_,
      CMsgClientConnectionStats_Stats_VConn::default_instance_,
      CMsgClientConnectionStats_Stats_VConn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientConnectionStats_Stats_VConn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientConnectionStats_Stats_VConn));
  CMsgClientServersAvailable_descriptor_ = file->message_type(26);
  static const int CMsgClientServersAvailable_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServersAvailable, server_types_available_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServersAvailable, server_type_for_auth_services_),
  };
  CMsgClientServersAvailable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientServersAvailable_descriptor_,
      CMsgClientServersAvailable::default_instance_,
      CMsgClientServersAvailable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServersAvailable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServersAvailable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientServersAvailable));
  CMsgClientServersAvailable_Server_Types_Available_descriptor_ = CMsgClientServersAvailable_descriptor_->nested_type(0);
  static const int CMsgClientServersAvailable_Server_Types_Available_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServersAvailable_Server_Types_Available, server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServersAvailable_Server_Types_Available, changed_),
  };
  CMsgClientServersAvailable_Server_Types_Available_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientServersAvailable_Server_Types_Available_descriptor_,
      CMsgClientServersAvailable_Server_Types_Available::default_instance_,
      CMsgClientServersAvailable_Server_Types_Available_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServersAvailable_Server_Types_Available, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientServersAvailable_Server_Types_Available, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientServersAvailable_Server_Types_Available));
  CMsgClientReportOverlayDetourFailure_descriptor_ = file->message_type(27);
  static const int CMsgClientReportOverlayDetourFailure_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientReportOverlayDetourFailure, failure_strings_),
  };
  CMsgClientReportOverlayDetourFailure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientReportOverlayDetourFailure_descriptor_,
      CMsgClientReportOverlayDetourFailure::default_instance_,
      CMsgClientReportOverlayDetourFailure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientReportOverlayDetourFailure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientReportOverlayDetourFailure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientReportOverlayDetourFailure));
  CMsgClientRequestEncryptedAppTicket_descriptor_ = file->message_type(28);
  static const int CMsgClientRequestEncryptedAppTicket_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestEncryptedAppTicket, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestEncryptedAppTicket, userdata_),
  };
  CMsgClientRequestEncryptedAppTicket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientRequestEncryptedAppTicket_descriptor_,
      CMsgClientRequestEncryptedAppTicket::default_instance_,
      CMsgClientRequestEncryptedAppTicket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestEncryptedAppTicket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestEncryptedAppTicket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientRequestEncryptedAppTicket));
  CMsgClientRequestEncryptedAppTicketResponse_descriptor_ = file->message_type(29);
  static const int CMsgClientRequestEncryptedAppTicketResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestEncryptedAppTicketResponse, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestEncryptedAppTicketResponse, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestEncryptedAppTicketResponse, encrypted_app_ticket_),
  };
  CMsgClientRequestEncryptedAppTicketResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientRequestEncryptedAppTicketResponse_descriptor_,
      CMsgClientRequestEncryptedAppTicketResponse::default_instance_,
      CMsgClientRequestEncryptedAppTicketResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestEncryptedAppTicketResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientRequestEncryptedAppTicketResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientRequestEncryptedAppTicketResponse));
  CMsgClientWalletInfoUpdate_descriptor_ = file->message_type(30);
  static const int CMsgClientWalletInfoUpdate_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWalletInfoUpdate, has_wallet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWalletInfoUpdate, balance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWalletInfoUpdate, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWalletInfoUpdate, balance_delayed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWalletInfoUpdate, balance64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWalletInfoUpdate, balance64_delayed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWalletInfoUpdate, realm_),
  };
  CMsgClientWalletInfoUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientWalletInfoUpdate_descriptor_,
      CMsgClientWalletInfoUpdate::default_instance_,
      CMsgClientWalletInfoUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWalletInfoUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientWalletInfoUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientWalletInfoUpdate));
  CMsgClientAMGetClanOfficers_descriptor_ = file->message_type(31);
  static const int CMsgClientAMGetClanOfficers_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetClanOfficers, steamid_clan_),
  };
  CMsgClientAMGetClanOfficers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientAMGetClanOfficers_descriptor_,
      CMsgClientAMGetClanOfficers::default_instance_,
      CMsgClientAMGetClanOfficers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetClanOfficers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetClanOfficers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientAMGetClanOfficers));
  CMsgClientAMGetClanOfficersResponse_descriptor_ = file->message_type(32);
  static const int CMsgClientAMGetClanOfficersResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetClanOfficersResponse, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetClanOfficersResponse, steamid_clan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetClanOfficersResponse, officer_count_),
  };
  CMsgClientAMGetClanOfficersResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientAMGetClanOfficersResponse_descriptor_,
      CMsgClientAMGetClanOfficersResponse::default_instance_,
      CMsgClientAMGetClanOfficersResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetClanOfficersResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetClanOfficersResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientAMGetClanOfficersResponse));
  CMsgClientAMGetPersonaNameHistory_descriptor_ = file->message_type(33);
  static const int CMsgClientAMGetPersonaNameHistory_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetPersonaNameHistory, id_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetPersonaNameHistory, ids_),
  };
  CMsgClientAMGetPersonaNameHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientAMGetPersonaNameHistory_descriptor_,
      CMsgClientAMGetPersonaNameHistory::default_instance_,
      CMsgClientAMGetPersonaNameHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetPersonaNameHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetPersonaNameHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientAMGetPersonaNameHistory));
  CMsgClientAMGetPersonaNameHistory_IdInstance_descriptor_ = CMsgClientAMGetPersonaNameHistory_descriptor_->nested_type(0);
  static const int CMsgClientAMGetPersonaNameHistory_IdInstance_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetPersonaNameHistory_IdInstance, steamid_),
  };
  CMsgClientAMGetPersonaNameHistory_IdInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientAMGetPersonaNameHistory_IdInstance_descriptor_,
      CMsgClientAMGetPersonaNameHistory_IdInstance::default_instance_,
      CMsgClientAMGetPersonaNameHistory_IdInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetPersonaNameHistory_IdInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetPersonaNameHistory_IdInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientAMGetPersonaNameHistory_IdInstance));
  CMsgClientAMGetPersonaNameHistoryResponse_descriptor_ = file->message_type(34);
  static const int CMsgClientAMGetPersonaNameHistoryResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetPersonaNameHistoryResponse, responses_),
  };
  CMsgClientAMGetPersonaNameHistoryResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientAMGetPersonaNameHistoryResponse_descriptor_,
      CMsgClientAMGetPersonaNameHistoryResponse::default_instance_,
      CMsgClientAMGetPersonaNameHistoryResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetPersonaNameHistoryResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetPersonaNameHistoryResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientAMGetPersonaNameHistoryResponse));
  CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_descriptor_ = CMsgClientAMGetPersonaNameHistoryResponse_descriptor_->nested_type(0);
  static const int CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance, steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance, names_),
  };
  CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_descriptor_,
      CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::default_instance_,
      CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance));
  CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance_descriptor_ = CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_descriptor_->nested_type(0);
  static const int CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance, name_since_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance, name_),
  };
  CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance_descriptor_,
      CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::default_instance_,
      CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance));
  CMsgClientDeregisterWithServer_descriptor_ = file->message_type(35);
  static const int CMsgClientDeregisterWithServer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDeregisterWithServer, eservertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDeregisterWithServer, app_id_),
  };
  CMsgClientDeregisterWithServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientDeregisterWithServer_descriptor_,
      CMsgClientDeregisterWithServer::default_instance_,
      CMsgClientDeregisterWithServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDeregisterWithServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientDeregisterWithServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientDeregisterWithServer));
  CMsgClientClanState_descriptor_ = file->message_type(36);
  static const int CMsgClientClanState_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState, steamid_clan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState, clan_account_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState, name_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState, user_counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState, events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState, announcements_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState, chat_room_private_),
  };
  CMsgClientClanState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientClanState_descriptor_,
      CMsgClientClanState::default_instance_,
      CMsgClientClanState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientClanState));
  CMsgClientClanState_NameInfo_descriptor_ = CMsgClientClanState_descriptor_->nested_type(0);
  static const int CMsgClientClanState_NameInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState_NameInfo, clan_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState_NameInfo, sha_avatar_),
  };
  CMsgClientClanState_NameInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientClanState_NameInfo_descriptor_,
      CMsgClientClanState_NameInfo::default_instance_,
      CMsgClientClanState_NameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState_NameInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState_NameInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientClanState_NameInfo));
  CMsgClientClanState_UserCounts_descriptor_ = CMsgClientClanState_descriptor_->nested_type(1);
  static const int CMsgClientClanState_UserCounts_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState_UserCounts, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState_UserCounts, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState_UserCounts, chatting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState_UserCounts, in_game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState_UserCounts, chat_room_members_),
  };
  CMsgClientClanState_UserCounts_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientClanState_UserCounts_descriptor_,
      CMsgClientClanState_UserCounts::default_instance_,
      CMsgClientClanState_UserCounts_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState_UserCounts, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState_UserCounts, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientClanState_UserCounts));
  CMsgClientClanState_Event_descriptor_ = CMsgClientClanState_descriptor_->nested_type(2);
  static const int CMsgClientClanState_Event_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState_Event, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState_Event, event_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState_Event, headline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState_Event, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState_Event, just_posted_),
  };
  CMsgClientClanState_Event_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientClanState_Event_descriptor_,
      CMsgClientClanState_Event::default_instance_,
      CMsgClientClanState_Event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState_Event, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientClanState_Event, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientClanState_Event));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_steammessages_5fclientserver_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientRegisterAuthTicketWithCM_descriptor_, &CMsgClientRegisterAuthTicketWithCM::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientTicketAuthComplete_descriptor_, &CMsgClientTicketAuthComplete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientCMList_descriptor_, &CMsgClientCMList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientP2PConnectionInfo_descriptor_, &CMsgClientP2PConnectionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientP2PConnectionFailInfo_descriptor_, &CMsgClientP2PConnectionFailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientNetworkingCertRequest_descriptor_, &CMsgClientNetworkingCertRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientNetworkingCertReply_descriptor_, &CMsgClientNetworkingCertReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientNetworkingMobileCertRequest_descriptor_, &CMsgClientNetworkingMobileCertRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientNetworkingMobileCertReply_descriptor_, &CMsgClientNetworkingMobileCertReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientGetAppOwnershipTicket_descriptor_, &CMsgClientGetAppOwnershipTicket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientGetAppOwnershipTicketResponse_descriptor_, &CMsgClientGetAppOwnershipTicketResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientSessionToken_descriptor_, &CMsgClientSessionToken::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientGameConnectTokens_descriptor_, &CMsgClientGameConnectTokens::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientGamesPlayed_descriptor_, &CMsgClientGamesPlayed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientGamesPlayed_GamePlayed_descriptor_, &CMsgClientGamesPlayed_GamePlayed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGSApprove_descriptor_, &CMsgGSApprove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGSDeny_descriptor_, &CMsgGSDeny::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgGSKick_descriptor_, &CMsgGSKick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientAuthList_descriptor_, &CMsgClientAuthList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientAuthListAck_descriptor_, &CMsgClientAuthListAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientLicenseList_descriptor_, &CMsgClientLicenseList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientLicenseList_License_descriptor_, &CMsgClientLicenseList_License::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientIsLimitedAccount_descriptor_, &CMsgClientIsLimitedAccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientRequestedClientStats_descriptor_, &CMsgClientRequestedClientStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientRequestedClientStats_StatsToSend_descriptor_, &CMsgClientRequestedClientStats_StatsToSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientStat2_descriptor_, &CMsgClientStat2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientStat2_StatDetail_descriptor_, &CMsgClientStat2_StatDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientInviteToGame_descriptor_, &CMsgClientInviteToGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientChatInvite_descriptor_, &CMsgClientChatInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientConnectionStats_descriptor_, &CMsgClientConnectionStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientConnectionStats_Stats_Logon_descriptor_, &CMsgClientConnectionStats_Stats_Logon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientConnectionStats_Stats_UDP_descriptor_, &CMsgClientConnectionStats_Stats_UDP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientConnectionStats_Stats_VConn_descriptor_, &CMsgClientConnectionStats_Stats_VConn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientServersAvailable_descriptor_, &CMsgClientServersAvailable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientServersAvailable_Server_Types_Available_descriptor_, &CMsgClientServersAvailable_Server_Types_Available::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientReportOverlayDetourFailure_descriptor_, &CMsgClientReportOverlayDetourFailure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientRequestEncryptedAppTicket_descriptor_, &CMsgClientRequestEncryptedAppTicket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientRequestEncryptedAppTicketResponse_descriptor_, &CMsgClientRequestEncryptedAppTicketResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientWalletInfoUpdate_descriptor_, &CMsgClientWalletInfoUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientAMGetClanOfficers_descriptor_, &CMsgClientAMGetClanOfficers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientAMGetClanOfficersResponse_descriptor_, &CMsgClientAMGetClanOfficersResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientAMGetPersonaNameHistory_descriptor_, &CMsgClientAMGetPersonaNameHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientAMGetPersonaNameHistory_IdInstance_descriptor_, &CMsgClientAMGetPersonaNameHistory_IdInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientAMGetPersonaNameHistoryResponse_descriptor_, &CMsgClientAMGetPersonaNameHistoryResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_descriptor_, &CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance_descriptor_, &CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientDeregisterWithServer_descriptor_, &CMsgClientDeregisterWithServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientClanState_descriptor_, &CMsgClientClanState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientClanState_NameInfo_descriptor_, &CMsgClientClanState_NameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientClanState_UserCounts_descriptor_, &CMsgClientClanState_UserCounts::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientClanState_Event_descriptor_, &CMsgClientClanState_Event::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto() {
  delete CMsgClientRegisterAuthTicketWithCM::default_instance_;
  delete CMsgClientRegisterAuthTicketWithCM_reflection_;
  delete CMsgClientTicketAuthComplete::default_instance_;
  delete CMsgClientTicketAuthComplete_reflection_;
  delete CMsgClientCMList::default_instance_;
  delete CMsgClientCMList_reflection_;
  delete CMsgClientP2PConnectionInfo::default_instance_;
  delete CMsgClientP2PConnectionInfo_reflection_;
  delete CMsgClientP2PConnectionFailInfo::default_instance_;
  delete CMsgClientP2PConnectionFailInfo_reflection_;
  delete CMsgClientNetworkingCertRequest::default_instance_;
  delete CMsgClientNetworkingCertRequest_reflection_;
  delete CMsgClientNetworkingCertReply::default_instance_;
  delete CMsgClientNetworkingCertReply_reflection_;
  delete CMsgClientNetworkingMobileCertRequest::default_instance_;
  delete CMsgClientNetworkingMobileCertRequest_reflection_;
  delete CMsgClientNetworkingMobileCertReply::default_instance_;
  delete CMsgClientNetworkingMobileCertReply_reflection_;
  delete CMsgClientGetAppOwnershipTicket::default_instance_;
  delete CMsgClientGetAppOwnershipTicket_reflection_;
  delete CMsgClientGetAppOwnershipTicketResponse::default_instance_;
  delete CMsgClientGetAppOwnershipTicketResponse_reflection_;
  delete CMsgClientSessionToken::default_instance_;
  delete CMsgClientSessionToken_reflection_;
  delete CMsgClientGameConnectTokens::default_instance_;
  delete CMsgClientGameConnectTokens_reflection_;
  delete CMsgClientGamesPlayed::default_instance_;
  delete CMsgClientGamesPlayed_reflection_;
  delete CMsgClientGamesPlayed_GamePlayed::default_instance_;
  delete CMsgClientGamesPlayed_GamePlayed_reflection_;
  delete CMsgGSApprove::default_instance_;
  delete CMsgGSApprove_reflection_;
  delete CMsgGSDeny::default_instance_;
  delete CMsgGSDeny_reflection_;
  delete CMsgGSKick::default_instance_;
  delete CMsgGSKick_reflection_;
  delete CMsgClientAuthList::default_instance_;
  delete CMsgClientAuthList_reflection_;
  delete CMsgClientAuthListAck::default_instance_;
  delete CMsgClientAuthListAck_reflection_;
  delete CMsgClientLicenseList::default_instance_;
  delete CMsgClientLicenseList_reflection_;
  delete CMsgClientLicenseList_License::default_instance_;
  delete CMsgClientLicenseList_License_reflection_;
  delete CMsgClientIsLimitedAccount::default_instance_;
  delete CMsgClientIsLimitedAccount_reflection_;
  delete CMsgClientRequestedClientStats::default_instance_;
  delete CMsgClientRequestedClientStats_reflection_;
  delete CMsgClientRequestedClientStats_StatsToSend::default_instance_;
  delete CMsgClientRequestedClientStats_StatsToSend_reflection_;
  delete CMsgClientStat2::default_instance_;
  delete CMsgClientStat2_reflection_;
  delete CMsgClientStat2_StatDetail::default_instance_;
  delete CMsgClientStat2_StatDetail_reflection_;
  delete CMsgClientInviteToGame::default_instance_;
  delete CMsgClientInviteToGame_reflection_;
  delete CMsgClientChatInvite::default_instance_;
  delete CMsgClientChatInvite_reflection_;
  delete CMsgClientConnectionStats::default_instance_;
  delete CMsgClientConnectionStats_reflection_;
  delete CMsgClientConnectionStats_Stats_Logon::default_instance_;
  delete CMsgClientConnectionStats_Stats_Logon_reflection_;
  delete CMsgClientConnectionStats_Stats_UDP::default_instance_;
  delete CMsgClientConnectionStats_Stats_UDP_reflection_;
  delete CMsgClientConnectionStats_Stats_VConn::default_instance_;
  delete CMsgClientConnectionStats_Stats_VConn_reflection_;
  delete CMsgClientServersAvailable::default_instance_;
  delete CMsgClientServersAvailable_reflection_;
  delete CMsgClientServersAvailable_Server_Types_Available::default_instance_;
  delete CMsgClientServersAvailable_Server_Types_Available_reflection_;
  delete CMsgClientReportOverlayDetourFailure::default_instance_;
  delete CMsgClientReportOverlayDetourFailure_reflection_;
  delete CMsgClientRequestEncryptedAppTicket::default_instance_;
  delete CMsgClientRequestEncryptedAppTicket_reflection_;
  delete CMsgClientRequestEncryptedAppTicketResponse::default_instance_;
  delete CMsgClientRequestEncryptedAppTicketResponse_reflection_;
  delete CMsgClientWalletInfoUpdate::default_instance_;
  delete CMsgClientWalletInfoUpdate_reflection_;
  delete CMsgClientAMGetClanOfficers::default_instance_;
  delete CMsgClientAMGetClanOfficers_reflection_;
  delete CMsgClientAMGetClanOfficersResponse::default_instance_;
  delete CMsgClientAMGetClanOfficersResponse_reflection_;
  delete CMsgClientAMGetPersonaNameHistory::default_instance_;
  delete CMsgClientAMGetPersonaNameHistory_reflection_;
  delete CMsgClientAMGetPersonaNameHistory_IdInstance::default_instance_;
  delete CMsgClientAMGetPersonaNameHistory_IdInstance_reflection_;
  delete CMsgClientAMGetPersonaNameHistoryResponse::default_instance_;
  delete CMsgClientAMGetPersonaNameHistoryResponse_reflection_;
  delete CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::default_instance_;
  delete CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_reflection_;
  delete CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::default_instance_;
  delete CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance_reflection_;
  delete CMsgClientDeregisterWithServer::default_instance_;
  delete CMsgClientDeregisterWithServer_reflection_;
  delete CMsgClientClanState::default_instance_;
  delete CMsgClientClanState_reflection_;
  delete CMsgClientClanState_NameInfo::default_instance_;
  delete CMsgClientClanState_NameInfo_reflection_;
  delete CMsgClientClanState_UserCounts::default_instance_;
  delete CMsgClientClanState_UserCounts_reflection_;
  delete CMsgClientClanState_Event::default_instance_;
  delete CMsgClientClanState_Event_reflection_;
}

void protobuf_AddDesc_steammessages_5fclientserver_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_steammessages_5fbase_2eproto();
  ::protobuf_AddDesc_encrypted_5fapp_5fticket_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n steammessages_clientserver.proto\032\030stea"
    "mmessages_base.proto\032\032encrypted_app_tick"
    "et.proto\"j\n\"CMsgClientRegisterAuthTicket"
    "WithCM\022\030\n\020protocol_version\030\001 \001(\r\022\016\n\006tick"
    "et\030\003 \001(\014\022\032\n\022client_instance_id\030\004 \001(\004\"\321\001\n"
    "\034CMsgClientTicketAuthComplete\022\020\n\010steam_i"
    "d\030\001 \001(\006\022\017\n\007game_id\030\002 \001(\006\022\016\n\006estate\030\003 \001(\r"
    "\022\036\n\026eauth_session_response\030\004 \001(\r\022\031\n\021DEPR"
    "ECATED_ticket\030\005 \001(\014\022\022\n\nticket_crc\030\006 \001(\r\022"
    "\027\n\017ticket_sequence\030\007 \001(\r\022\026\n\016owner_steam_"
    "id\030\010 \001(\006\"\200\001\n\020CMsgClientCMList\022\024\n\014cm_addr"
    "esses\030\001 \003(\r\022\020\n\010cm_ports\030\002 \003(\r\022\036\n\026cm_webs"
    "ocket_addresses\030\003 \003(\t\022$\n\034percent_default"
    "_to_websocket\030\004 \001(\r\"\243\001\n\033CMsgClientP2PCon"
    "nectionInfo\022\025\n\rsteam_id_dest\030\001 \001(\006\022\024\n\014st"
    "eam_id_src\030\002 \001(\006\022\016\n\006app_id\030\003 \001(\r\022\021\n\tcand"
    "idate\030\004 \001(\014\022 \n\030legacy_connection_id_src\030"
    "\005 \001(\006\022\022\n\nrendezvous\030\006 \001(\014\"\303\001\n\037CMsgClient"
    "P2PConnectionFailInfo\022\025\n\rsteam_id_dest\030\001"
    " \001(\006\022\024\n\014steam_id_src\030\002 \001(\006\022\016\n\006app_id\030\003 \001"
    "(\r\022\032\n\022ep2p_session_error\030\004 \001(\r\022\032\n\022connec"
    "tion_id_dest\030\005 \001(\006\022\024\n\014close_reason\030\007 \001(\r"
    "\022\025\n\rclose_message\030\010 \001(\t\"C\n\037CMsgClientNet"
    "workingCertRequest\022\020\n\010key_data\030\002 \001(\014\022\016\n\006"
    "app_id\030\003 \001(\r\"V\n\035CMsgClientNetworkingCert"
    "Reply\022\014\n\004cert\030\004 \001(\014\022\021\n\tca_key_id\030\005 \001(\006\022\024"
    "\n\014ca_signature\030\006 \001(\014\"7\n%CMsgClientNetwor"
    "kingMobileCertRequest\022\016\n\006app_id\030\001 \001(\r\";\n"
    "#CMsgClientNetworkingMobileCertReply\022\024\n\014"
    "encoded_cert\030\001 \001(\t\"1\n\037CMsgClientGetAppOw"
    "nershipTicket\022\016\n\006app_id\030\001 \001(\r\"]\n\'CMsgCli"
    "entGetAppOwnershipTicketResponse\022\022\n\007eres"
    "ult\030\001 \001(\r:\0012\022\016\n\006app_id\030\002 \001(\r\022\016\n\006ticket\030\003"
    " \001(\014\"\'\n\026CMsgClientSessionToken\022\r\n\005token\030"
    "\001 \001(\004\"M\n\033CMsgClientGameConnectTokens\022\036\n\022"
    "max_tokens_to_keep\030\001 \001(\r:\00210\022\016\n\006tokens\030\002"
    " \003(\014\"\205\010\n\025CMsgClientGamesPlayed\0227\n\014games_"
    "played\030\001 \003(\0132!.CMsgClientGamesPlayed.Gam"
    "ePlayed\022\026\n\016client_os_type\030\002 \001(\r\022\035\n\025cloud"
    "_gaming_platform\030\003 \001(\r\022\037\n\027recent_reauthe"
    "ntication\030\004 \001(\010\032\332\006\n\nGamePlayed\022\023\n\013steam_"
    "id_gs\030\001 \001(\004\022\017\n\007game_id\030\002 \001(\006\022\"\n\032deprecat"
    "ed_game_ip_address\030\003 \001(\r\022\021\n\tgame_port\030\004 "
    "\001(\r\022\021\n\tis_secure\030\005 \001(\010\022\r\n\005token\030\006 \001(\014\022\027\n"
    "\017game_extra_info\030\007 \001(\t\022\026\n\016game_data_blob"
    "\030\010 \001(\014\022\022\n\nprocess_id\030\t \001(\r\022\035\n\025streaming_"
    "provider_id\030\n \001(\r\022\022\n\ngame_flags\030\013 \001(\r\022\020\n"
    "\010owner_id\030\014 \001(\r\022\025\n\rvr_hmd_vendor\030\r \001(\t\022\024"
    "\n\014vr_hmd_model\030\016 \001(\t\022\035\n\022launch_option_ty"
    "pe\030\017 \001(\r:\0010\022#\n\027primary_controller_type\030\020"
    " \001(\005:\002-1\022\'\n\037primary_steam_controller_ser"
    "ial\030\021 \001(\t\022\'\n\034total_steam_controller_coun"
    "t\030\022 \001(\r:\0010\022+\n total_non_steam_controller"
    "_count\030\023 \001(\r:\0010\022&\n\033controller_workshop_f"
    "ile_id\030\024 \001(\004:\0010\022\030\n\rlaunch_source\030\025 \001(\r:\001"
    "0\022\026\n\016vr_hmd_runtime\030\026 \001(\r\022\'\n\017game_ip_add"
    "ress\030\027 \001(\0132\016.CMsgIPAddress\022%\n\032controller"
    "_connection_type\030\030 \001(\r:\0010\022\030\n\020game_os_pla"
    "tform\030\031 \001(\005\022\025\n\rgame_build_id\030\032 \001(\r\022\031\n\016co"
    "mpat_tool_id\030\033 \001(\r:\0010\022\027\n\017compat_tool_cmd"
    "\030\034 \001(\t\022\034\n\024compat_tool_build_id\030\035 \001(\r\022\021\n\t"
    "beta_name\030\036 \001(\t\022\023\n\013dlc_context\030\037 \001(\r\"9\n\r"
    "CMsgGSApprove\022\020\n\010steam_id\030\001 \001(\006\022\026\n\016owner"
    "_steam_id\030\002 \001(\006\"I\n\nCMsgGSDeny\022\020\n\010steam_i"
    "d\030\001 \001(\006\022\024\n\014edeny_reason\030\002 \001(\005\022\023\n\013deny_st"
    "ring\030\003 \001(\t\"4\n\nCMsgGSKick\022\020\n\010steam_id\030\001 \001"
    "(\006\022\024\n\014edeny_reason\030\002 \001(\005\"\266\001\n\022CMsgClientA"
    "uthList\022\023\n\013tokens_left\030\001 \001(\r\022\030\n\020last_req"
    "uest_seq\030\002 \001(\r\022$\n\034last_request_seq_from_"
    "server\030\003 \001(\r\022 \n\007tickets\030\004 \003(\0132\017.CMsgAuth"
    "Ticket\022\017\n\007app_ids\030\005 \003(\r\022\030\n\020message_seque"
    "nce\030\006 \001(\r\"V\n\025CMsgClientAuthListAck\022\022\n\nti"
    "cket_crc\030\001 \003(\r\022\017\n\007app_ids\030\002 \003(\r\022\030\n\020messa"
    "ge_sequence\030\003 \001(\r\"\216\004\n\025CMsgClientLicenseL"
    "ist\022\022\n\007eresult\030\001 \001(\005:\0012\0220\n\010licenses\030\002 \003("
    "\0132\036.CMsgClientLicenseList.License\032\256\003\n\007Li"
    "cense\022\022\n\npackage_id\030\001 \001(\r\022\024\n\014time_create"
    "d\030\002 \001(\007\022\031\n\021time_next_process\030\003 \001(\007\022\024\n\014mi"
    "nute_limit\030\004 \001(\005\022\024\n\014minutes_used\030\005 \001(\005\022\026"
    "\n\016payment_method\030\006 \001(\r\022\r\n\005flags\030\007 \001(\r\022\035\n"
    "\025purchase_country_code\030\010 \001(\t\022\024\n\014license_"
    "type\030\t \001(\r\022\026\n\016territory_code\030\n \001(\005\022\025\n\rch"
    "ange_number\030\013 \001(\005\022\020\n\010owner_id\030\014 \001(\r\022\026\n\016i"
    "nitial_period\030\r \001(\r\022\031\n\021initial_time_unit"
    "\030\016 \001(\r\022\026\n\016renewal_period\030\017 \001(\r\022\031\n\021renewa"
    "l_time_unit\030\020 \001(\r\022\024\n\014access_token\030\021 \001(\004\022"
    "\031\n\021master_package_id\030\022 \001(\r\"\252\001\n\032CMsgClien"
    "tIsLimitedAccount\022\033\n\023bis_limited_account"
    "\030\001 \001(\010\022\034\n\024bis_community_banned\030\002 \001(\010\022\032\n\022"
    "bis_locked_account\030\003 \001(\010\0225\n-bis_limited_"
    "account_allowed_to_invite_friends\030\004 \001(\010\""
    "\247\001\n\036CMsgClientRequestedClientStats\022B\n\rst"
    "ats_to_send\030\001 \003(\0132+.CMsgClientRequestedC"
    "lientStats.StatsToSend\032A\n\013StatsToSend\022\023\n"
    "\013client_stat\030\001 \001(\r\022\035\n\025stat_aggregate_met"
    "hod\030\002 \001(\r\"\300\001\n\017CMsgClientStat2\0220\n\013stat_de"
    "tail\030\001 \003(\0132\033.CMsgClientStat2.StatDetail\032"
    "{\n\nStatDetail\022\023\n\013client_stat\030\001 \001(\r\022\020\n\010ll"
    "_value\030\002 \001(\003\022\023\n\013time_of_day\030\003 \001(\r\022\017\n\007cel"
    "l_id\030\004 \001(\r\022\020\n\010depot_id\030\005 \001(\r\022\016\n\006app_id\030\006"
    " \001(\r\"r\n\026CMsgClientInviteToGame\022\025\n\rsteam_"
    "id_dest\030\001 \001(\006\022\024\n\014steam_id_src\030\002 \001(\006\022\026\n\016c"
    "onnect_string\030\003 \001(\t\022\023\n\013remote_play\030\004 \001(\t"
    "\"\271\001\n\024CMsgClientChatInvite\022\030\n\020steam_id_in"
    "vited\030\001 \001(\006\022\025\n\rsteam_id_chat\030\002 \001(\006\022\027\n\017st"
    "eam_id_patron\030\003 \001(\006\022\025\n\rchatroom_type\030\004 \001"
    "(\005\022\034\n\024steam_id_friend_chat\030\005 \001(\006\022\021\n\tchat"
    "_name\030\006 \001(\t\022\017\n\007game_id\030\007 \001(\006\"\226\t\n\031CMsgCli"
    "entConnectionStats\022;\n\013stats_logon\030\001 \001(\0132"
    "&.CMsgClientConnectionStats.Stats_Logon\022"
    ";\n\013stats_vconn\030\002 \001(\0132&.CMsgClientConnect"
    "ionStats.Stats_VConn\032\323\002\n\013Stats_Logon\022\030\n\020"
    "connect_attempts\030\001 \001(\005\022\031\n\021connect_succes"
    "ses\030\002 \001(\005\022\030\n\020connect_failures\030\003 \001(\005\022\033\n\023c"
    "onnections_dropped\030\004 \001(\005\022\027\n\017seconds_runn"
    "ing\030\005 \001(\r\022\034\n\024msec_tologonthistime\030\006 \001(\r\022"
    "\025\n\rcount_bad_cms\030\007 \001(\r\022\033\n\023no_udp_connect"
    "ivity\030\010 \001(\010\022\033\n\023no_tcp_connectivity\030\t \001(\010"
    "\022%\n\035no_websocket_443_connectivity\030\n \001(\010\022"
    ")\n!no_websocket_non_443_connectivity\030\013 \001"
    "(\010\032q\n\tStats_UDP\022\021\n\tpkts_sent\030\001 \001(\004\022\022\n\nby"
    "tes_sent\030\002 \001(\004\022\021\n\tpkts_recv\030\003 \001(\004\022\026\n\016pkt"
    "s_processed\030\004 \001(\004\022\022\n\nbytes_recv\030\005 \001(\004\032\265\004"
    "\n\013Stats_VConn\022\027\n\017connections_udp\030\001 \001(\r\022\027"
    "\n\017connections_tcp\030\002 \001(\r\0227\n\tstats_udp\030\003 \001"
    "(\0132$.CMsgClientConnectionStats.Stats_UDP"
    "\022\026\n\016pkts_abandoned\030\004 \001(\004\022\031\n\021conn_req_rec"
    "eived\030\005 \001(\004\022\023\n\013pkts_resent\030\006 \001(\004\022\021\n\tmsgs"
    "_sent\030\007 \001(\004\022\030\n\020msgs_sent_failed\030\010 \001(\004\022\021\n"
    "\tmsgs_recv\030\t \001(\004\022\026\n\016datagrams_sent\030\n \001(\004"
    "\022\026\n\016datagrams_recv\030\013 \001(\004\022\025\n\rbad_pkts_rec"
    "v\030\014 \001(\004\022\036\n\026unknown_conn_pkts_recv\030\r \001(\004\022"
    "\030\n\020missed_pkts_recv\030\016 \001(\004\022\025\n\rdup_pkts_re"
    "cv\030\017 \001(\004\022!\n\031failed_connect_challenges\030\020 "
    "\001(\004\022\035\n\025micro_sec_avg_latency\030\021 \001(\r\022\035\n\025mi"
    "cro_sec_min_latency\030\022 \001(\r\022\035\n\025micro_sec_m"
    "ax_latency\030\023 \001(\r\022\033\n\023mem_pool_msg_in_use\030"
    "\024 \001(\r\"\322\001\n\032CMsgClientServersAvailable\022R\n\026"
    "server_types_available\030\001 \003(\01322.CMsgClien"
    "tServersAvailable.Server_Types_Available"
    "\022%\n\035server_type_for_auth_services\030\002 \001(\r\032"
    "9\n\026Server_Types_Available\022\016\n\006server\030\001 \001("
    "\r\022\017\n\007changed\030\002 \001(\010\"\?\n$CMsgClientReportOv"
    "erlayDetourFailure\022\027\n\017failure_strings\030\001 "
    "\003(\t\"G\n#CMsgClientRequestEncryptedAppTick"
    "et\022\016\n\006app_id\030\001 \001(\r\022\020\n\010userdata\030\002 \001(\014\"\204\001\n"
    "+CMsgClientRequestEncryptedAppTicketResp"
    "onse\022\016\n\006app_id\030\001 \001(\r\022\022\n\007eresult\030\002 \001(\005:\0012"
    "\0221\n\024encrypted_app_ticket\030\003 \001(\0132\023.Encrypt"
    "edAppTicket\"\265\001\n\032CMsgClientWalletInfoUpda"
    "te\022\022\n\nhas_wallet\030\001 \001(\010\022\017\n\007balance\030\002 \001(\005\022"
    "\020\n\010currency\030\003 \001(\005\022\027\n\017balance_delayed\030\004 \001"
    "(\005\022\027\n\tbalance64\030\005 \001(\003B\004\240\266\030\001\022\037\n\021balance64"
    "_delayed\030\006 \001(\003B\004\240\266\030\001\022\r\n\005realm\030\007 \001(\005\"3\n\033C"
    "MsgClientAMGetClanOfficers\022\024\n\014steamid_cl"
    "an\030\001 \001(\006\"f\n#CMsgClientAMGetClanOfficersR"
    "esponse\022\022\n\007eresult\030\001 \001(\005:\0012\022\024\n\014steamid_c"
    "lan\030\002 \001(\006\022\025\n\rofficer_count\030\003 \001(\005\"\220\001\n!CMs"
    "gClientAMGetPersonaNameHistory\022\020\n\010id_cou"
    "nt\030\001 \001(\005\022:\n\003Ids\030\002 \003(\0132-.CMsgClientAMGetP"
    "ersonaNameHistory.IdInstance\032\035\n\nIdInstan"
    "ce\022\017\n\007steamid\030\001 \001(\006\"\303\002\n)CMsgClientAMGetP"
    "ersonaNameHistoryResponse\022O\n\tresponses\030\002"
    " \003(\0132<.CMsgClientAMGetPersonaNameHistory"
    "Response.NameTableInstance\032\304\001\n\021NameTable"
    "Instance\022\022\n\007eresult\030\001 \001(\005:\0012\022\017\n\007steamid\030"
    "\002 \001(\006\022X\n\005names\030\003 \003(\0132I.CMsgClientAMGetPe"
    "rsonaNameHistoryResponse.NameTableInstan"
    "ce.NameInstance\0320\n\014NameInstance\022\022\n\nname_"
    "since\030\001 \001(\007\022\014\n\004name\030\002 \001(\t\"E\n\036CMsgClientD"
    "eregisterWithServer\022\023\n\013eservertype\030\001 \001(\r"
    "\022\016\n\006app_id\030\002 \001(\r\"\253\004\n\023CMsgClientClanState"
    "\022\024\n\014steamid_clan\030\001 \001(\006\022\032\n\022clan_account_f"
    "lags\030\003 \001(\r\0220\n\tname_info\030\004 \001(\0132\035.CMsgClie"
    "ntClanState.NameInfo\0224\n\013user_counts\030\005 \001("
    "\0132\037.CMsgClientClanState.UserCounts\022*\n\006ev"
    "ents\030\006 \003(\0132\032.CMsgClientClanState.Event\0221"
    "\n\rannouncements\030\007 \003(\0132\032.CMsgClientClanSt"
    "ate.Event\022\031\n\021chat_room_private\030\010 \001(\010\0321\n\010"
    "NameInfo\022\021\n\tclan_name\030\001 \001(\t\022\022\n\nsha_avata"
    "r\030\002 \001(\014\032k\n\nUserCounts\022\017\n\007members\030\001 \001(\r\022\016"
    "\n\006online\030\002 \001(\r\022\020\n\010chatting\030\003 \001(\r\022\017\n\007in_g"
    "ame\030\004 \001(\r\022\031\n\021chat_room_members\030\005 \001(\r\032`\n\005"
    "Event\022\013\n\003gid\030\001 \001(\006\022\022\n\nevent_time\030\002 \001(\r\022\020"
    "\n\010headline\030\003 \001(\t\022\017\n\007game_id\030\004 \001(\006\022\023\n\013jus"
    "t_posted\030\005 \001(\010B\005H\001\200\001\000", 7421);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_clientserver.proto", &protobuf_RegisterTypes);
  CMsgClientRegisterAuthTicketWithCM::default_instance_ = new CMsgClientRegisterAuthTicketWithCM();
  CMsgClientTicketAuthComplete::default_instance_ = new CMsgClientTicketAuthComplete();
  CMsgClientCMList::default_instance_ = new CMsgClientCMList();
  CMsgClientP2PConnectionInfo::default_instance_ = new CMsgClientP2PConnectionInfo();
  CMsgClientP2PConnectionFailInfo::default_instance_ = new CMsgClientP2PConnectionFailInfo();
  CMsgClientNetworkingCertRequest::default_instance_ = new CMsgClientNetworkingCertRequest();
  CMsgClientNetworkingCertReply::default_instance_ = new CMsgClientNetworkingCertReply();
  CMsgClientNetworkingMobileCertRequest::default_instance_ = new CMsgClientNetworkingMobileCertRequest();
  CMsgClientNetworkingMobileCertReply::default_instance_ = new CMsgClientNetworkingMobileCertReply();
  CMsgClientGetAppOwnershipTicket::default_instance_ = new CMsgClientGetAppOwnershipTicket();
  CMsgClientGetAppOwnershipTicketResponse::default_instance_ = new CMsgClientGetAppOwnershipTicketResponse();
  CMsgClientSessionToken::default_instance_ = new CMsgClientSessionToken();
  CMsgClientGameConnectTokens::default_instance_ = new CMsgClientGameConnectTokens();
  CMsgClientGamesPlayed::default_instance_ = new CMsgClientGamesPlayed();
  CMsgClientGamesPlayed_GamePlayed::default_instance_ = new CMsgClientGamesPlayed_GamePlayed();
  CMsgGSApprove::default_instance_ = new CMsgGSApprove();
  CMsgGSDeny::default_instance_ = new CMsgGSDeny();
  CMsgGSKick::default_instance_ = new CMsgGSKick();
  CMsgClientAuthList::default_instance_ = new CMsgClientAuthList();
  CMsgClientAuthListAck::default_instance_ = new CMsgClientAuthListAck();
  CMsgClientLicenseList::default_instance_ = new CMsgClientLicenseList();
  CMsgClientLicenseList_License::default_instance_ = new CMsgClientLicenseList_License();
  CMsgClientIsLimitedAccount::default_instance_ = new CMsgClientIsLimitedAccount();
  CMsgClientRequestedClientStats::default_instance_ = new CMsgClientRequestedClientStats();
  CMsgClientRequestedClientStats_StatsToSend::default_instance_ = new CMsgClientRequestedClientStats_StatsToSend();
  CMsgClientStat2::default_instance_ = new CMsgClientStat2();
  CMsgClientStat2_StatDetail::default_instance_ = new CMsgClientStat2_StatDetail();
  CMsgClientInviteToGame::default_instance_ = new CMsgClientInviteToGame();
  CMsgClientChatInvite::default_instance_ = new CMsgClientChatInvite();
  CMsgClientConnectionStats::default_instance_ = new CMsgClientConnectionStats();
  CMsgClientConnectionStats_Stats_Logon::default_instance_ = new CMsgClientConnectionStats_Stats_Logon();
  CMsgClientConnectionStats_Stats_UDP::default_instance_ = new CMsgClientConnectionStats_Stats_UDP();
  CMsgClientConnectionStats_Stats_VConn::default_instance_ = new CMsgClientConnectionStats_Stats_VConn();
  CMsgClientServersAvailable::default_instance_ = new CMsgClientServersAvailable();
  CMsgClientServersAvailable_Server_Types_Available::default_instance_ = new CMsgClientServersAvailable_Server_Types_Available();
  CMsgClientReportOverlayDetourFailure::default_instance_ = new CMsgClientReportOverlayDetourFailure();
  CMsgClientRequestEncryptedAppTicket::default_instance_ = new CMsgClientRequestEncryptedAppTicket();
  CMsgClientRequestEncryptedAppTicketResponse::default_instance_ = new CMsgClientRequestEncryptedAppTicketResponse();
  CMsgClientWalletInfoUpdate::default_instance_ = new CMsgClientWalletInfoUpdate();
  CMsgClientAMGetClanOfficers::default_instance_ = new CMsgClientAMGetClanOfficers();
  CMsgClientAMGetClanOfficersResponse::default_instance_ = new CMsgClientAMGetClanOfficersResponse();
  CMsgClientAMGetPersonaNameHistory::default_instance_ = new CMsgClientAMGetPersonaNameHistory();
  CMsgClientAMGetPersonaNameHistory_IdInstance::default_instance_ = new CMsgClientAMGetPersonaNameHistory_IdInstance();
  CMsgClientAMGetPersonaNameHistoryResponse::default_instance_ = new CMsgClientAMGetPersonaNameHistoryResponse();
  CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::default_instance_ = new CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance();
  CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::default_instance_ = new CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance();
  CMsgClientDeregisterWithServer::default_instance_ = new CMsgClientDeregisterWithServer();
  CMsgClientClanState::default_instance_ = new CMsgClientClanState();
  CMsgClientClanState_NameInfo::default_instance_ = new CMsgClientClanState_NameInfo();
  CMsgClientClanState_UserCounts::default_instance_ = new CMsgClientClanState_UserCounts();
  CMsgClientClanState_Event::default_instance_ = new CMsgClientClanState_Event();
  CMsgClientRegisterAuthTicketWithCM::default_instance_->InitAsDefaultInstance();
  CMsgClientTicketAuthComplete::default_instance_->InitAsDefaultInstance();
  CMsgClientCMList::default_instance_->InitAsDefaultInstance();
  CMsgClientP2PConnectionInfo::default_instance_->InitAsDefaultInstance();
  CMsgClientP2PConnectionFailInfo::default_instance_->InitAsDefaultInstance();
  CMsgClientNetworkingCertRequest::default_instance_->InitAsDefaultInstance();
  CMsgClientNetworkingCertReply::default_instance_->InitAsDefaultInstance();
  CMsgClientNetworkingMobileCertRequest::default_instance_->InitAsDefaultInstance();
  CMsgClientNetworkingMobileCertReply::default_instance_->InitAsDefaultInstance();
  CMsgClientGetAppOwnershipTicket::default_instance_->InitAsDefaultInstance();
  CMsgClientGetAppOwnershipTicketResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientSessionToken::default_instance_->InitAsDefaultInstance();
  CMsgClientGameConnectTokens::default_instance_->InitAsDefaultInstance();
  CMsgClientGamesPlayed::default_instance_->InitAsDefaultInstance();
  CMsgClientGamesPlayed_GamePlayed::default_instance_->InitAsDefaultInstance();
  CMsgGSApprove::default_instance_->InitAsDefaultInstance();
  CMsgGSDeny::default_instance_->InitAsDefaultInstance();
  CMsgGSKick::default_instance_->InitAsDefaultInstance();
  CMsgClientAuthList::default_instance_->InitAsDefaultInstance();
  CMsgClientAuthListAck::default_instance_->InitAsDefaultInstance();
  CMsgClientLicenseList::default_instance_->InitAsDefaultInstance();
  CMsgClientLicenseList_License::default_instance_->InitAsDefaultInstance();
  CMsgClientIsLimitedAccount::default_instance_->InitAsDefaultInstance();
  CMsgClientRequestedClientStats::default_instance_->InitAsDefaultInstance();
  CMsgClientRequestedClientStats_StatsToSend::default_instance_->InitAsDefaultInstance();
  CMsgClientStat2::default_instance_->InitAsDefaultInstance();
  CMsgClientStat2_StatDetail::default_instance_->InitAsDefaultInstance();
  CMsgClientInviteToGame::default_instance_->InitAsDefaultInstance();
  CMsgClientChatInvite::default_instance_->InitAsDefaultInstance();
  CMsgClientConnectionStats::default_instance_->InitAsDefaultInstance();
  CMsgClientConnectionStats_Stats_Logon::default_instance_->InitAsDefaultInstance();
  CMsgClientConnectionStats_Stats_UDP::default_instance_->InitAsDefaultInstance();
  CMsgClientConnectionStats_Stats_VConn::default_instance_->InitAsDefaultInstance();
  CMsgClientServersAvailable::default_instance_->InitAsDefaultInstance();
  CMsgClientServersAvailable_Server_Types_Available::default_instance_->InitAsDefaultInstance();
  CMsgClientReportOverlayDetourFailure::default_instance_->InitAsDefaultInstance();
  CMsgClientRequestEncryptedAppTicket::default_instance_->InitAsDefaultInstance();
  CMsgClientRequestEncryptedAppTicketResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientWalletInfoUpdate::default_instance_->InitAsDefaultInstance();
  CMsgClientAMGetClanOfficers::default_instance_->InitAsDefaultInstance();
  CMsgClientAMGetClanOfficersResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientAMGetPersonaNameHistory::default_instance_->InitAsDefaultInstance();
  CMsgClientAMGetPersonaNameHistory_IdInstance::default_instance_->InitAsDefaultInstance();
  CMsgClientAMGetPersonaNameHistoryResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::default_instance_->InitAsDefaultInstance();
  CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::default_instance_->InitAsDefaultInstance();
  CMsgClientDeregisterWithServer::default_instance_->InitAsDefaultInstance();
  CMsgClientClanState::default_instance_->InitAsDefaultInstance();
  CMsgClientClanState_NameInfo::default_instance_->InitAsDefaultInstance();
  CMsgClientClanState_UserCounts::default_instance_->InitAsDefaultInstance();
  CMsgClientClanState_Event::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_steammessages_5fclientserver_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_steammessages_5fclientserver_2eproto {
  StaticDescriptorInitializer_steammessages_5fclientserver_2eproto() {
    protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  }
} static_descriptor_initializer_steammessages_5fclientserver_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRegisterAuthTicketWithCM::kProtocolVersionFieldNumber;
const int CMsgClientRegisterAuthTicketWithCM::kTicketFieldNumber;
const int CMsgClientRegisterAuthTicketWithCM::kClientInstanceIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientRegisterAuthTicketWithCM::CMsgClientRegisterAuthTicketWithCM()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientRegisterAuthTicketWithCM::InitAsDefaultInstance() {
}

CMsgClientRegisterAuthTicketWithCM::CMsgClientRegisterAuthTicketWithCM(const CMsgClientRegisterAuthTicketWithCM& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRegisterAuthTicketWithCM::SharedCtor() {
  _cached_size_ = 0;
  protocol_version_ = 0u;
  ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  client_instance_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRegisterAuthTicketWithCM::~CMsgClientRegisterAuthTicketWithCM() {
  SharedDtor();
}

void CMsgClientRegisterAuthTicketWithCM::SharedDtor() {
  if (ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete ticket_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientRegisterAuthTicketWithCM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRegisterAuthTicketWithCM::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientRegisterAuthTicketWithCM_descriptor_;
}

const CMsgClientRegisterAuthTicketWithCM& CMsgClientRegisterAuthTicketWithCM::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientRegisterAuthTicketWithCM* CMsgClientRegisterAuthTicketWithCM::default_instance_ = NULL;

CMsgClientRegisterAuthTicketWithCM* CMsgClientRegisterAuthTicketWithCM::New() const {
  return new CMsgClientRegisterAuthTicketWithCM;
}

void CMsgClientRegisterAuthTicketWithCM::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protocol_version_ = 0u;
    if (has_ticket()) {
      if (ticket_ != &::google::protobuf::internal::kEmptyString) {
        ticket_->clear();
      }
    }
    client_instance_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientRegisterAuthTicketWithCM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 protocol_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_version_)));
          set_has_protocol_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ticket;
        break;
      }

      // optional bytes ticket = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ticket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_client_instance_id;
        break;
      }

      // optional uint64 client_instance_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &client_instance_id_)));
          set_has_client_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRegisterAuthTicketWithCM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 protocol_version = 1;
  if (has_protocol_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->protocol_version(), output);
  }

  // optional bytes ticket = 3;
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->ticket(), output);
  }

  // optional uint64 client_instance_id = 4;
  if (has_client_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->client_instance_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientRegisterAuthTicketWithCM::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 protocol_version = 1;
  if (has_protocol_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->protocol_version(), target);
  }

  // optional bytes ticket = 3;
  if (has_ticket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ticket(), target);
  }

  // optional uint64 client_instance_id = 4;
  if (has_client_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->client_instance_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientRegisterAuthTicketWithCM::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 protocol_version = 1;
    if (has_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_version());
    }

    // optional bytes ticket = 3;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ticket());
    }

    // optional uint64 client_instance_id = 4;
    if (has_client_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->client_instance_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRegisterAuthTicketWithCM::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientRegisterAuthTicketWithCM* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientRegisterAuthTicketWithCM*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientRegisterAuthTicketWithCM::MergeFrom(const CMsgClientRegisterAuthTicketWithCM& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protocol_version()) {
      set_protocol_version(from.protocol_version());
    }
    if (from.has_ticket()) {
      set_ticket(from.ticket());
    }
    if (from.has_client_instance_id()) {
      set_client_instance_id(from.client_instance_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientRegisterAuthTicketWithCM::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRegisterAuthTicketWithCM::CopyFrom(const CMsgClientRegisterAuthTicketWithCM& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRegisterAuthTicketWithCM::IsInitialized() const {

  return true;
}

void CMsgClientRegisterAuthTicketWithCM::Swap(CMsgClientRegisterAuthTicketWithCM* other) {
  if (other != this) {
    std::swap(protocol_version_, other->protocol_version_);
    std::swap(ticket_, other->ticket_);
    std::swap(client_instance_id_, other->client_instance_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientRegisterAuthTicketWithCM::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientRegisterAuthTicketWithCM_descriptor_;
  metadata.reflection = CMsgClientRegisterAuthTicketWithCM_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientTicketAuthComplete::kSteamIdFieldNumber;
const int CMsgClientTicketAuthComplete::kGameIdFieldNumber;
const int CMsgClientTicketAuthComplete::kEstateFieldNumber;
const int CMsgClientTicketAuthComplete::kEauthSessionResponseFieldNumber;
const int CMsgClientTicketAuthComplete::kDEPRECATEDTicketFieldNumber;
const int CMsgClientTicketAuthComplete::kTicketCrcFieldNumber;
const int CMsgClientTicketAuthComplete::kTicketSequenceFieldNumber;
const int CMsgClientTicketAuthComplete::kOwnerSteamIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientTicketAuthComplete::CMsgClientTicketAuthComplete()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientTicketAuthComplete::InitAsDefaultInstance() {
}

CMsgClientTicketAuthComplete::CMsgClientTicketAuthComplete(const CMsgClientTicketAuthComplete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientTicketAuthComplete::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  game_id_ = GOOGLE_ULONGLONG(0);
  estate_ = 0u;
  eauth_session_response_ = 0u;
  deprecated_ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ticket_crc_ = 0u;
  ticket_sequence_ = 0u;
  owner_steam_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientTicketAuthComplete::~CMsgClientTicketAuthComplete() {
  SharedDtor();
}

void CMsgClientTicketAuthComplete::SharedDtor() {
  if (deprecated_ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete deprecated_ticket_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientTicketAuthComplete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientTicketAuthComplete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientTicketAuthComplete_descriptor_;
}

const CMsgClientTicketAuthComplete& CMsgClientTicketAuthComplete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientTicketAuthComplete* CMsgClientTicketAuthComplete::default_instance_ = NULL;

CMsgClientTicketAuthComplete* CMsgClientTicketAuthComplete::New() const {
  return new CMsgClientTicketAuthComplete;
}

void CMsgClientTicketAuthComplete::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_ = GOOGLE_ULONGLONG(0);
    game_id_ = GOOGLE_ULONGLONG(0);
    estate_ = 0u;
    eauth_session_response_ = 0u;
    if (has_deprecated_ticket()) {
      if (deprecated_ticket_ != &::google::protobuf::internal::kEmptyString) {
        deprecated_ticket_->clear();
      }
    }
    ticket_crc_ = 0u;
    ticket_sequence_ = 0u;
    owner_steam_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientTicketAuthComplete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_game_id;
        break;
      }

      // optional fixed64 game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_estate;
        break;
      }

      // optional uint32 estate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_estate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &estate_)));
          set_has_estate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_eauth_session_response;
        break;
      }

      // optional uint32 eauth_session_response = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eauth_session_response:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eauth_session_response_)));
          set_has_eauth_session_response();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_DEPRECATED_ticket;
        break;
      }

      // optional bytes DEPRECATED_ticket = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DEPRECATED_ticket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_deprecated_ticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ticket_crc;
        break;
      }

      // optional uint32 ticket_crc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ticket_crc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ticket_crc_)));
          set_has_ticket_crc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ticket_sequence;
        break;
      }

      // optional uint32 ticket_sequence = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ticket_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ticket_sequence_)));
          set_has_ticket_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_owner_steam_id;
        break;
      }

      // optional fixed64 owner_steam_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_owner_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &owner_steam_id_)));
          set_has_owner_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientTicketAuthComplete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional fixed64 game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->game_id(), output);
  }

  // optional uint32 estate = 3;
  if (has_estate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->estate(), output);
  }

  // optional uint32 eauth_session_response = 4;
  if (has_eauth_session_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->eauth_session_response(), output);
  }

  // optional bytes DEPRECATED_ticket = 5;
  if (has_deprecated_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->deprecated_ticket(), output);
  }

  // optional uint32 ticket_crc = 6;
  if (has_ticket_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ticket_crc(), output);
  }

  // optional uint32 ticket_sequence = 7;
  if (has_ticket_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->ticket_sequence(), output);
  }

  // optional fixed64 owner_steam_id = 8;
  if (has_owner_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(8, this->owner_steam_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientTicketAuthComplete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional fixed64 game_id = 2;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->game_id(), target);
  }

  // optional uint32 estate = 3;
  if (has_estate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->estate(), target);
  }

  // optional uint32 eauth_session_response = 4;
  if (has_eauth_session_response()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->eauth_session_response(), target);
  }

  // optional bytes DEPRECATED_ticket = 5;
  if (has_deprecated_ticket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->deprecated_ticket(), target);
  }

  // optional uint32 ticket_crc = 6;
  if (has_ticket_crc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ticket_crc(), target);
  }

  // optional uint32 ticket_sequence = 7;
  if (has_ticket_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->ticket_sequence(), target);
  }

  // optional fixed64 owner_steam_id = 8;
  if (has_owner_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(8, this->owner_steam_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientTicketAuthComplete::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 game_id = 2;
    if (has_game_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 estate = 3;
    if (has_estate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->estate());
    }

    // optional uint32 eauth_session_response = 4;
    if (has_eauth_session_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eauth_session_response());
    }

    // optional bytes DEPRECATED_ticket = 5;
    if (has_deprecated_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->deprecated_ticket());
    }

    // optional uint32 ticket_crc = 6;
    if (has_ticket_crc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ticket_crc());
    }

    // optional uint32 ticket_sequence = 7;
    if (has_ticket_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ticket_sequence());
    }

    // optional fixed64 owner_steam_id = 8;
    if (has_owner_steam_id()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientTicketAuthComplete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientTicketAuthComplete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientTicketAuthComplete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientTicketAuthComplete::MergeFrom(const CMsgClientTicketAuthComplete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_estate()) {
      set_estate(from.estate());
    }
    if (from.has_eauth_session_response()) {
      set_eauth_session_response(from.eauth_session_response());
    }
    if (from.has_deprecated_ticket()) {
      set_deprecated_ticket(from.deprecated_ticket());
    }
    if (from.has_ticket_crc()) {
      set_ticket_crc(from.ticket_crc());
    }
    if (from.has_ticket_sequence()) {
      set_ticket_sequence(from.ticket_sequence());
    }
    if (from.has_owner_steam_id()) {
      set_owner_steam_id(from.owner_steam_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientTicketAuthComplete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientTicketAuthComplete::CopyFrom(const CMsgClientTicketAuthComplete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientTicketAuthComplete::IsInitialized() const {

  return true;
}

void CMsgClientTicketAuthComplete::Swap(CMsgClientTicketAuthComplete* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(estate_, other->estate_);
    std::swap(eauth_session_response_, other->eauth_session_response_);
    std::swap(deprecated_ticket_, other->deprecated_ticket_);
    std::swap(ticket_crc_, other->ticket_crc_);
    std::swap(ticket_sequence_, other->ticket_sequence_);
    std::swap(owner_steam_id_, other->owner_steam_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientTicketAuthComplete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientTicketAuthComplete_descriptor_;
  metadata.reflection = CMsgClientTicketAuthComplete_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientCMList::kCmAddressesFieldNumber;
const int CMsgClientCMList::kCmPortsFieldNumber;
const int CMsgClientCMList::kCmWebsocketAddressesFieldNumber;
const int CMsgClientCMList::kPercentDefaultToWebsocketFieldNumber;
#endif  // !_MSC_VER

CMsgClientCMList::CMsgClientCMList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientCMList::InitAsDefaultInstance() {
}

CMsgClientCMList::CMsgClientCMList(const CMsgClientCMList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientCMList::SharedCtor() {
  _cached_size_ = 0;
  percent_default_to_websocket_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientCMList::~CMsgClientCMList() {
  SharedDtor();
}

void CMsgClientCMList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientCMList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientCMList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientCMList_descriptor_;
}

const CMsgClientCMList& CMsgClientCMList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientCMList* CMsgClientCMList::default_instance_ = NULL;

CMsgClientCMList* CMsgClientCMList::New() const {
  return new CMsgClientCMList;
}

void CMsgClientCMList::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    percent_default_to_websocket_ = 0u;
  }
  cm_addresses_.Clear();
  cm_ports_.Clear();
  cm_websocket_addresses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientCMList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 cm_addresses = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cm_addresses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_cm_addresses())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cm_addresses())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_cm_addresses;
        if (input->ExpectTag(16)) goto parse_cm_ports;
        break;
      }

      // repeated uint32 cm_ports = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cm_ports:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_cm_ports())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cm_ports())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cm_ports;
        if (input->ExpectTag(26)) goto parse_cm_websocket_addresses;
        break;
      }

      // repeated string cm_websocket_addresses = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cm_websocket_addresses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cm_websocket_addresses()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cm_websocket_addresses(this->cm_websocket_addresses_size() - 1).data(),
            this->cm_websocket_addresses(this->cm_websocket_addresses_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cm_websocket_addresses;
        if (input->ExpectTag(32)) goto parse_percent_default_to_websocket;
        break;
      }

      // optional uint32 percent_default_to_websocket = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_percent_default_to_websocket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &percent_default_to_websocket_)));
          set_has_percent_default_to_websocket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientCMList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 cm_addresses = 1;
  for (int i = 0; i < this->cm_addresses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->cm_addresses(i), output);
  }

  // repeated uint32 cm_ports = 2;
  for (int i = 0; i < this->cm_ports_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->cm_ports(i), output);
  }

  // repeated string cm_websocket_addresses = 3;
  for (int i = 0; i < this->cm_websocket_addresses_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->cm_websocket_addresses(i).data(), this->cm_websocket_addresses(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cm_websocket_addresses(i), output);
  }

  // optional uint32 percent_default_to_websocket = 4;
  if (has_percent_default_to_websocket()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->percent_default_to_websocket(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientCMList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 cm_addresses = 1;
  for (int i = 0; i < this->cm_addresses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->cm_addresses(i), target);
  }

  // repeated uint32 cm_ports = 2;
  for (int i = 0; i < this->cm_ports_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->cm_ports(i), target);
  }

  // repeated string cm_websocket_addresses = 3;
  for (int i = 0; i < this->cm_websocket_addresses_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cm_websocket_addresses(i).data(), this->cm_websocket_addresses(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->cm_websocket_addresses(i), target);
  }

  // optional uint32 percent_default_to_websocket = 4;
  if (has_percent_default_to_websocket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->percent_default_to_websocket(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientCMList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional uint32 percent_default_to_websocket = 4;
    if (has_percent_default_to_websocket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->percent_default_to_websocket());
    }

  }
  // repeated uint32 cm_addresses = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->cm_addresses_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cm_addresses(i));
    }
    total_size += 1 * this->cm_addresses_size() + data_size;
  }

  // repeated uint32 cm_ports = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cm_ports_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cm_ports(i));
    }
    total_size += 1 * this->cm_ports_size() + data_size;
  }

  // repeated string cm_websocket_addresses = 3;
  total_size += 1 * this->cm_websocket_addresses_size();
  for (int i = 0; i < this->cm_websocket_addresses_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cm_websocket_addresses(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientCMList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientCMList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientCMList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientCMList::MergeFrom(const CMsgClientCMList& from) {
  GOOGLE_CHECK_NE(&from, this);
  cm_addresses_.MergeFrom(from.cm_addresses_);
  cm_ports_.MergeFrom(from.cm_ports_);
  cm_websocket_addresses_.MergeFrom(from.cm_websocket_addresses_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_percent_default_to_websocket()) {
      set_percent_default_to_websocket(from.percent_default_to_websocket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientCMList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientCMList::CopyFrom(const CMsgClientCMList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientCMList::IsInitialized() const {

  return true;
}

void CMsgClientCMList::Swap(CMsgClientCMList* other) {
  if (other != this) {
    cm_addresses_.Swap(&other->cm_addresses_);
    cm_ports_.Swap(&other->cm_ports_);
    cm_websocket_addresses_.Swap(&other->cm_websocket_addresses_);
    std::swap(percent_default_to_websocket_, other->percent_default_to_websocket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientCMList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientCMList_descriptor_;
  metadata.reflection = CMsgClientCMList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientP2PConnectionInfo::kSteamIdDestFieldNumber;
const int CMsgClientP2PConnectionInfo::kSteamIdSrcFieldNumber;
const int CMsgClientP2PConnectionInfo::kAppIdFieldNumber;
const int CMsgClientP2PConnectionInfo::kCandidateFieldNumber;
const int CMsgClientP2PConnectionInfo::kLegacyConnectionIdSrcFieldNumber;
const int CMsgClientP2PConnectionInfo::kRendezvousFieldNumber;
#endif  // !_MSC_VER

CMsgClientP2PConnectionInfo::CMsgClientP2PConnectionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientP2PConnectionInfo::InitAsDefaultInstance() {
}

CMsgClientP2PConnectionInfo::CMsgClientP2PConnectionInfo(const CMsgClientP2PConnectionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientP2PConnectionInfo::SharedCtor() {
  _cached_size_ = 0;
  steam_id_dest_ = GOOGLE_ULONGLONG(0);
  steam_id_src_ = GOOGLE_ULONGLONG(0);
  app_id_ = 0u;
  candidate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  legacy_connection_id_src_ = GOOGLE_ULONGLONG(0);
  rendezvous_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientP2PConnectionInfo::~CMsgClientP2PConnectionInfo() {
  SharedDtor();
}

void CMsgClientP2PConnectionInfo::SharedDtor() {
  if (candidate_ != &::google::protobuf::internal::kEmptyString) {
    delete candidate_;
  }
  if (rendezvous_ != &::google::protobuf::internal::kEmptyString) {
    delete rendezvous_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientP2PConnectionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientP2PConnectionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientP2PConnectionInfo_descriptor_;
}

const CMsgClientP2PConnectionInfo& CMsgClientP2PConnectionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientP2PConnectionInfo* CMsgClientP2PConnectionInfo::default_instance_ = NULL;

CMsgClientP2PConnectionInfo* CMsgClientP2PConnectionInfo::New() const {
  return new CMsgClientP2PConnectionInfo;
}

void CMsgClientP2PConnectionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_dest_ = GOOGLE_ULONGLONG(0);
    steam_id_src_ = GOOGLE_ULONGLONG(0);
    app_id_ = 0u;
    if (has_candidate()) {
      if (candidate_ != &::google::protobuf::internal::kEmptyString) {
        candidate_->clear();
      }
    }
    legacy_connection_id_src_ = GOOGLE_ULONGLONG(0);
    if (has_rendezvous()) {
      if (rendezvous_ != &::google::protobuf::internal::kEmptyString) {
        rendezvous_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientP2PConnectionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id_dest = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_dest_)));
          set_has_steam_id_dest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steam_id_src;
        break;
      }

      // optional fixed64 steam_id_src = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_src:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_src_)));
          set_has_steam_id_src();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_app_id;
        break;
      }

      // optional uint32 app_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_candidate;
        break;
      }

      // optional bytes candidate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_candidate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_candidate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_legacy_connection_id_src;
        break;
      }

      // optional fixed64 legacy_connection_id_src = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_legacy_connection_id_src:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &legacy_connection_id_src_)));
          set_has_legacy_connection_id_src();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_rendezvous;
        break;
      }

      // optional bytes rendezvous = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rendezvous:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rendezvous()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientP2PConnectionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id_dest = 1;
  if (has_steam_id_dest()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id_dest(), output);
  }

  // optional fixed64 steam_id_src = 2;
  if (has_steam_id_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_src(), output);
  }

  // optional uint32 app_id = 3;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->app_id(), output);
  }

  // optional bytes candidate = 4;
  if (has_candidate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->candidate(), output);
  }

  // optional fixed64 legacy_connection_id_src = 5;
  if (has_legacy_connection_id_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->legacy_connection_id_src(), output);
  }

  // optional bytes rendezvous = 6;
  if (has_rendezvous()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->rendezvous(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientP2PConnectionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steam_id_dest = 1;
  if (has_steam_id_dest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id_dest(), target);
  }

  // optional fixed64 steam_id_src = 2;
  if (has_steam_id_src()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_src(), target);
  }

  // optional uint32 app_id = 3;
  if (has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->app_id(), target);
  }

  // optional bytes candidate = 4;
  if (has_candidate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->candidate(), target);
  }

  // optional fixed64 legacy_connection_id_src = 5;
  if (has_legacy_connection_id_src()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->legacy_connection_id_src(), target);
  }

  // optional bytes rendezvous = 6;
  if (has_rendezvous()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->rendezvous(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientP2PConnectionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id_dest = 1;
    if (has_steam_id_dest()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_src = 2;
    if (has_steam_id_src()) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 3;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional bytes candidate = 4;
    if (has_candidate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->candidate());
    }

    // optional fixed64 legacy_connection_id_src = 5;
    if (has_legacy_connection_id_src()) {
      total_size += 1 + 8;
    }

    // optional bytes rendezvous = 6;
    if (has_rendezvous()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rendezvous());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientP2PConnectionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientP2PConnectionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientP2PConnectionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientP2PConnectionInfo::MergeFrom(const CMsgClientP2PConnectionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id_dest()) {
      set_steam_id_dest(from.steam_id_dest());
    }
    if (from.has_steam_id_src()) {
      set_steam_id_src(from.steam_id_src());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_candidate()) {
      set_candidate(from.candidate());
    }
    if (from.has_legacy_connection_id_src()) {
      set_legacy_connection_id_src(from.legacy_connection_id_src());
    }
    if (from.has_rendezvous()) {
      set_rendezvous(from.rendezvous());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientP2PConnectionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientP2PConnectionInfo::CopyFrom(const CMsgClientP2PConnectionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientP2PConnectionInfo::IsInitialized() const {

  return true;
}

void CMsgClientP2PConnectionInfo::Swap(CMsgClientP2PConnectionInfo* other) {
  if (other != this) {
    std::swap(steam_id_dest_, other->steam_id_dest_);
    std::swap(steam_id_src_, other->steam_id_src_);
    std::swap(app_id_, other->app_id_);
    std::swap(candidate_, other->candidate_);
    std::swap(legacy_connection_id_src_, other->legacy_connection_id_src_);
    std::swap(rendezvous_, other->rendezvous_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientP2PConnectionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientP2PConnectionInfo_descriptor_;
  metadata.reflection = CMsgClientP2PConnectionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientP2PConnectionFailInfo::kSteamIdDestFieldNumber;
const int CMsgClientP2PConnectionFailInfo::kSteamIdSrcFieldNumber;
const int CMsgClientP2PConnectionFailInfo::kAppIdFieldNumber;
const int CMsgClientP2PConnectionFailInfo::kEp2PSessionErrorFieldNumber;
const int CMsgClientP2PConnectionFailInfo::kConnectionIdDestFieldNumber;
const int CMsgClientP2PConnectionFailInfo::kCloseReasonFieldNumber;
const int CMsgClientP2PConnectionFailInfo::kCloseMessageFieldNumber;
#endif  // !_MSC_VER

CMsgClientP2PConnectionFailInfo::CMsgClientP2PConnectionFailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientP2PConnectionFailInfo::InitAsDefaultInstance() {
}

CMsgClientP2PConnectionFailInfo::CMsgClientP2PConnectionFailInfo(const CMsgClientP2PConnectionFailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientP2PConnectionFailInfo::SharedCtor() {
  _cached_size_ = 0;
  steam_id_dest_ = GOOGLE_ULONGLONG(0);
  steam_id_src_ = GOOGLE_ULONGLONG(0);
  app_id_ = 0u;
  ep2p_session_error_ = 0u;
  connection_id_dest_ = GOOGLE_ULONGLONG(0);
  close_reason_ = 0u;
  close_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientP2PConnectionFailInfo::~CMsgClientP2PConnectionFailInfo() {
  SharedDtor();
}

void CMsgClientP2PConnectionFailInfo::SharedDtor() {
  if (close_message_ != &::google::protobuf::internal::kEmptyString) {
    delete close_message_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientP2PConnectionFailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientP2PConnectionFailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientP2PConnectionFailInfo_descriptor_;
}

const CMsgClientP2PConnectionFailInfo& CMsgClientP2PConnectionFailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientP2PConnectionFailInfo* CMsgClientP2PConnectionFailInfo::default_instance_ = NULL;

CMsgClientP2PConnectionFailInfo* CMsgClientP2PConnectionFailInfo::New() const {
  return new CMsgClientP2PConnectionFailInfo;
}

void CMsgClientP2PConnectionFailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_dest_ = GOOGLE_ULONGLONG(0);
    steam_id_src_ = GOOGLE_ULONGLONG(0);
    app_id_ = 0u;
    ep2p_session_error_ = 0u;
    connection_id_dest_ = GOOGLE_ULONGLONG(0);
    close_reason_ = 0u;
    if (has_close_message()) {
      if (close_message_ != &::google::protobuf::internal::kEmptyString) {
        close_message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientP2PConnectionFailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id_dest = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_dest_)));
          set_has_steam_id_dest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steam_id_src;
        break;
      }

      // optional fixed64 steam_id_src = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_src:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_src_)));
          set_has_steam_id_src();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_app_id;
        break;
      }

      // optional uint32 app_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ep2p_session_error;
        break;
      }

      // optional uint32 ep2p_session_error = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ep2p_session_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ep2p_session_error_)));
          set_has_ep2p_session_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_connection_id_dest;
        break;
      }

      // optional fixed64 connection_id_dest = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_connection_id_dest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &connection_id_dest_)));
          set_has_connection_id_dest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_close_reason;
        break;
      }

      // optional uint32 close_reason = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_close_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &close_reason_)));
          set_has_close_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_close_message;
        break;
      }

      // optional string close_message = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_close_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_close_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->close_message().data(), this->close_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientP2PConnectionFailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id_dest = 1;
  if (has_steam_id_dest()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id_dest(), output);
  }

  // optional fixed64 steam_id_src = 2;
  if (has_steam_id_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_src(), output);
  }

  // optional uint32 app_id = 3;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->app_id(), output);
  }

  // optional uint32 ep2p_session_error = 4;
  if (has_ep2p_session_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ep2p_session_error(), output);
  }

  // optional fixed64 connection_id_dest = 5;
  if (has_connection_id_dest()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->connection_id_dest(), output);
  }

  // optional uint32 close_reason = 7;
  if (has_close_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->close_reason(), output);
  }

  // optional string close_message = 8;
  if (has_close_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->close_message().data(), this->close_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->close_message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientP2PConnectionFailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steam_id_dest = 1;
  if (has_steam_id_dest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id_dest(), target);
  }

  // optional fixed64 steam_id_src = 2;
  if (has_steam_id_src()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_src(), target);
  }

  // optional uint32 app_id = 3;
  if (has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->app_id(), target);
  }

  // optional uint32 ep2p_session_error = 4;
  if (has_ep2p_session_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ep2p_session_error(), target);
  }

  // optional fixed64 connection_id_dest = 5;
  if (has_connection_id_dest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->connection_id_dest(), target);
  }

  // optional uint32 close_reason = 7;
  if (has_close_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->close_reason(), target);
  }

  // optional string close_message = 8;
  if (has_close_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->close_message().data(), this->close_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->close_message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientP2PConnectionFailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id_dest = 1;
    if (has_steam_id_dest()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_src = 2;
    if (has_steam_id_src()) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 3;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 ep2p_session_error = 4;
    if (has_ep2p_session_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ep2p_session_error());
    }

    // optional fixed64 connection_id_dest = 5;
    if (has_connection_id_dest()) {
      total_size += 1 + 8;
    }

    // optional uint32 close_reason = 7;
    if (has_close_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->close_reason());
    }

    // optional string close_message = 8;
    if (has_close_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->close_message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientP2PConnectionFailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientP2PConnectionFailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientP2PConnectionFailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientP2PConnectionFailInfo::MergeFrom(const CMsgClientP2PConnectionFailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id_dest()) {
      set_steam_id_dest(from.steam_id_dest());
    }
    if (from.has_steam_id_src()) {
      set_steam_id_src(from.steam_id_src());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_ep2p_session_error()) {
      set_ep2p_session_error(from.ep2p_session_error());
    }
    if (from.has_connection_id_dest()) {
      set_connection_id_dest(from.connection_id_dest());
    }
    if (from.has_close_reason()) {
      set_close_reason(from.close_reason());
    }
    if (from.has_close_message()) {
      set_close_message(from.close_message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientP2PConnectionFailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientP2PConnectionFailInfo::CopyFrom(const CMsgClientP2PConnectionFailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientP2PConnectionFailInfo::IsInitialized() const {

  return true;
}

void CMsgClientP2PConnectionFailInfo::Swap(CMsgClientP2PConnectionFailInfo* other) {
  if (other != this) {
    std::swap(steam_id_dest_, other->steam_id_dest_);
    std::swap(steam_id_src_, other->steam_id_src_);
    std::swap(app_id_, other->app_id_);
    std::swap(ep2p_session_error_, other->ep2p_session_error_);
    std::swap(connection_id_dest_, other->connection_id_dest_);
    std::swap(close_reason_, other->close_reason_);
    std::swap(close_message_, other->close_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientP2PConnectionFailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientP2PConnectionFailInfo_descriptor_;
  metadata.reflection = CMsgClientP2PConnectionFailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientNetworkingCertRequest::kKeyDataFieldNumber;
const int CMsgClientNetworkingCertRequest::kAppIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientNetworkingCertRequest::CMsgClientNetworkingCertRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientNetworkingCertRequest::InitAsDefaultInstance() {
}

CMsgClientNetworkingCertRequest::CMsgClientNetworkingCertRequest(const CMsgClientNetworkingCertRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientNetworkingCertRequest::SharedCtor() {
  _cached_size_ = 0;
  key_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  app_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientNetworkingCertRequest::~CMsgClientNetworkingCertRequest() {
  SharedDtor();
}

void CMsgClientNetworkingCertRequest::SharedDtor() {
  if (key_data_ != &::google::protobuf::internal::kEmptyString) {
    delete key_data_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientNetworkingCertRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientNetworkingCertRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientNetworkingCertRequest_descriptor_;
}

const CMsgClientNetworkingCertRequest& CMsgClientNetworkingCertRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientNetworkingCertRequest* CMsgClientNetworkingCertRequest::default_instance_ = NULL;

CMsgClientNetworkingCertRequest* CMsgClientNetworkingCertRequest::New() const {
  return new CMsgClientNetworkingCertRequest;
}

void CMsgClientNetworkingCertRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key_data()) {
      if (key_data_ != &::google::protobuf::internal::kEmptyString) {
        key_data_->clear();
      }
    }
    app_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientNetworkingCertRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_app_id;
        break;
      }

      // optional uint32 app_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientNetworkingCertRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes key_data = 2;
  if (has_key_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->key_data(), output);
  }

  // optional uint32 app_id = 3;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->app_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientNetworkingCertRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes key_data = 2;
  if (has_key_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key_data(), target);
  }

  // optional uint32 app_id = 3;
  if (has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->app_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientNetworkingCertRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes key_data = 2;
    if (has_key_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key_data());
    }

    // optional uint32 app_id = 3;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientNetworkingCertRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientNetworkingCertRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientNetworkingCertRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientNetworkingCertRequest::MergeFrom(const CMsgClientNetworkingCertRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key_data()) {
      set_key_data(from.key_data());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientNetworkingCertRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientNetworkingCertRequest::CopyFrom(const CMsgClientNetworkingCertRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientNetworkingCertRequest::IsInitialized() const {

  return true;
}

void CMsgClientNetworkingCertRequest::Swap(CMsgClientNetworkingCertRequest* other) {
  if (other != this) {
    std::swap(key_data_, other->key_data_);
    std::swap(app_id_, other->app_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientNetworkingCertRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientNetworkingCertRequest_descriptor_;
  metadata.reflection = CMsgClientNetworkingCertRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientNetworkingCertReply::kCertFieldNumber;
const int CMsgClientNetworkingCertReply::kCaKeyIdFieldNumber;
const int CMsgClientNetworkingCertReply::kCaSignatureFieldNumber;
#endif  // !_MSC_VER

CMsgClientNetworkingCertReply::CMsgClientNetworkingCertReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientNetworkingCertReply::InitAsDefaultInstance() {
}

CMsgClientNetworkingCertReply::CMsgClientNetworkingCertReply(const CMsgClientNetworkingCertReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientNetworkingCertReply::SharedCtor() {
  _cached_size_ = 0;
  cert_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ca_key_id_ = GOOGLE_ULONGLONG(0);
  ca_signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientNetworkingCertReply::~CMsgClientNetworkingCertReply() {
  SharedDtor();
}

void CMsgClientNetworkingCertReply::SharedDtor() {
  if (cert_ != &::google::protobuf::internal::kEmptyString) {
    delete cert_;
  }
  if (ca_signature_ != &::google::protobuf::internal::kEmptyString) {
    delete ca_signature_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientNetworkingCertReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientNetworkingCertReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientNetworkingCertReply_descriptor_;
}

const CMsgClientNetworkingCertReply& CMsgClientNetworkingCertReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientNetworkingCertReply* CMsgClientNetworkingCertReply::default_instance_ = NULL;

CMsgClientNetworkingCertReply* CMsgClientNetworkingCertReply::New() const {
  return new CMsgClientNetworkingCertReply;
}

void CMsgClientNetworkingCertReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cert()) {
      if (cert_ != &::google::protobuf::internal::kEmptyString) {
        cert_->clear();
      }
    }
    ca_key_id_ = GOOGLE_ULONGLONG(0);
    if (has_ca_signature()) {
      if (ca_signature_ != &::google::protobuf::internal::kEmptyString) {
        ca_signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientNetworkingCertReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes cert = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_ca_key_id;
        break;
      }

      // optional fixed64 ca_key_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ca_key_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &ca_key_id_)));
          set_has_ca_key_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ca_signature;
        break;
      }

      // optional bytes ca_signature = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ca_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ca_signature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientNetworkingCertReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes cert = 4;
  if (has_cert()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->cert(), output);
  }

  // optional fixed64 ca_key_id = 5;
  if (has_ca_key_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->ca_key_id(), output);
  }

  // optional bytes ca_signature = 6;
  if (has_ca_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->ca_signature(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientNetworkingCertReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes cert = 4;
  if (has_cert()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->cert(), target);
  }

  // optional fixed64 ca_key_id = 5;
  if (has_ca_key_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->ca_key_id(), target);
  }

  // optional bytes ca_signature = 6;
  if (has_ca_signature()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->ca_signature(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientNetworkingCertReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes cert = 4;
    if (has_cert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cert());
    }

    // optional fixed64 ca_key_id = 5;
    if (has_ca_key_id()) {
      total_size += 1 + 8;
    }

    // optional bytes ca_signature = 6;
    if (has_ca_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ca_signature());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientNetworkingCertReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientNetworkingCertReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientNetworkingCertReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientNetworkingCertReply::MergeFrom(const CMsgClientNetworkingCertReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cert()) {
      set_cert(from.cert());
    }
    if (from.has_ca_key_id()) {
      set_ca_key_id(from.ca_key_id());
    }
    if (from.has_ca_signature()) {
      set_ca_signature(from.ca_signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientNetworkingCertReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientNetworkingCertReply::CopyFrom(const CMsgClientNetworkingCertReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientNetworkingCertReply::IsInitialized() const {

  return true;
}

void CMsgClientNetworkingCertReply::Swap(CMsgClientNetworkingCertReply* other) {
  if (other != this) {
    std::swap(cert_, other->cert_);
    std::swap(ca_key_id_, other->ca_key_id_);
    std::swap(ca_signature_, other->ca_signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientNetworkingCertReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientNetworkingCertReply_descriptor_;
  metadata.reflection = CMsgClientNetworkingCertReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientNetworkingMobileCertRequest::kAppIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientNetworkingMobileCertRequest::CMsgClientNetworkingMobileCertRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientNetworkingMobileCertRequest::InitAsDefaultInstance() {
}

CMsgClientNetworkingMobileCertRequest::CMsgClientNetworkingMobileCertRequest(const CMsgClientNetworkingMobileCertRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientNetworkingMobileCertRequest::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientNetworkingMobileCertRequest::~CMsgClientNetworkingMobileCertRequest() {
  SharedDtor();
}

void CMsgClientNetworkingMobileCertRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientNetworkingMobileCertRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientNetworkingMobileCertRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientNetworkingMobileCertRequest_descriptor_;
}

const CMsgClientNetworkingMobileCertRequest& CMsgClientNetworkingMobileCertRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientNetworkingMobileCertRequest* CMsgClientNetworkingMobileCertRequest::default_instance_ = NULL;

CMsgClientNetworkingMobileCertRequest* CMsgClientNetworkingMobileCertRequest::New() const {
  return new CMsgClientNetworkingMobileCertRequest;
}

void CMsgClientNetworkingMobileCertRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientNetworkingMobileCertRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientNetworkingMobileCertRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientNetworkingMobileCertRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientNetworkingMobileCertRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientNetworkingMobileCertRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientNetworkingMobileCertRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientNetworkingMobileCertRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientNetworkingMobileCertRequest::MergeFrom(const CMsgClientNetworkingMobileCertRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientNetworkingMobileCertRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientNetworkingMobileCertRequest::CopyFrom(const CMsgClientNetworkingMobileCertRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientNetworkingMobileCertRequest::IsInitialized() const {

  return true;
}

void CMsgClientNetworkingMobileCertRequest::Swap(CMsgClientNetworkingMobileCertRequest* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientNetworkingMobileCertRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientNetworkingMobileCertRequest_descriptor_;
  metadata.reflection = CMsgClientNetworkingMobileCertRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientNetworkingMobileCertReply::kEncodedCertFieldNumber;
#endif  // !_MSC_VER

CMsgClientNetworkingMobileCertReply::CMsgClientNetworkingMobileCertReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientNetworkingMobileCertReply::InitAsDefaultInstance() {
}

CMsgClientNetworkingMobileCertReply::CMsgClientNetworkingMobileCertReply(const CMsgClientNetworkingMobileCertReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientNetworkingMobileCertReply::SharedCtor() {
  _cached_size_ = 0;
  encoded_cert_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientNetworkingMobileCertReply::~CMsgClientNetworkingMobileCertReply() {
  SharedDtor();
}

void CMsgClientNetworkingMobileCertReply::SharedDtor() {
  if (encoded_cert_ != &::google::protobuf::internal::kEmptyString) {
    delete encoded_cert_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientNetworkingMobileCertReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientNetworkingMobileCertReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientNetworkingMobileCertReply_descriptor_;
}

const CMsgClientNetworkingMobileCertReply& CMsgClientNetworkingMobileCertReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientNetworkingMobileCertReply* CMsgClientNetworkingMobileCertReply::default_instance_ = NULL;

CMsgClientNetworkingMobileCertReply* CMsgClientNetworkingMobileCertReply::New() const {
  return new CMsgClientNetworkingMobileCertReply;
}

void CMsgClientNetworkingMobileCertReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_encoded_cert()) {
      if (encoded_cert_ != &::google::protobuf::internal::kEmptyString) {
        encoded_cert_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientNetworkingMobileCertReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string encoded_cert = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encoded_cert()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->encoded_cert().data(), this->encoded_cert().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientNetworkingMobileCertReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string encoded_cert = 1;
  if (has_encoded_cert()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->encoded_cert().data(), this->encoded_cert().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->encoded_cert(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientNetworkingMobileCertReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string encoded_cert = 1;
  if (has_encoded_cert()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->encoded_cert().data(), this->encoded_cert().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->encoded_cert(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientNetworkingMobileCertReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string encoded_cert = 1;
    if (has_encoded_cert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->encoded_cert());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientNetworkingMobileCertReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientNetworkingMobileCertReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientNetworkingMobileCertReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientNetworkingMobileCertReply::MergeFrom(const CMsgClientNetworkingMobileCertReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_encoded_cert()) {
      set_encoded_cert(from.encoded_cert());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientNetworkingMobileCertReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientNetworkingMobileCertReply::CopyFrom(const CMsgClientNetworkingMobileCertReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientNetworkingMobileCertReply::IsInitialized() const {

  return true;
}

void CMsgClientNetworkingMobileCertReply::Swap(CMsgClientNetworkingMobileCertReply* other) {
  if (other != this) {
    std::swap(encoded_cert_, other->encoded_cert_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientNetworkingMobileCertReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientNetworkingMobileCertReply_descriptor_;
  metadata.reflection = CMsgClientNetworkingMobileCertReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientGetAppOwnershipTicket::kAppIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientGetAppOwnershipTicket::CMsgClientGetAppOwnershipTicket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientGetAppOwnershipTicket::InitAsDefaultInstance() {
}

CMsgClientGetAppOwnershipTicket::CMsgClientGetAppOwnershipTicket(const CMsgClientGetAppOwnershipTicket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGetAppOwnershipTicket::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGetAppOwnershipTicket::~CMsgClientGetAppOwnershipTicket() {
  SharedDtor();
}

void CMsgClientGetAppOwnershipTicket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientGetAppOwnershipTicket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientGetAppOwnershipTicket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientGetAppOwnershipTicket_descriptor_;
}

const CMsgClientGetAppOwnershipTicket& CMsgClientGetAppOwnershipTicket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientGetAppOwnershipTicket* CMsgClientGetAppOwnershipTicket::default_instance_ = NULL;

CMsgClientGetAppOwnershipTicket* CMsgClientGetAppOwnershipTicket::New() const {
  return new CMsgClientGetAppOwnershipTicket;
}

void CMsgClientGetAppOwnershipTicket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientGetAppOwnershipTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientGetAppOwnershipTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientGetAppOwnershipTicket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientGetAppOwnershipTicket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetAppOwnershipTicket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientGetAppOwnershipTicket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientGetAppOwnershipTicket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientGetAppOwnershipTicket::MergeFrom(const CMsgClientGetAppOwnershipTicket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientGetAppOwnershipTicket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetAppOwnershipTicket::CopyFrom(const CMsgClientGetAppOwnershipTicket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetAppOwnershipTicket::IsInitialized() const {

  return true;
}

void CMsgClientGetAppOwnershipTicket::Swap(CMsgClientGetAppOwnershipTicket* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientGetAppOwnershipTicket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientGetAppOwnershipTicket_descriptor_;
  metadata.reflection = CMsgClientGetAppOwnershipTicket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientGetAppOwnershipTicketResponse::kEresultFieldNumber;
const int CMsgClientGetAppOwnershipTicketResponse::kAppIdFieldNumber;
const int CMsgClientGetAppOwnershipTicketResponse::kTicketFieldNumber;
#endif  // !_MSC_VER

CMsgClientGetAppOwnershipTicketResponse::CMsgClientGetAppOwnershipTicketResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientGetAppOwnershipTicketResponse::InitAsDefaultInstance() {
}

CMsgClientGetAppOwnershipTicketResponse::CMsgClientGetAppOwnershipTicketResponse(const CMsgClientGetAppOwnershipTicketResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGetAppOwnershipTicketResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2u;
  app_id_ = 0u;
  ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGetAppOwnershipTicketResponse::~CMsgClientGetAppOwnershipTicketResponse() {
  SharedDtor();
}

void CMsgClientGetAppOwnershipTicketResponse::SharedDtor() {
  if (ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete ticket_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientGetAppOwnershipTicketResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientGetAppOwnershipTicketResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientGetAppOwnershipTicketResponse_descriptor_;
}

const CMsgClientGetAppOwnershipTicketResponse& CMsgClientGetAppOwnershipTicketResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientGetAppOwnershipTicketResponse* CMsgClientGetAppOwnershipTicketResponse::default_instance_ = NULL;

CMsgClientGetAppOwnershipTicketResponse* CMsgClientGetAppOwnershipTicketResponse::New() const {
  return new CMsgClientGetAppOwnershipTicketResponse;
}

void CMsgClientGetAppOwnershipTicketResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2u;
    app_id_ = 0u;
    if (has_ticket()) {
      if (ticket_ != &::google::protobuf::internal::kEmptyString) {
        ticket_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientGetAppOwnershipTicketResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_app_id;
        break;
      }

      // optional uint32 app_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ticket;
        break;
      }

      // optional bytes ticket = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ticket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientGetAppOwnershipTicketResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  // optional uint32 app_id = 2;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->app_id(), output);
  }

  // optional bytes ticket = 3;
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->ticket(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientGetAppOwnershipTicketResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 eresult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  // optional uint32 app_id = 2;
  if (has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->app_id(), target);
  }

  // optional bytes ticket = 3;
  if (has_ticket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ticket(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientGetAppOwnershipTicketResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

    // optional uint32 app_id = 2;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional bytes ticket = 3;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ticket());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetAppOwnershipTicketResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientGetAppOwnershipTicketResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientGetAppOwnershipTicketResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientGetAppOwnershipTicketResponse::MergeFrom(const CMsgClientGetAppOwnershipTicketResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_ticket()) {
      set_ticket(from.ticket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientGetAppOwnershipTicketResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGetAppOwnershipTicketResponse::CopyFrom(const CMsgClientGetAppOwnershipTicketResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetAppOwnershipTicketResponse::IsInitialized() const {

  return true;
}

void CMsgClientGetAppOwnershipTicketResponse::Swap(CMsgClientGetAppOwnershipTicketResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(app_id_, other->app_id_);
    std::swap(ticket_, other->ticket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientGetAppOwnershipTicketResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientGetAppOwnershipTicketResponse_descriptor_;
  metadata.reflection = CMsgClientGetAppOwnershipTicketResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientSessionToken::kTokenFieldNumber;
#endif  // !_MSC_VER

CMsgClientSessionToken::CMsgClientSessionToken()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientSessionToken::InitAsDefaultInstance() {
}

CMsgClientSessionToken::CMsgClientSessionToken(const CMsgClientSessionToken& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientSessionToken::SharedCtor() {
  _cached_size_ = 0;
  token_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientSessionToken::~CMsgClientSessionToken() {
  SharedDtor();
}

void CMsgClientSessionToken::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientSessionToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientSessionToken::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientSessionToken_descriptor_;
}

const CMsgClientSessionToken& CMsgClientSessionToken::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientSessionToken* CMsgClientSessionToken::default_instance_ = NULL;

CMsgClientSessionToken* CMsgClientSessionToken::New() const {
  return new CMsgClientSessionToken;
}

void CMsgClientSessionToken::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    token_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientSessionToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &token_)));
          set_has_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientSessionToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientSessionToken::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 token = 1;
  if (has_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientSessionToken::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientSessionToken::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientSessionToken* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientSessionToken*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientSessionToken::MergeFrom(const CMsgClientSessionToken& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientSessionToken::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSessionToken::CopyFrom(const CMsgClientSessionToken& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSessionToken::IsInitialized() const {

  return true;
}

void CMsgClientSessionToken::Swap(CMsgClientSessionToken* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientSessionToken::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientSessionToken_descriptor_;
  metadata.reflection = CMsgClientSessionToken_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientGameConnectTokens::kMaxTokensToKeepFieldNumber;
const int CMsgClientGameConnectTokens::kTokensFieldNumber;
#endif  // !_MSC_VER

CMsgClientGameConnectTokens::CMsgClientGameConnectTokens()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientGameConnectTokens::InitAsDefaultInstance() {
}

CMsgClientGameConnectTokens::CMsgClientGameConnectTokens(const CMsgClientGameConnectTokens& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGameConnectTokens::SharedCtor() {
  _cached_size_ = 0;
  max_tokens_to_keep_ = 10u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGameConnectTokens::~CMsgClientGameConnectTokens() {
  SharedDtor();
}

void CMsgClientGameConnectTokens::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientGameConnectTokens::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientGameConnectTokens::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientGameConnectTokens_descriptor_;
}

const CMsgClientGameConnectTokens& CMsgClientGameConnectTokens::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientGameConnectTokens* CMsgClientGameConnectTokens::default_instance_ = NULL;

CMsgClientGameConnectTokens* CMsgClientGameConnectTokens::New() const {
  return new CMsgClientGameConnectTokens;
}

void CMsgClientGameConnectTokens::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    max_tokens_to_keep_ = 10u;
  }
  tokens_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientGameConnectTokens::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 max_tokens_to_keep = 1 [default = 10];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_tokens_to_keep_)));
          set_has_max_tokens_to_keep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tokens;
        break;
      }

      // repeated bytes tokens = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tokens:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_tokens()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tokens;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientGameConnectTokens::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 max_tokens_to_keep = 1 [default = 10];
  if (has_max_tokens_to_keep()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->max_tokens_to_keep(), output);
  }

  // repeated bytes tokens = 2;
  for (int i = 0; i < this->tokens_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->tokens(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientGameConnectTokens::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 max_tokens_to_keep = 1 [default = 10];
  if (has_max_tokens_to_keep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->max_tokens_to_keep(), target);
  }

  // repeated bytes tokens = 2;
  for (int i = 0; i < this->tokens_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->tokens(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientGameConnectTokens::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 max_tokens_to_keep = 1 [default = 10];
    if (has_max_tokens_to_keep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_tokens_to_keep());
    }

  }
  // repeated bytes tokens = 2;
  total_size += 1 * this->tokens_size();
  for (int i = 0; i < this->tokens_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->tokens(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGameConnectTokens::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientGameConnectTokens* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientGameConnectTokens*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientGameConnectTokens::MergeFrom(const CMsgClientGameConnectTokens& from) {
  GOOGLE_CHECK_NE(&from, this);
  tokens_.MergeFrom(from.tokens_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_tokens_to_keep()) {
      set_max_tokens_to_keep(from.max_tokens_to_keep());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientGameConnectTokens::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGameConnectTokens::CopyFrom(const CMsgClientGameConnectTokens& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGameConnectTokens::IsInitialized() const {

  return true;
}

void CMsgClientGameConnectTokens::Swap(CMsgClientGameConnectTokens* other) {
  if (other != this) {
    std::swap(max_tokens_to_keep_, other->max_tokens_to_keep_);
    tokens_.Swap(&other->tokens_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientGameConnectTokens::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientGameConnectTokens_descriptor_;
  metadata.reflection = CMsgClientGameConnectTokens_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientGamesPlayed_GamePlayed::kSteamIdGsFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kGameIdFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kDeprecatedGameIpAddressFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kGamePortFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kIsSecureFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kTokenFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kGameExtraInfoFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kGameDataBlobFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kProcessIdFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kStreamingProviderIdFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kGameFlagsFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kOwnerIdFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kVrHmdVendorFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kVrHmdModelFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kLaunchOptionTypeFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kPrimaryControllerTypeFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kPrimarySteamControllerSerialFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kTotalSteamControllerCountFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kTotalNonSteamControllerCountFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kControllerWorkshopFileIdFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kLaunchSourceFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kVrHmdRuntimeFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kGameIpAddressFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kControllerConnectionTypeFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kGameOsPlatformFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kGameBuildIdFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kCompatToolIdFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kCompatToolCmdFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kCompatToolBuildIdFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kBetaNameFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kDlcContextFieldNumber;
#endif  // !_MSC_VER

CMsgClientGamesPlayed_GamePlayed::CMsgClientGamesPlayed_GamePlayed()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientGamesPlayed_GamePlayed::InitAsDefaultInstance() {
  game_ip_address_ = const_cast< ::CMsgIPAddress*>(&::CMsgIPAddress::default_instance());
}

CMsgClientGamesPlayed_GamePlayed::CMsgClientGamesPlayed_GamePlayed(const CMsgClientGamesPlayed_GamePlayed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGamesPlayed_GamePlayed::SharedCtor() {
  _cached_size_ = 0;
  steam_id_gs_ = GOOGLE_ULONGLONG(0);
  game_id_ = GOOGLE_ULONGLONG(0);
  deprecated_game_ip_address_ = 0u;
  game_port_ = 0u;
  is_secure_ = false;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  game_extra_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  game_data_blob_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  process_id_ = 0u;
  streaming_provider_id_ = 0u;
  game_flags_ = 0u;
  owner_id_ = 0u;
  vr_hmd_vendor_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vr_hmd_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  launch_option_type_ = 0u;
  primary_controller_type_ = -1;
  primary_steam_controller_serial_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  total_steam_controller_count_ = 0u;
  total_non_steam_controller_count_ = 0u;
  controller_workshop_file_id_ = GOOGLE_ULONGLONG(0);
  launch_source_ = 0u;
  vr_hmd_runtime_ = 0u;
  game_ip_address_ = NULL;
  controller_connection_type_ = 0u;
  game_os_platform_ = 0;
  game_build_id_ = 0u;
  compat_tool_id_ = 0u;
  compat_tool_cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  compat_tool_build_id_ = 0u;
  beta_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dlc_context_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGamesPlayed_GamePlayed::~CMsgClientGamesPlayed_GamePlayed() {
  SharedDtor();
}

void CMsgClientGamesPlayed_GamePlayed::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (game_extra_info_ != &::google::protobuf::internal::kEmptyString) {
    delete game_extra_info_;
  }
  if (game_data_blob_ != &::google::protobuf::internal::kEmptyString) {
    delete game_data_blob_;
  }
  if (vr_hmd_vendor_ != &::google::protobuf::internal::kEmptyString) {
    delete vr_hmd_vendor_;
  }
  if (vr_hmd_model_ != &::google::protobuf::internal::kEmptyString) {
    delete vr_hmd_model_;
  }
  if (primary_steam_controller_serial_ != &::google::protobuf::internal::kEmptyString) {
    delete primary_steam_controller_serial_;
  }
  if (compat_tool_cmd_ != &::google::protobuf::internal::kEmptyString) {
    delete compat_tool_cmd_;
  }
  if (beta_name_ != &::google::protobuf::internal::kEmptyString) {
    delete beta_name_;
  }
  if (this != default_instance_) {
    delete game_ip_address_;
  }
}

void CMsgClientGamesPlayed_GamePlayed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientGamesPlayed_GamePlayed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientGamesPlayed_GamePlayed_descriptor_;
}

const CMsgClientGamesPlayed_GamePlayed& CMsgClientGamesPlayed_GamePlayed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientGamesPlayed_GamePlayed* CMsgClientGamesPlayed_GamePlayed::default_instance_ = NULL;

CMsgClientGamesPlayed_GamePlayed* CMsgClientGamesPlayed_GamePlayed::New() const {
  return new CMsgClientGamesPlayed_GamePlayed;
}

void CMsgClientGamesPlayed_GamePlayed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_gs_ = GOOGLE_ULONGLONG(0);
    game_id_ = GOOGLE_ULONGLONG(0);
    deprecated_game_ip_address_ = 0u;
    game_port_ = 0u;
    is_secure_ = false;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_game_extra_info()) {
      if (game_extra_info_ != &::google::protobuf::internal::kEmptyString) {
        game_extra_info_->clear();
      }
    }
    if (has_game_data_blob()) {
      if (game_data_blob_ != &::google::protobuf::internal::kEmptyString) {
        game_data_blob_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    process_id_ = 0u;
    streaming_provider_id_ = 0u;
    game_flags_ = 0u;
    owner_id_ = 0u;
    if (has_vr_hmd_vendor()) {
      if (vr_hmd_vendor_ != &::google::protobuf::internal::kEmptyString) {
        vr_hmd_vendor_->clear();
      }
    }
    if (has_vr_hmd_model()) {
      if (vr_hmd_model_ != &::google::protobuf::internal::kEmptyString) {
        vr_hmd_model_->clear();
      }
    }
    launch_option_type_ = 0u;
    primary_controller_type_ = -1;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_primary_steam_controller_serial()) {
      if (primary_steam_controller_serial_ != &::google::protobuf::internal::kEmptyString) {
        primary_steam_controller_serial_->clear();
      }
    }
    total_steam_controller_count_ = 0u;
    total_non_steam_controller_count_ = 0u;
    controller_workshop_file_id_ = GOOGLE_ULONGLONG(0);
    launch_source_ = 0u;
    vr_hmd_runtime_ = 0u;
    if (has_game_ip_address()) {
      if (game_ip_address_ != NULL) game_ip_address_->::CMsgIPAddress::Clear();
    }
    controller_connection_type_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    game_os_platform_ = 0;
    game_build_id_ = 0u;
    compat_tool_id_ = 0u;
    if (has_compat_tool_cmd()) {
      if (compat_tool_cmd_ != &::google::protobuf::internal::kEmptyString) {
        compat_tool_cmd_->clear();
      }
    }
    compat_tool_build_id_ = 0u;
    if (has_beta_name()) {
      if (beta_name_ != &::google::protobuf::internal::kEmptyString) {
        beta_name_->clear();
      }
    }
    dlc_context_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientGamesPlayed_GamePlayed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 steam_id_gs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &steam_id_gs_)));
          set_has_steam_id_gs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_game_id;
        break;
      }

      // optional fixed64 game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_deprecated_game_ip_address;
        break;
      }

      // optional uint32 deprecated_game_ip_address = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deprecated_game_ip_address:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deprecated_game_ip_address_)));
          set_has_deprecated_game_ip_address();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_port;
        break;
      }

      // optional uint32 game_port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_port_)));
          set_has_game_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_secure;
        break;
      }

      // optional bool is_secure = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_secure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_secure_)));
          set_has_is_secure();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_token;
        break;
      }

      // optional bytes token = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_game_extra_info;
        break;
      }

      // optional string game_extra_info = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_extra_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_extra_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->game_extra_info().data(), this->game_extra_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_game_data_blob;
        break;
      }

      // optional bytes game_data_blob = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_data_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_game_data_blob()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_process_id;
        break;
      }

      // optional uint32 process_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_process_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &process_id_)));
          set_has_process_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_streaming_provider_id;
        break;
      }

      // optional uint32 streaming_provider_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_streaming_provider_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &streaming_provider_id_)));
          set_has_streaming_provider_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_game_flags;
        break;
      }

      // optional uint32 game_flags = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_flags_)));
          set_has_game_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_owner_id;
        break;
      }

      // optional uint32 owner_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_owner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_id_)));
          set_has_owner_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_vr_hmd_vendor;
        break;
      }

      // optional string vr_hmd_vendor = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vr_hmd_vendor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vr_hmd_vendor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vr_hmd_vendor().data(), this->vr_hmd_vendor().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_vr_hmd_model;
        break;
      }

      // optional string vr_hmd_model = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vr_hmd_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vr_hmd_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vr_hmd_model().data(), this->vr_hmd_model().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_launch_option_type;
        break;
      }

      // optional uint32 launch_option_type = 15 [default = 0];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_launch_option_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &launch_option_type_)));
          set_has_launch_option_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_primary_controller_type;
        break;
      }

      // optional int32 primary_controller_type = 16 [default = -1];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_primary_controller_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &primary_controller_type_)));
          set_has_primary_controller_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_primary_steam_controller_serial;
        break;
      }

      // optional string primary_steam_controller_serial = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_primary_steam_controller_serial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_primary_steam_controller_serial()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->primary_steam_controller_serial().data(), this->primary_steam_controller_serial().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_total_steam_controller_count;
        break;
      }

      // optional uint32 total_steam_controller_count = 18 [default = 0];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_steam_controller_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_steam_controller_count_)));
          set_has_total_steam_controller_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_total_non_steam_controller_count;
        break;
      }

      // optional uint32 total_non_steam_controller_count = 19 [default = 0];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_non_steam_controller_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_non_steam_controller_count_)));
          set_has_total_non_steam_controller_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_controller_workshop_file_id;
        break;
      }

      // optional uint64 controller_workshop_file_id = 20 [default = 0];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_controller_workshop_file_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &controller_workshop_file_id_)));
          set_has_controller_workshop_file_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_launch_source;
        break;
      }

      // optional uint32 launch_source = 21 [default = 0];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_launch_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &launch_source_)));
          set_has_launch_source();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_vr_hmd_runtime;
        break;
      }

      // optional uint32 vr_hmd_runtime = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vr_hmd_runtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vr_hmd_runtime_)));
          set_has_vr_hmd_runtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_game_ip_address;
        break;
      }

      // optional .CMsgIPAddress game_ip_address = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_ip_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_ip_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_controller_connection_type;
        break;
      }

      // optional uint32 controller_connection_type = 24 [default = 0];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_controller_connection_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controller_connection_type_)));
          set_has_controller_connection_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_game_os_platform;
        break;
      }

      // optional int32 game_os_platform = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_os_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_os_platform_)));
          set_has_game_os_platform();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_game_build_id;
        break;
      }

      // optional uint32 game_build_id = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_build_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_build_id_)));
          set_has_game_build_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_compat_tool_id;
        break;
      }

      // optional uint32 compat_tool_id = 27 [default = 0];
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compat_tool_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &compat_tool_id_)));
          set_has_compat_tool_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_compat_tool_cmd;
        break;
      }

      // optional string compat_tool_cmd = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_compat_tool_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_compat_tool_cmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->compat_tool_cmd().data(), this->compat_tool_cmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_compat_tool_build_id;
        break;
      }

      // optional uint32 compat_tool_build_id = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compat_tool_build_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &compat_tool_build_id_)));
          set_has_compat_tool_build_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_beta_name;
        break;
      }

      // optional string beta_name = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beta_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_beta_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->beta_name().data(), this->beta_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_dlc_context;
        break;
      }

      // optional uint32 dlc_context = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dlc_context:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dlc_context_)));
          set_has_dlc_context();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientGamesPlayed_GamePlayed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 steam_id_gs = 1;
  if (has_steam_id_gs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->steam_id_gs(), output);
  }

  // optional fixed64 game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->game_id(), output);
  }

  // optional uint32 deprecated_game_ip_address = 3;
  if (has_deprecated_game_ip_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->deprecated_game_ip_address(), output);
  }

  // optional uint32 game_port = 4;
  if (has_game_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_port(), output);
  }

  // optional bool is_secure = 5;
  if (has_is_secure()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_secure(), output);
  }

  // optional bytes token = 6;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->token(), output);
  }

  // optional string game_extra_info = 7;
  if (has_game_extra_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_extra_info().data(), this->game_extra_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->game_extra_info(), output);
  }

  // optional bytes game_data_blob = 8;
  if (has_game_data_blob()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->game_data_blob(), output);
  }

  // optional uint32 process_id = 9;
  if (has_process_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->process_id(), output);
  }

  // optional uint32 streaming_provider_id = 10;
  if (has_streaming_provider_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->streaming_provider_id(), output);
  }

  // optional uint32 game_flags = 11;
  if (has_game_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->game_flags(), output);
  }

  // optional uint32 owner_id = 12;
  if (has_owner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->owner_id(), output);
  }

  // optional string vr_hmd_vendor = 13;
  if (has_vr_hmd_vendor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vr_hmd_vendor().data(), this->vr_hmd_vendor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->vr_hmd_vendor(), output);
  }

  // optional string vr_hmd_model = 14;
  if (has_vr_hmd_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vr_hmd_model().data(), this->vr_hmd_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->vr_hmd_model(), output);
  }

  // optional uint32 launch_option_type = 15 [default = 0];
  if (has_launch_option_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->launch_option_type(), output);
  }

  // optional int32 primary_controller_type = 16 [default = -1];
  if (has_primary_controller_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->primary_controller_type(), output);
  }

  // optional string primary_steam_controller_serial = 17;
  if (has_primary_steam_controller_serial()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->primary_steam_controller_serial().data(), this->primary_steam_controller_serial().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->primary_steam_controller_serial(), output);
  }

  // optional uint32 total_steam_controller_count = 18 [default = 0];
  if (has_total_steam_controller_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->total_steam_controller_count(), output);
  }

  // optional uint32 total_non_steam_controller_count = 19 [default = 0];
  if (has_total_non_steam_controller_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->total_non_steam_controller_count(), output);
  }

  // optional uint64 controller_workshop_file_id = 20 [default = 0];
  if (has_controller_workshop_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->controller_workshop_file_id(), output);
  }

  // optional uint32 launch_source = 21 [default = 0];
  if (has_launch_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->launch_source(), output);
  }

  // optional uint32 vr_hmd_runtime = 22;
  if (has_vr_hmd_runtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->vr_hmd_runtime(), output);
  }

  // optional .CMsgIPAddress game_ip_address = 23;
  if (has_game_ip_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->game_ip_address(), output);
  }

  // optional uint32 controller_connection_type = 24 [default = 0];
  if (has_controller_connection_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->controller_connection_type(), output);
  }

  // optional int32 game_os_platform = 25;
  if (has_game_os_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->game_os_platform(), output);
  }

  // optional uint32 game_build_id = 26;
  if (has_game_build_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->game_build_id(), output);
  }

  // optional uint32 compat_tool_id = 27 [default = 0];
  if (has_compat_tool_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->compat_tool_id(), output);
  }

  // optional string compat_tool_cmd = 28;
  if (has_compat_tool_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->compat_tool_cmd().data(), this->compat_tool_cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->compat_tool_cmd(), output);
  }

  // optional uint32 compat_tool_build_id = 29;
  if (has_compat_tool_build_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->compat_tool_build_id(), output);
  }

  // optional string beta_name = 30;
  if (has_beta_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beta_name().data(), this->beta_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->beta_name(), output);
  }

  // optional uint32 dlc_context = 31;
  if (has_dlc_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->dlc_context(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientGamesPlayed_GamePlayed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 steam_id_gs = 1;
  if (has_steam_id_gs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->steam_id_gs(), target);
  }

  // optional fixed64 game_id = 2;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->game_id(), target);
  }

  // optional uint32 deprecated_game_ip_address = 3;
  if (has_deprecated_game_ip_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->deprecated_game_ip_address(), target);
  }

  // optional uint32 game_port = 4;
  if (has_game_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_port(), target);
  }

  // optional bool is_secure = 5;
  if (has_is_secure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_secure(), target);
  }

  // optional bytes token = 6;
  if (has_token()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->token(), target);
  }

  // optional string game_extra_info = 7;
  if (has_game_extra_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_extra_info().data(), this->game_extra_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->game_extra_info(), target);
  }

  // optional bytes game_data_blob = 8;
  if (has_game_data_blob()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->game_data_blob(), target);
  }

  // optional uint32 process_id = 9;
  if (has_process_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->process_id(), target);
  }

  // optional uint32 streaming_provider_id = 10;
  if (has_streaming_provider_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->streaming_provider_id(), target);
  }

  // optional uint32 game_flags = 11;
  if (has_game_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->game_flags(), target);
  }

  // optional uint32 owner_id = 12;
  if (has_owner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->owner_id(), target);
  }

  // optional string vr_hmd_vendor = 13;
  if (has_vr_hmd_vendor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vr_hmd_vendor().data(), this->vr_hmd_vendor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->vr_hmd_vendor(), target);
  }

  // optional string vr_hmd_model = 14;
  if (has_vr_hmd_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vr_hmd_model().data(), this->vr_hmd_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->vr_hmd_model(), target);
  }

  // optional uint32 launch_option_type = 15 [default = 0];
  if (has_launch_option_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->launch_option_type(), target);
  }

  // optional int32 primary_controller_type = 16 [default = -1];
  if (has_primary_controller_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->primary_controller_type(), target);
  }

  // optional string primary_steam_controller_serial = 17;
  if (has_primary_steam_controller_serial()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->primary_steam_controller_serial().data(), this->primary_steam_controller_serial().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->primary_steam_controller_serial(), target);
  }

  // optional uint32 total_steam_controller_count = 18 [default = 0];
  if (has_total_steam_controller_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->total_steam_controller_count(), target);
  }

  // optional uint32 total_non_steam_controller_count = 19 [default = 0];
  if (has_total_non_steam_controller_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->total_non_steam_controller_count(), target);
  }

  // optional uint64 controller_workshop_file_id = 20 [default = 0];
  if (has_controller_workshop_file_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->controller_workshop_file_id(), target);
  }

  // optional uint32 launch_source = 21 [default = 0];
  if (has_launch_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->launch_source(), target);
  }

  // optional uint32 vr_hmd_runtime = 22;
  if (has_vr_hmd_runtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->vr_hmd_runtime(), target);
  }

  // optional .CMsgIPAddress game_ip_address = 23;
  if (has_game_ip_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->game_ip_address(), target);
  }

  // optional uint32 controller_connection_type = 24 [default = 0];
  if (has_controller_connection_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->controller_connection_type(), target);
  }

  // optional int32 game_os_platform = 25;
  if (has_game_os_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->game_os_platform(), target);
  }

  // optional uint32 game_build_id = 26;
  if (has_game_build_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->game_build_id(), target);
  }

  // optional uint32 compat_tool_id = 27 [default = 0];
  if (has_compat_tool_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->compat_tool_id(), target);
  }

  // optional string compat_tool_cmd = 28;
  if (has_compat_tool_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->compat_tool_cmd().data(), this->compat_tool_cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->compat_tool_cmd(), target);
  }

  // optional uint32 compat_tool_build_id = 29;
  if (has_compat_tool_build_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->compat_tool_build_id(), target);
  }

  // optional string beta_name = 30;
  if (has_beta_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beta_name().data(), this->beta_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->beta_name(), target);
  }

  // optional uint32 dlc_context = 31;
  if (has_dlc_context()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->dlc_context(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientGamesPlayed_GamePlayed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 steam_id_gs = 1;
    if (has_steam_id_gs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->steam_id_gs());
    }

    // optional fixed64 game_id = 2;
    if (has_game_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 deprecated_game_ip_address = 3;
    if (has_deprecated_game_ip_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deprecated_game_ip_address());
    }

    // optional uint32 game_port = 4;
    if (has_game_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_port());
    }

    // optional bool is_secure = 5;
    if (has_is_secure()) {
      total_size += 1 + 1;
    }

    // optional bytes token = 6;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->token());
    }

    // optional string game_extra_info = 7;
    if (has_game_extra_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_extra_info());
    }

    // optional bytes game_data_blob = 8;
    if (has_game_data_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->game_data_blob());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 process_id = 9;
    if (has_process_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->process_id());
    }

    // optional uint32 streaming_provider_id = 10;
    if (has_streaming_provider_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->streaming_provider_id());
    }

    // optional uint32 game_flags = 11;
    if (has_game_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_flags());
    }

    // optional uint32 owner_id = 12;
    if (has_owner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_id());
    }

    // optional string vr_hmd_vendor = 13;
    if (has_vr_hmd_vendor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vr_hmd_vendor());
    }

    // optional string vr_hmd_model = 14;
    if (has_vr_hmd_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vr_hmd_model());
    }

    // optional uint32 launch_option_type = 15 [default = 0];
    if (has_launch_option_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->launch_option_type());
    }

    // optional int32 primary_controller_type = 16 [default = -1];
    if (has_primary_controller_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->primary_controller_type());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string primary_steam_controller_serial = 17;
    if (has_primary_steam_controller_serial()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->primary_steam_controller_serial());
    }

    // optional uint32 total_steam_controller_count = 18 [default = 0];
    if (has_total_steam_controller_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_steam_controller_count());
    }

    // optional uint32 total_non_steam_controller_count = 19 [default = 0];
    if (has_total_non_steam_controller_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_non_steam_controller_count());
    }

    // optional uint64 controller_workshop_file_id = 20 [default = 0];
    if (has_controller_workshop_file_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->controller_workshop_file_id());
    }

    // optional uint32 launch_source = 21 [default = 0];
    if (has_launch_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->launch_source());
    }

    // optional uint32 vr_hmd_runtime = 22;
    if (has_vr_hmd_runtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vr_hmd_runtime());
    }

    // optional .CMsgIPAddress game_ip_address = 23;
    if (has_game_ip_address()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_ip_address());
    }

    // optional uint32 controller_connection_type = 24 [default = 0];
    if (has_controller_connection_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->controller_connection_type());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 game_os_platform = 25;
    if (has_game_os_platform()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_os_platform());
    }

    // optional uint32 game_build_id = 26;
    if (has_game_build_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_build_id());
    }

    // optional uint32 compat_tool_id = 27 [default = 0];
    if (has_compat_tool_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->compat_tool_id());
    }

    // optional string compat_tool_cmd = 28;
    if (has_compat_tool_cmd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->compat_tool_cmd());
    }

    // optional uint32 compat_tool_build_id = 29;
    if (has_compat_tool_build_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->compat_tool_build_id());
    }

    // optional string beta_name = 30;
    if (has_beta_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->beta_name());
    }

    // optional uint32 dlc_context = 31;
    if (has_dlc_context()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dlc_context());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGamesPlayed_GamePlayed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientGamesPlayed_GamePlayed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientGamesPlayed_GamePlayed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientGamesPlayed_GamePlayed::MergeFrom(const CMsgClientGamesPlayed_GamePlayed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id_gs()) {
      set_steam_id_gs(from.steam_id_gs());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_deprecated_game_ip_address()) {
      set_deprecated_game_ip_address(from.deprecated_game_ip_address());
    }
    if (from.has_game_port()) {
      set_game_port(from.game_port());
    }
    if (from.has_is_secure()) {
      set_is_secure(from.is_secure());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_game_extra_info()) {
      set_game_extra_info(from.game_extra_info());
    }
    if (from.has_game_data_blob()) {
      set_game_data_blob(from.game_data_blob());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_process_id()) {
      set_process_id(from.process_id());
    }
    if (from.has_streaming_provider_id()) {
      set_streaming_provider_id(from.streaming_provider_id());
    }
    if (from.has_game_flags()) {
      set_game_flags(from.game_flags());
    }
    if (from.has_owner_id()) {
      set_owner_id(from.owner_id());
    }
    if (from.has_vr_hmd_vendor()) {
      set_vr_hmd_vendor(from.vr_hmd_vendor());
    }
    if (from.has_vr_hmd_model()) {
      set_vr_hmd_model(from.vr_hmd_model());
    }
    if (from.has_launch_option_type()) {
      set_launch_option_type(from.launch_option_type());
    }
    if (from.has_primary_controller_type()) {
      set_primary_controller_type(from.primary_controller_type());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_primary_steam_controller_serial()) {
      set_primary_steam_controller_serial(from.primary_steam_controller_serial());
    }
    if (from.has_total_steam_controller_count()) {
      set_total_steam_controller_count(from.total_steam_controller_count());
    }
    if (from.has_total_non_steam_controller_count()) {
      set_total_non_steam_controller_count(from.total_non_steam_controller_count());
    }
    if (from.has_controller_workshop_file_id()) {
      set_controller_workshop_file_id(from.controller_workshop_file_id());
    }
    if (from.has_launch_source()) {
      set_launch_source(from.launch_source());
    }
    if (from.has_vr_hmd_runtime()) {
      set_vr_hmd_runtime(from.vr_hmd_runtime());
    }
    if (from.has_game_ip_address()) {
      mutable_game_ip_address()->::CMsgIPAddress::MergeFrom(from.game_ip_address());
    }
    if (from.has_controller_connection_type()) {
      set_controller_connection_type(from.controller_connection_type());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_game_os_platform()) {
      set_game_os_platform(from.game_os_platform());
    }
    if (from.has_game_build_id()) {
      set_game_build_id(from.game_build_id());
    }
    if (from.has_compat_tool_id()) {
      set_compat_tool_id(from.compat_tool_id());
    }
    if (from.has_compat_tool_cmd()) {
      set_compat_tool_cmd(from.compat_tool_cmd());
    }
    if (from.has_compat_tool_build_id()) {
      set_compat_tool_build_id(from.compat_tool_build_id());
    }
    if (from.has_beta_name()) {
      set_beta_name(from.beta_name());
    }
    if (from.has_dlc_context()) {
      set_dlc_context(from.dlc_context());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientGamesPlayed_GamePlayed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGamesPlayed_GamePlayed::CopyFrom(const CMsgClientGamesPlayed_GamePlayed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGamesPlayed_GamePlayed::IsInitialized() const {

  return true;
}

void CMsgClientGamesPlayed_GamePlayed::Swap(CMsgClientGamesPlayed_GamePlayed* other) {
  if (other != this) {
    std::swap(steam_id_gs_, other->steam_id_gs_);
    std::swap(game_id_, other->game_id_);
    std::swap(deprecated_game_ip_address_, other->deprecated_game_ip_address_);
    std::swap(game_port_, other->game_port_);
    std::swap(is_secure_, other->is_secure_);
    std::swap(token_, other->token_);
    std::swap(game_extra_info_, other->game_extra_info_);
    std::swap(game_data_blob_, other->game_data_blob_);
    std::swap(process_id_, other->process_id_);
    std::swap(streaming_provider_id_, other->streaming_provider_id_);
    std::swap(game_flags_, other->game_flags_);
    std::swap(owner_id_, other->owner_id_);
    std::swap(vr_hmd_vendor_, other->vr_hmd_vendor_);
    std::swap(vr_hmd_model_, other->vr_hmd_model_);
    std::swap(launch_option_type_, other->launch_option_type_);
    std::swap(primary_controller_type_, other->primary_controller_type_);
    std::swap(primary_steam_controller_serial_, other->primary_steam_controller_serial_);
    std::swap(total_steam_controller_count_, other->total_steam_controller_count_);
    std::swap(total_non_steam_controller_count_, other->total_non_steam_controller_count_);
    std::swap(controller_workshop_file_id_, other->controller_workshop_file_id_);
    std::swap(launch_source_, other->launch_source_);
    std::swap(vr_hmd_runtime_, other->vr_hmd_runtime_);
    std::swap(game_ip_address_, other->game_ip_address_);
    std::swap(controller_connection_type_, other->controller_connection_type_);
    std::swap(game_os_platform_, other->game_os_platform_);
    std::swap(game_build_id_, other->game_build_id_);
    std::swap(compat_tool_id_, other->compat_tool_id_);
    std::swap(compat_tool_cmd_, other->compat_tool_cmd_);
    std::swap(compat_tool_build_id_, other->compat_tool_build_id_);
    std::swap(beta_name_, other->beta_name_);
    std::swap(dlc_context_, other->dlc_context_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientGamesPlayed_GamePlayed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientGamesPlayed_GamePlayed_descriptor_;
  metadata.reflection = CMsgClientGamesPlayed_GamePlayed_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientGamesPlayed::kGamesPlayedFieldNumber;
const int CMsgClientGamesPlayed::kClientOsTypeFieldNumber;
const int CMsgClientGamesPlayed::kCloudGamingPlatformFieldNumber;
const int CMsgClientGamesPlayed::kRecentReauthenticationFieldNumber;
#endif  // !_MSC_VER

CMsgClientGamesPlayed::CMsgClientGamesPlayed()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientGamesPlayed::InitAsDefaultInstance() {
}

CMsgClientGamesPlayed::CMsgClientGamesPlayed(const CMsgClientGamesPlayed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGamesPlayed::SharedCtor() {
  _cached_size_ = 0;
  client_os_type_ = 0u;
  cloud_gaming_platform_ = 0u;
  recent_reauthentication_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGamesPlayed::~CMsgClientGamesPlayed() {
  SharedDtor();
}

void CMsgClientGamesPlayed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientGamesPlayed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientGamesPlayed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientGamesPlayed_descriptor_;
}

const CMsgClientGamesPlayed& CMsgClientGamesPlayed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientGamesPlayed* CMsgClientGamesPlayed::default_instance_ = NULL;

CMsgClientGamesPlayed* CMsgClientGamesPlayed::New() const {
  return new CMsgClientGamesPlayed;
}

void CMsgClientGamesPlayed::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    client_os_type_ = 0u;
    cloud_gaming_platform_ = 0u;
    recent_reauthentication_ = false;
  }
  games_played_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientGamesPlayed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgClientGamesPlayed.GamePlayed games_played = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_games_played:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_games_played()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_games_played;
        if (input->ExpectTag(16)) goto parse_client_os_type;
        break;
      }

      // optional uint32 client_os_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_os_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_os_type_)));
          set_has_client_os_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cloud_gaming_platform;
        break;
      }

      // optional uint32 cloud_gaming_platform = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cloud_gaming_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cloud_gaming_platform_)));
          set_has_cloud_gaming_platform();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_recent_reauthentication;
        break;
      }

      // optional bool recent_reauthentication = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recent_reauthentication:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &recent_reauthentication_)));
          set_has_recent_reauthentication();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientGamesPlayed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgClientGamesPlayed.GamePlayed games_played = 1;
  for (int i = 0; i < this->games_played_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->games_played(i), output);
  }

  // optional uint32 client_os_type = 2;
  if (has_client_os_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_os_type(), output);
  }

  // optional uint32 cloud_gaming_platform = 3;
  if (has_cloud_gaming_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cloud_gaming_platform(), output);
  }

  // optional bool recent_reauthentication = 4;
  if (has_recent_reauthentication()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->recent_reauthentication(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientGamesPlayed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgClientGamesPlayed.GamePlayed games_played = 1;
  for (int i = 0; i < this->games_played_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->games_played(i), target);
  }

  // optional uint32 client_os_type = 2;
  if (has_client_os_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_os_type(), target);
  }

  // optional uint32 cloud_gaming_platform = 3;
  if (has_cloud_gaming_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cloud_gaming_platform(), target);
  }

  // optional bool recent_reauthentication = 4;
  if (has_recent_reauthentication()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->recent_reauthentication(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientGamesPlayed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 client_os_type = 2;
    if (has_client_os_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_os_type());
    }

    // optional uint32 cloud_gaming_platform = 3;
    if (has_cloud_gaming_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cloud_gaming_platform());
    }

    // optional bool recent_reauthentication = 4;
    if (has_recent_reauthentication()) {
      total_size += 1 + 1;
    }

  }
  // repeated .CMsgClientGamesPlayed.GamePlayed games_played = 1;
  total_size += 1 * this->games_played_size();
  for (int i = 0; i < this->games_played_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->games_played(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGamesPlayed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientGamesPlayed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientGamesPlayed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientGamesPlayed::MergeFrom(const CMsgClientGamesPlayed& from) {
  GOOGLE_CHECK_NE(&from, this);
  games_played_.MergeFrom(from.games_played_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_client_os_type()) {
      set_client_os_type(from.client_os_type());
    }
    if (from.has_cloud_gaming_platform()) {
      set_cloud_gaming_platform(from.cloud_gaming_platform());
    }
    if (from.has_recent_reauthentication()) {
      set_recent_reauthentication(from.recent_reauthentication());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientGamesPlayed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientGamesPlayed::CopyFrom(const CMsgClientGamesPlayed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGamesPlayed::IsInitialized() const {

  return true;
}

void CMsgClientGamesPlayed::Swap(CMsgClientGamesPlayed* other) {
  if (other != this) {
    games_played_.Swap(&other->games_played_);
    std::swap(client_os_type_, other->client_os_type_);
    std::swap(cloud_gaming_platform_, other->cloud_gaming_platform_);
    std::swap(recent_reauthentication_, other->recent_reauthentication_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientGamesPlayed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientGamesPlayed_descriptor_;
  metadata.reflection = CMsgClientGamesPlayed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGSApprove::kSteamIdFieldNumber;
const int CMsgGSApprove::kOwnerSteamIdFieldNumber;
#endif  // !_MSC_VER

CMsgGSApprove::CMsgGSApprove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGSApprove::InitAsDefaultInstance() {
}

CMsgGSApprove::CMsgGSApprove(const CMsgGSApprove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGSApprove::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  owner_steam_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGSApprove::~CMsgGSApprove() {
  SharedDtor();
}

void CMsgGSApprove::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGSApprove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGSApprove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGSApprove_descriptor_;
}

const CMsgGSApprove& CMsgGSApprove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgGSApprove* CMsgGSApprove::default_instance_ = NULL;

CMsgGSApprove* CMsgGSApprove::New() const {
  return new CMsgGSApprove;
}

void CMsgGSApprove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_ = GOOGLE_ULONGLONG(0);
    owner_steam_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGSApprove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_owner_steam_id;
        break;
      }

      // optional fixed64 owner_steam_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_owner_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &owner_steam_id_)));
          set_has_owner_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGSApprove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional fixed64 owner_steam_id = 2;
  if (has_owner_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->owner_steam_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGSApprove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional fixed64 owner_steam_id = 2;
  if (has_owner_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->owner_steam_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGSApprove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 owner_steam_id = 2;
    if (has_owner_steam_id()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGSApprove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGSApprove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGSApprove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGSApprove::MergeFrom(const CMsgGSApprove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_owner_steam_id()) {
      set_owner_steam_id(from.owner_steam_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGSApprove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGSApprove::CopyFrom(const CMsgGSApprove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSApprove::IsInitialized() const {

  return true;
}

void CMsgGSApprove::Swap(CMsgGSApprove* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(owner_steam_id_, other->owner_steam_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGSApprove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGSApprove_descriptor_;
  metadata.reflection = CMsgGSApprove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGSDeny::kSteamIdFieldNumber;
const int CMsgGSDeny::kEdenyReasonFieldNumber;
const int CMsgGSDeny::kDenyStringFieldNumber;
#endif  // !_MSC_VER

CMsgGSDeny::CMsgGSDeny()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGSDeny::InitAsDefaultInstance() {
}

CMsgGSDeny::CMsgGSDeny(const CMsgGSDeny& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGSDeny::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  edeny_reason_ = 0;
  deny_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGSDeny::~CMsgGSDeny() {
  SharedDtor();
}

void CMsgGSDeny::SharedDtor() {
  if (deny_string_ != &::google::protobuf::internal::kEmptyString) {
    delete deny_string_;
  }
  if (this != default_instance_) {
  }
}

void CMsgGSDeny::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGSDeny::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGSDeny_descriptor_;
}

const CMsgGSDeny& CMsgGSDeny::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgGSDeny* CMsgGSDeny::default_instance_ = NULL;

CMsgGSDeny* CMsgGSDeny::New() const {
  return new CMsgGSDeny;
}

void CMsgGSDeny::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_ = GOOGLE_ULONGLONG(0);
    edeny_reason_ = 0;
    if (has_deny_string()) {
      if (deny_string_ != &::google::protobuf::internal::kEmptyString) {
        deny_string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGSDeny::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_edeny_reason;
        break;
      }

      // optional int32 edeny_reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_edeny_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &edeny_reason_)));
          set_has_edeny_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_deny_string;
        break;
      }

      // optional string deny_string = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deny_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deny_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deny_string().data(), this->deny_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGSDeny::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional int32 edeny_reason = 2;
  if (has_edeny_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->edeny_reason(), output);
  }

  // optional string deny_string = 3;
  if (has_deny_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deny_string().data(), this->deny_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->deny_string(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGSDeny::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional int32 edeny_reason = 2;
  if (has_edeny_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->edeny_reason(), target);
  }

  // optional string deny_string = 3;
  if (has_deny_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deny_string().data(), this->deny_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->deny_string(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGSDeny::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional int32 edeny_reason = 2;
    if (has_edeny_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->edeny_reason());
    }

    // optional string deny_string = 3;
    if (has_deny_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deny_string());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGSDeny::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGSDeny* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGSDeny*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGSDeny::MergeFrom(const CMsgGSDeny& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_edeny_reason()) {
      set_edeny_reason(from.edeny_reason());
    }
    if (from.has_deny_string()) {
      set_deny_string(from.deny_string());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGSDeny::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGSDeny::CopyFrom(const CMsgGSDeny& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSDeny::IsInitialized() const {

  return true;
}

void CMsgGSDeny::Swap(CMsgGSDeny* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(edeny_reason_, other->edeny_reason_);
    std::swap(deny_string_, other->deny_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGSDeny::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGSDeny_descriptor_;
  metadata.reflection = CMsgGSDeny_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGSKick::kSteamIdFieldNumber;
const int CMsgGSKick::kEdenyReasonFieldNumber;
#endif  // !_MSC_VER

CMsgGSKick::CMsgGSKick()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgGSKick::InitAsDefaultInstance() {
}

CMsgGSKick::CMsgGSKick(const CMsgGSKick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGSKick::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  edeny_reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGSKick::~CMsgGSKick() {
  SharedDtor();
}

void CMsgGSKick::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgGSKick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGSKick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgGSKick_descriptor_;
}

const CMsgGSKick& CMsgGSKick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgGSKick* CMsgGSKick::default_instance_ = NULL;

CMsgGSKick* CMsgGSKick::New() const {
  return new CMsgGSKick;
}

void CMsgGSKick::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_ = GOOGLE_ULONGLONG(0);
    edeny_reason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgGSKick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_edeny_reason;
        break;
      }

      // optional int32 edeny_reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_edeny_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &edeny_reason_)));
          set_has_edeny_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGSKick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional int32 edeny_reason = 2;
  if (has_edeny_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->edeny_reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgGSKick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional int32 edeny_reason = 2;
  if (has_edeny_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->edeny_reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgGSKick::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional int32 edeny_reason = 2;
    if (has_edeny_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->edeny_reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGSKick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgGSKick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgGSKick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgGSKick::MergeFrom(const CMsgGSKick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_edeny_reason()) {
      set_edeny_reason(from.edeny_reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgGSKick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGSKick::CopyFrom(const CMsgGSKick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSKick::IsInitialized() const {

  return true;
}

void CMsgGSKick::Swap(CMsgGSKick* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(edeny_reason_, other->edeny_reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgGSKick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgGSKick_descriptor_;
  metadata.reflection = CMsgGSKick_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientAuthList::kTokensLeftFieldNumber;
const int CMsgClientAuthList::kLastRequestSeqFieldNumber;
const int CMsgClientAuthList::kLastRequestSeqFromServerFieldNumber;
const int CMsgClientAuthList::kTicketsFieldNumber;
const int CMsgClientAuthList::kAppIdsFieldNumber;
const int CMsgClientAuthList::kMessageSequenceFieldNumber;
#endif  // !_MSC_VER

CMsgClientAuthList::CMsgClientAuthList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientAuthList::InitAsDefaultInstance() {
}

CMsgClientAuthList::CMsgClientAuthList(const CMsgClientAuthList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientAuthList::SharedCtor() {
  _cached_size_ = 0;
  tokens_left_ = 0u;
  last_request_seq_ = 0u;
  last_request_seq_from_server_ = 0u;
  message_sequence_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientAuthList::~CMsgClientAuthList() {
  SharedDtor();
}

void CMsgClientAuthList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientAuthList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientAuthList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientAuthList_descriptor_;
}

const CMsgClientAuthList& CMsgClientAuthList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientAuthList* CMsgClientAuthList::default_instance_ = NULL;

CMsgClientAuthList* CMsgClientAuthList::New() const {
  return new CMsgClientAuthList;
}

void CMsgClientAuthList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tokens_left_ = 0u;
    last_request_seq_ = 0u;
    last_request_seq_from_server_ = 0u;
    message_sequence_ = 0u;
  }
  tickets_.Clear();
  app_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientAuthList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tokens_left = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tokens_left_)));
          set_has_tokens_left();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_last_request_seq;
        break;
      }

      // optional uint32 last_request_seq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_request_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_request_seq_)));
          set_has_last_request_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_request_seq_from_server;
        break;
      }

      // optional uint32 last_request_seq_from_server = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_request_seq_from_server:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_request_seq_from_server_)));
          set_has_last_request_seq_from_server();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tickets;
        break;
      }

      // repeated .CMsgAuthTicket tickets = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tickets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tickets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tickets;
        if (input->ExpectTag(40)) goto parse_app_ids;
        break;
      }

      // repeated uint32 app_ids = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_app_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_app_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_app_ids;
        if (input->ExpectTag(48)) goto parse_message_sequence;
        break;
      }

      // optional uint32 message_sequence = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_message_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_sequence_)));
          set_has_message_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientAuthList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 tokens_left = 1;
  if (has_tokens_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tokens_left(), output);
  }

  // optional uint32 last_request_seq = 2;
  if (has_last_request_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->last_request_seq(), output);
  }

  // optional uint32 last_request_seq_from_server = 3;
  if (has_last_request_seq_from_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->last_request_seq_from_server(), output);
  }

  // repeated .CMsgAuthTicket tickets = 4;
  for (int i = 0; i < this->tickets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tickets(i), output);
  }

  // repeated uint32 app_ids = 5;
  for (int i = 0; i < this->app_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->app_ids(i), output);
  }

  // optional uint32 message_sequence = 6;
  if (has_message_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->message_sequence(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientAuthList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 tokens_left = 1;
  if (has_tokens_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tokens_left(), target);
  }

  // optional uint32 last_request_seq = 2;
  if (has_last_request_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->last_request_seq(), target);
  }

  // optional uint32 last_request_seq_from_server = 3;
  if (has_last_request_seq_from_server()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->last_request_seq_from_server(), target);
  }

  // repeated .CMsgAuthTicket tickets = 4;
  for (int i = 0; i < this->tickets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tickets(i), target);
  }

  // repeated uint32 app_ids = 5;
  for (int i = 0; i < this->app_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->app_ids(i), target);
  }

  // optional uint32 message_sequence = 6;
  if (has_message_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->message_sequence(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientAuthList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tokens_left = 1;
    if (has_tokens_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tokens_left());
    }

    // optional uint32 last_request_seq = 2;
    if (has_last_request_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_request_seq());
    }

    // optional uint32 last_request_seq_from_server = 3;
    if (has_last_request_seq_from_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_request_seq_from_server());
    }

    // optional uint32 message_sequence = 6;
    if (has_message_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_sequence());
    }

  }
  // repeated .CMsgAuthTicket tickets = 4;
  total_size += 1 * this->tickets_size();
  for (int i = 0; i < this->tickets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tickets(i));
  }

  // repeated uint32 app_ids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->app_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->app_ids(i));
    }
    total_size += 1 * this->app_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAuthList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientAuthList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientAuthList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientAuthList::MergeFrom(const CMsgClientAuthList& from) {
  GOOGLE_CHECK_NE(&from, this);
  tickets_.MergeFrom(from.tickets_);
  app_ids_.MergeFrom(from.app_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tokens_left()) {
      set_tokens_left(from.tokens_left());
    }
    if (from.has_last_request_seq()) {
      set_last_request_seq(from.last_request_seq());
    }
    if (from.has_last_request_seq_from_server()) {
      set_last_request_seq_from_server(from.last_request_seq_from_server());
    }
    if (from.has_message_sequence()) {
      set_message_sequence(from.message_sequence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientAuthList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAuthList::CopyFrom(const CMsgClientAuthList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAuthList::IsInitialized() const {

  return true;
}

void CMsgClientAuthList::Swap(CMsgClientAuthList* other) {
  if (other != this) {
    std::swap(tokens_left_, other->tokens_left_);
    std::swap(last_request_seq_, other->last_request_seq_);
    std::swap(last_request_seq_from_server_, other->last_request_seq_from_server_);
    tickets_.Swap(&other->tickets_);
    app_ids_.Swap(&other->app_ids_);
    std::swap(message_sequence_, other->message_sequence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientAuthList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientAuthList_descriptor_;
  metadata.reflection = CMsgClientAuthList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientAuthListAck::kTicketCrcFieldNumber;
const int CMsgClientAuthListAck::kAppIdsFieldNumber;
const int CMsgClientAuthListAck::kMessageSequenceFieldNumber;
#endif  // !_MSC_VER

CMsgClientAuthListAck::CMsgClientAuthListAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientAuthListAck::InitAsDefaultInstance() {
}

CMsgClientAuthListAck::CMsgClientAuthListAck(const CMsgClientAuthListAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientAuthListAck::SharedCtor() {
  _cached_size_ = 0;
  message_sequence_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientAuthListAck::~CMsgClientAuthListAck() {
  SharedDtor();
}

void CMsgClientAuthListAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientAuthListAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientAuthListAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientAuthListAck_descriptor_;
}

const CMsgClientAuthListAck& CMsgClientAuthListAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientAuthListAck* CMsgClientAuthListAck::default_instance_ = NULL;

CMsgClientAuthListAck* CMsgClientAuthListAck::New() const {
  return new CMsgClientAuthListAck;
}

void CMsgClientAuthListAck::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    message_sequence_ = 0u;
  }
  ticket_crc_.Clear();
  app_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientAuthListAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 ticket_crc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ticket_crc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_ticket_crc())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ticket_crc())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_ticket_crc;
        if (input->ExpectTag(16)) goto parse_app_ids;
        break;
      }

      // repeated uint32 app_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_app_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_app_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_app_ids;
        if (input->ExpectTag(24)) goto parse_message_sequence;
        break;
      }

      // optional uint32 message_sequence = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_message_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_sequence_)));
          set_has_message_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientAuthListAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 ticket_crc = 1;
  for (int i = 0; i < this->ticket_crc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->ticket_crc(i), output);
  }

  // repeated uint32 app_ids = 2;
  for (int i = 0; i < this->app_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->app_ids(i), output);
  }

  // optional uint32 message_sequence = 3;
  if (has_message_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->message_sequence(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientAuthListAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 ticket_crc = 1;
  for (int i = 0; i < this->ticket_crc_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->ticket_crc(i), target);
  }

  // repeated uint32 app_ids = 2;
  for (int i = 0; i < this->app_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->app_ids(i), target);
  }

  // optional uint32 message_sequence = 3;
  if (has_message_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->message_sequence(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientAuthListAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 message_sequence = 3;
    if (has_message_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_sequence());
    }

  }
  // repeated uint32 ticket_crc = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->ticket_crc_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ticket_crc(i));
    }
    total_size += 1 * this->ticket_crc_size() + data_size;
  }

  // repeated uint32 app_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->app_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->app_ids(i));
    }
    total_size += 1 * this->app_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAuthListAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientAuthListAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientAuthListAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientAuthListAck::MergeFrom(const CMsgClientAuthListAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  ticket_crc_.MergeFrom(from.ticket_crc_);
  app_ids_.MergeFrom(from.app_ids_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_message_sequence()) {
      set_message_sequence(from.message_sequence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientAuthListAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAuthListAck::CopyFrom(const CMsgClientAuthListAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAuthListAck::IsInitialized() const {

  return true;
}

void CMsgClientAuthListAck::Swap(CMsgClientAuthListAck* other) {
  if (other != this) {
    ticket_crc_.Swap(&other->ticket_crc_);
    app_ids_.Swap(&other->app_ids_);
    std::swap(message_sequence_, other->message_sequence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientAuthListAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientAuthListAck_descriptor_;
  metadata.reflection = CMsgClientAuthListAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientLicenseList_License::kPackageIdFieldNumber;
const int CMsgClientLicenseList_License::kTimeCreatedFieldNumber;
const int CMsgClientLicenseList_License::kTimeNextProcessFieldNumber;
const int CMsgClientLicenseList_License::kMinuteLimitFieldNumber;
const int CMsgClientLicenseList_License::kMinutesUsedFieldNumber;
const int CMsgClientLicenseList_License::kPaymentMethodFieldNumber;
const int CMsgClientLicenseList_License::kFlagsFieldNumber;
const int CMsgClientLicenseList_License::kPurchaseCountryCodeFieldNumber;
const int CMsgClientLicenseList_License::kLicenseTypeFieldNumber;
const int CMsgClientLicenseList_License::kTerritoryCodeFieldNumber;
const int CMsgClientLicenseList_License::kChangeNumberFieldNumber;
const int CMsgClientLicenseList_License::kOwnerIdFieldNumber;
const int CMsgClientLicenseList_License::kInitialPeriodFieldNumber;
const int CMsgClientLicenseList_License::kInitialTimeUnitFieldNumber;
const int CMsgClientLicenseList_License::kRenewalPeriodFieldNumber;
const int CMsgClientLicenseList_License::kRenewalTimeUnitFieldNumber;
const int CMsgClientLicenseList_License::kAccessTokenFieldNumber;
const int CMsgClientLicenseList_License::kMasterPackageIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientLicenseList_License::CMsgClientLicenseList_License()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientLicenseList_License::InitAsDefaultInstance() {
}

CMsgClientLicenseList_License::CMsgClientLicenseList_License(const CMsgClientLicenseList_License& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientLicenseList_License::SharedCtor() {
  _cached_size_ = 0;
  package_id_ = 0u;
  time_created_ = 0u;
  time_next_process_ = 0u;
  minute_limit_ = 0;
  minutes_used_ = 0;
  payment_method_ = 0u;
  flags_ = 0u;
  purchase_country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  license_type_ = 0u;
  territory_code_ = 0;
  change_number_ = 0;
  owner_id_ = 0u;
  initial_period_ = 0u;
  initial_time_unit_ = 0u;
  renewal_period_ = 0u;
  renewal_time_unit_ = 0u;
  access_token_ = GOOGLE_ULONGLONG(0);
  master_package_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientLicenseList_License::~CMsgClientLicenseList_License() {
  SharedDtor();
}

void CMsgClientLicenseList_License::SharedDtor() {
  if (purchase_country_code_ != &::google::protobuf::internal::kEmptyString) {
    delete purchase_country_code_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientLicenseList_License::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientLicenseList_License::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientLicenseList_License_descriptor_;
}

const CMsgClientLicenseList_License& CMsgClientLicenseList_License::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientLicenseList_License* CMsgClientLicenseList_License::default_instance_ = NULL;

CMsgClientLicenseList_License* CMsgClientLicenseList_License::New() const {
  return new CMsgClientLicenseList_License;
}

void CMsgClientLicenseList_License::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    package_id_ = 0u;
    time_created_ = 0u;
    time_next_process_ = 0u;
    minute_limit_ = 0;
    minutes_used_ = 0;
    payment_method_ = 0u;
    flags_ = 0u;
    if (has_purchase_country_code()) {
      if (purchase_country_code_ != &::google::protobuf::internal::kEmptyString) {
        purchase_country_code_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    license_type_ = 0u;
    territory_code_ = 0;
    change_number_ = 0;
    owner_id_ = 0u;
    initial_period_ = 0u;
    initial_time_unit_ = 0u;
    renewal_period_ = 0u;
    renewal_time_unit_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    access_token_ = GOOGLE_ULONGLONG(0);
    master_package_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientLicenseList_License::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 package_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &package_id_)));
          set_has_package_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_time_created;
        break;
      }

      // optional fixed32 time_created = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_time_created:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &time_created_)));
          set_has_time_created();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_time_next_process;
        break;
      }

      // optional fixed32 time_next_process = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_time_next_process:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &time_next_process_)));
          set_has_time_next_process();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_minute_limit;
        break;
      }

      // optional int32 minute_limit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minute_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minute_limit_)));
          set_has_minute_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_minutes_used;
        break;
      }

      // optional int32 minutes_used = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minutes_used:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minutes_used_)));
          set_has_minutes_used();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_payment_method;
        break;
      }

      // optional uint32 payment_method = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_payment_method:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &payment_method_)));
          set_has_payment_method();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_purchase_country_code;
        break;
      }

      // optional string purchase_country_code = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_purchase_country_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_purchase_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->purchase_country_code().data(), this->purchase_country_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_license_type;
        break;
      }

      // optional uint32 license_type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_license_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &license_type_)));
          set_has_license_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_territory_code;
        break;
      }

      // optional int32 territory_code = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_territory_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &territory_code_)));
          set_has_territory_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_change_number;
        break;
      }

      // optional int32 change_number = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_number_)));
          set_has_change_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_owner_id;
        break;
      }

      // optional uint32 owner_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_owner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_id_)));
          set_has_owner_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_initial_period;
        break;
      }

      // optional uint32 initial_period = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_initial_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initial_period_)));
          set_has_initial_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_initial_time_unit;
        break;
      }

      // optional uint32 initial_time_unit = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_initial_time_unit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initial_time_unit_)));
          set_has_initial_time_unit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_renewal_period;
        break;
      }

      // optional uint32 renewal_period = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_renewal_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &renewal_period_)));
          set_has_renewal_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_renewal_time_unit;
        break;
      }

      // optional uint32 renewal_time_unit = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_renewal_time_unit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &renewal_time_unit_)));
          set_has_renewal_time_unit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_access_token;
        break;
      }

      // optional uint64 access_token = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_access_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &access_token_)));
          set_has_access_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_master_package_id;
        break;
      }

      // optional uint32 master_package_id = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_master_package_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &master_package_id_)));
          set_has_master_package_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientLicenseList_License::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 package_id = 1;
  if (has_package_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->package_id(), output);
  }

  // optional fixed32 time_created = 2;
  if (has_time_created()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->time_created(), output);
  }

  // optional fixed32 time_next_process = 3;
  if (has_time_next_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->time_next_process(), output);
  }

  // optional int32 minute_limit = 4;
  if (has_minute_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->minute_limit(), output);
  }

  // optional int32 minutes_used = 5;
  if (has_minutes_used()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->minutes_used(), output);
  }

  // optional uint32 payment_method = 6;
  if (has_payment_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->payment_method(), output);
  }

  // optional uint32 flags = 7;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->flags(), output);
  }

  // optional string purchase_country_code = 8;
  if (has_purchase_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->purchase_country_code().data(), this->purchase_country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->purchase_country_code(), output);
  }

  // optional uint32 license_type = 9;
  if (has_license_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->license_type(), output);
  }

  // optional int32 territory_code = 10;
  if (has_territory_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->territory_code(), output);
  }

  // optional int32 change_number = 11;
  if (has_change_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->change_number(), output);
  }

  // optional uint32 owner_id = 12;
  if (has_owner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->owner_id(), output);
  }

  // optional uint32 initial_period = 13;
  if (has_initial_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->initial_period(), output);
  }

  // optional uint32 initial_time_unit = 14;
  if (has_initial_time_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->initial_time_unit(), output);
  }

  // optional uint32 renewal_period = 15;
  if (has_renewal_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->renewal_period(), output);
  }

  // optional uint32 renewal_time_unit = 16;
  if (has_renewal_time_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->renewal_time_unit(), output);
  }

  // optional uint64 access_token = 17;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->access_token(), output);
  }

  // optional uint32 master_package_id = 18;
  if (has_master_package_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->master_package_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientLicenseList_License::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 package_id = 1;
  if (has_package_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->package_id(), target);
  }

  // optional fixed32 time_created = 2;
  if (has_time_created()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->time_created(), target);
  }

  // optional fixed32 time_next_process = 3;
  if (has_time_next_process()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->time_next_process(), target);
  }

  // optional int32 minute_limit = 4;
  if (has_minute_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->minute_limit(), target);
  }

  // optional int32 minutes_used = 5;
  if (has_minutes_used()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->minutes_used(), target);
  }

  // optional uint32 payment_method = 6;
  if (has_payment_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->payment_method(), target);
  }

  // optional uint32 flags = 7;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->flags(), target);
  }

  // optional string purchase_country_code = 8;
  if (has_purchase_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->purchase_country_code().data(), this->purchase_country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->purchase_country_code(), target);
  }

  // optional uint32 license_type = 9;
  if (has_license_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->license_type(), target);
  }

  // optional int32 territory_code = 10;
  if (has_territory_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->territory_code(), target);
  }

  // optional int32 change_number = 11;
  if (has_change_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->change_number(), target);
  }

  // optional uint32 owner_id = 12;
  if (has_owner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->owner_id(), target);
  }

  // optional uint32 initial_period = 13;
  if (has_initial_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->initial_period(), target);
  }

  // optional uint32 initial_time_unit = 14;
  if (has_initial_time_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->initial_time_unit(), target);
  }

  // optional uint32 renewal_period = 15;
  if (has_renewal_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->renewal_period(), target);
  }

  // optional uint32 renewal_time_unit = 16;
  if (has_renewal_time_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->renewal_time_unit(), target);
  }

  // optional uint64 access_token = 17;
  if (has_access_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->access_token(), target);
  }

  // optional uint32 master_package_id = 18;
  if (has_master_package_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->master_package_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientLicenseList_License::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 package_id = 1;
    if (has_package_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->package_id());
    }

    // optional fixed32 time_created = 2;
    if (has_time_created()) {
      total_size += 1 + 4;
    }

    // optional fixed32 time_next_process = 3;
    if (has_time_next_process()) {
      total_size += 1 + 4;
    }

    // optional int32 minute_limit = 4;
    if (has_minute_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minute_limit());
    }

    // optional int32 minutes_used = 5;
    if (has_minutes_used()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minutes_used());
    }

    // optional uint32 payment_method = 6;
    if (has_payment_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->payment_method());
    }

    // optional uint32 flags = 7;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional string purchase_country_code = 8;
    if (has_purchase_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->purchase_country_code());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 license_type = 9;
    if (has_license_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->license_type());
    }

    // optional int32 territory_code = 10;
    if (has_territory_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->territory_code());
    }

    // optional int32 change_number = 11;
    if (has_change_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change_number());
    }

    // optional uint32 owner_id = 12;
    if (has_owner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_id());
    }

    // optional uint32 initial_period = 13;
    if (has_initial_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initial_period());
    }

    // optional uint32 initial_time_unit = 14;
    if (has_initial_time_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initial_time_unit());
    }

    // optional uint32 renewal_period = 15;
    if (has_renewal_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->renewal_period());
    }

    // optional uint32 renewal_time_unit = 16;
    if (has_renewal_time_unit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->renewal_time_unit());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 access_token = 17;
    if (has_access_token()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->access_token());
    }

    // optional uint32 master_package_id = 18;
    if (has_master_package_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->master_package_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientLicenseList_License::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientLicenseList_License* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientLicenseList_License*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientLicenseList_License::MergeFrom(const CMsgClientLicenseList_License& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_package_id()) {
      set_package_id(from.package_id());
    }
    if (from.has_time_created()) {
      set_time_created(from.time_created());
    }
    if (from.has_time_next_process()) {
      set_time_next_process(from.time_next_process());
    }
    if (from.has_minute_limit()) {
      set_minute_limit(from.minute_limit());
    }
    if (from.has_minutes_used()) {
      set_minutes_used(from.minutes_used());
    }
    if (from.has_payment_method()) {
      set_payment_method(from.payment_method());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_purchase_country_code()) {
      set_purchase_country_code(from.purchase_country_code());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_license_type()) {
      set_license_type(from.license_type());
    }
    if (from.has_territory_code()) {
      set_territory_code(from.territory_code());
    }
    if (from.has_change_number()) {
      set_change_number(from.change_number());
    }
    if (from.has_owner_id()) {
      set_owner_id(from.owner_id());
    }
    if (from.has_initial_period()) {
      set_initial_period(from.initial_period());
    }
    if (from.has_initial_time_unit()) {
      set_initial_time_unit(from.initial_time_unit());
    }
    if (from.has_renewal_period()) {
      set_renewal_period(from.renewal_period());
    }
    if (from.has_renewal_time_unit()) {
      set_renewal_time_unit(from.renewal_time_unit());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_master_package_id()) {
      set_master_package_id(from.master_package_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientLicenseList_License::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLicenseList_License::CopyFrom(const CMsgClientLicenseList_License& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLicenseList_License::IsInitialized() const {

  return true;
}

void CMsgClientLicenseList_License::Swap(CMsgClientLicenseList_License* other) {
  if (other != this) {
    std::swap(package_id_, other->package_id_);
    std::swap(time_created_, other->time_created_);
    std::swap(time_next_process_, other->time_next_process_);
    std::swap(minute_limit_, other->minute_limit_);
    std::swap(minutes_used_, other->minutes_used_);
    std::swap(payment_method_, other->payment_method_);
    std::swap(flags_, other->flags_);
    std::swap(purchase_country_code_, other->purchase_country_code_);
    std::swap(license_type_, other->license_type_);
    std::swap(territory_code_, other->territory_code_);
    std::swap(change_number_, other->change_number_);
    std::swap(owner_id_, other->owner_id_);
    std::swap(initial_period_, other->initial_period_);
    std::swap(initial_time_unit_, other->initial_time_unit_);
    std::swap(renewal_period_, other->renewal_period_);
    std::swap(renewal_time_unit_, other->renewal_time_unit_);
    std::swap(access_token_, other->access_token_);
    std::swap(master_package_id_, other->master_package_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientLicenseList_License::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientLicenseList_License_descriptor_;
  metadata.reflection = CMsgClientLicenseList_License_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientLicenseList::kEresultFieldNumber;
const int CMsgClientLicenseList::kLicensesFieldNumber;
#endif  // !_MSC_VER

CMsgClientLicenseList::CMsgClientLicenseList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientLicenseList::InitAsDefaultInstance() {
}

CMsgClientLicenseList::CMsgClientLicenseList(const CMsgClientLicenseList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientLicenseList::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientLicenseList::~CMsgClientLicenseList() {
  SharedDtor();
}

void CMsgClientLicenseList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientLicenseList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientLicenseList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientLicenseList_descriptor_;
}

const CMsgClientLicenseList& CMsgClientLicenseList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientLicenseList* CMsgClientLicenseList::default_instance_ = NULL;

CMsgClientLicenseList* CMsgClientLicenseList::New() const {
  return new CMsgClientLicenseList;
}

void CMsgClientLicenseList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
  }
  licenses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientLicenseList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_licenses;
        break;
      }

      // repeated .CMsgClientLicenseList.License licenses = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_licenses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_licenses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_licenses;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientLicenseList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // repeated .CMsgClientLicenseList.License licenses = 2;
  for (int i = 0; i < this->licenses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->licenses(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientLicenseList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // repeated .CMsgClientLicenseList.License licenses = 2;
  for (int i = 0; i < this->licenses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->licenses(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientLicenseList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  // repeated .CMsgClientLicenseList.License licenses = 2;
  total_size += 1 * this->licenses_size();
  for (int i = 0; i < this->licenses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->licenses(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientLicenseList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientLicenseList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientLicenseList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientLicenseList::MergeFrom(const CMsgClientLicenseList& from) {
  GOOGLE_CHECK_NE(&from, this);
  licenses_.MergeFrom(from.licenses_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientLicenseList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLicenseList::CopyFrom(const CMsgClientLicenseList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLicenseList::IsInitialized() const {

  return true;
}

void CMsgClientLicenseList::Swap(CMsgClientLicenseList* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    licenses_.Swap(&other->licenses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientLicenseList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientLicenseList_descriptor_;
  metadata.reflection = CMsgClientLicenseList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientIsLimitedAccount::kBisLimitedAccountFieldNumber;
const int CMsgClientIsLimitedAccount::kBisCommunityBannedFieldNumber;
const int CMsgClientIsLimitedAccount::kBisLockedAccountFieldNumber;
const int CMsgClientIsLimitedAccount::kBisLimitedAccountAllowedToInviteFriendsFieldNumber;
#endif  // !_MSC_VER

CMsgClientIsLimitedAccount::CMsgClientIsLimitedAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientIsLimitedAccount::InitAsDefaultInstance() {
}

CMsgClientIsLimitedAccount::CMsgClientIsLimitedAccount(const CMsgClientIsLimitedAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientIsLimitedAccount::SharedCtor() {
  _cached_size_ = 0;
  bis_limited_account_ = false;
  bis_community_banned_ = false;
  bis_locked_account_ = false;
  bis_limited_account_allowed_to_invite_friends_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientIsLimitedAccount::~CMsgClientIsLimitedAccount() {
  SharedDtor();
}

void CMsgClientIsLimitedAccount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientIsLimitedAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientIsLimitedAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientIsLimitedAccount_descriptor_;
}

const CMsgClientIsLimitedAccount& CMsgClientIsLimitedAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientIsLimitedAccount* CMsgClientIsLimitedAccount::default_instance_ = NULL;

CMsgClientIsLimitedAccount* CMsgClientIsLimitedAccount::New() const {
  return new CMsgClientIsLimitedAccount;
}

void CMsgClientIsLimitedAccount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bis_limited_account_ = false;
    bis_community_banned_ = false;
    bis_locked_account_ = false;
    bis_limited_account_allowed_to_invite_friends_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientIsLimitedAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bis_limited_account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bis_limited_account_)));
          set_has_bis_limited_account();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bis_community_banned;
        break;
      }

      // optional bool bis_community_banned = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bis_community_banned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bis_community_banned_)));
          set_has_bis_community_banned();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bis_locked_account;
        break;
      }

      // optional bool bis_locked_account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bis_locked_account:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bis_locked_account_)));
          set_has_bis_locked_account();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bis_limited_account_allowed_to_invite_friends;
        break;
      }

      // optional bool bis_limited_account_allowed_to_invite_friends = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bis_limited_account_allowed_to_invite_friends:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bis_limited_account_allowed_to_invite_friends_)));
          set_has_bis_limited_account_allowed_to_invite_friends();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientIsLimitedAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool bis_limited_account = 1;
  if (has_bis_limited_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bis_limited_account(), output);
  }

  // optional bool bis_community_banned = 2;
  if (has_bis_community_banned()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bis_community_banned(), output);
  }

  // optional bool bis_locked_account = 3;
  if (has_bis_locked_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bis_locked_account(), output);
  }

  // optional bool bis_limited_account_allowed_to_invite_friends = 4;
  if (has_bis_limited_account_allowed_to_invite_friends()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bis_limited_account_allowed_to_invite_friends(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientIsLimitedAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool bis_limited_account = 1;
  if (has_bis_limited_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bis_limited_account(), target);
  }

  // optional bool bis_community_banned = 2;
  if (has_bis_community_banned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bis_community_banned(), target);
  }

  // optional bool bis_locked_account = 3;
  if (has_bis_locked_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bis_locked_account(), target);
  }

  // optional bool bis_limited_account_allowed_to_invite_friends = 4;
  if (has_bis_limited_account_allowed_to_invite_friends()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bis_limited_account_allowed_to_invite_friends(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientIsLimitedAccount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool bis_limited_account = 1;
    if (has_bis_limited_account()) {
      total_size += 1 + 1;
    }

    // optional bool bis_community_banned = 2;
    if (has_bis_community_banned()) {
      total_size += 1 + 1;
    }

    // optional bool bis_locked_account = 3;
    if (has_bis_locked_account()) {
      total_size += 1 + 1;
    }

    // optional bool bis_limited_account_allowed_to_invite_friends = 4;
    if (has_bis_limited_account_allowed_to_invite_friends()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientIsLimitedAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientIsLimitedAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientIsLimitedAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientIsLimitedAccount::MergeFrom(const CMsgClientIsLimitedAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bis_limited_account()) {
      set_bis_limited_account(from.bis_limited_account());
    }
    if (from.has_bis_community_banned()) {
      set_bis_community_banned(from.bis_community_banned());
    }
    if (from.has_bis_locked_account()) {
      set_bis_locked_account(from.bis_locked_account());
    }
    if (from.has_bis_limited_account_allowed_to_invite_friends()) {
      set_bis_limited_account_allowed_to_invite_friends(from.bis_limited_account_allowed_to_invite_friends());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientIsLimitedAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientIsLimitedAccount::CopyFrom(const CMsgClientIsLimitedAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientIsLimitedAccount::IsInitialized() const {

  return true;
}

void CMsgClientIsLimitedAccount::Swap(CMsgClientIsLimitedAccount* other) {
  if (other != this) {
    std::swap(bis_limited_account_, other->bis_limited_account_);
    std::swap(bis_community_banned_, other->bis_community_banned_);
    std::swap(bis_locked_account_, other->bis_locked_account_);
    std::swap(bis_limited_account_allowed_to_invite_friends_, other->bis_limited_account_allowed_to_invite_friends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientIsLimitedAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientIsLimitedAccount_descriptor_;
  metadata.reflection = CMsgClientIsLimitedAccount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRequestedClientStats_StatsToSend::kClientStatFieldNumber;
const int CMsgClientRequestedClientStats_StatsToSend::kStatAggregateMethodFieldNumber;
#endif  // !_MSC_VER

CMsgClientRequestedClientStats_StatsToSend::CMsgClientRequestedClientStats_StatsToSend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientRequestedClientStats_StatsToSend::InitAsDefaultInstance() {
}

CMsgClientRequestedClientStats_StatsToSend::CMsgClientRequestedClientStats_StatsToSend(const CMsgClientRequestedClientStats_StatsToSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRequestedClientStats_StatsToSend::SharedCtor() {
  _cached_size_ = 0;
  client_stat_ = 0u;
  stat_aggregate_method_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRequestedClientStats_StatsToSend::~CMsgClientRequestedClientStats_StatsToSend() {
  SharedDtor();
}

void CMsgClientRequestedClientStats_StatsToSend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientRequestedClientStats_StatsToSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRequestedClientStats_StatsToSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientRequestedClientStats_StatsToSend_descriptor_;
}

const CMsgClientRequestedClientStats_StatsToSend& CMsgClientRequestedClientStats_StatsToSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientRequestedClientStats_StatsToSend* CMsgClientRequestedClientStats_StatsToSend::default_instance_ = NULL;

CMsgClientRequestedClientStats_StatsToSend* CMsgClientRequestedClientStats_StatsToSend::New() const {
  return new CMsgClientRequestedClientStats_StatsToSend;
}

void CMsgClientRequestedClientStats_StatsToSend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_stat_ = 0u;
    stat_aggregate_method_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientRequestedClientStats_StatsToSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 client_stat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_stat_)));
          set_has_client_stat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stat_aggregate_method;
        break;
      }

      // optional uint32 stat_aggregate_method = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stat_aggregate_method:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_aggregate_method_)));
          set_has_stat_aggregate_method();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRequestedClientStats_StatsToSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 client_stat = 1;
  if (has_client_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->client_stat(), output);
  }

  // optional uint32 stat_aggregate_method = 2;
  if (has_stat_aggregate_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stat_aggregate_method(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientRequestedClientStats_StatsToSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 client_stat = 1;
  if (has_client_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->client_stat(), target);
  }

  // optional uint32 stat_aggregate_method = 2;
  if (has_stat_aggregate_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stat_aggregate_method(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientRequestedClientStats_StatsToSend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 client_stat = 1;
    if (has_client_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_stat());
    }

    // optional uint32 stat_aggregate_method = 2;
    if (has_stat_aggregate_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_aggregate_method());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestedClientStats_StatsToSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientRequestedClientStats_StatsToSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientRequestedClientStats_StatsToSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientRequestedClientStats_StatsToSend::MergeFrom(const CMsgClientRequestedClientStats_StatsToSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_stat()) {
      set_client_stat(from.client_stat());
    }
    if (from.has_stat_aggregate_method()) {
      set_stat_aggregate_method(from.stat_aggregate_method());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientRequestedClientStats_StatsToSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRequestedClientStats_StatsToSend::CopyFrom(const CMsgClientRequestedClientStats_StatsToSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestedClientStats_StatsToSend::IsInitialized() const {

  return true;
}

void CMsgClientRequestedClientStats_StatsToSend::Swap(CMsgClientRequestedClientStats_StatsToSend* other) {
  if (other != this) {
    std::swap(client_stat_, other->client_stat_);
    std::swap(stat_aggregate_method_, other->stat_aggregate_method_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientRequestedClientStats_StatsToSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientRequestedClientStats_StatsToSend_descriptor_;
  metadata.reflection = CMsgClientRequestedClientStats_StatsToSend_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientRequestedClientStats::kStatsToSendFieldNumber;
#endif  // !_MSC_VER

CMsgClientRequestedClientStats::CMsgClientRequestedClientStats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientRequestedClientStats::InitAsDefaultInstance() {
}

CMsgClientRequestedClientStats::CMsgClientRequestedClientStats(const CMsgClientRequestedClientStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRequestedClientStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRequestedClientStats::~CMsgClientRequestedClientStats() {
  SharedDtor();
}

void CMsgClientRequestedClientStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientRequestedClientStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRequestedClientStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientRequestedClientStats_descriptor_;
}

const CMsgClientRequestedClientStats& CMsgClientRequestedClientStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientRequestedClientStats* CMsgClientRequestedClientStats::default_instance_ = NULL;

CMsgClientRequestedClientStats* CMsgClientRequestedClientStats::New() const {
  return new CMsgClientRequestedClientStats;
}

void CMsgClientRequestedClientStats::Clear() {
  stats_to_send_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientRequestedClientStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgClientRequestedClientStats.StatsToSend stats_to_send = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats_to_send:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats_to_send()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stats_to_send;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRequestedClientStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgClientRequestedClientStats.StatsToSend stats_to_send = 1;
  for (int i = 0; i < this->stats_to_send_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stats_to_send(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientRequestedClientStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgClientRequestedClientStats.StatsToSend stats_to_send = 1;
  for (int i = 0; i < this->stats_to_send_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stats_to_send(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientRequestedClientStats::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgClientRequestedClientStats.StatsToSend stats_to_send = 1;
  total_size += 1 * this->stats_to_send_size();
  for (int i = 0; i < this->stats_to_send_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stats_to_send(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestedClientStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientRequestedClientStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientRequestedClientStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientRequestedClientStats::MergeFrom(const CMsgClientRequestedClientStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  stats_to_send_.MergeFrom(from.stats_to_send_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientRequestedClientStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRequestedClientStats::CopyFrom(const CMsgClientRequestedClientStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestedClientStats::IsInitialized() const {

  return true;
}

void CMsgClientRequestedClientStats::Swap(CMsgClientRequestedClientStats* other) {
  if (other != this) {
    stats_to_send_.Swap(&other->stats_to_send_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientRequestedClientStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientRequestedClientStats_descriptor_;
  metadata.reflection = CMsgClientRequestedClientStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientStat2_StatDetail::kClientStatFieldNumber;
const int CMsgClientStat2_StatDetail::kLlValueFieldNumber;
const int CMsgClientStat2_StatDetail::kTimeOfDayFieldNumber;
const int CMsgClientStat2_StatDetail::kCellIdFieldNumber;
const int CMsgClientStat2_StatDetail::kDepotIdFieldNumber;
const int CMsgClientStat2_StatDetail::kAppIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientStat2_StatDetail::CMsgClientStat2_StatDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientStat2_StatDetail::InitAsDefaultInstance() {
}

CMsgClientStat2_StatDetail::CMsgClientStat2_StatDetail(const CMsgClientStat2_StatDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientStat2_StatDetail::SharedCtor() {
  _cached_size_ = 0;
  client_stat_ = 0u;
  ll_value_ = GOOGLE_LONGLONG(0);
  time_of_day_ = 0u;
  cell_id_ = 0u;
  depot_id_ = 0u;
  app_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientStat2_StatDetail::~CMsgClientStat2_StatDetail() {
  SharedDtor();
}

void CMsgClientStat2_StatDetail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientStat2_StatDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientStat2_StatDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientStat2_StatDetail_descriptor_;
}

const CMsgClientStat2_StatDetail& CMsgClientStat2_StatDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientStat2_StatDetail* CMsgClientStat2_StatDetail::default_instance_ = NULL;

CMsgClientStat2_StatDetail* CMsgClientStat2_StatDetail::New() const {
  return new CMsgClientStat2_StatDetail;
}

void CMsgClientStat2_StatDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_stat_ = 0u;
    ll_value_ = GOOGLE_LONGLONG(0);
    time_of_day_ = 0u;
    cell_id_ = 0u;
    depot_id_ = 0u;
    app_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientStat2_StatDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 client_stat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_stat_)));
          set_has_client_stat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ll_value;
        break;
      }

      // optional int64 ll_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ll_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ll_value_)));
          set_has_ll_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time_of_day;
        break;
      }

      // optional uint32 time_of_day = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_of_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_of_day_)));
          set_has_time_of_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cell_id;
        break;
      }

      // optional uint32 cell_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_depot_id;
        break;
      }

      // optional uint32 depot_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_depot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &depot_id_)));
          set_has_depot_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_app_id;
        break;
      }

      // optional uint32 app_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientStat2_StatDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 client_stat = 1;
  if (has_client_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->client_stat(), output);
  }

  // optional int64 ll_value = 2;
  if (has_ll_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ll_value(), output);
  }

  // optional uint32 time_of_day = 3;
  if (has_time_of_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_of_day(), output);
  }

  // optional uint32 cell_id = 4;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cell_id(), output);
  }

  // optional uint32 depot_id = 5;
  if (has_depot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->depot_id(), output);
  }

  // optional uint32 app_id = 6;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->app_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientStat2_StatDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 client_stat = 1;
  if (has_client_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->client_stat(), target);
  }

  // optional int64 ll_value = 2;
  if (has_ll_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->ll_value(), target);
  }

  // optional uint32 time_of_day = 3;
  if (has_time_of_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_of_day(), target);
  }

  // optional uint32 cell_id = 4;
  if (has_cell_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cell_id(), target);
  }

  // optional uint32 depot_id = 5;
  if (has_depot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->depot_id(), target);
  }

  // optional uint32 app_id = 6;
  if (has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->app_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientStat2_StatDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 client_stat = 1;
    if (has_client_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_stat());
    }

    // optional int64 ll_value = 2;
    if (has_ll_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ll_value());
    }

    // optional uint32 time_of_day = 3;
    if (has_time_of_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_of_day());
    }

    // optional uint32 cell_id = 4;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

    // optional uint32 depot_id = 5;
    if (has_depot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->depot_id());
    }

    // optional uint32 app_id = 6;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientStat2_StatDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientStat2_StatDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientStat2_StatDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientStat2_StatDetail::MergeFrom(const CMsgClientStat2_StatDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_stat()) {
      set_client_stat(from.client_stat());
    }
    if (from.has_ll_value()) {
      set_ll_value(from.ll_value());
    }
    if (from.has_time_of_day()) {
      set_time_of_day(from.time_of_day());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_depot_id()) {
      set_depot_id(from.depot_id());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientStat2_StatDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientStat2_StatDetail::CopyFrom(const CMsgClientStat2_StatDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStat2_StatDetail::IsInitialized() const {

  return true;
}

void CMsgClientStat2_StatDetail::Swap(CMsgClientStat2_StatDetail* other) {
  if (other != this) {
    std::swap(client_stat_, other->client_stat_);
    std::swap(ll_value_, other->ll_value_);
    std::swap(time_of_day_, other->time_of_day_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(depot_id_, other->depot_id_);
    std::swap(app_id_, other->app_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientStat2_StatDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientStat2_StatDetail_descriptor_;
  metadata.reflection = CMsgClientStat2_StatDetail_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientStat2::kStatDetailFieldNumber;
#endif  // !_MSC_VER

CMsgClientStat2::CMsgClientStat2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientStat2::InitAsDefaultInstance() {
}

CMsgClientStat2::CMsgClientStat2(const CMsgClientStat2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientStat2::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientStat2::~CMsgClientStat2() {
  SharedDtor();
}

void CMsgClientStat2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientStat2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientStat2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientStat2_descriptor_;
}

const CMsgClientStat2& CMsgClientStat2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientStat2* CMsgClientStat2::default_instance_ = NULL;

CMsgClientStat2* CMsgClientStat2::New() const {
  return new CMsgClientStat2;
}

void CMsgClientStat2::Clear() {
  stat_detail_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientStat2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgClientStat2.StatDetail stat_detail = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stat_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stat_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stat_detail;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientStat2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgClientStat2.StatDetail stat_detail = 1;
  for (int i = 0; i < this->stat_detail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stat_detail(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientStat2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgClientStat2.StatDetail stat_detail = 1;
  for (int i = 0; i < this->stat_detail_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stat_detail(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientStat2::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgClientStat2.StatDetail stat_detail = 1;
  total_size += 1 * this->stat_detail_size();
  for (int i = 0; i < this->stat_detail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stat_detail(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientStat2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientStat2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientStat2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientStat2::MergeFrom(const CMsgClientStat2& from) {
  GOOGLE_CHECK_NE(&from, this);
  stat_detail_.MergeFrom(from.stat_detail_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientStat2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientStat2::CopyFrom(const CMsgClientStat2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStat2::IsInitialized() const {

  return true;
}

void CMsgClientStat2::Swap(CMsgClientStat2* other) {
  if (other != this) {
    stat_detail_.Swap(&other->stat_detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientStat2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientStat2_descriptor_;
  metadata.reflection = CMsgClientStat2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientInviteToGame::kSteamIdDestFieldNumber;
const int CMsgClientInviteToGame::kSteamIdSrcFieldNumber;
const int CMsgClientInviteToGame::kConnectStringFieldNumber;
const int CMsgClientInviteToGame::kRemotePlayFieldNumber;
#endif  // !_MSC_VER

CMsgClientInviteToGame::CMsgClientInviteToGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientInviteToGame::InitAsDefaultInstance() {
}

CMsgClientInviteToGame::CMsgClientInviteToGame(const CMsgClientInviteToGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientInviteToGame::SharedCtor() {
  _cached_size_ = 0;
  steam_id_dest_ = GOOGLE_ULONGLONG(0);
  steam_id_src_ = GOOGLE_ULONGLONG(0);
  connect_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  remote_play_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientInviteToGame::~CMsgClientInviteToGame() {
  SharedDtor();
}

void CMsgClientInviteToGame::SharedDtor() {
  if (connect_string_ != &::google::protobuf::internal::kEmptyString) {
    delete connect_string_;
  }
  if (remote_play_ != &::google::protobuf::internal::kEmptyString) {
    delete remote_play_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientInviteToGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientInviteToGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientInviteToGame_descriptor_;
}

const CMsgClientInviteToGame& CMsgClientInviteToGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientInviteToGame* CMsgClientInviteToGame::default_instance_ = NULL;

CMsgClientInviteToGame* CMsgClientInviteToGame::New() const {
  return new CMsgClientInviteToGame;
}

void CMsgClientInviteToGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_dest_ = GOOGLE_ULONGLONG(0);
    steam_id_src_ = GOOGLE_ULONGLONG(0);
    if (has_connect_string()) {
      if (connect_string_ != &::google::protobuf::internal::kEmptyString) {
        connect_string_->clear();
      }
    }
    if (has_remote_play()) {
      if (remote_play_ != &::google::protobuf::internal::kEmptyString) {
        remote_play_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientInviteToGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id_dest = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_dest_)));
          set_has_steam_id_dest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steam_id_src;
        break;
      }

      // optional fixed64 steam_id_src = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_src:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_src_)));
          set_has_steam_id_src();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_connect_string;
        break;
      }

      // optional string connect_string = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connect_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connect_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->connect_string().data(), this->connect_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_remote_play;
        break;
      }

      // optional string remote_play = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remote_play:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remote_play()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->remote_play().data(), this->remote_play().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientInviteToGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id_dest = 1;
  if (has_steam_id_dest()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id_dest(), output);
  }

  // optional fixed64 steam_id_src = 2;
  if (has_steam_id_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_src(), output);
  }

  // optional string connect_string = 3;
  if (has_connect_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connect_string().data(), this->connect_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->connect_string(), output);
  }

  // optional string remote_play = 4;
  if (has_remote_play()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remote_play().data(), this->remote_play().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->remote_play(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientInviteToGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steam_id_dest = 1;
  if (has_steam_id_dest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id_dest(), target);
  }

  // optional fixed64 steam_id_src = 2;
  if (has_steam_id_src()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_src(), target);
  }

  // optional string connect_string = 3;
  if (has_connect_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connect_string().data(), this->connect_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->connect_string(), target);
  }

  // optional string remote_play = 4;
  if (has_remote_play()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remote_play().data(), this->remote_play().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->remote_play(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientInviteToGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id_dest = 1;
    if (has_steam_id_dest()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_src = 2;
    if (has_steam_id_src()) {
      total_size += 1 + 8;
    }

    // optional string connect_string = 3;
    if (has_connect_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connect_string());
    }

    // optional string remote_play = 4;
    if (has_remote_play()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remote_play());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientInviteToGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientInviteToGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientInviteToGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientInviteToGame::MergeFrom(const CMsgClientInviteToGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id_dest()) {
      set_steam_id_dest(from.steam_id_dest());
    }
    if (from.has_steam_id_src()) {
      set_steam_id_src(from.steam_id_src());
    }
    if (from.has_connect_string()) {
      set_connect_string(from.connect_string());
    }
    if (from.has_remote_play()) {
      set_remote_play(from.remote_play());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientInviteToGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientInviteToGame::CopyFrom(const CMsgClientInviteToGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientInviteToGame::IsInitialized() const {

  return true;
}

void CMsgClientInviteToGame::Swap(CMsgClientInviteToGame* other) {
  if (other != this) {
    std::swap(steam_id_dest_, other->steam_id_dest_);
    std::swap(steam_id_src_, other->steam_id_src_);
    std::swap(connect_string_, other->connect_string_);
    std::swap(remote_play_, other->remote_play_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientInviteToGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientInviteToGame_descriptor_;
  metadata.reflection = CMsgClientInviteToGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientChatInvite::kSteamIdInvitedFieldNumber;
const int CMsgClientChatInvite::kSteamIdChatFieldNumber;
const int CMsgClientChatInvite::kSteamIdPatronFieldNumber;
const int CMsgClientChatInvite::kChatroomTypeFieldNumber;
const int CMsgClientChatInvite::kSteamIdFriendChatFieldNumber;
const int CMsgClientChatInvite::kChatNameFieldNumber;
const int CMsgClientChatInvite::kGameIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientChatInvite::CMsgClientChatInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientChatInvite::InitAsDefaultInstance() {
}

CMsgClientChatInvite::CMsgClientChatInvite(const CMsgClientChatInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientChatInvite::SharedCtor() {
  _cached_size_ = 0;
  steam_id_invited_ = GOOGLE_ULONGLONG(0);
  steam_id_chat_ = GOOGLE_ULONGLONG(0);
  steam_id_patron_ = GOOGLE_ULONGLONG(0);
  chatroom_type_ = 0;
  steam_id_friend_chat_ = GOOGLE_ULONGLONG(0);
  chat_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  game_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientChatInvite::~CMsgClientChatInvite() {
  SharedDtor();
}

void CMsgClientChatInvite::SharedDtor() {
  if (chat_name_ != &::google::protobuf::internal::kEmptyString) {
    delete chat_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientChatInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientChatInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientChatInvite_descriptor_;
}

const CMsgClientChatInvite& CMsgClientChatInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientChatInvite* CMsgClientChatInvite::default_instance_ = NULL;

CMsgClientChatInvite* CMsgClientChatInvite::New() const {
  return new CMsgClientChatInvite;
}

void CMsgClientChatInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_invited_ = GOOGLE_ULONGLONG(0);
    steam_id_chat_ = GOOGLE_ULONGLONG(0);
    steam_id_patron_ = GOOGLE_ULONGLONG(0);
    chatroom_type_ = 0;
    steam_id_friend_chat_ = GOOGLE_ULONGLONG(0);
    if (has_chat_name()) {
      if (chat_name_ != &::google::protobuf::internal::kEmptyString) {
        chat_name_->clear();
      }
    }
    game_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientChatInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id_invited = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_invited_)));
          set_has_steam_id_invited();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steam_id_chat;
        break;
      }

      // optional fixed64 steam_id_chat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_chat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_chat_)));
          set_has_steam_id_chat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_steam_id_patron;
        break;
      }

      // optional fixed64 steam_id_patron = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_patron:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_patron_)));
          set_has_steam_id_patron();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_chatroom_type;
        break;
      }

      // optional int32 chatroom_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chatroom_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chatroom_type_)));
          set_has_chatroom_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_steam_id_friend_chat;
        break;
      }

      // optional fixed64 steam_id_friend_chat = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_friend_chat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_friend_chat_)));
          set_has_steam_id_friend_chat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_chat_name;
        break;
      }

      // optional string chat_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chat_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chat_name().data(), this->chat_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_game_id;
        break;
      }

      // optional fixed64 game_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientChatInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id_invited = 1;
  if (has_steam_id_invited()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id_invited(), output);
  }

  // optional fixed64 steam_id_chat = 2;
  if (has_steam_id_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_chat(), output);
  }

  // optional fixed64 steam_id_patron = 3;
  if (has_steam_id_patron()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steam_id_patron(), output);
  }

  // optional int32 chatroom_type = 4;
  if (has_chatroom_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->chatroom_type(), output);
  }

  // optional fixed64 steam_id_friend_chat = 5;
  if (has_steam_id_friend_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->steam_id_friend_chat(), output);
  }

  // optional string chat_name = 6;
  if (has_chat_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chat_name().data(), this->chat_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->chat_name(), output);
  }

  // optional fixed64 game_id = 7;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->game_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientChatInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steam_id_invited = 1;
  if (has_steam_id_invited()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id_invited(), target);
  }

  // optional fixed64 steam_id_chat = 2;
  if (has_steam_id_chat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id_chat(), target);
  }

  // optional fixed64 steam_id_patron = 3;
  if (has_steam_id_patron()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->steam_id_patron(), target);
  }

  // optional int32 chatroom_type = 4;
  if (has_chatroom_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->chatroom_type(), target);
  }

  // optional fixed64 steam_id_friend_chat = 5;
  if (has_steam_id_friend_chat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->steam_id_friend_chat(), target);
  }

  // optional string chat_name = 6;
  if (has_chat_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chat_name().data(), this->chat_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->chat_name(), target);
  }

  // optional fixed64 game_id = 7;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->game_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientChatInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id_invited = 1;
    if (has_steam_id_invited()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_chat = 2;
    if (has_steam_id_chat()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_patron = 3;
    if (has_steam_id_patron()) {
      total_size += 1 + 8;
    }

    // optional int32 chatroom_type = 4;
    if (has_chatroom_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chatroom_type());
    }

    // optional fixed64 steam_id_friend_chat = 5;
    if (has_steam_id_friend_chat()) {
      total_size += 1 + 8;
    }

    // optional string chat_name = 6;
    if (has_chat_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chat_name());
    }

    // optional fixed64 game_id = 7;
    if (has_game_id()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientChatInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientChatInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientChatInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientChatInvite::MergeFrom(const CMsgClientChatInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id_invited()) {
      set_steam_id_invited(from.steam_id_invited());
    }
    if (from.has_steam_id_chat()) {
      set_steam_id_chat(from.steam_id_chat());
    }
    if (from.has_steam_id_patron()) {
      set_steam_id_patron(from.steam_id_patron());
    }
    if (from.has_chatroom_type()) {
      set_chatroom_type(from.chatroom_type());
    }
    if (from.has_steam_id_friend_chat()) {
      set_steam_id_friend_chat(from.steam_id_friend_chat());
    }
    if (from.has_chat_name()) {
      set_chat_name(from.chat_name());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientChatInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientChatInvite::CopyFrom(const CMsgClientChatInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientChatInvite::IsInitialized() const {

  return true;
}

void CMsgClientChatInvite::Swap(CMsgClientChatInvite* other) {
  if (other != this) {
    std::swap(steam_id_invited_, other->steam_id_invited_);
    std::swap(steam_id_chat_, other->steam_id_chat_);
    std::swap(steam_id_patron_, other->steam_id_patron_);
    std::swap(chatroom_type_, other->chatroom_type_);
    std::swap(steam_id_friend_chat_, other->steam_id_friend_chat_);
    std::swap(chat_name_, other->chat_name_);
    std::swap(game_id_, other->game_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientChatInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientChatInvite_descriptor_;
  metadata.reflection = CMsgClientChatInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientConnectionStats_Stats_Logon::kConnectAttemptsFieldNumber;
const int CMsgClientConnectionStats_Stats_Logon::kConnectSuccessesFieldNumber;
const int CMsgClientConnectionStats_Stats_Logon::kConnectFailuresFieldNumber;
const int CMsgClientConnectionStats_Stats_Logon::kConnectionsDroppedFieldNumber;
const int CMsgClientConnectionStats_Stats_Logon::kSecondsRunningFieldNumber;
const int CMsgClientConnectionStats_Stats_Logon::kMsecTologonthistimeFieldNumber;
const int CMsgClientConnectionStats_Stats_Logon::kCountBadCmsFieldNumber;
const int CMsgClientConnectionStats_Stats_Logon::kNoUdpConnectivityFieldNumber;
const int CMsgClientConnectionStats_Stats_Logon::kNoTcpConnectivityFieldNumber;
const int CMsgClientConnectionStats_Stats_Logon::kNoWebsocket443ConnectivityFieldNumber;
const int CMsgClientConnectionStats_Stats_Logon::kNoWebsocketNon443ConnectivityFieldNumber;
#endif  // !_MSC_VER

CMsgClientConnectionStats_Stats_Logon::CMsgClientConnectionStats_Stats_Logon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientConnectionStats_Stats_Logon::InitAsDefaultInstance() {
}

CMsgClientConnectionStats_Stats_Logon::CMsgClientConnectionStats_Stats_Logon(const CMsgClientConnectionStats_Stats_Logon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientConnectionStats_Stats_Logon::SharedCtor() {
  _cached_size_ = 0;
  connect_attempts_ = 0;
  connect_successes_ = 0;
  connect_failures_ = 0;
  connections_dropped_ = 0;
  seconds_running_ = 0u;
  msec_tologonthistime_ = 0u;
  count_bad_cms_ = 0u;
  no_udp_connectivity_ = false;
  no_tcp_connectivity_ = false;
  no_websocket_443_connectivity_ = false;
  no_websocket_non_443_connectivity_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientConnectionStats_Stats_Logon::~CMsgClientConnectionStats_Stats_Logon() {
  SharedDtor();
}

void CMsgClientConnectionStats_Stats_Logon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientConnectionStats_Stats_Logon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientConnectionStats_Stats_Logon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientConnectionStats_Stats_Logon_descriptor_;
}

const CMsgClientConnectionStats_Stats_Logon& CMsgClientConnectionStats_Stats_Logon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientConnectionStats_Stats_Logon* CMsgClientConnectionStats_Stats_Logon::default_instance_ = NULL;

CMsgClientConnectionStats_Stats_Logon* CMsgClientConnectionStats_Stats_Logon::New() const {
  return new CMsgClientConnectionStats_Stats_Logon;
}

void CMsgClientConnectionStats_Stats_Logon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    connect_attempts_ = 0;
    connect_successes_ = 0;
    connect_failures_ = 0;
    connections_dropped_ = 0;
    seconds_running_ = 0u;
    msec_tologonthistime_ = 0u;
    count_bad_cms_ = 0u;
    no_udp_connectivity_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    no_tcp_connectivity_ = false;
    no_websocket_443_connectivity_ = false;
    no_websocket_non_443_connectivity_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientConnectionStats_Stats_Logon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 connect_attempts = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &connect_attempts_)));
          set_has_connect_attempts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_connect_successes;
        break;
      }

      // optional int32 connect_successes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connect_successes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &connect_successes_)));
          set_has_connect_successes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_connect_failures;
        break;
      }

      // optional int32 connect_failures = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connect_failures:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &connect_failures_)));
          set_has_connect_failures();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_connections_dropped;
        break;
      }

      // optional int32 connections_dropped = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connections_dropped:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &connections_dropped_)));
          set_has_connections_dropped();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_seconds_running;
        break;
      }

      // optional uint32 seconds_running = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seconds_running:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_running_)));
          set_has_seconds_running();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_msec_tologonthistime;
        break;
      }

      // optional uint32 msec_tologonthistime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msec_tologonthistime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msec_tologonthistime_)));
          set_has_msec_tologonthistime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_count_bad_cms;
        break;
      }

      // optional uint32 count_bad_cms = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_bad_cms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_bad_cms_)));
          set_has_count_bad_cms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_no_udp_connectivity;
        break;
      }

      // optional bool no_udp_connectivity = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_no_udp_connectivity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_udp_connectivity_)));
          set_has_no_udp_connectivity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_no_tcp_connectivity;
        break;
      }

      // optional bool no_tcp_connectivity = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_no_tcp_connectivity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_tcp_connectivity_)));
          set_has_no_tcp_connectivity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_no_websocket_443_connectivity;
        break;
      }

      // optional bool no_websocket_443_connectivity = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_no_websocket_443_connectivity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_websocket_443_connectivity_)));
          set_has_no_websocket_443_connectivity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_no_websocket_non_443_connectivity;
        break;
      }

      // optional bool no_websocket_non_443_connectivity = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_no_websocket_non_443_connectivity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_websocket_non_443_connectivity_)));
          set_has_no_websocket_non_443_connectivity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientConnectionStats_Stats_Logon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 connect_attempts = 1;
  if (has_connect_attempts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->connect_attempts(), output);
  }

  // optional int32 connect_successes = 2;
  if (has_connect_successes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->connect_successes(), output);
  }

  // optional int32 connect_failures = 3;
  if (has_connect_failures()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->connect_failures(), output);
  }

  // optional int32 connections_dropped = 4;
  if (has_connections_dropped()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->connections_dropped(), output);
  }

  // optional uint32 seconds_running = 5;
  if (has_seconds_running()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->seconds_running(), output);
  }

  // optional uint32 msec_tologonthistime = 6;
  if (has_msec_tologonthistime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->msec_tologonthistime(), output);
  }

  // optional uint32 count_bad_cms = 7;
  if (has_count_bad_cms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->count_bad_cms(), output);
  }

  // optional bool no_udp_connectivity = 8;
  if (has_no_udp_connectivity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->no_udp_connectivity(), output);
  }

  // optional bool no_tcp_connectivity = 9;
  if (has_no_tcp_connectivity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->no_tcp_connectivity(), output);
  }

  // optional bool no_websocket_443_connectivity = 10;
  if (has_no_websocket_443_connectivity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->no_websocket_443_connectivity(), output);
  }

  // optional bool no_websocket_non_443_connectivity = 11;
  if (has_no_websocket_non_443_connectivity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->no_websocket_non_443_connectivity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientConnectionStats_Stats_Logon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 connect_attempts = 1;
  if (has_connect_attempts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->connect_attempts(), target);
  }

  // optional int32 connect_successes = 2;
  if (has_connect_successes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->connect_successes(), target);
  }

  // optional int32 connect_failures = 3;
  if (has_connect_failures()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->connect_failures(), target);
  }

  // optional int32 connections_dropped = 4;
  if (has_connections_dropped()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->connections_dropped(), target);
  }

  // optional uint32 seconds_running = 5;
  if (has_seconds_running()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->seconds_running(), target);
  }

  // optional uint32 msec_tologonthistime = 6;
  if (has_msec_tologonthistime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->msec_tologonthistime(), target);
  }

  // optional uint32 count_bad_cms = 7;
  if (has_count_bad_cms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->count_bad_cms(), target);
  }

  // optional bool no_udp_connectivity = 8;
  if (has_no_udp_connectivity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->no_udp_connectivity(), target);
  }

  // optional bool no_tcp_connectivity = 9;
  if (has_no_tcp_connectivity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->no_tcp_connectivity(), target);
  }

  // optional bool no_websocket_443_connectivity = 10;
  if (has_no_websocket_443_connectivity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->no_websocket_443_connectivity(), target);
  }

  // optional bool no_websocket_non_443_connectivity = 11;
  if (has_no_websocket_non_443_connectivity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->no_websocket_non_443_connectivity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientConnectionStats_Stats_Logon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 connect_attempts = 1;
    if (has_connect_attempts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->connect_attempts());
    }

    // optional int32 connect_successes = 2;
    if (has_connect_successes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->connect_successes());
    }

    // optional int32 connect_failures = 3;
    if (has_connect_failures()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->connect_failures());
    }

    // optional int32 connections_dropped = 4;
    if (has_connections_dropped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->connections_dropped());
    }

    // optional uint32 seconds_running = 5;
    if (has_seconds_running()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_running());
    }

    // optional uint32 msec_tologonthistime = 6;
    if (has_msec_tologonthistime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msec_tologonthistime());
    }

    // optional uint32 count_bad_cms = 7;
    if (has_count_bad_cms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_bad_cms());
    }

    // optional bool no_udp_connectivity = 8;
    if (has_no_udp_connectivity()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool no_tcp_connectivity = 9;
    if (has_no_tcp_connectivity()) {
      total_size += 1 + 1;
    }

    // optional bool no_websocket_443_connectivity = 10;
    if (has_no_websocket_443_connectivity()) {
      total_size += 1 + 1;
    }

    // optional bool no_websocket_non_443_connectivity = 11;
    if (has_no_websocket_non_443_connectivity()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientConnectionStats_Stats_Logon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientConnectionStats_Stats_Logon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientConnectionStats_Stats_Logon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientConnectionStats_Stats_Logon::MergeFrom(const CMsgClientConnectionStats_Stats_Logon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_connect_attempts()) {
      set_connect_attempts(from.connect_attempts());
    }
    if (from.has_connect_successes()) {
      set_connect_successes(from.connect_successes());
    }
    if (from.has_connect_failures()) {
      set_connect_failures(from.connect_failures());
    }
    if (from.has_connections_dropped()) {
      set_connections_dropped(from.connections_dropped());
    }
    if (from.has_seconds_running()) {
      set_seconds_running(from.seconds_running());
    }
    if (from.has_msec_tologonthistime()) {
      set_msec_tologonthistime(from.msec_tologonthistime());
    }
    if (from.has_count_bad_cms()) {
      set_count_bad_cms(from.count_bad_cms());
    }
    if (from.has_no_udp_connectivity()) {
      set_no_udp_connectivity(from.no_udp_connectivity());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_no_tcp_connectivity()) {
      set_no_tcp_connectivity(from.no_tcp_connectivity());
    }
    if (from.has_no_websocket_443_connectivity()) {
      set_no_websocket_443_connectivity(from.no_websocket_443_connectivity());
    }
    if (from.has_no_websocket_non_443_connectivity()) {
      set_no_websocket_non_443_connectivity(from.no_websocket_non_443_connectivity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientConnectionStats_Stats_Logon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientConnectionStats_Stats_Logon::CopyFrom(const CMsgClientConnectionStats_Stats_Logon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientConnectionStats_Stats_Logon::IsInitialized() const {

  return true;
}

void CMsgClientConnectionStats_Stats_Logon::Swap(CMsgClientConnectionStats_Stats_Logon* other) {
  if (other != this) {
    std::swap(connect_attempts_, other->connect_attempts_);
    std::swap(connect_successes_, other->connect_successes_);
    std::swap(connect_failures_, other->connect_failures_);
    std::swap(connections_dropped_, other->connections_dropped_);
    std::swap(seconds_running_, other->seconds_running_);
    std::swap(msec_tologonthistime_, other->msec_tologonthistime_);
    std::swap(count_bad_cms_, other->count_bad_cms_);
    std::swap(no_udp_connectivity_, other->no_udp_connectivity_);
    std::swap(no_tcp_connectivity_, other->no_tcp_connectivity_);
    std::swap(no_websocket_443_connectivity_, other->no_websocket_443_connectivity_);
    std::swap(no_websocket_non_443_connectivity_, other->no_websocket_non_443_connectivity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientConnectionStats_Stats_Logon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientConnectionStats_Stats_Logon_descriptor_;
  metadata.reflection = CMsgClientConnectionStats_Stats_Logon_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientConnectionStats_Stats_UDP::kPktsSentFieldNumber;
const int CMsgClientConnectionStats_Stats_UDP::kBytesSentFieldNumber;
const int CMsgClientConnectionStats_Stats_UDP::kPktsRecvFieldNumber;
const int CMsgClientConnectionStats_Stats_UDP::kPktsProcessedFieldNumber;
const int CMsgClientConnectionStats_Stats_UDP::kBytesRecvFieldNumber;
#endif  // !_MSC_VER

CMsgClientConnectionStats_Stats_UDP::CMsgClientConnectionStats_Stats_UDP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientConnectionStats_Stats_UDP::InitAsDefaultInstance() {
}

CMsgClientConnectionStats_Stats_UDP::CMsgClientConnectionStats_Stats_UDP(const CMsgClientConnectionStats_Stats_UDP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientConnectionStats_Stats_UDP::SharedCtor() {
  _cached_size_ = 0;
  pkts_sent_ = GOOGLE_ULONGLONG(0);
  bytes_sent_ = GOOGLE_ULONGLONG(0);
  pkts_recv_ = GOOGLE_ULONGLONG(0);
  pkts_processed_ = GOOGLE_ULONGLONG(0);
  bytes_recv_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientConnectionStats_Stats_UDP::~CMsgClientConnectionStats_Stats_UDP() {
  SharedDtor();
}

void CMsgClientConnectionStats_Stats_UDP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientConnectionStats_Stats_UDP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientConnectionStats_Stats_UDP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientConnectionStats_Stats_UDP_descriptor_;
}

const CMsgClientConnectionStats_Stats_UDP& CMsgClientConnectionStats_Stats_UDP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientConnectionStats_Stats_UDP* CMsgClientConnectionStats_Stats_UDP::default_instance_ = NULL;

CMsgClientConnectionStats_Stats_UDP* CMsgClientConnectionStats_Stats_UDP::New() const {
  return new CMsgClientConnectionStats_Stats_UDP;
}

void CMsgClientConnectionStats_Stats_UDP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pkts_sent_ = GOOGLE_ULONGLONG(0);
    bytes_sent_ = GOOGLE_ULONGLONG(0);
    pkts_recv_ = GOOGLE_ULONGLONG(0);
    pkts_processed_ = GOOGLE_ULONGLONG(0);
    bytes_recv_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientConnectionStats_Stats_UDP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 pkts_sent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pkts_sent_)));
          set_has_pkts_sent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bytes_sent;
        break;
      }

      // optional uint64 bytes_sent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytes_sent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_sent_)));
          set_has_bytes_sent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pkts_recv;
        break;
      }

      // optional uint64 pkts_recv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pkts_recv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pkts_recv_)));
          set_has_pkts_recv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pkts_processed;
        break;
      }

      // optional uint64 pkts_processed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pkts_processed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pkts_processed_)));
          set_has_pkts_processed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bytes_recv;
        break;
      }

      // optional uint64 bytes_recv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytes_recv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_recv_)));
          set_has_bytes_recv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientConnectionStats_Stats_UDP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 pkts_sent = 1;
  if (has_pkts_sent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pkts_sent(), output);
  }

  // optional uint64 bytes_sent = 2;
  if (has_bytes_sent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->bytes_sent(), output);
  }

  // optional uint64 pkts_recv = 3;
  if (has_pkts_recv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->pkts_recv(), output);
  }

  // optional uint64 pkts_processed = 4;
  if (has_pkts_processed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->pkts_processed(), output);
  }

  // optional uint64 bytes_recv = 5;
  if (has_bytes_recv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->bytes_recv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientConnectionStats_Stats_UDP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 pkts_sent = 1;
  if (has_pkts_sent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->pkts_sent(), target);
  }

  // optional uint64 bytes_sent = 2;
  if (has_bytes_sent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->bytes_sent(), target);
  }

  // optional uint64 pkts_recv = 3;
  if (has_pkts_recv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->pkts_recv(), target);
  }

  // optional uint64 pkts_processed = 4;
  if (has_pkts_processed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->pkts_processed(), target);
  }

  // optional uint64 bytes_recv = 5;
  if (has_bytes_recv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->bytes_recv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientConnectionStats_Stats_UDP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 pkts_sent = 1;
    if (has_pkts_sent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pkts_sent());
    }

    // optional uint64 bytes_sent = 2;
    if (has_bytes_sent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_sent());
    }

    // optional uint64 pkts_recv = 3;
    if (has_pkts_recv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pkts_recv());
    }

    // optional uint64 pkts_processed = 4;
    if (has_pkts_processed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pkts_processed());
    }

    // optional uint64 bytes_recv = 5;
    if (has_bytes_recv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_recv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientConnectionStats_Stats_UDP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientConnectionStats_Stats_UDP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientConnectionStats_Stats_UDP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientConnectionStats_Stats_UDP::MergeFrom(const CMsgClientConnectionStats_Stats_UDP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pkts_sent()) {
      set_pkts_sent(from.pkts_sent());
    }
    if (from.has_bytes_sent()) {
      set_bytes_sent(from.bytes_sent());
    }
    if (from.has_pkts_recv()) {
      set_pkts_recv(from.pkts_recv());
    }
    if (from.has_pkts_processed()) {
      set_pkts_processed(from.pkts_processed());
    }
    if (from.has_bytes_recv()) {
      set_bytes_recv(from.bytes_recv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientConnectionStats_Stats_UDP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientConnectionStats_Stats_UDP::CopyFrom(const CMsgClientConnectionStats_Stats_UDP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientConnectionStats_Stats_UDP::IsInitialized() const {

  return true;
}

void CMsgClientConnectionStats_Stats_UDP::Swap(CMsgClientConnectionStats_Stats_UDP* other) {
  if (other != this) {
    std::swap(pkts_sent_, other->pkts_sent_);
    std::swap(bytes_sent_, other->bytes_sent_);
    std::swap(pkts_recv_, other->pkts_recv_);
    std::swap(pkts_processed_, other->pkts_processed_);
    std::swap(bytes_recv_, other->bytes_recv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientConnectionStats_Stats_UDP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientConnectionStats_Stats_UDP_descriptor_;
  metadata.reflection = CMsgClientConnectionStats_Stats_UDP_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientConnectionStats_Stats_VConn::kConnectionsUdpFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kConnectionsTcpFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kStatsUdpFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kPktsAbandonedFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kConnReqReceivedFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kPktsResentFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kMsgsSentFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kMsgsSentFailedFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kMsgsRecvFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kDatagramsSentFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kDatagramsRecvFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kBadPktsRecvFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kUnknownConnPktsRecvFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kMissedPktsRecvFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kDupPktsRecvFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kFailedConnectChallengesFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kMicroSecAvgLatencyFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kMicroSecMinLatencyFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kMicroSecMaxLatencyFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kMemPoolMsgInUseFieldNumber;
#endif  // !_MSC_VER

CMsgClientConnectionStats_Stats_VConn::CMsgClientConnectionStats_Stats_VConn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientConnectionStats_Stats_VConn::InitAsDefaultInstance() {
  stats_udp_ = const_cast< ::CMsgClientConnectionStats_Stats_UDP*>(&::CMsgClientConnectionStats_Stats_UDP::default_instance());
}

CMsgClientConnectionStats_Stats_VConn::CMsgClientConnectionStats_Stats_VConn(const CMsgClientConnectionStats_Stats_VConn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientConnectionStats_Stats_VConn::SharedCtor() {
  _cached_size_ = 0;
  connections_udp_ = 0u;
  connections_tcp_ = 0u;
  stats_udp_ = NULL;
  pkts_abandoned_ = GOOGLE_ULONGLONG(0);
  conn_req_received_ = GOOGLE_ULONGLONG(0);
  pkts_resent_ = GOOGLE_ULONGLONG(0);
  msgs_sent_ = GOOGLE_ULONGLONG(0);
  msgs_sent_failed_ = GOOGLE_ULONGLONG(0);
  msgs_recv_ = GOOGLE_ULONGLONG(0);
  datagrams_sent_ = GOOGLE_ULONGLONG(0);
  datagrams_recv_ = GOOGLE_ULONGLONG(0);
  bad_pkts_recv_ = GOOGLE_ULONGLONG(0);
  unknown_conn_pkts_recv_ = GOOGLE_ULONGLONG(0);
  missed_pkts_recv_ = GOOGLE_ULONGLONG(0);
  dup_pkts_recv_ = GOOGLE_ULONGLONG(0);
  failed_connect_challenges_ = GOOGLE_ULONGLONG(0);
  micro_sec_avg_latency_ = 0u;
  micro_sec_min_latency_ = 0u;
  micro_sec_max_latency_ = 0u;
  mem_pool_msg_in_use_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientConnectionStats_Stats_VConn::~CMsgClientConnectionStats_Stats_VConn() {
  SharedDtor();
}

void CMsgClientConnectionStats_Stats_VConn::SharedDtor() {
  if (this != default_instance_) {
    delete stats_udp_;
  }
}

void CMsgClientConnectionStats_Stats_VConn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientConnectionStats_Stats_VConn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientConnectionStats_Stats_VConn_descriptor_;
}

const CMsgClientConnectionStats_Stats_VConn& CMsgClientConnectionStats_Stats_VConn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientConnectionStats_Stats_VConn* CMsgClientConnectionStats_Stats_VConn::default_instance_ = NULL;

CMsgClientConnectionStats_Stats_VConn* CMsgClientConnectionStats_Stats_VConn::New() const {
  return new CMsgClientConnectionStats_Stats_VConn;
}

void CMsgClientConnectionStats_Stats_VConn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    connections_udp_ = 0u;
    connections_tcp_ = 0u;
    if (has_stats_udp()) {
      if (stats_udp_ != NULL) stats_udp_->::CMsgClientConnectionStats_Stats_UDP::Clear();
    }
    pkts_abandoned_ = GOOGLE_ULONGLONG(0);
    conn_req_received_ = GOOGLE_ULONGLONG(0);
    pkts_resent_ = GOOGLE_ULONGLONG(0);
    msgs_sent_ = GOOGLE_ULONGLONG(0);
    msgs_sent_failed_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    msgs_recv_ = GOOGLE_ULONGLONG(0);
    datagrams_sent_ = GOOGLE_ULONGLONG(0);
    datagrams_recv_ = GOOGLE_ULONGLONG(0);
    bad_pkts_recv_ = GOOGLE_ULONGLONG(0);
    unknown_conn_pkts_recv_ = GOOGLE_ULONGLONG(0);
    missed_pkts_recv_ = GOOGLE_ULONGLONG(0);
    dup_pkts_recv_ = GOOGLE_ULONGLONG(0);
    failed_connect_challenges_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    micro_sec_avg_latency_ = 0u;
    micro_sec_min_latency_ = 0u;
    micro_sec_max_latency_ = 0u;
    mem_pool_msg_in_use_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientConnectionStats_Stats_VConn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 connections_udp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connections_udp_)));
          set_has_connections_udp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_connections_tcp;
        break;
      }

      // optional uint32 connections_tcp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connections_tcp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connections_tcp_)));
          set_has_connections_tcp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stats_udp;
        break;
      }

      // optional .CMsgClientConnectionStats.Stats_UDP stats_udp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats_udp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats_udp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pkts_abandoned;
        break;
      }

      // optional uint64 pkts_abandoned = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pkts_abandoned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pkts_abandoned_)));
          set_has_pkts_abandoned();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_conn_req_received;
        break;
      }

      // optional uint64 conn_req_received = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_conn_req_received:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &conn_req_received_)));
          set_has_conn_req_received();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pkts_resent;
        break;
      }

      // optional uint64 pkts_resent = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pkts_resent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pkts_resent_)));
          set_has_pkts_resent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_msgs_sent;
        break;
      }

      // optional uint64 msgs_sent = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgs_sent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgs_sent_)));
          set_has_msgs_sent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_msgs_sent_failed;
        break;
      }

      // optional uint64 msgs_sent_failed = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgs_sent_failed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgs_sent_failed_)));
          set_has_msgs_sent_failed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_msgs_recv;
        break;
      }

      // optional uint64 msgs_recv = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgs_recv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgs_recv_)));
          set_has_msgs_recv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_datagrams_sent;
        break;
      }

      // optional uint64 datagrams_sent = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_datagrams_sent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &datagrams_sent_)));
          set_has_datagrams_sent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_datagrams_recv;
        break;
      }

      // optional uint64 datagrams_recv = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_datagrams_recv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &datagrams_recv_)));
          set_has_datagrams_recv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_bad_pkts_recv;
        break;
      }

      // optional uint64 bad_pkts_recv = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bad_pkts_recv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bad_pkts_recv_)));
          set_has_bad_pkts_recv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_unknown_conn_pkts_recv;
        break;
      }

      // optional uint64 unknown_conn_pkts_recv = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unknown_conn_pkts_recv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unknown_conn_pkts_recv_)));
          set_has_unknown_conn_pkts_recv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_missed_pkts_recv;
        break;
      }

      // optional uint64 missed_pkts_recv = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_missed_pkts_recv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &missed_pkts_recv_)));
          set_has_missed_pkts_recv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_dup_pkts_recv;
        break;
      }

      // optional uint64 dup_pkts_recv = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dup_pkts_recv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dup_pkts_recv_)));
          set_has_dup_pkts_recv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_failed_connect_challenges;
        break;
      }

      // optional uint64 failed_connect_challenges = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_failed_connect_challenges:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &failed_connect_challenges_)));
          set_has_failed_connect_challenges();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_micro_sec_avg_latency;
        break;
      }

      // optional uint32 micro_sec_avg_latency = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_micro_sec_avg_latency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &micro_sec_avg_latency_)));
          set_has_micro_sec_avg_latency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_micro_sec_min_latency;
        break;
      }

      // optional uint32 micro_sec_min_latency = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_micro_sec_min_latency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &micro_sec_min_latency_)));
          set_has_micro_sec_min_latency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_micro_sec_max_latency;
        break;
      }

      // optional uint32 micro_sec_max_latency = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_micro_sec_max_latency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &micro_sec_max_latency_)));
          set_has_micro_sec_max_latency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_mem_pool_msg_in_use;
        break;
      }

      // optional uint32 mem_pool_msg_in_use = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mem_pool_msg_in_use:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mem_pool_msg_in_use_)));
          set_has_mem_pool_msg_in_use();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientConnectionStats_Stats_VConn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 connections_udp = 1;
  if (has_connections_udp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->connections_udp(), output);
  }

  // optional uint32 connections_tcp = 2;
  if (has_connections_tcp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->connections_tcp(), output);
  }

  // optional .CMsgClientConnectionStats.Stats_UDP stats_udp = 3;
  if (has_stats_udp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stats_udp(), output);
  }

  // optional uint64 pkts_abandoned = 4;
  if (has_pkts_abandoned()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->pkts_abandoned(), output);
  }

  // optional uint64 conn_req_received = 5;
  if (has_conn_req_received()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->conn_req_received(), output);
  }

  // optional uint64 pkts_resent = 6;
  if (has_pkts_resent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->pkts_resent(), output);
  }

  // optional uint64 msgs_sent = 7;
  if (has_msgs_sent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->msgs_sent(), output);
  }

  // optional uint64 msgs_sent_failed = 8;
  if (has_msgs_sent_failed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->msgs_sent_failed(), output);
  }

  // optional uint64 msgs_recv = 9;
  if (has_msgs_recv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->msgs_recv(), output);
  }

  // optional uint64 datagrams_sent = 10;
  if (has_datagrams_sent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->datagrams_sent(), output);
  }

  // optional uint64 datagrams_recv = 11;
  if (has_datagrams_recv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->datagrams_recv(), output);
  }

  // optional uint64 bad_pkts_recv = 12;
  if (has_bad_pkts_recv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->bad_pkts_recv(), output);
  }

  // optional uint64 unknown_conn_pkts_recv = 13;
  if (has_unknown_conn_pkts_recv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->unknown_conn_pkts_recv(), output);
  }

  // optional uint64 missed_pkts_recv = 14;
  if (has_missed_pkts_recv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->missed_pkts_recv(), output);
  }

  // optional uint64 dup_pkts_recv = 15;
  if (has_dup_pkts_recv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->dup_pkts_recv(), output);
  }

  // optional uint64 failed_connect_challenges = 16;
  if (has_failed_connect_challenges()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->failed_connect_challenges(), output);
  }

  // optional uint32 micro_sec_avg_latency = 17;
  if (has_micro_sec_avg_latency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->micro_sec_avg_latency(), output);
  }

  // optional uint32 micro_sec_min_latency = 18;
  if (has_micro_sec_min_latency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->micro_sec_min_latency(), output);
  }

  // optional uint32 micro_sec_max_latency = 19;
  if (has_micro_sec_max_latency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->micro_sec_max_latency(), output);
  }

  // optional uint32 mem_pool_msg_in_use = 20;
  if (has_mem_pool_msg_in_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->mem_pool_msg_in_use(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientConnectionStats_Stats_VConn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 connections_udp = 1;
  if (has_connections_udp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->connections_udp(), target);
  }

  // optional uint32 connections_tcp = 2;
  if (has_connections_tcp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->connections_tcp(), target);
  }

  // optional .CMsgClientConnectionStats.Stats_UDP stats_udp = 3;
  if (has_stats_udp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stats_udp(), target);
  }

  // optional uint64 pkts_abandoned = 4;
  if (has_pkts_abandoned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->pkts_abandoned(), target);
  }

  // optional uint64 conn_req_received = 5;
  if (has_conn_req_received()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->conn_req_received(), target);
  }

  // optional uint64 pkts_resent = 6;
  if (has_pkts_resent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->pkts_resent(), target);
  }

  // optional uint64 msgs_sent = 7;
  if (has_msgs_sent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->msgs_sent(), target);
  }

  // optional uint64 msgs_sent_failed = 8;
  if (has_msgs_sent_failed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->msgs_sent_failed(), target);
  }

  // optional uint64 msgs_recv = 9;
  if (has_msgs_recv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->msgs_recv(), target);
  }

  // optional uint64 datagrams_sent = 10;
  if (has_datagrams_sent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->datagrams_sent(), target);
  }

  // optional uint64 datagrams_recv = 11;
  if (has_datagrams_recv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->datagrams_recv(), target);
  }

  // optional uint64 bad_pkts_recv = 12;
  if (has_bad_pkts_recv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->bad_pkts_recv(), target);
  }

  // optional uint64 unknown_conn_pkts_recv = 13;
  if (has_unknown_conn_pkts_recv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->unknown_conn_pkts_recv(), target);
  }

  // optional uint64 missed_pkts_recv = 14;
  if (has_missed_pkts_recv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->missed_pkts_recv(), target);
  }

  // optional uint64 dup_pkts_recv = 15;
  if (has_dup_pkts_recv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->dup_pkts_recv(), target);
  }

  // optional uint64 failed_connect_challenges = 16;
  if (has_failed_connect_challenges()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->failed_connect_challenges(), target);
  }

  // optional uint32 micro_sec_avg_latency = 17;
  if (has_micro_sec_avg_latency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->micro_sec_avg_latency(), target);
  }

  // optional uint32 micro_sec_min_latency = 18;
  if (has_micro_sec_min_latency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->micro_sec_min_latency(), target);
  }

  // optional uint32 micro_sec_max_latency = 19;
  if (has_micro_sec_max_latency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->micro_sec_max_latency(), target);
  }

  // optional uint32 mem_pool_msg_in_use = 20;
  if (has_mem_pool_msg_in_use()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->mem_pool_msg_in_use(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientConnectionStats_Stats_VConn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 connections_udp = 1;
    if (has_connections_udp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->connections_udp());
    }

    // optional uint32 connections_tcp = 2;
    if (has_connections_tcp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->connections_tcp());
    }

    // optional .CMsgClientConnectionStats.Stats_UDP stats_udp = 3;
    if (has_stats_udp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats_udp());
    }

    // optional uint64 pkts_abandoned = 4;
    if (has_pkts_abandoned()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pkts_abandoned());
    }

    // optional uint64 conn_req_received = 5;
    if (has_conn_req_received()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->conn_req_received());
    }

    // optional uint64 pkts_resent = 6;
    if (has_pkts_resent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pkts_resent());
    }

    // optional uint64 msgs_sent = 7;
    if (has_msgs_sent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msgs_sent());
    }

    // optional uint64 msgs_sent_failed = 8;
    if (has_msgs_sent_failed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msgs_sent_failed());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 msgs_recv = 9;
    if (has_msgs_recv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msgs_recv());
    }

    // optional uint64 datagrams_sent = 10;
    if (has_datagrams_sent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->datagrams_sent());
    }

    // optional uint64 datagrams_recv = 11;
    if (has_datagrams_recv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->datagrams_recv());
    }

    // optional uint64 bad_pkts_recv = 12;
    if (has_bad_pkts_recv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bad_pkts_recv());
    }

    // optional uint64 unknown_conn_pkts_recv = 13;
    if (has_unknown_conn_pkts_recv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->unknown_conn_pkts_recv());
    }

    // optional uint64 missed_pkts_recv = 14;
    if (has_missed_pkts_recv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->missed_pkts_recv());
    }

    // optional uint64 dup_pkts_recv = 15;
    if (has_dup_pkts_recv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dup_pkts_recv());
    }

    // optional uint64 failed_connect_challenges = 16;
    if (has_failed_connect_challenges()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->failed_connect_challenges());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 micro_sec_avg_latency = 17;
    if (has_micro_sec_avg_latency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->micro_sec_avg_latency());
    }

    // optional uint32 micro_sec_min_latency = 18;
    if (has_micro_sec_min_latency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->micro_sec_min_latency());
    }

    // optional uint32 micro_sec_max_latency = 19;
    if (has_micro_sec_max_latency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->micro_sec_max_latency());
    }

    // optional uint32 mem_pool_msg_in_use = 20;
    if (has_mem_pool_msg_in_use()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mem_pool_msg_in_use());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientConnectionStats_Stats_VConn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientConnectionStats_Stats_VConn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientConnectionStats_Stats_VConn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientConnectionStats_Stats_VConn::MergeFrom(const CMsgClientConnectionStats_Stats_VConn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_connections_udp()) {
      set_connections_udp(from.connections_udp());
    }
    if (from.has_connections_tcp()) {
      set_connections_tcp(from.connections_tcp());
    }
    if (from.has_stats_udp()) {
      mutable_stats_udp()->::CMsgClientConnectionStats_Stats_UDP::MergeFrom(from.stats_udp());
    }
    if (from.has_pkts_abandoned()) {
      set_pkts_abandoned(from.pkts_abandoned());
    }
    if (from.has_conn_req_received()) {
      set_conn_req_received(from.conn_req_received());
    }
    if (from.has_pkts_resent()) {
      set_pkts_resent(from.pkts_resent());
    }
    if (from.has_msgs_sent()) {
      set_msgs_sent(from.msgs_sent());
    }
    if (from.has_msgs_sent_failed()) {
      set_msgs_sent_failed(from.msgs_sent_failed());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_msgs_recv()) {
      set_msgs_recv(from.msgs_recv());
    }
    if (from.has_datagrams_sent()) {
      set_datagrams_sent(from.datagrams_sent());
    }
    if (from.has_datagrams_recv()) {
      set_datagrams_recv(from.datagrams_recv());
    }
    if (from.has_bad_pkts_recv()) {
      set_bad_pkts_recv(from.bad_pkts_recv());
    }
    if (from.has_unknown_conn_pkts_recv()) {
      set_unknown_conn_pkts_recv(from.unknown_conn_pkts_recv());
    }
    if (from.has_missed_pkts_recv()) {
      set_missed_pkts_recv(from.missed_pkts_recv());
    }
    if (from.has_dup_pkts_recv()) {
      set_dup_pkts_recv(from.dup_pkts_recv());
    }
    if (from.has_failed_connect_challenges()) {
      set_failed_connect_challenges(from.failed_connect_challenges());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_micro_sec_avg_latency()) {
      set_micro_sec_avg_latency(from.micro_sec_avg_latency());
    }
    if (from.has_micro_sec_min_latency()) {
      set_micro_sec_min_latency(from.micro_sec_min_latency());
    }
    if (from.has_micro_sec_max_latency()) {
      set_micro_sec_max_latency(from.micro_sec_max_latency());
    }
    if (from.has_mem_pool_msg_in_use()) {
      set_mem_pool_msg_in_use(from.mem_pool_msg_in_use());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientConnectionStats_Stats_VConn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientConnectionStats_Stats_VConn::CopyFrom(const CMsgClientConnectionStats_Stats_VConn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientConnectionStats_Stats_VConn::IsInitialized() const {

  return true;
}

void CMsgClientConnectionStats_Stats_VConn::Swap(CMsgClientConnectionStats_Stats_VConn* other) {
  if (other != this) {
    std::swap(connections_udp_, other->connections_udp_);
    std::swap(connections_tcp_, other->connections_tcp_);
    std::swap(stats_udp_, other->stats_udp_);
    std::swap(pkts_abandoned_, other->pkts_abandoned_);
    std::swap(conn_req_received_, other->conn_req_received_);
    std::swap(pkts_resent_, other->pkts_resent_);
    std::swap(msgs_sent_, other->msgs_sent_);
    std::swap(msgs_sent_failed_, other->msgs_sent_failed_);
    std::swap(msgs_recv_, other->msgs_recv_);
    std::swap(datagrams_sent_, other->datagrams_sent_);
    std::swap(datagrams_recv_, other->datagrams_recv_);
    std::swap(bad_pkts_recv_, other->bad_pkts_recv_);
    std::swap(unknown_conn_pkts_recv_, other->unknown_conn_pkts_recv_);
    std::swap(missed_pkts_recv_, other->missed_pkts_recv_);
    std::swap(dup_pkts_recv_, other->dup_pkts_recv_);
    std::swap(failed_connect_challenges_, other->failed_connect_challenges_);
    std::swap(micro_sec_avg_latency_, other->micro_sec_avg_latency_);
    std::swap(micro_sec_min_latency_, other->micro_sec_min_latency_);
    std::swap(micro_sec_max_latency_, other->micro_sec_max_latency_);
    std::swap(mem_pool_msg_in_use_, other->mem_pool_msg_in_use_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientConnectionStats_Stats_VConn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientConnectionStats_Stats_VConn_descriptor_;
  metadata.reflection = CMsgClientConnectionStats_Stats_VConn_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientConnectionStats::kStatsLogonFieldNumber;
const int CMsgClientConnectionStats::kStatsVconnFieldNumber;
#endif  // !_MSC_VER

CMsgClientConnectionStats::CMsgClientConnectionStats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientConnectionStats::InitAsDefaultInstance() {
  stats_logon_ = const_cast< ::CMsgClientConnectionStats_Stats_Logon*>(&::CMsgClientConnectionStats_Stats_Logon::default_instance());
  stats_vconn_ = const_cast< ::CMsgClientConnectionStats_Stats_VConn*>(&::CMsgClientConnectionStats_Stats_VConn::default_instance());
}

CMsgClientConnectionStats::CMsgClientConnectionStats(const CMsgClientConnectionStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientConnectionStats::SharedCtor() {
  _cached_size_ = 0;
  stats_logon_ = NULL;
  stats_vconn_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientConnectionStats::~CMsgClientConnectionStats() {
  SharedDtor();
}

void CMsgClientConnectionStats::SharedDtor() {
  if (this != default_instance_) {
    delete stats_logon_;
    delete stats_vconn_;
  }
}

void CMsgClientConnectionStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientConnectionStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientConnectionStats_descriptor_;
}

const CMsgClientConnectionStats& CMsgClientConnectionStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientConnectionStats* CMsgClientConnectionStats::default_instance_ = NULL;

CMsgClientConnectionStats* CMsgClientConnectionStats::New() const {
  return new CMsgClientConnectionStats;
}

void CMsgClientConnectionStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stats_logon()) {
      if (stats_logon_ != NULL) stats_logon_->::CMsgClientConnectionStats_Stats_Logon::Clear();
    }
    if (has_stats_vconn()) {
      if (stats_vconn_ != NULL) stats_vconn_->::CMsgClientConnectionStats_Stats_VConn::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientConnectionStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgClientConnectionStats.Stats_Logon stats_logon = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats_logon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stats_vconn;
        break;
      }

      // optional .CMsgClientConnectionStats.Stats_VConn stats_vconn = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats_vconn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats_vconn()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientConnectionStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CMsgClientConnectionStats.Stats_Logon stats_logon = 1;
  if (has_stats_logon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stats_logon(), output);
  }

  // optional .CMsgClientConnectionStats.Stats_VConn stats_vconn = 2;
  if (has_stats_vconn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stats_vconn(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientConnectionStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMsgClientConnectionStats.Stats_Logon stats_logon = 1;
  if (has_stats_logon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stats_logon(), target);
  }

  // optional .CMsgClientConnectionStats.Stats_VConn stats_vconn = 2;
  if (has_stats_vconn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stats_vconn(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientConnectionStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgClientConnectionStats.Stats_Logon stats_logon = 1;
    if (has_stats_logon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats_logon());
    }

    // optional .CMsgClientConnectionStats.Stats_VConn stats_vconn = 2;
    if (has_stats_vconn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats_vconn());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientConnectionStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientConnectionStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientConnectionStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientConnectionStats::MergeFrom(const CMsgClientConnectionStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stats_logon()) {
      mutable_stats_logon()->::CMsgClientConnectionStats_Stats_Logon::MergeFrom(from.stats_logon());
    }
    if (from.has_stats_vconn()) {
      mutable_stats_vconn()->::CMsgClientConnectionStats_Stats_VConn::MergeFrom(from.stats_vconn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientConnectionStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientConnectionStats::CopyFrom(const CMsgClientConnectionStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientConnectionStats::IsInitialized() const {

  return true;
}

void CMsgClientConnectionStats::Swap(CMsgClientConnectionStats* other) {
  if (other != this) {
    std::swap(stats_logon_, other->stats_logon_);
    std::swap(stats_vconn_, other->stats_vconn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientConnectionStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientConnectionStats_descriptor_;
  metadata.reflection = CMsgClientConnectionStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientServersAvailable_Server_Types_Available::kServerFieldNumber;
const int CMsgClientServersAvailable_Server_Types_Available::kChangedFieldNumber;
#endif  // !_MSC_VER

CMsgClientServersAvailable_Server_Types_Available::CMsgClientServersAvailable_Server_Types_Available()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientServersAvailable_Server_Types_Available::InitAsDefaultInstance() {
}

CMsgClientServersAvailable_Server_Types_Available::CMsgClientServersAvailable_Server_Types_Available(const CMsgClientServersAvailable_Server_Types_Available& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientServersAvailable_Server_Types_Available::SharedCtor() {
  _cached_size_ = 0;
  server_ = 0u;
  changed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientServersAvailable_Server_Types_Available::~CMsgClientServersAvailable_Server_Types_Available() {
  SharedDtor();
}

void CMsgClientServersAvailable_Server_Types_Available::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientServersAvailable_Server_Types_Available::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientServersAvailable_Server_Types_Available::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientServersAvailable_Server_Types_Available_descriptor_;
}

const CMsgClientServersAvailable_Server_Types_Available& CMsgClientServersAvailable_Server_Types_Available::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientServersAvailable_Server_Types_Available* CMsgClientServersAvailable_Server_Types_Available::default_instance_ = NULL;

CMsgClientServersAvailable_Server_Types_Available* CMsgClientServersAvailable_Server_Types_Available::New() const {
  return new CMsgClientServersAvailable_Server_Types_Available;
}

void CMsgClientServersAvailable_Server_Types_Available::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_ = 0u;
    changed_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientServersAvailable_Server_Types_Available::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_)));
          set_has_server();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_changed;
        break;
      }

      // optional bool changed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_changed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &changed_)));
          set_has_changed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientServersAvailable_Server_Types_Available::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server = 1;
  if (has_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server(), output);
  }

  // optional bool changed = 2;
  if (has_changed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->changed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientServersAvailable_Server_Types_Available::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server = 1;
  if (has_server()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server(), target);
  }

  // optional bool changed = 2;
  if (has_changed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->changed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientServersAvailable_Server_Types_Available::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server = 1;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server());
    }

    // optional bool changed = 2;
    if (has_changed()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientServersAvailable_Server_Types_Available::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientServersAvailable_Server_Types_Available* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientServersAvailable_Server_Types_Available*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientServersAvailable_Server_Types_Available::MergeFrom(const CMsgClientServersAvailable_Server_Types_Available& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server()) {
      set_server(from.server());
    }
    if (from.has_changed()) {
      set_changed(from.changed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientServersAvailable_Server_Types_Available::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientServersAvailable_Server_Types_Available::CopyFrom(const CMsgClientServersAvailable_Server_Types_Available& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientServersAvailable_Server_Types_Available::IsInitialized() const {

  return true;
}

void CMsgClientServersAvailable_Server_Types_Available::Swap(CMsgClientServersAvailable_Server_Types_Available* other) {
  if (other != this) {
    std::swap(server_, other->server_);
    std::swap(changed_, other->changed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientServersAvailable_Server_Types_Available::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientServersAvailable_Server_Types_Available_descriptor_;
  metadata.reflection = CMsgClientServersAvailable_Server_Types_Available_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientServersAvailable::kServerTypesAvailableFieldNumber;
const int CMsgClientServersAvailable::kServerTypeForAuthServicesFieldNumber;
#endif  // !_MSC_VER

CMsgClientServersAvailable::CMsgClientServersAvailable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientServersAvailable::InitAsDefaultInstance() {
}

CMsgClientServersAvailable::CMsgClientServersAvailable(const CMsgClientServersAvailable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientServersAvailable::SharedCtor() {
  _cached_size_ = 0;
  server_type_for_auth_services_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientServersAvailable::~CMsgClientServersAvailable() {
  SharedDtor();
}

void CMsgClientServersAvailable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientServersAvailable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientServersAvailable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientServersAvailable_descriptor_;
}

const CMsgClientServersAvailable& CMsgClientServersAvailable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientServersAvailable* CMsgClientServersAvailable::default_instance_ = NULL;

CMsgClientServersAvailable* CMsgClientServersAvailable::New() const {
  return new CMsgClientServersAvailable;
}

void CMsgClientServersAvailable::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    server_type_for_auth_services_ = 0u;
  }
  server_types_available_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientServersAvailable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgClientServersAvailable.Server_Types_Available server_types_available = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_types_available:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_server_types_available()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_server_types_available;
        if (input->ExpectTag(16)) goto parse_server_type_for_auth_services;
        break;
      }

      // optional uint32 server_type_for_auth_services = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_type_for_auth_services:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_type_for_auth_services_)));
          set_has_server_type_for_auth_services();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientServersAvailable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgClientServersAvailable.Server_Types_Available server_types_available = 1;
  for (int i = 0; i < this->server_types_available_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->server_types_available(i), output);
  }

  // optional uint32 server_type_for_auth_services = 2;
  if (has_server_type_for_auth_services()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_type_for_auth_services(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientServersAvailable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgClientServersAvailable.Server_Types_Available server_types_available = 1;
  for (int i = 0; i < this->server_types_available_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->server_types_available(i), target);
  }

  // optional uint32 server_type_for_auth_services = 2;
  if (has_server_type_for_auth_services()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_type_for_auth_services(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientServersAvailable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 server_type_for_auth_services = 2;
    if (has_server_type_for_auth_services()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_type_for_auth_services());
    }

  }
  // repeated .CMsgClientServersAvailable.Server_Types_Available server_types_available = 1;
  total_size += 1 * this->server_types_available_size();
  for (int i = 0; i < this->server_types_available_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->server_types_available(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientServersAvailable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientServersAvailable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientServersAvailable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientServersAvailable::MergeFrom(const CMsgClientServersAvailable& from) {
  GOOGLE_CHECK_NE(&from, this);
  server_types_available_.MergeFrom(from.server_types_available_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_server_type_for_auth_services()) {
      set_server_type_for_auth_services(from.server_type_for_auth_services());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientServersAvailable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientServersAvailable::CopyFrom(const CMsgClientServersAvailable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientServersAvailable::IsInitialized() const {

  return true;
}

void CMsgClientServersAvailable::Swap(CMsgClientServersAvailable* other) {
  if (other != this) {
    server_types_available_.Swap(&other->server_types_available_);
    std::swap(server_type_for_auth_services_, other->server_type_for_auth_services_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientServersAvailable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientServersAvailable_descriptor_;
  metadata.reflection = CMsgClientServersAvailable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientReportOverlayDetourFailure::kFailureStringsFieldNumber;
#endif  // !_MSC_VER

CMsgClientReportOverlayDetourFailure::CMsgClientReportOverlayDetourFailure()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientReportOverlayDetourFailure::InitAsDefaultInstance() {
}

CMsgClientReportOverlayDetourFailure::CMsgClientReportOverlayDetourFailure(const CMsgClientReportOverlayDetourFailure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientReportOverlayDetourFailure::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientReportOverlayDetourFailure::~CMsgClientReportOverlayDetourFailure() {
  SharedDtor();
}

void CMsgClientReportOverlayDetourFailure::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientReportOverlayDetourFailure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientReportOverlayDetourFailure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientReportOverlayDetourFailure_descriptor_;
}

const CMsgClientReportOverlayDetourFailure& CMsgClientReportOverlayDetourFailure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientReportOverlayDetourFailure* CMsgClientReportOverlayDetourFailure::default_instance_ = NULL;

CMsgClientReportOverlayDetourFailure* CMsgClientReportOverlayDetourFailure::New() const {
  return new CMsgClientReportOverlayDetourFailure;
}

void CMsgClientReportOverlayDetourFailure::Clear() {
  failure_strings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientReportOverlayDetourFailure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string failure_strings = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_failure_strings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_failure_strings()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->failure_strings(this->failure_strings_size() - 1).data(),
            this->failure_strings(this->failure_strings_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_failure_strings;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientReportOverlayDetourFailure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string failure_strings = 1;
  for (int i = 0; i < this->failure_strings_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->failure_strings(i).data(), this->failure_strings(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->failure_strings(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientReportOverlayDetourFailure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string failure_strings = 1;
  for (int i = 0; i < this->failure_strings_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->failure_strings(i).data(), this->failure_strings(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->failure_strings(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientReportOverlayDetourFailure::ByteSize() const {
  int total_size = 0;

  // repeated string failure_strings = 1;
  total_size += 1 * this->failure_strings_size();
  for (int i = 0; i < this->failure_strings_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->failure_strings(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientReportOverlayDetourFailure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientReportOverlayDetourFailure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientReportOverlayDetourFailure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientReportOverlayDetourFailure::MergeFrom(const CMsgClientReportOverlayDetourFailure& from) {
  GOOGLE_CHECK_NE(&from, this);
  failure_strings_.MergeFrom(from.failure_strings_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientReportOverlayDetourFailure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientReportOverlayDetourFailure::CopyFrom(const CMsgClientReportOverlayDetourFailure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientReportOverlayDetourFailure::IsInitialized() const {

  return true;
}

void CMsgClientReportOverlayDetourFailure::Swap(CMsgClientReportOverlayDetourFailure* other) {
  if (other != this) {
    failure_strings_.Swap(&other->failure_strings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientReportOverlayDetourFailure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientReportOverlayDetourFailure_descriptor_;
  metadata.reflection = CMsgClientReportOverlayDetourFailure_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRequestEncryptedAppTicket::kAppIdFieldNumber;
const int CMsgClientRequestEncryptedAppTicket::kUserdataFieldNumber;
#endif  // !_MSC_VER

CMsgClientRequestEncryptedAppTicket::CMsgClientRequestEncryptedAppTicket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientRequestEncryptedAppTicket::InitAsDefaultInstance() {
}

CMsgClientRequestEncryptedAppTicket::CMsgClientRequestEncryptedAppTicket(const CMsgClientRequestEncryptedAppTicket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRequestEncryptedAppTicket::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  userdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRequestEncryptedAppTicket::~CMsgClientRequestEncryptedAppTicket() {
  SharedDtor();
}

void CMsgClientRequestEncryptedAppTicket::SharedDtor() {
  if (userdata_ != &::google::protobuf::internal::kEmptyString) {
    delete userdata_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientRequestEncryptedAppTicket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRequestEncryptedAppTicket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientRequestEncryptedAppTicket_descriptor_;
}

const CMsgClientRequestEncryptedAppTicket& CMsgClientRequestEncryptedAppTicket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientRequestEncryptedAppTicket* CMsgClientRequestEncryptedAppTicket::default_instance_ = NULL;

CMsgClientRequestEncryptedAppTicket* CMsgClientRequestEncryptedAppTicket::New() const {
  return new CMsgClientRequestEncryptedAppTicket;
}

void CMsgClientRequestEncryptedAppTicket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    if (has_userdata()) {
      if (userdata_ != &::google::protobuf::internal::kEmptyString) {
        userdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientRequestEncryptedAppTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userdata;
        break;
      }

      // optional bytes userdata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRequestEncryptedAppTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional bytes userdata = 2;
  if (has_userdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->userdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientRequestEncryptedAppTicket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional bytes userdata = 2;
  if (has_userdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->userdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientRequestEncryptedAppTicket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional bytes userdata = 2;
    if (has_userdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->userdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestEncryptedAppTicket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientRequestEncryptedAppTicket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientRequestEncryptedAppTicket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientRequestEncryptedAppTicket::MergeFrom(const CMsgClientRequestEncryptedAppTicket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_userdata()) {
      set_userdata(from.userdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientRequestEncryptedAppTicket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRequestEncryptedAppTicket::CopyFrom(const CMsgClientRequestEncryptedAppTicket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestEncryptedAppTicket::IsInitialized() const {

  return true;
}

void CMsgClientRequestEncryptedAppTicket::Swap(CMsgClientRequestEncryptedAppTicket* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(userdata_, other->userdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientRequestEncryptedAppTicket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientRequestEncryptedAppTicket_descriptor_;
  metadata.reflection = CMsgClientRequestEncryptedAppTicket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRequestEncryptedAppTicketResponse::kAppIdFieldNumber;
const int CMsgClientRequestEncryptedAppTicketResponse::kEresultFieldNumber;
const int CMsgClientRequestEncryptedAppTicketResponse::kEncryptedAppTicketFieldNumber;
#endif  // !_MSC_VER

CMsgClientRequestEncryptedAppTicketResponse::CMsgClientRequestEncryptedAppTicketResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientRequestEncryptedAppTicketResponse::InitAsDefaultInstance() {
  encrypted_app_ticket_ = const_cast< ::EncryptedAppTicket*>(&::EncryptedAppTicket::default_instance());
}

CMsgClientRequestEncryptedAppTicketResponse::CMsgClientRequestEncryptedAppTicketResponse(const CMsgClientRequestEncryptedAppTicketResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRequestEncryptedAppTicketResponse::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  eresult_ = 2;
  encrypted_app_ticket_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRequestEncryptedAppTicketResponse::~CMsgClientRequestEncryptedAppTicketResponse() {
  SharedDtor();
}

void CMsgClientRequestEncryptedAppTicketResponse::SharedDtor() {
  if (this != default_instance_) {
    delete encrypted_app_ticket_;
  }
}

void CMsgClientRequestEncryptedAppTicketResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientRequestEncryptedAppTicketResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientRequestEncryptedAppTicketResponse_descriptor_;
}

const CMsgClientRequestEncryptedAppTicketResponse& CMsgClientRequestEncryptedAppTicketResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientRequestEncryptedAppTicketResponse* CMsgClientRequestEncryptedAppTicketResponse::default_instance_ = NULL;

CMsgClientRequestEncryptedAppTicketResponse* CMsgClientRequestEncryptedAppTicketResponse::New() const {
  return new CMsgClientRequestEncryptedAppTicketResponse;
}

void CMsgClientRequestEncryptedAppTicketResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    eresult_ = 2;
    if (has_encrypted_app_ticket()) {
      if (encrypted_app_ticket_ != NULL) encrypted_app_ticket_->::EncryptedAppTicket::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientRequestEncryptedAppTicketResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eresult;
        break;
      }

      // optional int32 eresult = 2 [default = 2];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_encrypted_app_ticket;
        break;
      }

      // optional .EncryptedAppTicket encrypted_app_ticket = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encrypted_app_ticket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_encrypted_app_ticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRequestEncryptedAppTicketResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional int32 eresult = 2 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->eresult(), output);
  }

  // optional .EncryptedAppTicket encrypted_app_ticket = 3;
  if (has_encrypted_app_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->encrypted_app_ticket(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientRequestEncryptedAppTicketResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional int32 eresult = 2 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->eresult(), target);
  }

  // optional .EncryptedAppTicket encrypted_app_ticket = 3;
  if (has_encrypted_app_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->encrypted_app_ticket(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientRequestEncryptedAppTicketResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 eresult = 2 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional .EncryptedAppTicket encrypted_app_ticket = 3;
    if (has_encrypted_app_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->encrypted_app_ticket());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestEncryptedAppTicketResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientRequestEncryptedAppTicketResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientRequestEncryptedAppTicketResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientRequestEncryptedAppTicketResponse::MergeFrom(const CMsgClientRequestEncryptedAppTicketResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_encrypted_app_ticket()) {
      mutable_encrypted_app_ticket()->::EncryptedAppTicket::MergeFrom(from.encrypted_app_ticket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientRequestEncryptedAppTicketResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRequestEncryptedAppTicketResponse::CopyFrom(const CMsgClientRequestEncryptedAppTicketResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestEncryptedAppTicketResponse::IsInitialized() const {

  return true;
}

void CMsgClientRequestEncryptedAppTicketResponse::Swap(CMsgClientRequestEncryptedAppTicketResponse* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(eresult_, other->eresult_);
    std::swap(encrypted_app_ticket_, other->encrypted_app_ticket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientRequestEncryptedAppTicketResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientRequestEncryptedAppTicketResponse_descriptor_;
  metadata.reflection = CMsgClientRequestEncryptedAppTicketResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientWalletInfoUpdate::kHasWalletFieldNumber;
const int CMsgClientWalletInfoUpdate::kBalanceFieldNumber;
const int CMsgClientWalletInfoUpdate::kCurrencyFieldNumber;
const int CMsgClientWalletInfoUpdate::kBalanceDelayedFieldNumber;
const int CMsgClientWalletInfoUpdate::kBalance64FieldNumber;
const int CMsgClientWalletInfoUpdate::kBalance64DelayedFieldNumber;
const int CMsgClientWalletInfoUpdate::kRealmFieldNumber;
#endif  // !_MSC_VER

CMsgClientWalletInfoUpdate::CMsgClientWalletInfoUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientWalletInfoUpdate::InitAsDefaultInstance() {
}

CMsgClientWalletInfoUpdate::CMsgClientWalletInfoUpdate(const CMsgClientWalletInfoUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientWalletInfoUpdate::SharedCtor() {
  _cached_size_ = 0;
  has_wallet_ = false;
  balance_ = 0;
  currency_ = 0;
  balance_delayed_ = 0;
  balance64_ = GOOGLE_LONGLONG(0);
  balance64_delayed_ = GOOGLE_LONGLONG(0);
  realm_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientWalletInfoUpdate::~CMsgClientWalletInfoUpdate() {
  SharedDtor();
}

void CMsgClientWalletInfoUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientWalletInfoUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientWalletInfoUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientWalletInfoUpdate_descriptor_;
}

const CMsgClientWalletInfoUpdate& CMsgClientWalletInfoUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientWalletInfoUpdate* CMsgClientWalletInfoUpdate::default_instance_ = NULL;

CMsgClientWalletInfoUpdate* CMsgClientWalletInfoUpdate::New() const {
  return new CMsgClientWalletInfoUpdate;
}

void CMsgClientWalletInfoUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    has_wallet_ = false;
    balance_ = 0;
    currency_ = 0;
    balance_delayed_ = 0;
    balance64_ = GOOGLE_LONGLONG(0);
    balance64_delayed_ = GOOGLE_LONGLONG(0);
    realm_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientWalletInfoUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool has_wallet = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_wallet_)));
          set_has_has_wallet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_balance;
        break;
      }

      // optional int32 balance = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_balance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &balance_)));
          set_has_balance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_currency;
        break;
      }

      // optional int32 currency = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_)));
          set_has_currency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_balance_delayed;
        break;
      }

      // optional int32 balance_delayed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_balance_delayed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &balance_delayed_)));
          set_has_balance_delayed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_balance64;
        break;
      }

      // optional int64 balance64 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_balance64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &balance64_)));
          set_has_balance64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_balance64_delayed;
        break;
      }

      // optional int64 balance64_delayed = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_balance64_delayed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &balance64_delayed_)));
          set_has_balance64_delayed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_realm;
        break;
      }

      // optional int32 realm = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_realm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &realm_)));
          set_has_realm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientWalletInfoUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool has_wallet = 1;
  if (has_has_wallet()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->has_wallet(), output);
  }

  // optional int32 balance = 2;
  if (has_balance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->balance(), output);
  }

  // optional int32 currency = 3;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->currency(), output);
  }

  // optional int32 balance_delayed = 4;
  if (has_balance_delayed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->balance_delayed(), output);
  }

  // optional int64 balance64 = 5;
  if (has_balance64()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->balance64(), output);
  }

  // optional int64 balance64_delayed = 6;
  if (has_balance64_delayed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->balance64_delayed(), output);
  }

  // optional int32 realm = 7;
  if (has_realm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->realm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientWalletInfoUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool has_wallet = 1;
  if (has_has_wallet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->has_wallet(), target);
  }

  // optional int32 balance = 2;
  if (has_balance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->balance(), target);
  }

  // optional int32 currency = 3;
  if (has_currency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->currency(), target);
  }

  // optional int32 balance_delayed = 4;
  if (has_balance_delayed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->balance_delayed(), target);
  }

  // optional int64 balance64 = 5;
  if (has_balance64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->balance64(), target);
  }

  // optional int64 balance64_delayed = 6;
  if (has_balance64_delayed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->balance64_delayed(), target);
  }

  // optional int32 realm = 7;
  if (has_realm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->realm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientWalletInfoUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool has_wallet = 1;
    if (has_has_wallet()) {
      total_size += 1 + 1;
    }

    // optional int32 balance = 2;
    if (has_balance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->balance());
    }

    // optional int32 currency = 3;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currency());
    }

    // optional int32 balance_delayed = 4;
    if (has_balance_delayed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->balance_delayed());
    }

    // optional int64 balance64 = 5;
    if (has_balance64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->balance64());
    }

    // optional int64 balance64_delayed = 6;
    if (has_balance64_delayed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->balance64_delayed());
    }

    // optional int32 realm = 7;
    if (has_realm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->realm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientWalletInfoUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientWalletInfoUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientWalletInfoUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientWalletInfoUpdate::MergeFrom(const CMsgClientWalletInfoUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_has_wallet()) {
      set_has_wallet(from.has_wallet());
    }
    if (from.has_balance()) {
      set_balance(from.balance());
    }
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_balance_delayed()) {
      set_balance_delayed(from.balance_delayed());
    }
    if (from.has_balance64()) {
      set_balance64(from.balance64());
    }
    if (from.has_balance64_delayed()) {
      set_balance64_delayed(from.balance64_delayed());
    }
    if (from.has_realm()) {
      set_realm(from.realm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientWalletInfoUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientWalletInfoUpdate::CopyFrom(const CMsgClientWalletInfoUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientWalletInfoUpdate::IsInitialized() const {

  return true;
}

void CMsgClientWalletInfoUpdate::Swap(CMsgClientWalletInfoUpdate* other) {
  if (other != this) {
    std::swap(has_wallet_, other->has_wallet_);
    std::swap(balance_, other->balance_);
    std::swap(currency_, other->currency_);
    std::swap(balance_delayed_, other->balance_delayed_);
    std::swap(balance64_, other->balance64_);
    std::swap(balance64_delayed_, other->balance64_delayed_);
    std::swap(realm_, other->realm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientWalletInfoUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientWalletInfoUpdate_descriptor_;
  metadata.reflection = CMsgClientWalletInfoUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientAMGetClanOfficers::kSteamidClanFieldNumber;
#endif  // !_MSC_VER

CMsgClientAMGetClanOfficers::CMsgClientAMGetClanOfficers()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientAMGetClanOfficers::InitAsDefaultInstance() {
}

CMsgClientAMGetClanOfficers::CMsgClientAMGetClanOfficers(const CMsgClientAMGetClanOfficers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientAMGetClanOfficers::SharedCtor() {
  _cached_size_ = 0;
  steamid_clan_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientAMGetClanOfficers::~CMsgClientAMGetClanOfficers() {
  SharedDtor();
}

void CMsgClientAMGetClanOfficers::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientAMGetClanOfficers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientAMGetClanOfficers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientAMGetClanOfficers_descriptor_;
}

const CMsgClientAMGetClanOfficers& CMsgClientAMGetClanOfficers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientAMGetClanOfficers* CMsgClientAMGetClanOfficers::default_instance_ = NULL;

CMsgClientAMGetClanOfficers* CMsgClientAMGetClanOfficers::New() const {
  return new CMsgClientAMGetClanOfficers;
}

void CMsgClientAMGetClanOfficers::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_clan_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientAMGetClanOfficers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid_clan = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_clan_)));
          set_has_steamid_clan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientAMGetClanOfficers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid_clan = 1;
  if (has_steamid_clan()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid_clan(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientAMGetClanOfficers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steamid_clan = 1;
  if (has_steamid_clan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid_clan(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientAMGetClanOfficers::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid_clan = 1;
    if (has_steamid_clan()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAMGetClanOfficers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientAMGetClanOfficers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientAMGetClanOfficers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientAMGetClanOfficers::MergeFrom(const CMsgClientAMGetClanOfficers& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid_clan()) {
      set_steamid_clan(from.steamid_clan());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientAMGetClanOfficers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAMGetClanOfficers::CopyFrom(const CMsgClientAMGetClanOfficers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAMGetClanOfficers::IsInitialized() const {

  return true;
}

void CMsgClientAMGetClanOfficers::Swap(CMsgClientAMGetClanOfficers* other) {
  if (other != this) {
    std::swap(steamid_clan_, other->steamid_clan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientAMGetClanOfficers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientAMGetClanOfficers_descriptor_;
  metadata.reflection = CMsgClientAMGetClanOfficers_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientAMGetClanOfficersResponse::kEresultFieldNumber;
const int CMsgClientAMGetClanOfficersResponse::kSteamidClanFieldNumber;
const int CMsgClientAMGetClanOfficersResponse::kOfficerCountFieldNumber;
#endif  // !_MSC_VER

CMsgClientAMGetClanOfficersResponse::CMsgClientAMGetClanOfficersResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientAMGetClanOfficersResponse::InitAsDefaultInstance() {
}

CMsgClientAMGetClanOfficersResponse::CMsgClientAMGetClanOfficersResponse(const CMsgClientAMGetClanOfficersResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientAMGetClanOfficersResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  steamid_clan_ = GOOGLE_ULONGLONG(0);
  officer_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientAMGetClanOfficersResponse::~CMsgClientAMGetClanOfficersResponse() {
  SharedDtor();
}

void CMsgClientAMGetClanOfficersResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientAMGetClanOfficersResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientAMGetClanOfficersResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientAMGetClanOfficersResponse_descriptor_;
}

const CMsgClientAMGetClanOfficersResponse& CMsgClientAMGetClanOfficersResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientAMGetClanOfficersResponse* CMsgClientAMGetClanOfficersResponse::default_instance_ = NULL;

CMsgClientAMGetClanOfficersResponse* CMsgClientAMGetClanOfficersResponse::New() const {
  return new CMsgClientAMGetClanOfficersResponse;
}

void CMsgClientAMGetClanOfficersResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    steamid_clan_ = GOOGLE_ULONGLONG(0);
    officer_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientAMGetClanOfficersResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steamid_clan;
        break;
      }

      // optional fixed64 steamid_clan = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steamid_clan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_clan_)));
          set_has_steamid_clan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_officer_count;
        break;
      }

      // optional int32 officer_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_officer_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &officer_count_)));
          set_has_officer_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientAMGetClanOfficersResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional fixed64 steamid_clan = 2;
  if (has_steamid_clan()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steamid_clan(), output);
  }

  // optional int32 officer_count = 3;
  if (has_officer_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->officer_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientAMGetClanOfficersResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional fixed64 steamid_clan = 2;
  if (has_steamid_clan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steamid_clan(), target);
  }

  // optional int32 officer_count = 3;
  if (has_officer_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->officer_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientAMGetClanOfficersResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional fixed64 steamid_clan = 2;
    if (has_steamid_clan()) {
      total_size += 1 + 8;
    }

    // optional int32 officer_count = 3;
    if (has_officer_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->officer_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAMGetClanOfficersResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientAMGetClanOfficersResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientAMGetClanOfficersResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientAMGetClanOfficersResponse::MergeFrom(const CMsgClientAMGetClanOfficersResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_steamid_clan()) {
      set_steamid_clan(from.steamid_clan());
    }
    if (from.has_officer_count()) {
      set_officer_count(from.officer_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientAMGetClanOfficersResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAMGetClanOfficersResponse::CopyFrom(const CMsgClientAMGetClanOfficersResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAMGetClanOfficersResponse::IsInitialized() const {

  return true;
}

void CMsgClientAMGetClanOfficersResponse::Swap(CMsgClientAMGetClanOfficersResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(steamid_clan_, other->steamid_clan_);
    std::swap(officer_count_, other->officer_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientAMGetClanOfficersResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientAMGetClanOfficersResponse_descriptor_;
  metadata.reflection = CMsgClientAMGetClanOfficersResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientAMGetPersonaNameHistory_IdInstance::kSteamidFieldNumber;
#endif  // !_MSC_VER

CMsgClientAMGetPersonaNameHistory_IdInstance::CMsgClientAMGetPersonaNameHistory_IdInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::InitAsDefaultInstance() {
}

CMsgClientAMGetPersonaNameHistory_IdInstance::CMsgClientAMGetPersonaNameHistory_IdInstance(const CMsgClientAMGetPersonaNameHistory_IdInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientAMGetPersonaNameHistory_IdInstance::~CMsgClientAMGetPersonaNameHistory_IdInstance() {
  SharedDtor();
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientAMGetPersonaNameHistory_IdInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientAMGetPersonaNameHistory_IdInstance_descriptor_;
}

const CMsgClientAMGetPersonaNameHistory_IdInstance& CMsgClientAMGetPersonaNameHistory_IdInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientAMGetPersonaNameHistory_IdInstance* CMsgClientAMGetPersonaNameHistory_IdInstance::default_instance_ = NULL;

CMsgClientAMGetPersonaNameHistory_IdInstance* CMsgClientAMGetPersonaNameHistory_IdInstance::New() const {
  return new CMsgClientAMGetPersonaNameHistory_IdInstance;
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientAMGetPersonaNameHistory_IdInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientAMGetPersonaNameHistory_IdInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientAMGetPersonaNameHistory_IdInstance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientAMGetPersonaNameHistory_IdInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientAMGetPersonaNameHistory_IdInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::MergeFrom(const CMsgClientAMGetPersonaNameHistory_IdInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::CopyFrom(const CMsgClientAMGetPersonaNameHistory_IdInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAMGetPersonaNameHistory_IdInstance::IsInitialized() const {

  return true;
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::Swap(CMsgClientAMGetPersonaNameHistory_IdInstance* other) {
  if (other != this) {
    std::swap(steamid_, other->steamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientAMGetPersonaNameHistory_IdInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientAMGetPersonaNameHistory_IdInstance_descriptor_;
  metadata.reflection = CMsgClientAMGetPersonaNameHistory_IdInstance_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientAMGetPersonaNameHistory::kIdCountFieldNumber;
const int CMsgClientAMGetPersonaNameHistory::kIdsFieldNumber;
#endif  // !_MSC_VER

CMsgClientAMGetPersonaNameHistory::CMsgClientAMGetPersonaNameHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientAMGetPersonaNameHistory::InitAsDefaultInstance() {
}

CMsgClientAMGetPersonaNameHistory::CMsgClientAMGetPersonaNameHistory(const CMsgClientAMGetPersonaNameHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientAMGetPersonaNameHistory::SharedCtor() {
  _cached_size_ = 0;
  id_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientAMGetPersonaNameHistory::~CMsgClientAMGetPersonaNameHistory() {
  SharedDtor();
}

void CMsgClientAMGetPersonaNameHistory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientAMGetPersonaNameHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientAMGetPersonaNameHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientAMGetPersonaNameHistory_descriptor_;
}

const CMsgClientAMGetPersonaNameHistory& CMsgClientAMGetPersonaNameHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientAMGetPersonaNameHistory* CMsgClientAMGetPersonaNameHistory::default_instance_ = NULL;

CMsgClientAMGetPersonaNameHistory* CMsgClientAMGetPersonaNameHistory::New() const {
  return new CMsgClientAMGetPersonaNameHistory;
}

void CMsgClientAMGetPersonaNameHistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_count_ = 0;
  }
  ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientAMGetPersonaNameHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_count_)));
          set_has_id_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Ids;
        break;
      }

      // repeated .CMsgClientAMGetPersonaNameHistory.IdInstance Ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientAMGetPersonaNameHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id_count = 1;
  if (has_id_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id_count(), output);
  }

  // repeated .CMsgClientAMGetPersonaNameHistory.IdInstance Ids = 2;
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientAMGetPersonaNameHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id_count = 1;
  if (has_id_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id_count(), target);
  }

  // repeated .CMsgClientAMGetPersonaNameHistory.IdInstance Ids = 2;
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientAMGetPersonaNameHistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id_count = 1;
    if (has_id_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id_count());
    }

  }
  // repeated .CMsgClientAMGetPersonaNameHistory.IdInstance Ids = 2;
  total_size += 1 * this->ids_size();
  for (int i = 0; i < this->ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAMGetPersonaNameHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientAMGetPersonaNameHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientAMGetPersonaNameHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientAMGetPersonaNameHistory::MergeFrom(const CMsgClientAMGetPersonaNameHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  ids_.MergeFrom(from.ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id_count()) {
      set_id_count(from.id_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientAMGetPersonaNameHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAMGetPersonaNameHistory::CopyFrom(const CMsgClientAMGetPersonaNameHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAMGetPersonaNameHistory::IsInitialized() const {

  return true;
}

void CMsgClientAMGetPersonaNameHistory::Swap(CMsgClientAMGetPersonaNameHistory* other) {
  if (other != this) {
    std::swap(id_count_, other->id_count_);
    ids_.Swap(&other->ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientAMGetPersonaNameHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientAMGetPersonaNameHistory_descriptor_;
  metadata.reflection = CMsgClientAMGetPersonaNameHistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::kNameSinceFieldNumber;
const int CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::kNameFieldNumber;
#endif  // !_MSC_VER

CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::InitAsDefaultInstance() {
}

CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::SharedCtor() {
  _cached_size_ = 0;
  name_since_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::~CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance() {
  SharedDtor();
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance_descriptor_;
}

const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance& CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::default_instance_ = NULL;

CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::New() const {
  return new CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance;
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    name_since_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 name_since = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &name_since_)));
          set_has_name_since();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 name_since = 1;
  if (has_name_since()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->name_since(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 name_since = 1;
  if (has_name_since()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->name_since(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 name_since = 1;
    if (has_name_since()) {
      total_size += 1 + 4;
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::MergeFrom(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name_since()) {
      set_name_since(from.name_since());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::CopyFrom(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::IsInitialized() const {

  return true;
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::Swap(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* other) {
  if (other != this) {
    std::swap(name_since_, other->name_since_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance_descriptor_;
  metadata.reflection = CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::kEresultFieldNumber;
const int CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::kSteamidFieldNumber;
const int CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::kNamesFieldNumber;
#endif  // !_MSC_VER

CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::InitAsDefaultInstance() {
}

CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  steamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::~CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance() {
  SharedDtor();
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_descriptor_;
}

const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance& CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::default_instance_ = NULL;

CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::New() const {
  return new CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance;
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    steamid_ = GOOGLE_ULONGLONG(0);
  }
  names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steamid;
        break;
      }

      // optional fixed64 steamid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_names;
        break;
      }

      // repeated .CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance names = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_names()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_names;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional fixed64 steamid = 2;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steamid(), output);
  }

  // repeated .CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance names = 3;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->names(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional fixed64 steamid = 2;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steamid(), target);
  }

  // repeated .CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance names = 3;
  for (int i = 0; i < this->names_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->names(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional fixed64 steamid = 2;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

  }
  // repeated .CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance names = 3;
  total_size += 1 * this->names_size();
  for (int i = 0; i < this->names_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->names(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::MergeFrom(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  names_.MergeFrom(from.names_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::CopyFrom(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::IsInitialized() const {

  return true;
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::Swap(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(steamid_, other->steamid_);
    names_.Swap(&other->names_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_descriptor_;
  metadata.reflection = CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientAMGetPersonaNameHistoryResponse::kResponsesFieldNumber;
#endif  // !_MSC_VER

CMsgClientAMGetPersonaNameHistoryResponse::CMsgClientAMGetPersonaNameHistoryResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientAMGetPersonaNameHistoryResponse::InitAsDefaultInstance() {
}

CMsgClientAMGetPersonaNameHistoryResponse::CMsgClientAMGetPersonaNameHistoryResponse(const CMsgClientAMGetPersonaNameHistoryResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientAMGetPersonaNameHistoryResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientAMGetPersonaNameHistoryResponse::~CMsgClientAMGetPersonaNameHistoryResponse() {
  SharedDtor();
}

void CMsgClientAMGetPersonaNameHistoryResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientAMGetPersonaNameHistoryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientAMGetPersonaNameHistoryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientAMGetPersonaNameHistoryResponse_descriptor_;
}

const CMsgClientAMGetPersonaNameHistoryResponse& CMsgClientAMGetPersonaNameHistoryResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientAMGetPersonaNameHistoryResponse* CMsgClientAMGetPersonaNameHistoryResponse::default_instance_ = NULL;

CMsgClientAMGetPersonaNameHistoryResponse* CMsgClientAMGetPersonaNameHistoryResponse::New() const {
  return new CMsgClientAMGetPersonaNameHistoryResponse;
}

void CMsgClientAMGetPersonaNameHistoryResponse::Clear() {
  responses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientAMGetPersonaNameHistoryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance responses = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_responses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_responses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_responses;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientAMGetPersonaNameHistoryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance responses = 2;
  for (int i = 0; i < this->responses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->responses(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientAMGetPersonaNameHistoryResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance responses = 2;
  for (int i = 0; i < this->responses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->responses(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientAMGetPersonaNameHistoryResponse::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance responses = 2;
  total_size += 1 * this->responses_size();
  for (int i = 0; i < this->responses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->responses(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAMGetPersonaNameHistoryResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientAMGetPersonaNameHistoryResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientAMGetPersonaNameHistoryResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientAMGetPersonaNameHistoryResponse::MergeFrom(const CMsgClientAMGetPersonaNameHistoryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  responses_.MergeFrom(from.responses_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientAMGetPersonaNameHistoryResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAMGetPersonaNameHistoryResponse::CopyFrom(const CMsgClientAMGetPersonaNameHistoryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAMGetPersonaNameHistoryResponse::IsInitialized() const {

  return true;
}

void CMsgClientAMGetPersonaNameHistoryResponse::Swap(CMsgClientAMGetPersonaNameHistoryResponse* other) {
  if (other != this) {
    responses_.Swap(&other->responses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientAMGetPersonaNameHistoryResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientAMGetPersonaNameHistoryResponse_descriptor_;
  metadata.reflection = CMsgClientAMGetPersonaNameHistoryResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientDeregisterWithServer::kEservertypeFieldNumber;
const int CMsgClientDeregisterWithServer::kAppIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientDeregisterWithServer::CMsgClientDeregisterWithServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientDeregisterWithServer::InitAsDefaultInstance() {
}

CMsgClientDeregisterWithServer::CMsgClientDeregisterWithServer(const CMsgClientDeregisterWithServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientDeregisterWithServer::SharedCtor() {
  _cached_size_ = 0;
  eservertype_ = 0u;
  app_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientDeregisterWithServer::~CMsgClientDeregisterWithServer() {
  SharedDtor();
}

void CMsgClientDeregisterWithServer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientDeregisterWithServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientDeregisterWithServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientDeregisterWithServer_descriptor_;
}

const CMsgClientDeregisterWithServer& CMsgClientDeregisterWithServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientDeregisterWithServer* CMsgClientDeregisterWithServer::default_instance_ = NULL;

CMsgClientDeregisterWithServer* CMsgClientDeregisterWithServer::New() const {
  return new CMsgClientDeregisterWithServer;
}

void CMsgClientDeregisterWithServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eservertype_ = 0u;
    app_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientDeregisterWithServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eservertype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eservertype_)));
          set_has_eservertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_app_id;
        break;
      }

      // optional uint32 app_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientDeregisterWithServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eservertype = 1;
  if (has_eservertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eservertype(), output);
  }

  // optional uint32 app_id = 2;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->app_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientDeregisterWithServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 eservertype = 1;
  if (has_eservertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eservertype(), target);
  }

  // optional uint32 app_id = 2;
  if (has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->app_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientDeregisterWithServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eservertype = 1;
    if (has_eservertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eservertype());
    }

    // optional uint32 app_id = 2;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientDeregisterWithServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientDeregisterWithServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientDeregisterWithServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientDeregisterWithServer::MergeFrom(const CMsgClientDeregisterWithServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eservertype()) {
      set_eservertype(from.eservertype());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientDeregisterWithServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientDeregisterWithServer::CopyFrom(const CMsgClientDeregisterWithServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientDeregisterWithServer::IsInitialized() const {

  return true;
}

void CMsgClientDeregisterWithServer::Swap(CMsgClientDeregisterWithServer* other) {
  if (other != this) {
    std::swap(eservertype_, other->eservertype_);
    std::swap(app_id_, other->app_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientDeregisterWithServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientDeregisterWithServer_descriptor_;
  metadata.reflection = CMsgClientDeregisterWithServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientClanState_NameInfo::kClanNameFieldNumber;
const int CMsgClientClanState_NameInfo::kShaAvatarFieldNumber;
#endif  // !_MSC_VER

CMsgClientClanState_NameInfo::CMsgClientClanState_NameInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientClanState_NameInfo::InitAsDefaultInstance() {
}

CMsgClientClanState_NameInfo::CMsgClientClanState_NameInfo(const CMsgClientClanState_NameInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientClanState_NameInfo::SharedCtor() {
  _cached_size_ = 0;
  clan_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sha_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientClanState_NameInfo::~CMsgClientClanState_NameInfo() {
  SharedDtor();
}

void CMsgClientClanState_NameInfo::SharedDtor() {
  if (clan_name_ != &::google::protobuf::internal::kEmptyString) {
    delete clan_name_;
  }
  if (sha_avatar_ != &::google::protobuf::internal::kEmptyString) {
    delete sha_avatar_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientClanState_NameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientClanState_NameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientClanState_NameInfo_descriptor_;
}

const CMsgClientClanState_NameInfo& CMsgClientClanState_NameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientClanState_NameInfo* CMsgClientClanState_NameInfo::default_instance_ = NULL;

CMsgClientClanState_NameInfo* CMsgClientClanState_NameInfo::New() const {
  return new CMsgClientClanState_NameInfo;
}

void CMsgClientClanState_NameInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_clan_name()) {
      if (clan_name_ != &::google::protobuf::internal::kEmptyString) {
        clan_name_->clear();
      }
    }
    if (has_sha_avatar()) {
      if (sha_avatar_ != &::google::protobuf::internal::kEmptyString) {
        sha_avatar_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientClanState_NameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string clan_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clan_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clan_name().data(), this->clan_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sha_avatar;
        break;
      }

      // optional bytes sha_avatar = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sha_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_avatar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientClanState_NameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string clan_name = 1;
  if (has_clan_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clan_name().data(), this->clan_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->clan_name(), output);
  }

  // optional bytes sha_avatar = 2;
  if (has_sha_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->sha_avatar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientClanState_NameInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string clan_name = 1;
  if (has_clan_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clan_name().data(), this->clan_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clan_name(), target);
  }

  // optional bytes sha_avatar = 2;
  if (has_sha_avatar()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->sha_avatar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientClanState_NameInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string clan_name = 1;
    if (has_clan_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clan_name());
    }

    // optional bytes sha_avatar = 2;
    if (has_sha_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_avatar());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientClanState_NameInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientClanState_NameInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientClanState_NameInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientClanState_NameInfo::MergeFrom(const CMsgClientClanState_NameInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clan_name()) {
      set_clan_name(from.clan_name());
    }
    if (from.has_sha_avatar()) {
      set_sha_avatar(from.sha_avatar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientClanState_NameInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientClanState_NameInfo::CopyFrom(const CMsgClientClanState_NameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientClanState_NameInfo::IsInitialized() const {

  return true;
}

void CMsgClientClanState_NameInfo::Swap(CMsgClientClanState_NameInfo* other) {
  if (other != this) {
    std::swap(clan_name_, other->clan_name_);
    std::swap(sha_avatar_, other->sha_avatar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientClanState_NameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientClanState_NameInfo_descriptor_;
  metadata.reflection = CMsgClientClanState_NameInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientClanState_UserCounts::kMembersFieldNumber;
const int CMsgClientClanState_UserCounts::kOnlineFieldNumber;
const int CMsgClientClanState_UserCounts::kChattingFieldNumber;
const int CMsgClientClanState_UserCounts::kInGameFieldNumber;
const int CMsgClientClanState_UserCounts::kChatRoomMembersFieldNumber;
#endif  // !_MSC_VER

CMsgClientClanState_UserCounts::CMsgClientClanState_UserCounts()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientClanState_UserCounts::InitAsDefaultInstance() {
}

CMsgClientClanState_UserCounts::CMsgClientClanState_UserCounts(const CMsgClientClanState_UserCounts& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientClanState_UserCounts::SharedCtor() {
  _cached_size_ = 0;
  members_ = 0u;
  online_ = 0u;
  chatting_ = 0u;
  in_game_ = 0u;
  chat_room_members_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientClanState_UserCounts::~CMsgClientClanState_UserCounts() {
  SharedDtor();
}

void CMsgClientClanState_UserCounts::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientClanState_UserCounts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientClanState_UserCounts::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientClanState_UserCounts_descriptor_;
}

const CMsgClientClanState_UserCounts& CMsgClientClanState_UserCounts::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientClanState_UserCounts* CMsgClientClanState_UserCounts::default_instance_ = NULL;

CMsgClientClanState_UserCounts* CMsgClientClanState_UserCounts::New() const {
  return new CMsgClientClanState_UserCounts;
}

void CMsgClientClanState_UserCounts::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    members_ = 0u;
    online_ = 0u;
    chatting_ = 0u;
    in_game_ = 0u;
    chat_room_members_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientClanState_UserCounts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 members = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &members_)));
          set_has_members();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_online;
        break;
      }

      // optional uint32 online = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chatting;
        break;
      }

      // optional uint32 chatting = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chatting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chatting_)));
          set_has_chatting();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_in_game;
        break;
      }

      // optional uint32 in_game = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_game:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in_game_)));
          set_has_in_game();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_chat_room_members;
        break;
      }

      // optional uint32 chat_room_members = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chat_room_members:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chat_room_members_)));
          set_has_chat_room_members();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientClanState_UserCounts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 members = 1;
  if (has_members()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->members(), output);
  }

  // optional uint32 online = 2;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->online(), output);
  }

  // optional uint32 chatting = 3;
  if (has_chatting()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->chatting(), output);
  }

  // optional uint32 in_game = 4;
  if (has_in_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->in_game(), output);
  }

  // optional uint32 chat_room_members = 5;
  if (has_chat_room_members()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->chat_room_members(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientClanState_UserCounts::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 members = 1;
  if (has_members()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->members(), target);
  }

  // optional uint32 online = 2;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->online(), target);
  }

  // optional uint32 chatting = 3;
  if (has_chatting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->chatting(), target);
  }

  // optional uint32 in_game = 4;
  if (has_in_game()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->in_game(), target);
  }

  // optional uint32 chat_room_members = 5;
  if (has_chat_room_members()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->chat_room_members(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientClanState_UserCounts::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 members = 1;
    if (has_members()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->members());
    }

    // optional uint32 online = 2;
    if (has_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online());
    }

    // optional uint32 chatting = 3;
    if (has_chatting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chatting());
    }

    // optional uint32 in_game = 4;
    if (has_in_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in_game());
    }

    // optional uint32 chat_room_members = 5;
    if (has_chat_room_members()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chat_room_members());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientClanState_UserCounts::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientClanState_UserCounts* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientClanState_UserCounts*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientClanState_UserCounts::MergeFrom(const CMsgClientClanState_UserCounts& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_members()) {
      set_members(from.members());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_chatting()) {
      set_chatting(from.chatting());
    }
    if (from.has_in_game()) {
      set_in_game(from.in_game());
    }
    if (from.has_chat_room_members()) {
      set_chat_room_members(from.chat_room_members());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientClanState_UserCounts::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientClanState_UserCounts::CopyFrom(const CMsgClientClanState_UserCounts& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientClanState_UserCounts::IsInitialized() const {

  return true;
}

void CMsgClientClanState_UserCounts::Swap(CMsgClientClanState_UserCounts* other) {
  if (other != this) {
    std::swap(members_, other->members_);
    std::swap(online_, other->online_);
    std::swap(chatting_, other->chatting_);
    std::swap(in_game_, other->in_game_);
    std::swap(chat_room_members_, other->chat_room_members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientClanState_UserCounts::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientClanState_UserCounts_descriptor_;
  metadata.reflection = CMsgClientClanState_UserCounts_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientClanState_Event::kGidFieldNumber;
const int CMsgClientClanState_Event::kEventTimeFieldNumber;
const int CMsgClientClanState_Event::kHeadlineFieldNumber;
const int CMsgClientClanState_Event::kGameIdFieldNumber;
const int CMsgClientClanState_Event::kJustPostedFieldNumber;
#endif  // !_MSC_VER

CMsgClientClanState_Event::CMsgClientClanState_Event()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientClanState_Event::InitAsDefaultInstance() {
}

CMsgClientClanState_Event::CMsgClientClanState_Event(const CMsgClientClanState_Event& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientClanState_Event::SharedCtor() {
  _cached_size_ = 0;
  gid_ = GOOGLE_ULONGLONG(0);
  event_time_ = 0u;
  headline_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  game_id_ = GOOGLE_ULONGLONG(0);
  just_posted_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientClanState_Event::~CMsgClientClanState_Event() {
  SharedDtor();
}

void CMsgClientClanState_Event::SharedDtor() {
  if (headline_ != &::google::protobuf::internal::kEmptyString) {
    delete headline_;
  }
  if (this != default_instance_) {
  }
}

void CMsgClientClanState_Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientClanState_Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientClanState_Event_descriptor_;
}

const CMsgClientClanState_Event& CMsgClientClanState_Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientClanState_Event* CMsgClientClanState_Event::default_instance_ = NULL;

CMsgClientClanState_Event* CMsgClientClanState_Event::New() const {
  return new CMsgClientClanState_Event;
}

void CMsgClientClanState_Event::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gid_ = GOOGLE_ULONGLONG(0);
    event_time_ = 0u;
    if (has_headline()) {
      if (headline_ != &::google::protobuf::internal::kEmptyString) {
        headline_->clear();
      }
    }
    game_id_ = GOOGLE_ULONGLONG(0);
    just_posted_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientClanState_Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 gid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_event_time;
        break;
      }

      // optional uint32 event_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_time_)));
          set_has_event_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_headline;
        break;
      }

      // optional string headline = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headline:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headline()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->headline().data(), this->headline().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_game_id;
        break;
      }

      // optional fixed64 game_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_just_posted;
        break;
      }

      // optional bool just_posted = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_just_posted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &just_posted_)));
          set_has_just_posted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientClanState_Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 gid = 1;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->gid(), output);
  }

  // optional uint32 event_time = 2;
  if (has_event_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->event_time(), output);
  }

  // optional string headline = 3;
  if (has_headline()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headline().data(), this->headline().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->headline(), output);
  }

  // optional fixed64 game_id = 4;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->game_id(), output);
  }

  // optional bool just_posted = 5;
  if (has_just_posted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->just_posted(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientClanState_Event::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 gid = 1;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->gid(), target);
  }

  // optional uint32 event_time = 2;
  if (has_event_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->event_time(), target);
  }

  // optional string headline = 3;
  if (has_headline()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headline().data(), this->headline().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->headline(), target);
  }

  // optional fixed64 game_id = 4;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->game_id(), target);
  }

  // optional bool just_posted = 5;
  if (has_just_posted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->just_posted(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientClanState_Event::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 gid = 1;
    if (has_gid()) {
      total_size += 1 + 8;
    }

    // optional uint32 event_time = 2;
    if (has_event_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_time());
    }

    // optional string headline = 3;
    if (has_headline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headline());
    }

    // optional fixed64 game_id = 4;
    if (has_game_id()) {
      total_size += 1 + 8;
    }

    // optional bool just_posted = 5;
    if (has_just_posted()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientClanState_Event::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientClanState_Event* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientClanState_Event*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientClanState_Event::MergeFrom(const CMsgClientClanState_Event& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_event_time()) {
      set_event_time(from.event_time());
    }
    if (from.has_headline()) {
      set_headline(from.headline());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_just_posted()) {
      set_just_posted(from.just_posted());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientClanState_Event::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientClanState_Event::CopyFrom(const CMsgClientClanState_Event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientClanState_Event::IsInitialized() const {

  return true;
}

void CMsgClientClanState_Event::Swap(CMsgClientClanState_Event* other) {
  if (other != this) {
    std::swap(gid_, other->gid_);
    std::swap(event_time_, other->event_time_);
    std::swap(headline_, other->headline_);
    std::swap(game_id_, other->game_id_);
    std::swap(just_posted_, other->just_posted_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientClanState_Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientClanState_Event_descriptor_;
  metadata.reflection = CMsgClientClanState_Event_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientClanState::kSteamidClanFieldNumber;
const int CMsgClientClanState::kClanAccountFlagsFieldNumber;
const int CMsgClientClanState::kNameInfoFieldNumber;
const int CMsgClientClanState::kUserCountsFieldNumber;
const int CMsgClientClanState::kEventsFieldNumber;
const int CMsgClientClanState::kAnnouncementsFieldNumber;
const int CMsgClientClanState::kChatRoomPrivateFieldNumber;
#endif  // !_MSC_VER

CMsgClientClanState::CMsgClientClanState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientClanState::InitAsDefaultInstance() {
  name_info_ = const_cast< ::CMsgClientClanState_NameInfo*>(&::CMsgClientClanState_NameInfo::default_instance());
  user_counts_ = const_cast< ::CMsgClientClanState_UserCounts*>(&::CMsgClientClanState_UserCounts::default_instance());
}

CMsgClientClanState::CMsgClientClanState(const CMsgClientClanState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientClanState::SharedCtor() {
  _cached_size_ = 0;
  steamid_clan_ = GOOGLE_ULONGLONG(0);
  clan_account_flags_ = 0u;
  name_info_ = NULL;
  user_counts_ = NULL;
  chat_room_private_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientClanState::~CMsgClientClanState() {
  SharedDtor();
}

void CMsgClientClanState::SharedDtor() {
  if (this != default_instance_) {
    delete name_info_;
    delete user_counts_;
  }
}

void CMsgClientClanState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientClanState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientClanState_descriptor_;
}

const CMsgClientClanState& CMsgClientClanState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  return *default_instance_;
}

CMsgClientClanState* CMsgClientClanState::default_instance_ = NULL;

CMsgClientClanState* CMsgClientClanState::New() const {
  return new CMsgClientClanState;
}

void CMsgClientClanState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_clan_ = GOOGLE_ULONGLONG(0);
    clan_account_flags_ = 0u;
    if (has_name_info()) {
      if (name_info_ != NULL) name_info_->::CMsgClientClanState_NameInfo::Clear();
    }
    if (has_user_counts()) {
      if (user_counts_ != NULL) user_counts_->::CMsgClientClanState_UserCounts::Clear();
    }
    chat_room_private_ = false;
  }
  events_.Clear();
  announcements_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientClanState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid_clan = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_clan_)));
          set_has_steamid_clan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clan_account_flags;
        break;
      }

      // optional uint32 clan_account_flags = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clan_account_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clan_account_flags_)));
          set_has_clan_account_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name_info;
        break;
      }

      // optional .CMsgClientClanState.NameInfo name_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_name_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_user_counts;
        break;
      }

      // optional .CMsgClientClanState.UserCounts user_counts = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_counts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_counts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_events;
        break;
      }

      // repeated .CMsgClientClanState.Event events = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_events()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_events;
        if (input->ExpectTag(58)) goto parse_announcements;
        break;
      }

      // repeated .CMsgClientClanState.Event announcements = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_announcements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_announcements()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_announcements;
        if (input->ExpectTag(64)) goto parse_chat_room_private;
        break;
      }

      // optional bool chat_room_private = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chat_room_private:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chat_room_private_)));
          set_has_chat_room_private();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientClanState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid_clan = 1;
  if (has_steamid_clan()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid_clan(), output);
  }

  // optional uint32 clan_account_flags = 3;
  if (has_clan_account_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->clan_account_flags(), output);
  }

  // optional .CMsgClientClanState.NameInfo name_info = 4;
  if (has_name_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->name_info(), output);
  }

  // optional .CMsgClientClanState.UserCounts user_counts = 5;
  if (has_user_counts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->user_counts(), output);
  }

  // repeated .CMsgClientClanState.Event events = 6;
  for (int i = 0; i < this->events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->events(i), output);
  }

  // repeated .CMsgClientClanState.Event announcements = 7;
  for (int i = 0; i < this->announcements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->announcements(i), output);
  }

  // optional bool chat_room_private = 8;
  if (has_chat_room_private()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->chat_room_private(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientClanState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steamid_clan = 1;
  if (has_steamid_clan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid_clan(), target);
  }

  // optional uint32 clan_account_flags = 3;
  if (has_clan_account_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->clan_account_flags(), target);
  }

  // optional .CMsgClientClanState.NameInfo name_info = 4;
  if (has_name_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->name_info(), target);
  }

  // optional .CMsgClientClanState.UserCounts user_counts = 5;
  if (has_user_counts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->user_counts(), target);
  }

  // repeated .CMsgClientClanState.Event events = 6;
  for (int i = 0; i < this->events_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->events(i), target);
  }

  // repeated .CMsgClientClanState.Event announcements = 7;
  for (int i = 0; i < this->announcements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->announcements(i), target);
  }

  // optional bool chat_room_private = 8;
  if (has_chat_room_private()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->chat_room_private(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientClanState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid_clan = 1;
    if (has_steamid_clan()) {
      total_size += 1 + 8;
    }

    // optional uint32 clan_account_flags = 3;
    if (has_clan_account_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clan_account_flags());
    }

    // optional .CMsgClientClanState.NameInfo name_info = 4;
    if (has_name_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->name_info());
    }

    // optional .CMsgClientClanState.UserCounts user_counts = 5;
    if (has_user_counts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_counts());
    }

    // optional bool chat_room_private = 8;
    if (has_chat_room_private()) {
      total_size += 1 + 1;
    }

  }
  // repeated .CMsgClientClanState.Event events = 6;
  total_size += 1 * this->events_size();
  for (int i = 0; i < this->events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->events(i));
  }

  // repeated .CMsgClientClanState.Event announcements = 7;
  total_size += 1 * this->announcements_size();
  for (int i = 0; i < this->announcements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->announcements(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientClanState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientClanState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientClanState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientClanState::MergeFrom(const CMsgClientClanState& from) {
  GOOGLE_CHECK_NE(&from, this);
  events_.MergeFrom(from.events_);
  announcements_.MergeFrom(from.announcements_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid_clan()) {
      set_steamid_clan(from.steamid_clan());
    }
    if (from.has_clan_account_flags()) {
      set_clan_account_flags(from.clan_account_flags());
    }
    if (from.has_name_info()) {
      mutable_name_info()->::CMsgClientClanState_NameInfo::MergeFrom(from.name_info());
    }
    if (from.has_user_counts()) {
      mutable_user_counts()->::CMsgClientClanState_UserCounts::MergeFrom(from.user_counts());
    }
    if (from.has_chat_room_private()) {
      set_chat_room_private(from.chat_room_private());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientClanState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientClanState::CopyFrom(const CMsgClientClanState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientClanState::IsInitialized() const {

  return true;
}

void CMsgClientClanState::Swap(CMsgClientClanState* other) {
  if (other != this) {
    std::swap(steamid_clan_, other->steamid_clan_);
    std::swap(clan_account_flags_, other->clan_account_flags_);
    std::swap(name_info_, other->name_info_);
    std::swap(user_counts_, other->user_counts_);
    events_.Swap(&other->events_);
    announcements_.Swap(&other->announcements_);
    std::swap(chat_room_private_, other->chat_room_private_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientClanState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientClanState_descriptor_;
  metadata.reflection = CMsgClientClanState_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
